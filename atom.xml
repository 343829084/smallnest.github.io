<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[鸟窝]]></title>
  <subtitle><![CDATA[大道至简 Simplicity is the ultimate form of sophistication]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://colobu.com/"/>
  <updated>2015-11-15T04:51:43.643Z</updated>
  <id>http://colobu.com/</id>
  
  <author>
    <name><![CDATA[smallnest]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[uriDB网站的可扩展的技术栈]]></title>
    <link href="http://colobu.com/2015/11/09/The-Stack-of-uriDB/"/>
    <id>http://colobu.com/2015/11/09/The-Stack-of-uriDB/</id>
    <published>2015-11-09T04:43:00.000Z</published>
    <updated>2015-11-10T07:11:10.478Z</updated>
    <content type="html"><![CDATA[<h3 id="背景">背景</h3>
<p><a href="http://uridb.com" target="_blank" rel="external">uriDB</a>本身不生产干货，<a href="http://uridb.com" target="_blank" rel="external">uriDB技术流</a>网站只是大自然的搬运工。<br>自<a href="https://news.ycombinator.com/" target="_blank" rel="external">Hacker News</a>诞生依赖，已经有多个中文技术头条的网站了，比如<a href="http://toutiao.io/" target="_blank" rel="external">开发者头条</a>和<a href="http://geek.csdn.net/hotest" target="_blank" rel="external">极客头条</a>，为什么还要做这样一个雷同的头条网站呢？</p>
<p>有两个原因：<br>一是我想做一个分类头条的网站，按照技术领域对文章进行分类，这样只对前端感兴趣的同学可以只跟踪最新的前端文章。 同时uriDB只会筛选最新的技术干货，不会将问答，闲聊等技术层次低的文章收录。<br>二是这么多年来，我涉及的领域包括后台，大数据，前端和移动端的技术也是我感兴趣的领域。心中那份对技术的持久的热情，促使我将多年的技术积累以某种具体的形式呈现出来，籍此展示并能持久的进行技术架构的演化。</p>
<p>因此，uriDB技术流网站也就孵化出来了。虽然目前的访问量比较少，但是看的用户数和访问量在逐步的提升，也是一件令人欣慰的事。至少，这个网站收集的干货也为那些执着学习的同学带来些许的便利和技能提升。</p>
<p>与其说<a href="http://uridb.com" target="_blank" rel="external">uriDB</a>类似<em>Hacker News</em>网站， 还不说说它类似<a href="http://toutiao.com/" target="_blank" rel="external">今日头条</a>， 只不是今日头条上全是新闻类的内容，而<a href="http://uridb.com" target="_blank" rel="external">uriDB</a>上全是技术干货。今日头条会将目标网站上的内容抓去过来进行重新排版，更加适合阅读。我也抓去了目标文章的内容，却没有进行重新排版显示，主要是考虑到了版权的问题，还是老老实实的做<em>Hacker News</em>一样的转发。</p>
<p>这个网站是2015年国庆节期间开始启动的，也是作为我的side project在维护。我会时不时的将我的新的想法，技术灵感应用于这个网站上。<br><img src="/2015/11/09/The-Stack-of-uriDB/uridb.png" alt=""><br><a id="more"></a></p>
<h3 id="产品部署环境">产品部署环境</h3>
<h4 id="云主机">云主机</h4>
<p>国内的云服务器包括：<a href="http://www.aliyun.com/" target="_blank" rel="external">阿里云</a> <a href="http://www.qcloud.com/" target="_blank" rel="external">腾讯云</a> <a href="https://mos.meituan.com/" target="_blank" rel="external">美团云</a> <a href="http://www.qingcloud.com/" target="_blank" rel="external">青云</a> <a href="http://www.hwclouds.com/" target="_blank" rel="external">华为云</a> <a href="http://www.ctyun.cn/" target="_blank" rel="external">天翼云</a> <a href="http://www.west263.com/" target="_blank" rel="external">西部数码</a> <a href="http://www.linkcloud.cn/" target="_blank" rel="external">Linkcloud</a><br>国外的如 <a href="http://aws.amazon.com/" target="_blank" rel="external">AWS</a> <a href="http://www.windowsazure.com/" target="_blank" rel="external">Azure</a> <a href="https://www.digitalocean.com/" target="_blank" rel="external">Digital Ocean</a> <a href="https://www.linode.com/" target="_blank" rel="external">linnode</a></p>
<p>云服务器之间的比较大家可以具体的搜索。<br>我使用 <a href="https://www.digitalocean.com/?refcode=67c9dbb27bb2" target="_blank" rel="external">DigitalOcean</a>的云主机作为服务器， 主要考虑价格便宜，而是使用ssd作硬盘，速度好，可以选用新加坡的机房。</p>
<h4 id="负载均衡">负载均衡</h4>
<p>使用CentOS 7.1做所有的节点的操作系统。<br>nginx 1.8.0作为负载均衡。为了实现高可用性，采用keepalived实现， 比如文章<a href="http://www.tokiwinter.com/building-a-highly-available-load-balancer-with-nginx-and-keepalived-on-centos/" target="_blank" rel="external">Building a Highly-Available Load Balancer with Nginx and Keepalived on CentOS</a>。这样当一台Load balancer宕机的时候，它的功能转移到另外一台Load balancer上。</p>
<p>Keepalived的作用是检测服务器的健康状态，在所有可能出现单点故障的地方为其提供高可用。如果有一台服务器死机，或工作出现故障，Keepalived将检测到，并将有故障的服务器从系统中剔除，当服务器工作正常后Keepalived自动将服务器加入到服务器群中，这些工作全部自动完成，不需要人工干涉，需要人工做的只是修复故障的服务器。keepalived的核心是vrrp，它是通过脚本来调用服务的，所以在keepalived的使用中，仅需关心两点：配置文件（/etc/keepalived/keepalived.conf）和服务脚本（/etc/rc.d/init.d/keepalived）</p>
<p>N年前我在Motorola工作的时候，使用的是一个商业的高可用方案，后来基于HAProxy+keepalived方式实现高可用，应用于视频节目的播放产品中。这里我们使用Nginx作为负载均衡器，所以配置Nginx+Keepalived作为双主高可用负载均衡器。</p>
<p>参考文档中列出了此方案的配置方法的一些介绍文章，文档内容基本类似，读者可以选择查看。<br>商业版的NGINX Plus提供了Keepalived的集成。</p>
<p>国内厂商使用 <a href="http://tengine.taobao.org/" target="_blank" rel="external">Tengine</a>也不少，配置keepalived一样。</p>
<p>使用Golang开发了整个服务器后台程序和爬虫。自2000年开始我用.NET做了三年的开发，2003年以后一致用Java做开发，2015年使用Scala做大数据和高性能服务器的开发。所以最熟悉的开发语言还是Java和Scala。<br>但是，我想挑战一下自己。Scala代码的优雅(这里指代码本身，不谈论性能等其它方面)，面向对象和函数式编程是我的思维得到了极大的扩展。通过对Go语言的学习，我也深深被它的简洁和编译的本地代码所吸引，所以业余将主要精力放在了Go语言的学习和实践上，也尝试为开源项目提供<a href="https://github.com/parnurzeal/gorequest/graphs/contributors" target="_blank" rel="external">贡献</a>。</p>
<p>虽然Java生态圈的库和框架多如牛毛，Go相关的高质量库也不断的涌现。Go在中国也相当的<a href="http://herman.asia/why-is-go-popular-in-china" target="_blank" rel="external">火</a>,国内的一些厂商也在应用Golang,如七牛，360等。本身我对Go实现一个高性能的服务器架构不持怀疑态度。</p>
<p>上面一句话是假的。既然决定采用Go作为主开发语言，必然在选型的时候做一些性能的测试。实际的测试结果也表明Go的性能不错。尽管<a href="http://colobu.com/2015/04/24/Web-Frameworks-Benchmark-2015/" target="_blank" rel="external">Web Frameworks Benchmark 2015</a>的测试中Go排名19，低于Java实现的Netty,undertow,Servlet, C++/C的实现等，我还是觉得Go的潜力无限。</p>
<p>另一个值得关注的语言是Mozilla主导的<a href="https://www.rust-lang.org/" target="_blank" rel="external">rust</a>，但是能否成气候还有待观察。</p>
<h3 id="前端">前端</h3>
<p>网站的前端主要采用当前流行的<a href="https://en.wikipedia.org/wiki/Single-page_application" target="_blank" rel="external">单页程序</a>设计。采用AJAX进行数据的拉取。<br>2014年在Thistech主要采用<a href="http://emberjs.com/" target="_blank" rel="external">ember.js</a>进行开发，积累了一些前端框架经验，所以对ember.js的评价有好有坏。考虑到uriDB网站的形式，动态交互的逻辑不多(搜索，加载)，没必要重度使用前端框架如AngularJS, Ember.js, Backbone.js等。</p>
<p>所以最后使用jquery的ajax调用访问服务器的Restful API，以及jquery相关的插件。<br>前端的css框架采用定制的bootstrap，主要以红色色调为主，因为快到冬天了，红红火火，比较温暖，而没有采用蓝色系，尽管蓝色系的bootstrap也准备好了。</p>
<p>尽然通过jquery动态加载数据，页面基本上就是一个模版，这样动静分离，可以将静态页面cache住，减少服务器的压力。<br>相关的javascript和css进行了合并，并且进行了压缩。<br>在nginx出配置了gzip特性，超过1k的响应会被压缩。<br>将js,css,图片分流到另外一个域名上 <a href="http://static.uridb.com。" target="_blank" rel="external">http://static.uridb.com。</a><br>前端的图片采用动态加载的方式，只有滚动到显示时才进行加载，从而避免页面加载时间过长。</p>
<p>更多的前端优化请参看: <a href="http://colobu.com/2015/10/30/h5-performance/" target="_blank" rel="external">前端性能优化指南</a></p>
<h3 id="爬虫">爬虫</h3>
<p>爬虫运行在单独的服务器上，它会定时的到指定网站抓取最新的文章列表，这里对网站的请求使用了我的一个开源项目: <a href="https://github.com/smallnest/goreq" target="_blank" rel="external">goreq</a>，它简化了http client的操作。<br>它基于<a href="http://www.rssboard.org/" target="_blank" rel="external">RSS</a>或者<a href="https://github.com/PuerkitoBio/goquery" target="_blank" rel="external">goquery</a>进行分析列表，得到候选文章。<br>但是不止于此，它还会基于候选文章列表访问每个抓取的文章，获取文章的元数据和正文。<br>基于这些信息，它会生成文章的元数据，并进行自动化的分类。<br>当前的分类还是一个简单的根据关键词的分类，所以有时候会造成误判， 比如一篇《Go, Go, GO,让我们开始用Java编程》可能会被分类成Golang文章，尽管它属于Java栏目的。</p>
<p>爬虫应该能处理超时以及意外情况(不规整的html)，我们可以容忍一条文章的损失，但是必须保证整个爬虫程序不会垮掉。</p>
<p>充分利用Go interface，我们实现了简洁的爬虫程序，并且可以很方便的添加新的网站源。</p>
<p>通过crontab进行抓取，每天会抓取几次，每次的抓取时间少于10分钟。</p>
<h3 id="后台">后台</h3>
<p>使用<a href="https://github.com/go-zoo/bone" target="_blank" rel="external">bone</a>作为http Multiplexer，而没有采用其它流行的Go web框架如: <a href="http://www.gorillatoolkit.org/" target="_blank" rel="external">Gorilla</a>, 谢工的<a href="http://beego.me/" target="_blank" rel="external">Beego</a>等，主要还是考虑到简单和性能。<br>依照bone官方的测试：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> <span class="constant">BenchmarkBoneMux</span>        <span class="number">10000000</span>               <span class="number">118</span> ns/op</span></div><div class="line">-<span class="ruby"> <span class="constant">BenchmarkZeusMux</span>          <span class="number">100000</span>               <span class="number">144</span> ns/op</span></div><div class="line">-<span class="ruby"> <span class="constant">BenchmarkHttpRouterMux</span>  <span class="number">10000000</span>               <span class="number">134</span> ns/op</span></div><div class="line">-<span class="ruby"> <span class="constant">BenchmarkNetHttpMux</span>      <span class="number">3000000</span>               <span class="number">580</span> ns/op</span></div><div class="line">-<span class="ruby"> <span class="constant">BenchmarkGorillaMux</span>       <span class="number">300000</span>              <span class="number">3333</span> ns/op</span></div><div class="line">-<span class="ruby"> <span class="constant">BenchmarkGorillaPatMux</span>   <span class="number">1000000</span>              <span class="number">1889</span> ns/op</span></div></pre></td></tr></table></figure>

<p>它的性能比Gorilla好太多了。使用它开发也非常的简单快捷。</p>
<p>后台是无状态的服务设计。Session需要在所有的节点共享。<br>使用 <a href="http://github.com/gorilla/sessions" target="_blank" rel="external">gorilla/sessions</a>实现session的管理，并且使用<a href="github.com/kidstuff/mongostore">mongostore</a>将session存储在MongoDB中。<br>也有其它的session存储方式， 如MySQL, Redis等：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>[<span class="link_label">github.com/starJammer/gorilla-sessions-arangodb</span>](<span class="link_url">https://github.com/starJammer/gorilla-sessions-arangodb</span>) - ArangoDB</div><div class="line"><span class="bullet">* </span>[<span class="link_label">github.com/yosssi/boltstore</span>](<span class="link_url">https://github.com/yosssi/boltstore</span>) - Bolt</div><div class="line"><span class="bullet">* </span>[<span class="link_label">github.com/srinathgs/couchbasestore</span>](<span class="link_url">https://github.com/srinathgs/couchbasestore</span>) - Couchbase</div><div class="line"><span class="bullet">* </span>[<span class="link_label">github.com/denizeren/dynamostore</span>](<span class="link_url">https://github.com/denizeren/dynamostore</span>) - Dynamodb on AWS</div><div class="line"><span class="bullet">* </span>[<span class="link_label">github.com/bradleypeabody/gorilla-sessions-memcache</span>](<span class="link_url">https://github.com/bradleypeabody/gorilla-sessions-memcache</span>) - Memcache</div><div class="line"><span class="bullet">* </span>[<span class="link_label">github.com/hnakamur/gaesessions</span>](<span class="link_url">https://github.com/hnakamur/gaesessions</span>) - Memcache on GAE</div><div class="line"><span class="bullet">* </span>[<span class="link_label">github.com/kidstuff/mongostore</span>](<span class="link_url">https://github.com/kidstuff/mongostore</span>) - MongoDB</div><div class="line"><span class="bullet">* </span>[<span class="link_label">github.com/srinathgs/mysqlstore</span>](<span class="link_url">https://github.com/srinathgs/mysqlstore</span>) - MySQL</div><div class="line"><span class="bullet">* </span>[<span class="link_label">github.com/antonlindstrom/pgstore</span>](<span class="link_url">https://github.com/antonlindstrom/pgstore</span>) - PostgreSQL</div><div class="line"><span class="bullet">* </span>[<span class="link_label">github.com/boj/redistore</span>](<span class="link_url">https://github.com/boj/redistore</span>) - Redis</div><div class="line"><span class="bullet">* </span>[<span class="link_label">github.com/boj/rethinkstore</span>](<span class="link_url">https://github.com/boj/rethinkstore</span>) - RethinkDB</div><div class="line"><span class="bullet">* </span>[<span class="link_label">github.com/boj/riakstore</span>](<span class="link_url">https://github.com/boj/riakstore</span>) - Riak</div><div class="line"><span class="bullet">* </span>[<span class="link_label">github.com/michaeljs1990/sqlitestore</span>](<span class="link_url">https://github.com/michaeljs1990/sqlitestore</span>) - SQLite</div></pre></td></tr></table></figure>

<p>得益于Go http库的设计，可以实现很精巧的请求拦截， 比如进行权限检查，日志输出和Panic处理等。比如下面的panic的处理：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> panicCover(f http.HandlerFunc) http.HandlerFunc {</div><div class="line">	<span class="keyword">return</span> <span class="keyword">func</span>(w http.ResponseWriter, req *http.Request) {</div><div class="line">		<span class="keyword">defer</span> <span class="keyword">func</span>() {</div><div class="line">			<span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="constant">nil</span> {</div><div class="line">				glog.Error(<span class="string">"Recovered in handlers"</span>, r, stack.Callers<span class="number">(3</span>))</div><div class="line">				http.Error(w, <span class="string">"Error"</span>, http.StatusInternalServerError)</div><div class="line">			}</div><div class="line">		}()</div><div class="line"></div><div class="line">		f(w, req)</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line">mux.Get(<span class="string">"/abc"</span>, panicCover(http.HandlerFunc(oneHandler)))</div></pre></td></tr></table></figure>

<p>基于golang template可以实现网站的模板化处理,将布局layout和组件widget分开，这样可以公用header, footer,菜单，边栏等。<br>Restful API提供JSON数据，将从Mongo或者缓存中的数据返回给前端。</p>
<p>使用mgo作为数据访问层， mgo对于session/连接池的管理官方还缺乏一个详细而精确的说明，这里使用了基于请求的session管理:<a href="http://stackoverflow.com/questions/26574594/best-practice-to-maintain-a-mgo-session" target="_blank" rel="external">Best practice to maintain a mgo session</a></p>
<p>uriDB提供了微博,QQ,Github,Linkedin,Google的OAuth2登录，<a href="golang.org/x/oauth2">x/oauth2</a>并不能完全cover所有的oauth2的认证，因为每个厂家都有自己的方言，所以实现的时候针对每个厂家做了底层的处理。<br>同时还提供了注册服务器帐号的功能。<br>为了避免机器人注册和登录，提供了验证码的功能,基于<a href="github.com/dchest/captcha">dchest/captcha</a>。<br>我们需要考虑多节点的情况，填写验证码后请求可能会被提交到另外一个节点，所以验证码需要在节点中共享，所以实现了一个基于memcached的store。</p>
<p>考虑uriDB站点的情况， <strong>写</strong>操作相对较少，大部分的操作还是<strong>读</strong>，所以很适合用缓存来减少数据库的压力。使用memcached缓存文章的查询，极大地减少数据库的压力。</p>
<p>uriDB还提供了搜索的功能，详情见搜索那一节。</p>
<p>另外，还设计了管理员的简单平台，可以对文章进行审核，对用户进行管理，对文章进行修改。还提供了命令行的工具。<br>但是这些基本上不会用到，而是采用了slack机器人的方式，随时随地对网站进行管理: <a href="http://colobu.com/2015/11/04/create-a-slack-bot-with-golang/" target="_blank" rel="external">使用Go开发一个 Slack 运维机器人 </a></p>
<p>日志采用<a href="https://github.com/golang/glog" target="_blank" rel="external">glog</a>，简单好用。</p>
<h3 id="数据库">数据库</h3>
<p>数据库的选择倒不是一个很艰难的选择，无论mysql还是MongoDB，cassandra都能胜任。<br>基本上现在每天收集的文章不到100篇，一年也才3万多篇， 10年也才30万。对数据库的存储压力不大。<br>所以这里选用了我近两年一直使用的Mongo。<br>Mongo数据的备份开始参照: <a href="http://colobu.com/2015/10/27/mongodb-backup/" target="_blank" rel="external">Mongodb 定期备份</a></p>
<p>如果数据库的压力增大，我会考虑将当前的MongoDB单例迁移到Replica Set,如果性能再不济，将其迁移到cluster模式，通过shard方式分担数据库的压力。我想基本不会达到这样的压力的。</p>
<p>但是数据库的备份是至关重要的，一旦机器宕机，或者遭受攻击，或者运维误操作，必须能恢复回来，否则哭也来不及。</p>
<h3 id="搜索">搜索</h3>
<p>当前的搜索基于Mongo的查询，搜索字段都建立了索引。但是在数据量大的时候，分页查询会是一个瓶颈，我想这对于实现过大数据分页的读者来说并不陌生。当offset很大的时候， 因为尽管你会skip这些offset取得limit条数据，也会搜索这些所有的数据，越往后查询越慢。<br>杨卫华(TimYang)有一篇很好的总结文章：<a href="http://timyang.net/data/key-list-pagination/" target="_blank" rel="external">为什么超长列表数据的翻页技术实现复杂</a></p>
<p>所以一般实现扶梯方式，只提供上一页下一页的功能，并不能直接跳转到n页。这样就可以通过最后一条或者第一条的偏移，获取下一页或者上一页的数据。<br>另外还要根据多字段查询，都建立索引对数据库的性能也有影响。</p>
<p>总的来说，在大数据量的情况下，查询并不是一件容易的事。</p>
<p>现在正在做的一件事是使用<a href="https://www.elastic.co/" target="_blank" rel="external">Elasticsearch</a>做索引服务器，可以很好的解决查询的问题。Elasticsearch已经在很多大公司得到广泛的应用，绝对是值得使用的做内容索引的产品。</p>
<p>最简单的方式，将Mongo数据库的数据导入到Elasticsearch中： <a href="http://colobu.com/2015/10/27/Sync-Transformed-Data-from-MongoDB-to-Elasticsearch/" target="_blank" rel="external">基于Golang将MongoDB的数据同步到Elasticsearch</a>。但是我不会采用这种方式，而是采用一种近实时的索引架构。</p>
<p>我索引的内容就是文章的元数据，元数据插入的时候只有两种：爬虫插入，读者提交/管理员更改/删除。所以在数据插入/更改/删除的时候将操作放入到<a href="https://github.com/nsqio/nsq" target="_blank" rel="external">nsq</a>中，Elasticsearch服务器读取到文章的变动，实时更新索引服务器。</p>
<p>使用nsq可以很好的实现异步的操作，将文章的变动和索引服务器的操作交给不同的服务器进行处理。<br>而且nsq也会作为uriDB异步服务的基础框架。</p>
<h3 id="移动端">移动端</h3>
<p>事实上，我先实现的Android版的移动端， 叫&quot;<a href="http://colobu.com/techreview/" target="_blank" rel="external">技术快报</a>&quot;， 如果你在一些应用商店搜索&quot;<a href="https://www.google.is/webhp?ie=utf-8&amp;oe=utf-8&amp;gws_rd=cr&amp;ei=w3BAVorbNsi80ASPsouICA#q=%E6%8A%80%E6%9C%AF%E5%BF%AB%E6%8A%A5+android" target="_blank" rel="external">Android 技术快报</a>&quot;就能搜到它。</p>
<p>因为当时还没有客户端，所以爬虫代码就在手机端实现的，出于时间的考虑，只能拉取很少的文章资源。</p>
<p>新的版本将直接从 <a href="http://uridb.com" target="_blank" rel="external">http://uridb.com</a> 拉取数据，并提供按照栏目进行浏览的方式，基本上会类似网易新闻这样的客户端。</p>
<h3 id="运维">运维</h3>
<p>Elasticsearch、Logstash和Kibana会是日志分析的三剑客。<br>当前的运维还很薄弱，服务器的监控，软件的重启和升级都靠手工，这些都是有待加强的地方。</p>
<p>当前实现了一个slack机器人，这样我就可以通过聊天室让机器人完成一些网站管理的工作，现在感觉超方便，我甚至可以在炒菜的时候得到网站的消息，也可以在睡觉前查看服务器的状态。</p>
<h3 id="参考文章">参考文章</h3>
<ol>
<li><a href="http://www.tokiwinter.com/building-a-highly-available-load-balancer-with-nginx-and-keepalived-on-centos/" target="_blank" rel="external">http://www.tokiwinter.com/building-a-highly-available-load-balancer-with-nginx-and-keepalived-on-centos/</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-highly-available-web-servers-with-keepalived-and-floating-ips-on-ubuntu-14-04" target="_blank" rel="external">https://www.digitalocean.com/community/tutorials/how-to-set-up-highly-available-web-servers-with-keepalived-and-floating-ips-on-ubuntu-14-04</a></li>
<li><a href="http://seanlook.com/2015/05/18/nginx-keepalived-ha/" target="_blank" rel="external">http://seanlook.com/2015/05/18/nginx-keepalived-ha/</a></li>
<li><a href="http://nmshuishui.blog.51cto.com/1850554/1405484" target="_blank" rel="external">http://nmshuishui.blog.51cto.com/1850554/1405484</a></li>
<li><a href="http://isux.tencent.com/h5-performance.html" target="_blank" rel="external">http://isux.tencent.com/h5-performance.html</a></li>
<li><a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="external">https://developer.yahoo.com/performance/rules.html</a></li>
<li><a href="https://github.com/PuerkitoBio/goquery" target="_blank" rel="external">https://github.com/PuerkitoBio/goquery</a></li>
<li><a href="https://github.com/smallnest/goreq" target="_blank" rel="external">https://github.com/smallnest/goreq</a></li>
<li><a href="https://github.com/go-zoo/bone" target="_blank" rel="external">https://github.com/go-zoo/bone</a></li>
<li><a href="http://github.com/gorilla/sessions" target="_blank" rel="external">http://github.com/gorilla/sessions</a></li>
<li><a href="http://github.com/kidstuff/mongostore" target="_blank" rel="external">http://github.com/kidstuff/mongostore</a></li>
<li><a href="https://labix.org/mgo" target="_blank" rel="external">https://labix.org/mgo</a></li>
<li><a href="http://stackoverflow.com/questions/26574594/best-practice-to-maintain-a-mgo-session" target="_blank" rel="external">http://stackoverflow.com/questions/26574594/best-practice-to-maintain-a-mgo-session</a></li>
<li><a href="https://godoc.org/golang.org/x/oauth2" target="_blank" rel="external">https://godoc.org/golang.org/x/oauth2</a></li>
<li><a href="https://github.com/dchest/captcha" target="_blank" rel="external">https://github.com/dchest/captcha</a></li>
<li><a href="https://github.com/golang/glog" target="_blank" rel="external">https://github.com/golang/glog</a></li>
<li><a href="https://github.com/bradfitz/gomemcache/memcache" target="_blank" rel="external">https://github.com/bradfitz/gomemcache/memcache</a></li>
<li><a href="http://colobu.com/2015/10/27/mongodb-backup/" target="_blank" rel="external">http://colobu.com/2015/10/27/mongodb-backup/</a></li>
<li><a href="http://colobu.com/2015/10/27/Sync-Transformed-Data-from-MongoDB-to-Elasticsearch/" target="_blank" rel="external">http://colobu.com/2015/10/27/Sync-Transformed-Data-from-MongoDB-to-Elasticsearch/</a></li>
<li><a href="https://github.com/nsqio/nsq" target="_blank" rel="external">https://github.com/nsqio/nsq</a></li>
<li><a href="https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details" target="_blank" rel="external">https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details</a></li>
<li><a href="http://kibana.logstash.es/" target="_blank" rel="external">http://kibana.logstash.es/</a></li>
<li><a href="https://www.gitbook.com/book/chenryn/logstash-best-practice/details" target="_blank" rel="external">https://www.gitbook.com/book/chenryn/logstash-best-practice/details</a></li>
<li><a href="https://www.gitbook.com/book/looly/elasticsearch-the-definitive-guide-cn/details" target="_blank" rel="external">https://www.gitbook.com/book/looly/elasticsearch-the-definitive-guide-cn/details</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="背景">背景</h3>
<p><a href="http://uridb.com" target="_blank" rel="external">uriDB</a>本身不生产干货，<a href="http://uridb.com" target="_blank" rel="external">uriDB技术流</a>网站只是大自然的搬运工。<br>自<a href="https://news.ycombinator.com/" target="_blank" rel="external">Hacker News</a>诞生依赖，已经有多个中文技术头条的网站了，比如<a href="http://toutiao.io/" target="_blank" rel="external">开发者头条</a>和<a href="http://geek.csdn.net/hotest" target="_blank" rel="external">极客头条</a>，为什么还要做这样一个雷同的头条网站呢？</p>
<p>有两个原因：<br>一是我想做一个分类头条的网站，按照技术领域对文章进行分类，这样只对前端感兴趣的同学可以只跟踪最新的前端文章。 同时uriDB只会筛选最新的技术干货，不会将问答，闲聊等技术层次低的文章收录。<br>二是这么多年来，我涉及的领域包括后台，大数据，前端和移动端的技术也是我感兴趣的领域。心中那份对技术的持久的热情，促使我将多年的技术积累以某种具体的形式呈现出来，籍此展示并能持久的进行技术架构的演化。</p>
<p>因此，uriDB技术流网站也就孵化出来了。虽然目前的访问量比较少，但是看的用户数和访问量在逐步的提升，也是一件令人欣慰的事。至少，这个网站收集的干货也为那些执着学习的同学带来些许的便利和技能提升。</p>
<p>与其说<a href="http://uridb.com" target="_blank" rel="external">uriDB</a>类似<em>Hacker News</em>网站， 还不说说它类似<a href="http://toutiao.com/" target="_blank" rel="external">今日头条</a>， 只不是今日头条上全是新闻类的内容，而<a href="http://uridb.com" target="_blank" rel="external">uriDB</a>上全是技术干货。今日头条会将目标网站上的内容抓去过来进行重新排版，更加适合阅读。我也抓去了目标文章的内容，却没有进行重新排版显示，主要是考虑到了版权的问题，还是老老实实的做<em>Hacker News</em>一样的转发。</p>
<p>这个网站是2015年国庆节期间开始启动的，也是作为我的side project在维护。我会时不时的将我的新的想法，技术灵感应用于这个网站上。<br><img src="/2015/11/09/The-Stack-of-uriDB/uridb.png" alt=""><br>]]>
    
    </summary>
    
      <category term="go" scheme="http://colobu.com/tags/go/"/>
    
      <category term="bootstrap" scheme="http://colobu.com/tags/bootstrap/"/>
    
      <category term="nginx" scheme="http://colobu.com/tags/nginx/"/>
    
      <category term="nsq" scheme="http://colobu.com/tags/nsq/"/>
    
      <category term="android" scheme="http://colobu.com/tags/android/"/>
    
      <category term="mongo" scheme="http://colobu.com/tags/mongo/"/>
    
      <category term="elasticsearch" scheme="http://colobu.com/tags/elasticsearch/"/>
    
      <category term="架构" scheme="http://colobu.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[机器学习算法 Python&R 速查表]]></title>
    <link href="http://colobu.com/2015/11/05/full-cheatsheet-machine-learning-algorithms/"/>
    <id>http://colobu.com/2015/11/05/full-cheatsheet-machine-learning-algorithms/</id>
    <published>2015-11-05T02:55:29.000Z</published>
    <updated>2015-11-09T01:36:49.673Z</updated>
    <content type="html"><![CDATA[<p>原文出处: <a href="http://www.analyticsvidhya.com/blog/2015/09/full-cheatsheet-machine-learning-algorithms/" target="_blank" rel="external">Cheatsheet – Python &amp; R codes for common Machine Learning Algorithms</a><br>在拿破仑•希尔的名著《思考与致富》中讲述了达比的故事：达比经过几年的时间快要挖掘到了金矿，却在离它三英尺的地方离开了！</p>
<p>现在,我不知道这个故事是否真实。但是,我肯定在我的周围有一些跟达比一样的人，这些人认为，不管遇到什么问题, 机器学习的目的就是执行以及使用2 – 3组算法。他们不去尝试更好的算法和技术，因为他们觉得太困难或耗费时间。</p>
<p>像达比一样,他们无疑是在到达最后一步的时候突然消失了!最后,他们放弃机器学习,说计算量非常大、非常困难或者认为自己的模型已经到达优化的临界点——真的是这样吗?</p>
<p>下面这些速查表能让这些“达比”成为机器学习的支持者。这是10个最常用的机器学习算法，这些算法使用了Python和R代码。考虑到机器学习在构建模型中的应用，这些速查表可以很好作为编码指南帮助你学好这些机器学习算法。Good Luck!</p>
<p><a href="http://discuss.analyticsvidhya.com/t/download-full-cheatsheet-on-machine-learning-algorithms/4063/1" target="_blank" rel="external">PDF版本</a><br><a id="more"></a><br><img src="1.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文出处: <a href="http://www.analyticsvidhya.com/blog/2015/09/full-cheatsheet-machine-learning-algorithms/" target="_blank" rel="external">Cheatsheet – Python &amp; R codes for common Machine Learning Algorithms</a><br>在拿破仑•希尔的名著《思考与致富》中讲述了达比的故事：达比经过几年的时间快要挖掘到了金矿，却在离它三英尺的地方离开了！</p>
<p>现在,我不知道这个故事是否真实。但是,我肯定在我的周围有一些跟达比一样的人，这些人认为，不管遇到什么问题, 机器学习的目的就是执行以及使用2 – 3组算法。他们不去尝试更好的算法和技术，因为他们觉得太困难或耗费时间。</p>
<p>像达比一样,他们无疑是在到达最后一步的时候突然消失了!最后,他们放弃机器学习,说计算量非常大、非常困难或者认为自己的模型已经到达优化的临界点——真的是这样吗?</p>
<p>下面这些速查表能让这些“达比”成为机器学习的支持者。这是10个最常用的机器学习算法，这些算法使用了Python和R代码。考虑到机器学习在构建模型中的应用，这些速查表可以很好作为编码指南帮助你学好这些机器学习算法。Good Luck!</p>
<p><a href="http://discuss.analyticsvidhya.com/t/download-full-cheatsheet-on-machine-learning-algorithms/4063/1" target="_blank" rel="external">PDF版本</a><br>]]>
    
    </summary>
    
      <category term="大数据" scheme="http://colobu.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[机器学习算法精要(Python 和 R 代码)]]></title>
    <link href="http://colobu.com/2015/11/05/common-machine-learning-algorithms/"/>
    <id>http://colobu.com/2015/11/05/common-machine-learning-algorithms/</id>
    <published>2015-11-05T01:25:46.000Z</published>
    <updated>2015-11-05T02:31:42.071Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://www.analyticsvidhya.com" target="_blank" rel="external">analyticsvidhya</a>网站有一些非常好的机器学习的文章，这是其中的一篇。<br>原文出处: <a href="http://www.analyticsvidhya.com/blog/2015/08/common-machine-learning-algorithms/" target="_blank" rel="external">Essentials of Machine Learning Algorithms</a>,<br>国内有人翻译了，可以移步：<a href="http://blog.jobbole.com/92021/" target="_blank" rel="external">10 种机器学习算法的要点</a><br><a id="more"></a></p>
</blockquote>
<h3 id="Introduction">Introduction</h3>
<blockquote>
<p>Google’s self-driving cars and robots get a lot of press, but the company’s real future is in machine learning, the technology that enables computers to get smarter and more personal.</p>
<p>   – Eric Schmidt (Google Chairman)</p>
</blockquote>
<p>We are probably living in the most defining period of human history. The period when computing moved from large mainframes to PCs to cloud. But what makes it defining is not what has happened, but what is coming our way in years to come.</p>
<p>What makes this period exciting for some one like me is the democratization of the tools and techniques, which followed the boost in computing. Today, as a data scientist, I can build data crunching machines with complex algorithms for a few dollors per hour. But, reaching here wasn’t easy! I had my dark days and nights.</p>
<h3 id="Who_can_benefit_the_most_from_this_guide?">Who can benefit the most from this guide?</h3>
<p><strong>What I am giving out today is probably the most valuable guide, I have ever created.</strong><br>(这一篇指南，可能是我写过的最有价值的指南)</p>
<p>The idea behind creating this guide is to simplify the journey of aspiring data scientists and machine learning enthusiasts across the world. Through this guide, I will enable you to work on machine learning problems and gain from experience. <strong>I am providing a high level understanding about various machine learning algorithms along with R &amp; Python codes to run them. These should be sufficient to get your hands dirty.</strong><br><img src="1.jpg" alt=""><br>I have deliberately skipped the statistics behind these techniques, as you don’t need to understand them at the start. So, if you are looking for statistical understanding of these algorithms, you should look elsewhere. But, if you are looking to equip yourself to start building machine learning project, you are in for a treat.</p>
<h3 id="Broadly,_there_are_3_types_of_Machine_Learning_Algorithms-">Broadly, there are 3 types of Machine Learning Algorithms..</h3>
<p><strong>1 Supervised Learning</strong><br>监督式学习<br><strong>How it works</strong>: This algorithm consist of a target / outcome variable (or dependent variable) which is to be predicted from a given set of predictors (independent variables). Using these set of variables, we generate a function that map inputs to desired outputs. The training process continues until the model achieves a desired level of accuracy on the training data. Examples of Supervised Learning: Regression, Decision Tree, Random Forest, KNN, Logistic Regression etc. (回归、决策树、随机森林、K–近邻算法、逻辑回归等)</p>
<p><strong>2 Unsupervised Learning</strong><br>非监督式学习<br><strong>How it works</strong>: In this algorithm, we do not have any target or outcome variable to predict / estimate.  It is used for clustering population in different groups, which is widely used for segmenting customers in different groups for specific intervention. Examples of Unsupervised Learning: Apriori algorithm, K-means. (关联算法, K–均值算法)</p>
<p><strong>3 Reinforcement Learning</strong><br>强化学习<br><strong>How it works</strong>:  Using this algorithm, the machine is trained to make specific decisions. It works this way: the machine is exposed to an environment where it trains itself continually using trial and error. This machine learns from past experience and tries to capture the best possible knowledge to make accurate business decisions. Example of Reinforcement Learning: Markov Decision Process</p>
<h3 id="List_of_Common_Machine_Learning_Algorithms">List of Common Machine Learning Algorithms</h3>
<p>Here is the list of commonly used machine learning algorithms. These algorithms can be applied to almost any data problem:</p>
<ol>
<li>Linear Regression (线性回归)</li>
<li>Logistic Regression (逻辑回归)</li>
<li>Decision Tree (决策树)</li>
<li>SVM (支持向量机)</li>
<li>Naive Bayes (朴素贝叶斯)</li>
<li>KNN (K最近邻算法)</li>
<li>K-Means (K均值算法)</li>
<li>Random Forest (随机森林算法)</li>
<li>Dimensionality Reduction Algorithms (降维算法)</li>
<li>Gradient Boost &amp; Adaboost</li>
</ol>
<h4 id="1_Linear_Regression">1 Linear Regression</h4>
<p>It is used to estimate real values (cost of houses, number of calls, total sales etc.) based on continuous variable(s). Here, we establish relationship between independent and dependent variables by fitting a best line. This best fit line is known as regression line and represented by a linear equation Y= a *X + b.</p>
<p>The best way to understand linear regression is to relive this experience of childhood. Let us say, you ask a child in fifth grade to arrange people in his class by increasing order of weight, without asking them their weights! What do you think the child will do? He / she would likely look (visually analyze) at the height and build of people and arrange them using a combination of these visible parameters. This is linear regression in real life! The child has actually figured out that height and build would be correlated to the weight by a relationship, which looks like the equation above.</p>
<p>In this equation:</p>
<ul>
<li>Y – Dependent Variable</li>
<li>a – Slope</li>
<li>X – Independent variable</li>
<li>b – Intercept</li>
</ul>
<p>These coefficients a and b are derived based on minimizing the sum of squared difference of distance between data points and regression line.</p>
<p>Look at the below example. Here we have identified the best fit line having linear equation <strong>y=0.2811x+13.9</strong>. Now using this equation, we can find the weight, knowing the height of a person.<br><img src="2.png" alt=""></p>
<p>Linear Regression is of mainly two types: Simple Linear Regression and Multiple Linear Regression. Simple Linear Regression is characterized by one independent variable. And, Multiple Linear Regression(as the name suggests) is characterized by multiple (more than 1) independent variables. While finding best fit line, you can fit a polynomial or curvilinear regression. And these are known as polynomial or curvilinear regression.</p>
<p><strong>Python Code</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Import Library</span></div><div class="line"><span class="comment">#Import other necessary libraries like pandas, numpy...</span></div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</div><div class="line"><span class="comment">#Load Train and Test datasets</span></div><div class="line"><span class="comment">#Identify feature and response variable(s) and values must be numeric and numpy arrays</span></div><div class="line">x_train=input_variables_values_training_datasets</div><div class="line">y_train=target_variables_values_training_datasets</div><div class="line">x_test=input_variables_values_test_datasets</div><div class="line"><span class="comment"># Create linear regression object</span></div><div class="line">linear = linear_model.LinearRegression()</div><div class="line"><span class="comment"># Train the model using the training sets and check score</span></div><div class="line">linear.fit(x_train, y_train)</div><div class="line">linear.score(x_train, y_train)</div><div class="line"><span class="comment">#Equation coefficient and Intercept</span></div><div class="line">print(<span class="string">'Coefficient: \n'</span>, linear.coef_)</div><div class="line">print(<span class="string">'Intercept: \n'</span>, linear.intercept_)</div><div class="line"><span class="comment">#Predict Output</span></div><div class="line">predicted= linear.predict(x_test)</div></pre></td></tr></table></figure>

<p><strong><em>R</em></strong></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Load Train and Test datasets</span></div><div class="line"><span class="comment">#Identify feature and response variable(s) and values must be numeric and numpy arrays</span></div><div class="line">x_train &lt;- input_variables_values_training_datasets</div><div class="line">y_train &lt;- target_variables_values_training_datasets</div><div class="line">x_test &lt;- input_variables_values_test_datasets</div><div class="line">x &lt;- cbind(x_train,y_train)</div><div class="line"><span class="comment"># Train the model using the training sets and check score</span></div><div class="line">linear &lt;- lm(y_train ~ ., data = x)</div><div class="line">summary(linear)</div><div class="line"><span class="comment">#Predict Output</span></div><div class="line">predicted= predict(linear,x_test)</div></pre></td></tr></table></figure>

<h4 id="2_Logistic_Regression">2 Logistic Regression</h4>
<p>Don’t get confused by its name! It is a classification not a regression algorithm. It is used to estimate discrete values ( Binary values like 0/1, yes/no, true/false ) based on given set of independent variable(s). In simple words, it predicts the probability of occurrence of an event by fitting data to a logit function. Hence, it is also known as <strong>logit regression</strong>. Since, it predicts the probability, its output values lies between 0 and 1 (as expected).</p>
<p>Again, let us try and understand this through a simple example.</p>
<p>Let’s say your friend gives you a puzzle to solve. There are only 2 outcome scenarios – either you solve it or you don’t. Now imagine, that you are being given wide range of puzzles / quizzes in an attempt to understand which subjects you are good at. The outcome to this study would be something like this – if you are given a trignometry based tenth grade problem, you are 70% likely to solve it. On the other hand, if it is grade fifth history question, the probability of getting an answer is only 30%. This is what Logistic Regression provides you.</p>
<p>Coming to the math, the log odds of the outcome is modeled as a linear combination of the predictor variables.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dds= p/ (<span class="number">1</span>-p) = probability <span class="keyword">of</span> event occurrence / probability <span class="keyword">of</span> <span class="keyword">not</span> event occurrence</div><div class="line"><span class="function"><span class="title">ln</span><span class="params">(odds)</span> = <span class="title">ln</span><span class="params">(p/(<span class="number">1</span>-p)</span>)</span></div><div class="line"><span class="title">logit</span><span class="params">(p)</span> = <span class="title">ln</span><span class="params">(p/(<span class="number">1</span>-p)</span>) = <span class="title">b0</span>+<span class="title">b1X1</span>+<span class="title">b2X2</span>+<span class="title">b3X3</span>....+<span class="title">bkXk</span></div></pre></td></tr></table></figure>

<p>Above, p is the probability of presence of the characteristic of interest. It chooses parameters that maximize the likelihood of observing the sample values rather than that minimize the sum of squared errors (like in ordinary regression).</p>
<p>Now, you may ask, why take a log? For the sake of simplicity, let’s just say that this is one of the best mathematical way to replicate a step function. I can go in more details, but that will beat the purpose of this article.<br><img src="3.png" alt=""></p>
<p><strong>Python Code</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Import Library</span></div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</div><div class="line"><span class="comment">#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset</span></div><div class="line"><span class="comment"># Create logistic regression object</span></div><div class="line">model = LogisticRegression()</div><div class="line"><span class="comment"># Train the model using the training sets and check score</span></div><div class="line">model.fit(X, y)</div><div class="line">model.score(X, y)</div><div class="line"><span class="comment">#Equation coefficient and Intercept</span></div><div class="line">print(<span class="string">'Coefficient: \n'</span>, model.coef_)</div><div class="line">print(<span class="string">'Intercept: \n'</span>, model.intercept_)</div><div class="line"><span class="comment">#Predict Output</span></div><div class="line">predicted= model.predict(x_test)</div></pre></td></tr></table></figure>

<p><strong>R</strong></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">x &lt;- cbind(x_train,y_train)</div><div class="line"><span class="comment"># Train the model using the training sets and check score</span></div><div class="line">logistic &lt;- glm(y_train ~ ., data = x,family=<span class="string">'binomial'</span>)</div><div class="line">summary(logistic)</div><div class="line"><span class="comment">#Predict Output</span></div><div class="line">predicted= predict(logistic,x_test)</div></pre></td></tr></table></figure>

<p><strong>Furthermore...</strong></p>
<p>There are many different steps that could be tried in order to improve the model:</p>
<ul>
<li>including interaction terms</li>
<li>removing features</li>
<li>regularization techniques</li>
<li>using a non-linear model</li>
</ul>
<h4 id="3_Decision_Tree">3 Decision Tree</h4>
<p>This is one of my favorite algorithm and I use it quite frequently. It is a type of supervised learning algorithm that is mostly used for classification problems. Surprisingly, it works for both categorical and continuous dependent variables. In this algorithm, we split the population into two or more homogeneous sets. This is done based on most significant attributes/ independent variables to make as distinct groups as possible. For more details, you can read: <a href="http://www.analyticsvidhya.com/blog/2015/01/decision-tree-simplified/" target="_blank" rel="external">Decision Tree Simplified</a>.<br><img src="4.png" alt=""><br>In the image above, you can see that population is classified into four different groups based on multiple attributes to identify ‘if they will play or not’. To split the population into different heterogeneous groups, it uses various techniques like Gini, Information Gain, Chi-square, entropy.</p>
<p>The best way to understand how decision tree works, is to play Jezzball – a classic game from Microsoft (image below). Essentially, you have a room with moving walls and you need to create walls such that maximum area gets cleared off with out the balls.<br><img src="5.jpg" alt=""><br>So, every time you split the room with a wall, you are trying to create 2 different populations with in the same room. Decision trees work in very similar fashion by dividing a population in as different groups as possible.</p>
<p>More: <a href="http://www.analyticsvidhya.com/blog/2015/01/decision-tree-simplified/" target="_blank" rel="external">Simplified Version of Decision Tree Algorithms</a></p>
<p><strong>Python Code</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Import Library</span></div><div class="line"><span class="comment">#Import other necessary libraries like pandas, numpy...</span></div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</div><div class="line"><span class="comment">#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset</span></div><div class="line"><span class="comment"># Create tree object </span></div><div class="line">model = tree.DecisionTreeClassifier(criterion=<span class="string">'gini'</span>) <span class="comment"># for classification, here you can change the algorithm as gini or entropy (information gain) by default it is gini  </span></div><div class="line"><span class="comment"># model = tree.DecisionTreeRegressor() for regression</span></div><div class="line"><span class="comment"># Train the model using the training sets and check score</span></div><div class="line">model.fit(X, y)</div><div class="line">model.score(X, y)</div><div class="line"><span class="comment">#Predict Output</span></div><div class="line">predicted= model.predict(x_test)</div></pre></td></tr></table></figure>

<p><strong>R</strong></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(rpart)</div><div class="line">x &lt;- cbind(x_train,y_train)</div><div class="line"><span class="comment"># grow tree </span></div><div class="line">fit &lt;- rpart(y_train ~ ., data = x,method=<span class="string">"class"</span>)</div><div class="line">summary(fit)</div><div class="line"><span class="comment">#Predict Output </span></div><div class="line">predicted= predict(fit,x_test)</div></pre></td></tr></table></figure>

<h4 id="4_SVM_(Support_Vector_Machine)">4 SVM (Support Vector Machine)</h4>
<p>It is a classification method. In this algorithm, we plot each data item as a point in n-dimensional space (where n is number of features you have) with the value of each feature being the value of a particular coordinate.</p>
<p>For example, if we only had two features like Height and Hair length of an individual, we’d first plot these two variables in two dimensional space where each point has two co-ordinates (these co-ordinates are known as <strong>Support Vectors</strong>)</p>
<p><img src="6.png" alt=""></p>
<p>Now, we will find some line that splits the data between the two differently classified groups of data. This will be the line such that the distances from the closest point in each of the two groups will be farthest away.<br><img src="7.png" alt=""></p>
<p>In the example shown above, the line which splits the data into two differently classified groups is the black line, since the two closest points are the farthest apart from the line. This line is our classifier. Then, depending on where the testing data lands on either side of the line, that’s what class we can classify the new data as.</p>
<p>More: <a href="http://www.analyticsvidhya.com/blog/2014/10/support-vector-machine-simplified/" target="_blank" rel="external">Simplified Version of Support Vector Machine</a></p>
<p><strong>Think of this algorithm as playing JezzBall in n-dimensional space. The tweaks in the game are:</strong></p>
<ul>
<li>You can draw lines / planes at any angles (rather than just horizontal or vertical as in classic game)</li>
<li>The objective of the game is to segregate balls of different colors in different rooms.</li>
<li>And the balls are not moving.</li>
</ul>
<p><strong>Python Code</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Import Library</span></div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</div><div class="line"><span class="comment">#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset</span></div><div class="line"><span class="comment"># Create SVM classification object </span></div><div class="line">model = svm.svc() <span class="comment"># there is various option associated with it, this is simple for classification. You can refer link, for mo# re detail.</span></div><div class="line"><span class="comment"># Train the model using the training sets and check score</span></div><div class="line">model.fit(X, y)</div><div class="line">model.score(X, y)</div><div class="line"><span class="comment">#Predict Output</span></div><div class="line">predicted= model.predict(x_test)</div></pre></td></tr></table></figure>

<p><strong>R</strong></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(e1071)</div><div class="line">x &lt;- cbind(x_train,y_train)</div><div class="line"><span class="comment"># Fitting model</span></div><div class="line">fit &lt;-svm(y_train ~ ., data = x)</div><div class="line">summary(fit)</div><div class="line"><span class="comment">#Predict Output </span></div><div class="line">predicted= predict(fit,x_test)</div></pre></td></tr></table></figure>

<h4 id="5_Naive_Bayes">5 Naive Bayes</h4>
<p>It is a classification technique based on Bayes’ theorem with an assumption of independence between predictors. In simple terms, a Naive Bayes classifier assumes that the presence of a particular feature in a class is unrelated to the presence of any other feature. For example, a fruit may be considered to be an apple if it is red, round, and about 3 inches in diameter. Even if these features depend on each other or upon the existence of the other features, a naive Bayes classifier would consider all of these properties to independently contribute to the probability that this fruit is an apple.</p>
<p>Naive Bayesian model is easy to build and particularly useful for very large data sets. Along with simplicity, Naive Bayes is known to outperform even highly sophisticated classification methods.</p>
<p>Bayes theorem provides a way of calculating posterior probability P(c|x) from P(c), P(x) and P(x|c). Look at the equation below:<br><img src="8.png" alt=""><br>Here,</p>
<ul>
<li>P(c|x) is the posterior probability of class (target) given predictor (attribute). </li>
<li>P(c) is the prior probability of class. </li>
<li>P(x|c) is the likelihood which is the probability of predictor given class. </li>
<li>P(x) is the prior probability of predictor.</li>
</ul>
<p><strong>Example</strong>: Let’s understand it using an example. Below I have a training data set of weather and corresponding target variable ‘Play’. Now, we need to classify whether players will play or not based on weather condition. Let’s follow the below steps to perform it.</p>
<p>Step 1: Convert the data set to frequency table</p>
<p>Step 2: Create Likelihood table by finding the probabilities like Overcast probability = 0.29 and probability of playing is 0.64.<br><img src="9.png" alt=""></p>
<p>Step 3: Now, use Naive Bayesian equation to calculate the posterior probability for each class. The class with the highest posterior probability is the outcome of prediction.</p>
<p><strong>Problem</strong>: Players will pay if weather is sunny, is this statement is correct?</p>
<p>We can solve it using above discussed method, so P(Yes | Sunny) = P( Sunny | Yes) * P(Yes) / P (Sunny)</p>
<p>Here we have P (Sunny |Yes) = 3/9 = 0.33, P(Sunny) = 5/14 = 0.36, P( Yes)= 9/14 = 0.64</p>
<p>Now, P (Yes | Sunny) = 0.33 * 0.64 / 0.36 = 0.60, which has higher probability.</p>
<p>Naive Bayes uses a similar method to predict the probability of different class based on various attributes. This algorithm is mostly used in text classification and with problems having multiple classes.</p>
<p><strong>Python Code</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Import Library</span></div><div class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</div><div class="line"><span class="comment">#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset</span></div><div class="line"><span class="comment"># Create SVM classification object model = GaussianNB() # there is other distribution for multinomial classes like Bernoulli Naive Bayes, Refer link</span></div><div class="line"><span class="comment"># Train the model using the training sets and check score</span></div><div class="line">model.fit(X, y)</div><div class="line"><span class="comment">#Predict Output</span></div><div class="line">predicted= model.predict(x_test)</div></pre></td></tr></table></figure>

<p><strong>R</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="title">library</span>(e1071)</div><div class="line"><span class="title">x</span> &lt;- cbind(x_train,y_train)</div><div class="line"><span class="preprocessor"># Fitting model</span></div><div class="line"><span class="title">fit</span> &lt;-naiveBayes(y_train ~ ., <span class="typedef"><span class="keyword">data</span> = x)</span></div><div class="line"><span class="title">summary</span>(fit)</div><div class="line"><span class="preprocessor">#Predict Output </span></div><div class="line"><span class="title">predicted</span>= predict(fit,x_test)</div></pre></td></tr></table></figure>

<h4 id="6_KNN_(K-_Nearest_Neighbors)">6 KNN (K- Nearest Neighbors)</h4>
<p>It can be used for both classification and regression problems. However, it is more widely used in classification problems in the industry. K nearest neighbors is a simple algorithm that stores all available cases and classifies new cases by a majority vote of its k neighbors. The case being assigned to the class is most common amongst its K nearest neighbors measured by a distance function.</p>
<p>These distance functions can be Euclidean, Manhattan, Minkowski and Hamming distance. First three functions are used for continuous function and fourth one (Hamming) for categorical variables. If K = 1, then the case is simply assigned to the class of its nearest neighbor. At times, choosing K turns out to be a challenge while performing KNN modeling.</p>
<p>More: <a href="http://Introduction to k-nearest neighbors : Simplified" target="_blank" rel="external">Introduction to k-nearest neighbors : Simplified.</a><br><img src="10.png" alt=""><br>KNN can easily be mapped to our real lives. If you want to learn about a person, of whom you have no information, you might like to find out about his close friends and the circles he moves in and gain access to his/her information!<br>Things to consider before selecting KNN:</p>
<ul>
<li>KNN is computationally expensive</li>
<li>Variables should be normalized else higher range variables can bias it</li>
<li>Works on pre-processing stage more before going for KNN like outlier, noise removal</li>
</ul>
<p><strong>Python Code</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Import Library</span></div><div class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</div><div class="line"><span class="comment">#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset</span></div><div class="line"><span class="comment"># Create KNeighbors classifier object model </span></div><div class="line">KNeighborsClassifier(n_neighbors=<span class="number">6</span>) <span class="comment"># default value for n_neighbors is 5</span></div><div class="line"><span class="comment"># Train the model using the training sets and check score</span></div><div class="line">model.fit(X, y)</div><div class="line"><span class="comment">#Predict Output</span></div><div class="line">predicted= model.predict(x_test)</div></pre></td></tr></table></figure>

<p><strong>R</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="title">library</span>(knn)</div><div class="line"><span class="title">x</span> &lt;- cbind(x_train,y_train)</div><div class="line"><span class="preprocessor"># Fitting model</span></div><div class="line"><span class="title">fit</span> &lt;-knn(y_train ~ ., <span class="typedef"><span class="keyword">data</span> = x,k=5)</span></div><div class="line"><span class="title">summary</span>(fit)</div><div class="line"><span class="preprocessor">#Predict Output </span></div><div class="line"><span class="title">predicted</span>= predict(fit,x_test)</div></pre></td></tr></table></figure>

<h4 id="7_K-Means">7 K-Means</h4>
<p>It is a type of unsupervised algorithm which  solves the clustering problem. Its procedure follows a simple and easy  way to classify a given data set through a certain number of  clusters (assume k clusters). Data points inside a cluster are homogeneous and heterogeneous to peer groups.</p>
<p>Remember figuring out shapes from ink blots? k means is somewhat similar this activity. You look at the shape and spread to decipher how many different clusters / population are present!<br><img src="11.jpg" alt=""></p>
<p><strong>How K-means forms cluster:</strong></p>
<ol>
<li>K-means picks k number of points for each cluster known as centroids.</li>
<li>Each data point forms a cluster with the closest centroids i.e. k clusters.</li>
<li>Finds the centroid of each cluster based on existing cluster members. Here we have new centroids.</li>
<li>As we have new centroids, repeat step 2 and 3. Find the closest distance for each data point from new centroids and get associated with new k-clusters. Repeat this process until convergence occurs i.e. centroids does not change.</li>
</ol>
<p><strong>How to determine value of K:</strong><br>In K-means, we have clusters and each cluster has its own centroid. Sum of square of difference between centroid and the data points within a cluster constitutes within sum of square value for that cluster. Also, when the sum of square values for all the clusters are added, it becomes total within sum of square value for the cluster solution.</p>
<p>We know that as the number of cluster increases, this value keeps on decreasing but if you plot the result you may see that the sum of squared distance decreases sharply up to some value of k, and then much more slowly after that. Here, we can find the optimum number of cluster.<br><img src="12.png" alt=""><br><strong>Python Code</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Import Library</span></div><div class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</div><div class="line"><span class="comment">#Assumed you have, X (attributes) for training data set and x_test(attributes) of test_dataset</span></div><div class="line"><span class="comment"># Create KNeighbors classifier object model </span></div><div class="line">k_means = KMeans(n_clusters=<span class="number">3</span>, random_state=<span class="number">0</span>)</div><div class="line"><span class="comment"># Train the model using the training sets and check score</span></div><div class="line">model.fit(X)</div><div class="line"><span class="comment">#Predict Output</span></div><div class="line">predicted= model.predict(x_test)</div></pre></td></tr></table></figure>

<p><strong>R</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">library(<span class="keyword">cluster</span>)</div><div class="line">fit &lt;- kmeans(X, 3) # 5 <span class="keyword">cluster</span> solution</div></pre></td></tr></table></figure>

<h4 id="8_Random_Forest">8 Random Forest</h4>
<p>Random Forest is a trademark term for an ensemble of decision trees. In Random Forest, we’ve collection of decision trees (so known as “Forest”). To classify a new object based on attributes, each tree gives a classification and we say the tree “votes” for that class. The forest chooses the classification having the most votes (over all the trees in the forest).</p>
<p>Each tree is planted &amp; grown as follows:</p>
<ol>
<li>If the number of cases in the training set is N, then sample of N cases is taken at random but with replacement. This sample will be the training set for growing the tree.</li>
<li>If there are M input variables, a number m&lt;&lt;M is specified such that at each node, m variables are selected at random out of the M and the best split on these m is used to split the node. The value of m is held constant during the forest growing.</li>
<li>Each tree is grown to the largest extent possible. There is no pruning.</li>
</ol>
<p>For more details on this algorithm, comparing with decision tree and tuning model parameters, I would suggest you to read these articles:</p>
<ol>
<li><a href="http://www.analyticsvidhya.com/blog/2014/06/introduction-random-forest-simplified/" target="_blank" rel="external">Introduction to Random forest – Simplified</a></li>
<li><a href="http://www.analyticsvidhya.com/blog/2014/06/comparing-cart-random-forest-1/" target="_blank" rel="external">Comparing a CART model to Random Forest (Part 1)</a></li>
<li><a href="http://www.analyticsvidhya.com/blog/2014/06/comparing-random-forest-simple-cart-model/" target="_blank" rel="external">Comparing a Random Forest to a CART model (Part 2)</a></li>
<li><a href="http://www.analyticsvidhya.com/blog/2015/06/tuning-random-forest-model/" target="_blank" rel="external">Tuning the parameters of your Random Forest model</a></li>
</ol>
<p><strong>Python</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Import Library</span></div><div class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</div><div class="line"><span class="comment">#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset</span></div><div class="line"><span class="comment"># Create Random Forest object</span></div><div class="line">model= RandomForestClassifier()</div><div class="line"><span class="comment"># Train the model using the training sets and check score</span></div><div class="line">model.fit(X, y)</div><div class="line"><span class="comment">#Predict Output</span></div><div class="line">predicted= model.predict(x_test)</div></pre></td></tr></table></figure>

<p><strong>R</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="title">library</span>(randomForest)</div><div class="line"><span class="title">x</span> &lt;- cbind(x_train,y_train)</div><div class="line"><span class="preprocessor"># Fitting model</span></div><div class="line"><span class="title">fit</span> &lt;- randomForest(<span class="type">Species</span> ~ ., x,ntree=<span class="number">500</span>)</div><div class="line"><span class="title">summary</span>(fit)</div><div class="line"><span class="preprocessor">#Predict Output </span></div><div class="line"><span class="title">predicted</span>= predict(fit,x_test)</div></pre></td></tr></table></figure>

<h4 id="9_Dimensionality_Reduction_Algorithms">9 Dimensionality Reduction Algorithms</h4>
<p>In the last 4-5 years, there has been an exponential increase in data capturing at every possible stages. Corporates/ Government Agencies/ Research organisations are not only coming with new sources but also they are capturing data in great detail.</p>
<p>For example: E-commerce companies are capturing more details about customer like their demographics, web crawling history, what they like or dislike, purchase history, feedback and many others to give them personalized attention more than your nearest grocery shopkeeper.</p>
<p>As a data scientist, the data we are offered also consist of many features, this sounds good for building good robust model but there is a challenge. How’d you identify highly significant variable(s) out 1000 or 2000? In such cases, dimensionality reduction algorithm helps us along with various other algorithms like Decision Tree, Random Forest, PCA, Factor Analysis, Identify based on correlation matrix, missing value ratio and others.</p>
<p>To know more about this algorithms, you can read <a href="http://www.analyticsvidhya.com/blog/2015/07/dimension-reduction-methods/" target="_blank" rel="external">“Beginners Guide To Learn Dimension Reduction Techniques“</a>.</p>
<p><strong>Python  Code</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Import Library</span></div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> decomposition</div><div class="line"><span class="comment">#Assumed you have training and test data set as train and test</span></div><div class="line"><span class="comment"># Create PCA obeject pca= decomposition.PCA(n_components=k) #default value of k =min(n_sample, n_features)</span></div><div class="line"><span class="comment"># For Factor analysis</span></div><div class="line"><span class="comment">#fa= decomposition.FactorAnalysis()</span></div><div class="line"><span class="comment"># Reduced the dimension of training dataset using PCA</span></div><div class="line">train_reduced = pca.fit_transform(train)</div><div class="line"><span class="comment">#Reduced the dimension of test dataset</span></div><div class="line">test_reduced = pca.transform(test)</div><div class="line"><span class="comment">#For more detail on this, please refer  this link.</span></div></pre></td></tr></table></figure>

<p><strong>R</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">library</span><span class="params">(stats)</span></span></div><div class="line"><span class="title">pca</span> &lt;- <span class="title">princomp</span><span class="params">(train, cor = <span class="variable">TRUE</span>)</span></div><div class="line"><span class="title">train_reduced</span>  &lt;- <span class="title">predict</span><span class="params">(pca,train)</span></div><div class="line"><span class="title">test_reduced</span>  &lt;- <span class="title">predict</span><span class="params">(pca,test)</span></div></pre></td></tr></table></figure>

<h4 id="10_Gradient_Boosting_&amp;_AdaBoost">10 Gradient Boosting &amp; AdaBoost</h4>
<p>GBM &amp; AdaBoost are boosting algorithms used when we deal with plenty of data to make a prediction with high prediction power. Boosting is an ensemble learning algorithm which combines the prediction of several base estimators in order to improve robustness over a single estimator. It combines multiple weak or average predictors to a build strong predictor. These boosting algorithms always work well in data science competitions like Kaggle, AV Hackathon, CrowdAnalytix.</p>
<p>More: <a href="http://www.analyticsvidhya.com/blog/2015/05/boosting-algorithms-simplified/" target="_blank" rel="external">Know about Gradient and AdaBoost in detail</a></p>
<p><strong>Python Code</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Import Library</span></div><div class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier</div><div class="line"><span class="comment">#Assumed you have, X (predictor) and Y (target) for training data set and x_test(predictor) of test_dataset</span></div><div class="line"><span class="comment"># Create Gradient Boosting Classifier object</span></div><div class="line">model= GradientBoostingClassifier(n_estimators=<span class="number">100</span>, learning_rate=<span class="number">1.0</span>, max_depth=<span class="number">1</span>, random_state=<span class="number">0</span>)</div><div class="line"><span class="comment"># Train the model using the training sets and check score</span></div><div class="line">model.fit(X, y)</div><div class="line"><span class="comment">#Predict Output</span></div><div class="line">predicted= model.predict(x_test)</div></pre></td></tr></table></figure>

<p><strong>R</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">library(caret)</div><div class="line">x &lt;- cbind(x_train,y_train)</div><div class="line"><span class="comment"># Fitting model</span></div><div class="line">fitControl &lt;- trainControl( <span class="keyword">method</span> = <span class="string">"repeatedcv"</span>, number = <span class="number">4</span>, repeats = <span class="number">4</span>)</div><div class="line">fit &lt;- train(y ~ ., data = x, <span class="keyword">method</span> = <span class="string">"gbm"</span>, trControl = fitControl,verbose = <span class="type">FALSE</span>)</div><div class="line">predicted= predict(fit,x_test,<span class="keyword">type</span>= <span class="string">"prob"</span>)[,<span class="number">2</span>]</div></pre></td></tr></table></figure>

<p>GradientBoostingClassifier and Random Forest are two different boosting tree classifier and often people ask about <a href="http://discuss.analyticsvidhya.com/t/what-is-the-fundamental-difference-between-randomforest-and-gradient-boosting-algorithms/2341" target="_blank" rel="external">the difference between these two algorithms</a>.</p>
<h4 id="End_Notes">End Notes</h4>
<p>By now, I am sure, you would have an idea of commonly used machine learning algorithms. My sole intention behind writing this article and providing the codes in R and Python is to get you started right away. If you are keen to master machine learning, start right away. Take up problems, develop a physical understanding of the process, apply these codes and see the fun!</p>
<p>Did you find this article useful ? Share your views and opinions in the comments section below.</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><a href="http://www.analyticsvidhya.com" target="_blank" rel="external">analyticsvidhya</a>网站有一些非常好的机器学习的文章，这是其中的一篇。<br>原文出处: <a href="http://www.analyticsvidhya.com/blog/2015/08/common-machine-learning-algorithms/" target="_blank" rel="external">Essentials of Machine Learning Algorithms</a>,<br>国内有人翻译了，可以移步：<a href="http://blog.jobbole.com/92021/" target="_blank" rel="external">10 种机器学习算法的要点</a><br>]]>
    
    </summary>
    
      <category term="大数据" scheme="http://colobu.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Go开发一个 Slack 运维机器人]]></title>
    <link href="http://colobu.com/2015/11/04/create-a-slack-bot-with-golang/"/>
    <id>http://colobu.com/2015/11/04/create-a-slack-bot-with-golang/</id>
    <published>2015-11-04T04:31:01.000Z</published>
    <updated>2015-11-09T01:36:20.452Z</updated>
    <content type="html"><![CDATA[<p>受湾区日报的自动化机器人启发：<a href="https://wanqu.co/blog/2015-08-19-slack-hubot.html" target="_blank" rel="external">湾区日报的第一个“员工”：Slack/Hubot</a>， 我决定为自己的 side project 写一个自动化的slack运维机器人。</p>
<p><a href="http://uridb.com" target="_blank" rel="external">uriDB技术流</a>是一个搜集高质量技术文章的网站。主要是由爬虫到一些技术站点寻找关注度高的技术文章，以及一些技术聚合站点的高质量的文章，我也会发一些平常自己看到的技术文章。uriDB也允许用户注册发布文章。</p>
<p>因为这是自己的 side project, 我不会将精力全部放在这个项目上。 如果有一个机器人，可以方便的维护这个站点，那么可以极大减少我的工作量。</p>
<p>这个网站后台完全是由 Go 开发的，所以我还是想用Golang实现这个机器人，而没有采用<a href="https://hubot.github.com/" target="_blank" rel="external">hubot</a> + <a href="https://github.com/slackhq/hubot-slack" target="_blank" rel="external">hubot-slack</a>。</p>
<p>目前这个机器人实现了基本的功能：</p>
<ul>
<li>发表一个文章链接</li>
<li>修改文章的元数据</li>
<li>删除文章</li>
<li>分析一个文章链接</li>
</ul>
<p>有时间我会将服务器性能监控等功能加上。</p>
<a id="more"></a>
<h3 id="关于Slack">关于Slack</h3>
<p>Slack创始人是Stewart Butterfield，他在2009年创立游戏制作商Tiny Speck，之后联合创立了图片分享网站Flickr。13年他开始转型做Slack，这款产品13年8月内测，14年2月公测。2014年4月，正式推出不到三个月，Slack就已融资4275万美元。2014年10月，融资1.2亿美元，估值达11.2亿美元，成为了有史以来发展最快的 SaaS 公司。<br>本质上，Slack是一个企业内部沟通协作平台。提供了 Web 端，IOS 端和 Android 端的访问。</p>
<p>我们公司先前用hipchat,被<strong>comcast</strong>收购后开始改用slack。</p>
<p>Slack提供了机器人的功能，而且提供了清晰简单的API接口，这一点在实时通讯工具中值得称赞。人们可以使用各种语言实现各种各样的机器人和插件。你可以查看<a href="https://api.slack.com/community" target="_blank" rel="external">Community-built Integrations</a>，文章中列出了各种语言的插件和SDK。</p>
<p>我使用<a href="https://github.com/nlopes/slack" target="_blank" rel="external">nlopes/slack</a>来实现我的机器人。</p>
<p>第一步，你首先创建一个Team，并且加入到这个Team中。这是使用Slack的第一步。以后你可以直接访问http://<your team="">.slack.com登录到你的team中。</your></p>
<p>第二步，新建一个<a href="https://my.slack.com/services/new/bot" target="_blank" rel="external">bot user integration</a>。你需要为你的机器人起一个名字，比如我称我的机器人为 mybot。好像不支持中文，本来我想叫她&quot;小冰&quot;的。<br>可以为它指定头像，slack会为它生成一个 API Token。 这个API Token很重要， 以后访问slack API需要传入这个token。<br>slack提供乐意个简化的访问API的认证，你可以不使用oauth2的方式获取access token实现认证。而是直接获得api token访问API。<br>你也可以为你的普通登录用户生成full-access token，网址是: <a href="https://api.slack.com/web。" target="_blank" rel="external">https://api.slack.com/web。</a> </p>
<p>第三步，将你创建的bot加入到一个channel中。 比如我创建一个管理uridb网站的channel,将这个机器人邀请进来：<br><img src="1.png" alt=""></p>
<p>现在准备工作完成了。你可以在这个channel聊天了，但是这个机器人无动于衷，因为你还未实现它的逻辑。</p>
<h3 id="使用_Go_实现这个机器人">使用 Go 实现这个机器人</h3>
<p>创建一个 Go 项目， 并引入<a href="https://github.com/nlopes/slack" target="_blank" rel="external">nlopes/slack</a>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go get github.com/nlopes/slack</div></pre></td></tr></table></figure>

<p>这个库访问slack api超级简单， 如下面访问用户信息的代码：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line"></div><div class="line">    <span class="string">"github.com/nlopes/slack"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    api := slack.New(<span class="string">"YOUR_TOKEN_HERE"</span>)</div><div class="line">    user, err := api.GetUserInfo(<span class="string">"U023BECGF"</span>)</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        fmt.Printf(<span class="string">"%s\n"</span>, err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    }</div><div class="line">    fmt.Printf(<span class="string">"ID: %s, Fullname: %s, Email: %s\n"</span>, user.ID, user.Profile.RealName, user.Profile.Email)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>因为我们要机器人实时接受指令，需要访问 <a href="https://api.slack.com/rtm" target="_blank" rel="external">Real Time Messaging API</a>， 它是通过websocket实现。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/nlopes/slack"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	api := slack.New(<span class="string">"YOUR TOKEN HERE"</span>)</div><div class="line">	api.SetDebug(<span class="constant">true</span>)</div><div class="line"></div><div class="line">	rtm := api.NewRTM()</div><div class="line">	<span class="keyword">go</span> rtm.ManageConnection()</div><div class="line"></div><div class="line">Loop:</div><div class="line">	<span class="keyword">for</span> {</div><div class="line">		<span class="keyword">select</span> {</div><div class="line">		<span class="keyword">case</span> msg := &lt;-rtm.IncomingEvents:</div><div class="line">			fmt.Print(<span class="string">"Event Received: "</span>)</div><div class="line">			<span class="keyword">switch</span> ev := msg.Data.(<span class="keyword">type</span>) {</div><div class="line">			<span class="keyword">case</span> *slack.HelloEvent:</div><div class="line">				<span class="comment">// Ignore hello</span></div><div class="line"></div><div class="line">			<span class="keyword">case</span> *slack.ConnectedEvent:</div><div class="line">				fmt.Println(<span class="string">"Infos:"</span>, ev.Info)</div><div class="line">				fmt.Println(<span class="string">"Connection counter:"</span>, ev.ConnectionCount)</div><div class="line">				<span class="comment">// Replace #general with your Channel ID</span></div><div class="line">				rtm.SendMessage(rtm.NewOutgoingMessage(<span class="string">"Hello world"</span>, <span class="string">"#general"</span>))</div><div class="line"></div><div class="line">			<span class="keyword">case</span> *slack.MessageEvent:</div><div class="line">				fmt.Printf(<span class="string">"Message: %v\n"</span>, ev)</div><div class="line"></div><div class="line">			<span class="keyword">case</span> *slack.PresenceChangeEvent:</div><div class="line">				fmt.Printf(<span class="string">"Presence Change: %v\n"</span>, ev)</div><div class="line"></div><div class="line">			<span class="keyword">case</span> *slack.LatencyReport:</div><div class="line">				fmt.Printf(<span class="string">"Current latency: %v\n"</span>, ev.Value)</div><div class="line"></div><div class="line">			<span class="keyword">case</span> *slack.RTMError:</div><div class="line">				fmt.Printf(<span class="string">"Error: %s\n"</span>, ev.Error())</div><div class="line"></div><div class="line">			<span class="keyword">case</span> *slack.InvalidAuthEvent:</div><div class="line">				fmt.Printf(<span class="string">"Invalid credentials"</span>)</div><div class="line">				<span class="keyword">break</span> Loop</div><div class="line"></div><div class="line">			<span class="keyword">default</span>:</div><div class="line"></div><div class="line">				<span class="comment">// Ignore other events..</span></div><div class="line">				<span class="comment">// fmt.Printf("Unexpected: %v\n", msg.Data)</span></div><div class="line">			}</div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>最重要的是 <code>case *slack.MessageEvent:</code>，这里会接收到实时的消息。 我们可以判断消息是否来自我们定制的channel，以及指令是否是对机器人发出的：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">			<span class="keyword">case</span> *slack.MessageEvent:</div><div class="line">				<span class="keyword">if</span> ev.Channel == channelID && ev.Team == teamID {</div><div class="line">					msg := ev.Text					</div><div class="line">					</div><div class="line">					sendToMyBot := checkMessage(msg)</div><div class="line">					</div><div class="line">					<span class="keyword">if</span> sendToMyBot {</div><div class="line">						<span class="keyword">go</span> handleCommand(msg)</div><div class="line">					}</div><div class="line"></div><div class="line">				}</div><div class="line">...</div></pre></td></tr></table></figure>

<p>剩下的逻辑就是你去实现<code>handleCommand</code>，你可以实现各种各样的命令,如:<br><a rel="external" href="http://colobu.com/2015/11/04/create-a-slack-bot-with-golang/2.png" title="" class="fancybox" target="_blank"><img data-bd-imgshare-binded="1" src="2.png" alt="" width="400px"></a><br><br><br><br><a rel="external" href="http://colobu.com/2015/11/04/create-a-slack-bot-with-golang/3.png" title="" class="fancybox" target="_blank"><img data-bd-imgshare-binded="1" src="3.png" alt="" width="400px"></a></p>
<p>BTW:<br>增加了一个邪恶的功能，可以通过它远程执行linux命令，这样就可以运行命令查看服务器的状态，但是这个后门有点危险。<br><img src="4.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>受湾区日报的自动化机器人启发：<a href="https://wanqu.co/blog/2015-08-19-slack-hubot.html" target="_blank" rel="external">湾区日报的第一个“员工”：Slack/Hubot</a>， 我决定为自己的 side project 写一个自动化的slack运维机器人。</p>
<p><a href="http://uridb.com" target="_blank" rel="external">uriDB技术流</a>是一个搜集高质量技术文章的网站。主要是由爬虫到一些技术站点寻找关注度高的技术文章，以及一些技术聚合站点的高质量的文章，我也会发一些平常自己看到的技术文章。uriDB也允许用户注册发布文章。</p>
<p>因为这是自己的 side project, 我不会将精力全部放在这个项目上。 如果有一个机器人，可以方便的维护这个站点，那么可以极大减少我的工作量。</p>
<p>这个网站后台完全是由 Go 开发的，所以我还是想用Golang实现这个机器人，而没有采用<a href="https://hubot.github.com/" target="_blank" rel="external">hubot</a> + <a href="https://github.com/slackhq/hubot-slack" target="_blank" rel="external">hubot-slack</a>。</p>
<p>目前这个机器人实现了基本的功能：</p>
<ul>
<li>发表一个文章链接</li>
<li>修改文章的元数据</li>
<li>删除文章</li>
<li>分析一个文章链接</li>
</ul>
<p>有时间我会将服务器性能监控等功能加上。</p>
]]>
    
    </summary>
    
      <category term="go" scheme="http://colobu.com/tags/go/"/>
    
      <category term="slack" scheme="http://colobu.com/tags/slack/"/>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在 Linux 上如何清除内存的 Cache、Buffer 和交换空间]]></title>
    <link href="http://colobu.com/2015/10/31/How-to-Clear-RAM-Memory-Cache-Buffer-and-Swap-Space-on-Linux/"/>
    <id>http://colobu.com/2015/10/31/How-to-Clear-RAM-Memory-Cache-Buffer-and-Swap-Space-on-Linux/</id>
    <published>2015-10-31T13:09:20.000Z</published>
    <updated>2015-10-31T13:30:33.911Z</updated>
    <content type="html"><![CDATA[<p>英文原文: <a href="http://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/" target="_blank" rel="external">How to Clear RAM Memory Cache, Buffer and Swap Space on Linux</a>,<br>中文翻译: <a href="https://linux.cn/article-5627-1.html" target="_blank" rel="external">在 Linux 上如何清除内存的 Cache、Buffer 和交换空间</a> by strugglingyouth<br>像任何其他的操作系统一样，GNU/Linux 已经实现的内存管理不仅有效，而且更好。但是，如果有任何进程正在蚕食你的内存，而你想要清除它的话，Linux 提供了一个刷新或清除RAM缓存方法。<br><img src="http://www.tecmint.com/wp-content/uploads/2015/05/Clear-RAM-Cache-in-Linux.jpg" alt=""><br><a id="more"></a></p>
<h3 id="如何在_Linux_中清除缓存（Cache）？">如何在 Linux 中清除缓存（Cache）？</h3>
<p>每个 Linux 系统有三种选项来清除缓存而不需要中断任何进程或服务。<br>（LCTT 译注：Cache，译作“缓存”，指 CPU 和内存之间高速缓存。Buffer，译作“缓冲区”，指在写入磁盘前的存储再内存中的内容。在本文中，Buffer 和 Cache 有时候会通指。）</p>
<ol>
<li>仅清除页面缓存（PageCache）</li>
</ol>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># sync; echo 1 &gt; /proc/sys/vm/drop_caches</span></div></pre></td></tr></table></figure>

<ol>
<li>清除目录项和inode</li>
</ol>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># sync; echo 2 &gt; /proc/sys/vm/drop_caches</span></div></pre></td></tr></table></figure>

<ol>
<li>清除页面缓存，目录项和inode</li>
</ol>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># sync; echo 3 &gt; /proc/sys/vm/drop_caches</span></div></pre></td></tr></table></figure>

<p>上述命令的说明：<br><code>sync</code>将刷新文件系统缓冲区（buffer），命令通过“;”分隔，顺序执行，shell在执行序列中的下一个命令之前会等待命令的终止。正如内核文档中提到的，写入到drop_cache将清空缓存而不会杀死任何应用程序/服务，<a href="http://www.tecmint.com/echo-command-in-linux/" target="_blank" rel="external">echo命令</a>做写入文件的工作。</p>
<p>如果你必须清除磁盘高速缓存，第一个命令在企业和生产环境中是最安全，&quot;...echo 1&gt; ...&quot;只会清除页面缓存。 在生产环境中不建议使用上面的第三个选项&quot;...echo 3 &gt; ...&quot; ，除非你明确自己在做什么，因为它会清除缓存页，目录项和inodes。</p>
<h4 id="在Linux上释放也许被内核所使用的缓冲区（Buffer）和缓存（Cache）是否是个好主意？">在Linux上释放也许被内核所使用的缓冲区（Buffer）和缓存（Cache）是否是个好主意？</h4>
<p>当你设置许多设定想要检查效果时，如果它实际上是专门针对 I/O 范围的基准测试，那么你可能需要清除缓冲区和缓存。你可以如上所示删除缓存，无需重新启动系统（即无需停机）。</p>
<p>Linux被设计成它在寻找磁盘之前到磁盘缓存寻找的方式。如果它发现该资源在缓存中，则该请求不会发送到磁盘。如果我们清理缓存，磁盘缓存就起不到作用了，系统会到磁盘上寻找资源。</p>
<p>此外，当清除缓存后它也将减慢系统运行速度，系统会将每一个被请求的资源再次加载到磁盘缓存中。</p>
<p>现在，我们将创建一个 shell 脚本，通过一个 cron 调度任务在每天下午2点自动清除RAM缓存。如下创建一个 shell 脚本 <em>clearcache.sh </em>并在其中添加以下行：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"><span class="comment"># 注意，我们这里使用了 "echo 3"，但是不推荐使用在产品环境中，应该使用 "echo 1"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"echo 3 &gt; /proc/sys/vm/drop_caches"</span></div></pre></td></tr></table></figure>

<p>给<em>clearcache.sh</em>文件设置执行权限</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># chmod 755 clearcache.sh</span></div></pre></td></tr></table></figure>

<p>现在，当你需要清除内存缓存时只需要调用脚本。</p>
<p>现在设置一个每天下午2点的定时任务来清除RAM缓存，打开crontab进行编辑。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># crontab -e</span></div></pre></td></tr></table></figure>

<p>添加以下行，保存并退出。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span> <span class="number">3</span> * * * /path/to/clearcache.sh</div></pre></td></tr></table></figure>

<p>有关如何创建一个定时任务，更多细节你可以查看我们的文章 <a href="http://www.tecmint.com/11-cron-scheduling-task-examples-in-linux/" target="_blank" rel="external">11 个定时调度任务的例子</a>。</p>
<h4 id="在生产环境的服务器上自动清除RAM是否是一个好主意？">在生产环境的服务器上自动清除RAM是否是一个好主意？</h4>
<p>不！它不是。想想一个情况，当你已经预定脚本在每天下午2点来清除内存缓存。那么其时该脚本会执行并刷新你的内存缓存。在某一天由于某些原因，可能您的网站的在线用户会超过预期地从你的服务器请求资源。</p>
<p>而在这时，按计划调度的脚本运行了，并清除了缓存中的一切。当所有的用户都从磁盘读取数据时，这将导致服务器崩溃并损坏数据库。因此，清除缓存仅在必要时并且在你的预料之中，否则你就是个呆瓜系统管理员。</p>
<h3 id="如何清除Linux的交换空间？">如何清除Linux的交换空间？</h3>
<p>如果你想清除掉Swap空间，你可以运行下面的命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># swapoff -a && swapon -a</span></div></pre></td></tr></table></figure>

<p>此外，了解有关风险后，您可以将上面的命令添加到cron中。</p>
<p>现在，我们将上面两种命令结合成一个命令，写成正确的脚本来同时清除RAM缓存和交换空间。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># echo 3 &gt; /proc/sys/vm/drop_caches && swapoff -a && swapon -a && printf '\n%s\n' 'Ram-cache and Swap Cleared'</span></div></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su -c 'echo <span class="number">3</span> &gt; /<span class="keyword">proc</span>/sys/vm/drop_caches' && swapoff -a && swapon -a && printf '\n%s\n' '<span class="type">Ram</span>-cache <span class="keyword">and</span> <span class="type">Swap</span> <span class="type">Cleared</span>'</div></pre></td></tr></table></figure>

<p>在测试上面的命令之前，我们在执行脚本前后运行“free -m” 来检查缓存。<br>就是这样，如果你喜欢这篇文章，不要忘记向我们提供您宝贵的意见，让我们知道，您认为在企业和生产环境中清除内存缓存和缓冲区是否是一个好主意？</p>
<p><img src="http://www.tecmint.com/wp-content/uploads/2015/05/Clear-RAM-Cache.gif" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>英文原文: <a href="http://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/" target="_blank" rel="external">How to Clear RAM Memory Cache, Buffer and Swap Space on Linux</a>,<br>中文翻译: <a href="https://linux.cn/article-5627-1.html" target="_blank" rel="external">在 Linux 上如何清除内存的 Cache、Buffer 和交换空间</a> by strugglingyouth<br>像任何其他的操作系统一样，GNU/Linux 已经实现的内存管理不仅有效，而且更好。但是，如果有任何进程正在蚕食你的内存，而你想要清除它的话，Linux 提供了一个刷新或清除RAM缓存方法。<br><img src="http://www.tecmint.com/wp-content/uploads/2015/05/Clear-RAM-Cache-in-Linux.jpg" alt=""><br>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://colobu.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[怎样在后台模式中登录一个docker容器的bash?]]></title>
    <link href="http://colobu.com/2015/10/30/How-to-get-bash-or-ssh-into-a-running-container-in-background-mode/"/>
    <id>http://colobu.com/2015/10/30/How-to-get-bash-or-ssh-into-a-running-container-in-background-mode/</id>
    <published>2015-10-30T02:22:15.000Z</published>
    <updated>2015-10-30T02:30:52.235Z</updated>
    <content type="html"><![CDATA[<p><a href="">Ask Ubuntu</a>上有人问怎么能login或者ssh一个运行的docker容器。<br>例如</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker run <span class="operator">-d</span> webserver</div><div class="line">webserver is clean image from ubuntu:<span class="number">14.04</span></div><div class="line">$ <span class="built_in">sudo</span> docker ps</div><div class="line">CONTAINER ID  IMAGE            COMMAND    CREATED STATUS  PORTS          NAMES</div><div class="line"><span class="number">665</span>b4a1e17b6  webserver:latest /bin/bash  ...     ...     <span class="number">22</span>/tcp, <span class="number">80</span>/tcp loving_heisenberg</div></pre></td></tr></table></figure>

<p>想进行这样的登录:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker run -t -i webserver (or maybe <span class="number">665</span>b4a1e17b6 instead)</div><div class="line">$ root@<span class="number">665</span>b4a1e17b6:/<span class="comment"># </span></div><div class="line">However when I run the line above I get new CONTAINER ID</div><div class="line">$ root@<span class="number">42</span>f1e37bd0e5:/<span class="comment">#</span></div></pre></td></tr></table></figure>

<a id="more"></a>
<p>答案是 <a href="https://docs.docker.com/reference/commandline/attach/" target="_blank" rel="external">attach</a>或者最新的<a href="https://docs.docker.com/reference/commandline/exec/" target="_blank" rel="external">exec</a></p>
<p>The answer is docker&#39;s <code>attach</code> command. So for my example above the solution will:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker attach <span class="number">665</span>b4a1e17b6 <span class="comment">#by ID</span></div><div class="line">or</div><div class="line">$ <span class="built_in">sudo</span> docker attach loving_heisenberg <span class="comment">#by Name</span></div><div class="line">$ root@<span class="number">665</span>b4a1e17b6:/<span class="comment">#</span></div></pre></td></tr></table></figure>

<p><strong>UPDATE: (docker &gt;= 1.3)</strong> Thanks to <strong>WiR3D</strong> user who suggested another way to get container&#39;s shell. If we use attach we can use only one instance of shell. So if we want open new terminal with new instance of container&#39;s shell, we just need run the following:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker <span class="keyword">exec</span> -i -t <span class="number">665</span>b4a1e17b6 bash <span class="comment">#by ID</span></div><div class="line">or</div><div class="line">$ <span class="built_in">sudo</span> docker <span class="keyword">exec</span> -i -t loving_heisenberg bash <span class="comment">#by Name</span></div><div class="line">$ root@<span class="number">665</span>b4a1e17b6:/<span class="comment">#</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p><a href="">Ask Ubuntu</a>上有人问怎么能login或者ssh一个运行的docker容器。<br>例如</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker run <span class="operator">-d</span> webserver</div><div class="line">webserver is clean image from ubuntu:<span class="number">14.04</span></div><div class="line">$ <span class="built_in">sudo</span> docker ps</div><div class="line">CONTAINER ID  IMAGE            COMMAND    CREATED STATUS  PORTS          NAMES</div><div class="line"><span class="number">665</span>b4a1e17b6  webserver:latest /bin/bash  ...     ...     <span class="number">22</span>/tcp, <span class="number">80</span>/tcp loving_heisenberg</div></pre></td></tr></table></figure>

<p>想进行这样的登录:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">sudo</span> docker run -t -i webserver (or maybe <span class="number">665</span>b4a1e17b6 instead)</div><div class="line">$ root@<span class="number">665</span>b4a1e17b6:/<span class="comment"># </span></div><div class="line">However when I run the line above I get new CONTAINER ID</div><div class="line">$ root@<span class="number">42</span>f1e37bd0e5:/<span class="comment">#</span></div></pre></td></tr></table></figure>

]]>
    
    </summary>
    
      <category term="Docker" scheme="http://colobu.com/tags/Docker/"/>
    
      <category term="Docker" scheme="http://colobu.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动H5前端性能优化指南]]></title>
    <link href="http://colobu.com/2015/10/30/h5-performance/"/>
    <id>http://colobu.com/2015/10/30/h5-performance/</id>
    <published>2015-10-30T01:53:50.000Z</published>
    <updated>2015-10-30T02:10:03.938Z</updated>
    <content type="html"><![CDATA[<p>腾讯出品的前端性能优化指南： <a href="http://isux.tencent.com/h5-performance.html" target="_blank" rel="external">原文</a>,<br>另外比较知名的很早的一篇前端优化规则是Yahoo出品的，现在依然有效。 <a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="external">Best Practices for Speeding Up Your Web Site</a>, 中文<a href="http://segmentfault.com/a/1190000000735395" target="_blank" rel="external">Yahoo前端优化性能规则</a></p>
<p>以下是腾讯的移动h5前端性能优化指南全文：<br><a id="more"></a><br><img src="html5.png" alt=""></p>
<h2 id="概述">概述</h2>
<ol>
<li>PC优化手段在Mobile侧同样适用</li>
<li>在Mobile侧我们提出<strong>三秒种渲染完成首屏指标</strong></li>
<li>基于第二点，首屏加载3秒完成或使用Loading</li>
<li>基于联通3G网络平均338KB/s(2.71Mb/s)，所以<strong>首屏资源不应超过1014KB</strong></li>
<li>Mobile侧因手机配置原因，除加载外渲染速度也是优化重点</li>
<li>基于第五点，要合理处理代码减少渲染损耗</li>
<li>基于第二、第五点，<strong>所有影响首屏加载和渲染的代码应在处理逻辑中后置</strong></li>
<li>加载完成后用户交互使用时也需注意性能</li>
</ol>
<h2 id="优化指南">优化指南</h2>
<h3 id="加载优化">加载优化</h3>
<p>加载过程是最为耗时的过程，可能会占到总耗时的80%时间，因此是优化的重点</p>
<h4 id="减少HTTP请求">减少HTTP请求</h4>
<p>因为手机浏览器同时响应请求为4个请求（Android支持4个，iOS 5后可支持6个），所以要尽量减少页面的请求数，首次加载同时请求数不能超过4个<br>a) 合并CSS、JavaScript<br>b) 合并小图片，使用雪碧图</p>
<h4 id="缓存">缓存</h4>
<p>使用缓存可以减少向服务器的请求数，节省加载时间，所以所有静态资源都要在服务器端设置缓存，并且尽量使用长Cache（长Cache资源的更新可使用时间戳）<br>a) 缓存一切可缓存的资源<br>b) 使用长Cache（使用时间戳更新Cache）<br>c) 使用外联式引用CSS、JavaScript</p>
<h4 id="压缩HTML、CSS、JavaScript">压缩HTML、CSS、JavaScript</h4>
<p>减少资源大小可以加快网页显示速度，所以要对HTML、CSS、JavaScript等进行代码压缩，并在服务器端设置GZip<br>a) 压缩（例如，多余的空格、换行符和缩进）<br>b) 启用GZip</p>
<h4 id="无阻塞">无阻塞</h4>
<p>写在HTML头部的JavaScript（无异步），和写在HTML标签中的Style会阻塞页面的渲染，因此CSS放在页面头部并使用Link方式引入，避免在HTML标签中写Style，JavaScript放在页面尾部或使用异步方式加载</p>
<h4 id="使用首屏加载">使用首屏加载</h4>
<p>首屏的快速显示，可以大大提升用户对页面速度的感知，因此应尽量针对首屏的快速显示做优化</p>
<h4 id="按需加载">按需加载</h4>
<p>将不影响首屏的资源和当前屏幕资源不用的资源放到用户需要时才加载，可以大大提升重要资源的显示速度和降低总体流量<br>PS：按需加载会导致大量重绘，影响渲染性能<br>a) LazyLoad<br>b) 滚屏加载<br>c) 通过Media Query加载</p>
<h4 id="预加载">预加载</h4>
<p>大型重资源页面（如游戏）可使用增加Loading的方法，资源加载完成后再显示页面。但Loading时间过长，会造成用户流失<br>对用户行为分析，可以在当前页加载下一页资源，提升速度<br>a) 可感知Loading(如进入空间游戏的Loading)<br>b) 不可感知的Loading（如提前加载下一页）</p>
<h4 id="压缩图片">压缩图片</h4>
<p>图片是最占流量的资源，因此尽量避免使用他，使用时选择最合适的格式（实现需求的前提下，以大小判断），合适的大小，然后使用智图压缩，同时在代码中用Srcset来按需显示<br>PS：过度压缩图片大小影响图片显示效果<br>a) 使用智图（ <a href="http://zhitu.tencent.com/" target="_blank" rel="external">http://zhitu.tencent.com/</a> ）<br>b) 使用其它方式代替图片(1. 使用CSS3 2. 使用SVG 3. 使用IconFont)<br>c) 使用Srcset<br>d) 选择合适的图片(1. webP优于JPG 2. PNG8优于GIF)<br>e) 选择合适的大小（1. 首次加载不大于1014KB 2. 不宽于640（基于手机屏幕一般宽度））</p>
<h4 id="减少Cookie">减少Cookie</h4>
<p>Cookie会影响加载速度，所以静态资源域名不使用Cookie</p>
<h4 id="避免重定向">避免重定向</h4>
<p>重定向会影响加载速度，所以在服务器正确设置避免重定向</p>
<h4 id="异步加载第三方资源">异步加载第三方资源</h4>
<p>第三方资源不可控会影响页面的加载和显示，因此要异步加载第三方资源</p>
<h3 id="脚本执行优化">脚本执行优化</h3>
<p>脚本处理不当会阻塞页面加载、渲染，因此在使用时需当注意</p>
<h4 id="CSS写在头部，JavaScript写在尾部或异步">CSS写在头部，JavaScript写在尾部或异步</h4>
<h4 id="避免图片和iFrame等的空Src">避免图片和iFrame等的空Src</h4>
<p>空Src会重新加载当前页面，影响速度和效率</p>
<h4 id="尽量避免重设图片大小">尽量避免重设图片大小</h4>
<p>重设图片大小是指在页面、CSS、JavaScript等中多次重置图片大小，多次重设图片大小会引发图片的多次重绘，影响性能</p>
<h4 id="图片尽量避免使用DataURL">图片尽量避免使用DataURL</h4>
<p>DataURL图片没有使用图片的压缩算法文件会变大，并且要解码后再渲染，加载慢耗时长</p>
<h3 id="CSS优化">CSS优化</h3>
<h4 id="尽量避免写在HTML标签中写Style属性">尽量避免写在HTML标签中写Style属性</h4>
<h4 id="避免CSS表达式">避免CSS表达式</h4>
<p>CSS表达式的执行需跳出CSS树的渲染，因此请避免CSS表达式</p>
<h4 id="移除空的CSS规则">移除空的CSS规则</h4>
<p>空的CSS规则增加了CSS文件的大小，且影响CSS树的执行，所以需移除空的CSS规则</p>
<h4 id="正确使用Display的属性">正确使用Display的属性</h4>
<p>Display属性会影响页面的渲染，因此请合理使用<br>a) display:inline后不应该再使用width、height、margin、padding以及float<br>b) display:inline-block后不应该再使用float<br>c) display:block后不应该再使用vertical-align<br>d) display:table-*后不应该再使用margin或者float</p>
<h4 id="不滥用Float">不滥用Float</h4>
<p>Float在渲染时计算量比较大，尽量减少使用</p>
<h4 id="不滥用Web字体">不滥用Web字体</h4>
<p>Web字体需要下载，解析，重绘当前页面，尽量减少使用</p>
<h4 id="不声明过多的Font-size">不声明过多的Font-size</h4>
<p>过多的Font-size引发CSS树的效率</p>
<h4 id="值为0时不需要任何单位">值为0时不需要任何单位</h4>
<p>为了浏览器的兼容性和性能，值为0时不要带单位</p>
<h4 id="标准化各种浏览器前缀">标准化各种浏览器前缀</h4>
<p>a) 无前缀应放在最后<br>b) CSS动画只用 （-webkit- 无前缀）两种即可<br>c) 其它前缀为 -webkit- -moz- -ms- 无前缀 四种，（-o-Opera浏览器改用blink内核，所以淘汰）</p>
<h4 id="避免让选择符看起来像正则表达式">避免让选择符看起来像正则表达式</h4>
<p>高级选择器执行耗时长且不易读懂，避免使用</p>
<h3 id="JavaScript执行优化">JavaScript执行优化</h3>
<h4 id="减少重绘和回流">减少重绘和回流</h4>
<p>a) 避免不必要的Dom操作<br>b) 尽量改变Class而不是Style，使用classList代替className<br>c) 避免使用document.write<br>d) 减少drawImage</p>
<h4 id="缓存Dom选择与计算">缓存Dom选择与计算</h4>
<p>每次Dom选择都要计算，缓存他</p>
<h4 id="缓存列表-length">缓存列表.length</h4>
<p>每次.length都要计算，用一个变量保存这个值</p>
<h4 id="尽量使用事件代理，避免批量绑定事件">尽量使用事件代理，避免批量绑定事件</h4>
<h4 id="尽量使用ID选择器">尽量使用ID选择器</h4>
<p>ID选择器是最快的</p>
<h4 id="TOUCH事件优化">TOUCH事件优化</h4>
<p>使用touchstart、touchend代替click，因快影响速度快。但应注意Touch响应过快，易引发误操作</p>
<h3 id="渲染优化">渲染优化</h3>
<h4 id="HTML使用Viewport">HTML使用Viewport</h4>
<p>Viewport可以加速页面的渲染，请使用以下代码</p>
<meta name="”viewport”" content="”width=device-width," initial-scale="1″">

<h4 id="减少Dom节点">减少Dom节点</h4>
<p>Dom节点太多影响页面的渲染，应尽量减少Dom节点</p>
<h4 id="动画优化">动画优化</h4>
<p>a) 尽量使用CSS3动画<br>b) 合理使用requestAnimationFrame动画代替setTimeout<br>c) 适当使用Canvas动画 5个元素以内使用css动画，5个以上使用Canvas动画（iOS8可使用webGL）</p>
<h4 id="高频事件优化">高频事件优化</h4>
<p>Touchmove、Scroll 事件可导致多次渲染<br>a) 使用requestAnimationFrame监听帧变化，使得在正确的时间进行渲染<br>b) 增加响应变化的时间间隔，减少重绘次数</p>
<h4 id="GPU加速">GPU加速</h4>
<p>CSS中以下属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）来触发GPU渲染，请合理使用<br>PS：过渡使用会引发手机过耗电增加</p>
<p><strong>参考资料</strong></p>
<ul><br><li><a target="_blank" href="http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201412/293834.shtml">移动页面性能优化</a></li><br><li><a target="_blank" href="https://github.com/cssmagic/blog/issues/20">[译]&nbsp;如何做到一秒渲染一个移动页面</a></li><br><li><a target="_blank" href="http://lists.w3.org/Archives/Public/public-html-ig-zh/2014May/0005.html">首屏渲染优化提案反馈（原：Re:&nbsp;答复:&nbsp;中文兴趣小组5月5日电话会议）</a></li><br><li><a target="_blank" href="http://isux.tencent.com/html5-game-development-cheats.html">HTML5游戏前端开发秘籍</a></li><br><li><a target="_blank" href="http://isux.tencent.com/emancipate-gpu.html">被解放的GPU</a></li><br><li><a target="_blank" href="http://s5s5.github.io/CSS-Animations/">CSS动画</a></li><br><li><a target="_blank" href="http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/">High Performance Animations</a></li><br><li><a target="_blank" href="https://developers.google.com/speed/docs/insights/rules">PageSpeed Insights规则</a></li><br><li><a target="_blank" href="https://developer.yahoo.com/performance/rules.html">Best Practices for Speeding Up Your Web Site</a></li><br><li><a target="_blank" href="http://browserdiet.com/en/">How to lose weight (in the browser)</a></li><br><li><a target="_blank" href="http://nomospace.github.io/posts/css-lint.html">关注&nbsp;CSS Lint</a></li><br><li><a target="_blank" href="http://blog.91gaoqing.com/archives/146.html">HTML5应用开发功耗调优化小结</a></li><br><li><a target="_blank" href="http://blog.csdn.net/milado_nju/article/details/39271463">理解WebKit和Chromium: Chromium WebView和Chrome浏览器渲染机制</a></li><br><li><a target="_blank" href="https://developers.google.com/web/fundamentals/performance/">Optimizing Performance — Web Fundamentals</a></li><br><li><a target="_blank" href="http://www.w3cfuns.com/article-5601016-1-1.html">移动前端工作的那些事—前端制作之动画效率问题简析</a></li><br><li><a target="_blank" href="http://www.sitepoint.com/optimizing-critical-rendering-path/">Optimizing the Critical Rendering Path</a></li><br><li><a target="_blank" href="http://fex.baidu.com/blog/2014/05/build-performance-monitor-in-7-days/">7&nbsp;天打造前端性能监控系统</a></li><br><li><a target="_blank" href="http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201411/291773.shtml">数据驱动设计</a></li><br><li><a target="_blank" href="http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201404/258325.shtml">为你的移动页面寻找一丝新意（技术篇）——手机互动网页项目总结（下）</a></li><br><li><a target="_blank" href="http://www.imageoptimization.info/">Image Optimization</a></li><br><li><a target="_blank" href="http://www.cnblogs.com/yexiaochai/p/3759959.html">[webapp的优化整理]要做移动前端优化的朋友进来看看吧</a></li><br><li><a target="_blank" href="http://www.egret-labs.org/blog/3097.html">Egret Framework Canvas Renderer性能优化</a></li><br><li><a target="_blank" href="http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/">Roundup on Parallel Connections</a></li><br><li><a target="_blank" href="http://www.speedtest.cn/info/2014-8th">2014年第二季度全国网速实测报告</a></li><br></ul>]]></content>
    <summary type="html">
    <![CDATA[<p>腾讯出品的前端性能优化指南： <a href="http://isux.tencent.com/h5-performance.html" target="_blank" rel="external">原文</a>,<br>另外比较知名的很早的一篇前端优化规则是Yahoo出品的，现在依然有效。 <a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="external">Best Practices for Speeding Up Your Web Site</a>, 中文<a href="http://segmentfault.com/a/1190000000735395" target="_blank" rel="external">Yahoo前端优化性能规则</a></p>
<p>以下是腾讯的移动h5前端性能优化指南全文：<br>]]>
    
    </summary>
    
      <category term="html5" scheme="http://colobu.com/tags/html5/"/>
    
      <category term="前端开发" scheme="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于Golang将MongoDB的数据同步到Elasticsearch]]></title>
    <link href="http://colobu.com/2015/10/27/Sync-Transformed-Data-from-MongoDB-to-Elasticsearch/"/>
    <id>http://colobu.com/2015/10/27/Sync-Transformed-Data-from-MongoDB-to-Elasticsearch/</id>
    <published>2015-10-27T08:49:45.000Z</published>
    <updated>2015-10-30T03:26:15.212Z</updated>
    <content type="html"><![CDATA[<p><a href="https://www.elastic.co/" target="_blank" rel="external">Elasticsearch</a>是一个分布式可扩展的实时搜索和分析引擎。它能帮助你搜索、分析和浏览数据。Elasticsearch 是一个基于Lucene实现的搜索服务器，用Java开发实现。它提供了RESTful web接口，并作为Apache许可条款下的开放源码发布，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p>
<p>Elasticsearch关键概念</p>
<p><dl></dl></p>
<p><dt>Cluster集群</dt></p>
<dd>有相同集群名称的节点Node的集合。集群中有多个节点，其中有一个为主节点，这个主节点是可以通过选举产生的，主从节点是对于集群内部来说的。es的一个概念就是去中心化，字面上理解就是无中心节点，这是对于集群外部来说的，因为从外部来看es集群，在逻辑上是个整体，你与任何一个节点的通信和与整个es集群通信是等价的。</dd><br><br><dt>Cluster集群</dt><br><dd></dd><br><dt>Node节点</dt><br><dd>一个elasticsearch运行的实例。其实就是一个java进程。一般情况下，一台机器运行在一台机器上。</dd><br><dt>Shards分片</dt><br><dd>代表索引分片，es可以把一个完整的索引分成多个分片，这样的好处是可以把一个大的索引拆分成多个，分布到不同的节点上。构成分布式搜索。分片的数量只能在索引创建前指定，并且索引创建后不能更改。</dd><br><dt>Replicas副本</dt><br><dd>代表索引副本，es可以设置多个索引的副本，副本的作用一是提高系统的容错性，当某个节点某个分片损坏或丢失时可以从副本中恢复。二是提高es的查询效率，es会自动对搜索请求进行负载均衡。</dd><br><dt>Recovery恢复</dt><br><dd>代表数据恢复或叫数据重新分布，es在有节点加入或退出时会根据机器的负载对索引分片进行重新分配，挂掉的节点重新启动时也会进行数据恢复。</dd><br><dt>River</dt><br><dd>代表es的一个数据源，也是其它存储方式（如：数据库）同步数据到es的一个方法。它是以插件方式存在的一个es服务，通过读取river中的数据并把它索引到es中，官方的river有couchDB的，RabbitMQ的，Twitter的，Wikipedia的。River在1.5中弃用了，2.0中移除了。</dd><br><dt>Gateway</dt><br><dd>代表es索引快照的存储方式，es默认是先把索引存放到内存中，当内存满了时再持久化到本地硬盘。gateway对索引快照进行存储，当这个es集群关闭再重新启动时就会从gateway中读取索引备份数据。es支持多种类型的gateway，有本地文件系统（默认），分布式文件系统，Hadoop的HDFS和amazon的s3云存储服务。</dd><br><dt>Discovery.zen</dt><br><dd>代表es的自动发现节点机制，es是一个基于p2p的系统，它先通过广播寻找存在的节点，再通过多播协议来进行节点之间的通信，同时也支持点对点的交互。</dd><br><dt>Transport</dt><br><dd>代表es内部节点或集群与客户端的交互方式，默认内部是使用tcp协议进行交互，同时它支持http协议（json格式）、thrift、servlet、memcached、zeroMQ等的传输协议（通过插件方式集成）。</dd><br><dt>Index索引</dt><br><dd>Elasticsearch用来存储数据的逻辑区域，它类似于关系型数据库中的table概念。一个index可以在一个或者多个shard上面，同时一个shard也可能会有多个replicas。</dd><br><dt>Document</dt><br><dd>Elasticsearch里面存储的实体数据，类似于关系数据中一个table里面的一行数据。 document由多个field组成，不同的document里面同名的field一定具有相同的类型。document里面field可以重复出现，也就是一个field会有多个值，即multivalued。</dd><br><dt>Document type</dt><br><dd>为了查询需要，一个index可能会有多种document，也就是document type，但需要注意，不同document里面同名的field一定要是相同类型的。</dd><br><dt>Mapping</dt><br><dd>存储field的相关映射信息，不同document type会有不同的mapping。</dd>

<a id="more"></a>
<p>本文不是介绍Elasticsearch的安装配置文档，这些文档你可以在本文的参考资料中获得， 而是笔者在项目中的实践笔记。<br>我最近在开发过程中需要将Mongo数据库中的文章进行索引， 避免直接对Mongo数据库进行搜索导致的性能降低。基于Elasticsearch的手册的描述，以及在一些大公司如twitter的应用的经验，我选用它作为现在的项目的索引服务器。</p>
<p>现在的项目是Golang语言实现的，所以我调研的目标放在了Golang + MongoDB + Elasticsearch上面。</p>
<p><a href="https://github.com/richardwilly98/elasticsearch-river-mongodb" target="_blank" rel="external">elasticsearch-river-mongodb</a>是一个针对Mongo的elasticsearch river的插件。它从Mongo oplog中读取信息，将Mongo集群中的数据导入到 elasticsearch 中。考虑到river被弃用，暂时不考虑这个方案。</p>
<p>mandeepm91在文章 <a href="https://www.digitalocean.com/community/tutorials/how-to-sync-transformed-data-from-mongodb-to-elasticsearch-with-transporter-on-ubuntu-14-04" target="_blank" rel="external">How To Sync Transformed Data from MongoDB to Elasticsearch with Transporter on Ubuntu 14.04</a>提到了另外一个工具 <a href="https://github.com/compose/transporter" target="_blank" rel="external">Transporter</a>,这是一个相当好的工具，可以抽取Mongo单例或者Mongo集群的数据，然后使用<a href="https://github.com/robertkrimen/otto" target="_blank" rel="external">otto框架</a>进行Javascript处理，而且处理是通道式的。在调研中很容易的将Mongo数据库导入到Elasticsearch。</p>
<p>不过我也没有采用这个方案。因为我的项目中，对文章的增删改的动作比较少，可以直接调用Elasticsearch的API进行操作。而且这样可以做到数据的实时索引和查询。</p>
<p>上面的方案多少会影响服务器的性能，有可能会block在Elasticsearch的API调用上。 所以我在增删改文章时，将操作命令的log放入到一个消息服务器中(<a href="https://github.com/nsqio/nsq" target="_blank" rel="external">nsq</a>或者<a href="http://kafka.apache.org/" target="_blank" rel="external">kafka</a>)，然后在单独的一台服务器上接收消息并调用Elasticsearch的API。</p>
<h3 id="参考资料">参考资料</h3>
<ol>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-sync-transformed-data-from-mongodb-to-elasticsearch-with-transporter-on-ubuntu-14-04" target="_blank" rel="external">https://www.digitalocean.com/community/tutorials/how-to-sync-transformed-data-from-mongodb-to-elasticsearch-with-transporter-on-ubuntu-14-04</a></li>
<li><a href="https://github.com/compose/transporter" target="_blank" rel="external">https://github.com/compose/transporter</a></li>
<li><a href="http://www.learnes.net/" target="_blank" rel="external">Elasticsearch 权威指南</a></li>
<li><a href="https://www.gitbook.com/book/endymecy/elasticsearch-guide-chinese/details" target="_blank" rel="external">elasticsearch中文指南</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/_empty_search.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/guide/current/_empty_search.html</a></li>
<li><a href="https://github.com/mattbaird/elastigo" target="_blank" rel="external">https://github.com/mattbaird/elastigo</a></li>
<li><a href="https://github.com/olivere/elastic" target="_blank" rel="external">https://github.com/olivere/elastic</a></li>
<li><a href="https://github.com/richardwilly98/elasticsearch-river-mongodb" target="_blank" rel="external">https://github.com/richardwilly98/elasticsearch-river-mongodb</a></li>
<li><a href="http://baike.baidu.com/item/elasticsearch" target="_blank" rel="external">http://baike.baidu.com/item/elasticsearch</a></li>
<li><a href="https://www.elastic.co/blog/deprecating-rivers" target="_blank" rel="external">https://www.elastic.co/blog/deprecating-rivers</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://www.elastic.co/" target="_blank" rel="external">Elasticsearch</a>是一个分布式可扩展的实时搜索和分析引擎。它能帮助你搜索、分析和浏览数据。Elasticsearch 是一个基于Lucene实现的搜索服务器，用Java开发实现。它提供了RESTful web接口，并作为Apache许可条款下的开放源码发布，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p>
<p>Elasticsearch关键概念</p>
<p><dl></dl></p>
<p><dt>Cluster集群</dt></p>
<dd>有相同集群名称的节点Node的集合。集群中有多个节点，其中有一个为主节点，这个主节点是可以通过选举产生的，主从节点是对于集群内部来说的。es的一个概念就是去中心化，字面上理解就是无中心节点，这是对于集群外部来说的，因为从外部来看es集群，在逻辑上是个整体，你与任何一个节点的通信和与整个es集群通信是等价的。</dd><br><br><dt>Cluster集群</dt><br><dd></dd><br><dt>Node节点</dt><br><dd>一个elasticsearch运行的实例。其实就是一个java进程。一般情况下，一台机器运行在一台机器上。</dd><br><dt>Shards分片</dt><br><dd>代表索引分片，es可以把一个完整的索引分成多个分片，这样的好处是可以把一个大的索引拆分成多个，分布到不同的节点上。构成分布式搜索。分片的数量只能在索引创建前指定，并且索引创建后不能更改。</dd><br><dt>Replicas副本</dt><br><dd>代表索引副本，es可以设置多个索引的副本，副本的作用一是提高系统的容错性，当某个节点某个分片损坏或丢失时可以从副本中恢复。二是提高es的查询效率，es会自动对搜索请求进行负载均衡。</dd><br><dt>Recovery恢复</dt><br><dd>代表数据恢复或叫数据重新分布，es在有节点加入或退出时会根据机器的负载对索引分片进行重新分配，挂掉的节点重新启动时也会进行数据恢复。</dd><br><dt>River</dt><br><dd>代表es的一个数据源，也是其它存储方式（如：数据库）同步数据到es的一个方法。它是以插件方式存在的一个es服务，通过读取river中的数据并把它索引到es中，官方的river有couchDB的，RabbitMQ的，Twitter的，Wikipedia的。River在1.5中弃用了，2.0中移除了。</dd><br><dt>Gateway</dt><br><dd>代表es索引快照的存储方式，es默认是先把索引存放到内存中，当内存满了时再持久化到本地硬盘。gateway对索引快照进行存储，当这个es集群关闭再重新启动时就会从gateway中读取索引备份数据。es支持多种类型的gateway，有本地文件系统（默认），分布式文件系统，Hadoop的HDFS和amazon的s3云存储服务。</dd><br><dt>Discovery.zen</dt><br><dd>代表es的自动发现节点机制，es是一个基于p2p的系统，它先通过广播寻找存在的节点，再通过多播协议来进行节点之间的通信，同时也支持点对点的交互。</dd><br><dt>Transport</dt><br><dd>代表es内部节点或集群与客户端的交互方式，默认内部是使用tcp协议进行交互，同时它支持http协议（json格式）、thrift、servlet、memcached、zeroMQ等的传输协议（通过插件方式集成）。</dd><br><dt>Index索引</dt><br><dd>Elasticsearch用来存储数据的逻辑区域，它类似于关系型数据库中的table概念。一个index可以在一个或者多个shard上面，同时一个shard也可能会有多个replicas。</dd><br><dt>Document</dt><br><dd>Elasticsearch里面存储的实体数据，类似于关系数据中一个table里面的一行数据。 document由多个field组成，不同的document里面同名的field一定具有相同的类型。document里面field可以重复出现，也就是一个field会有多个值，即multivalued。</dd><br><dt>Document type</dt><br><dd>为了查询需要，一个index可能会有多种document，也就是document type，但需要注意，不同document里面同名的field一定要是相同类型的。</dd><br><dt>Mapping</dt><br><dd>存储field的相关映射信息，不同document type会有不同的mapping。</dd>

]]>
    
    </summary>
    
      <category term="go" scheme="http://colobu.com/tags/go/"/>
    
      <category term="mongo" scheme="http://colobu.com/tags/mongo/"/>
    
      <category term="elasticsearch" scheme="http://colobu.com/tags/elasticsearch/"/>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mongodb 定期备份]]></title>
    <link href="http://colobu.com/2015/10/27/mongodb-backup/"/>
    <id>http://colobu.com/2015/10/27/mongodb-backup/</id>
    <published>2015-10-27T02:43:43.000Z</published>
    <updated>2015-10-27T03:02:57.802Z</updated>
    <content type="html"><![CDATA[<p>在生产系统中，数据库的备份是必要的，否则当服务器被攻击，硬盘坏掉，运维误删等原因将数据库干掉的时候就欲哭无泪了。</p>
<p>备份MongoDB数据库常见的方式有三种：</p>
<ul>
<li>使用[MongoDB管理服务（MMS）(<a href="https://mms.mongodb.com/)进行云备份" target="_blank" rel="external">https://mms.mongodb.com/)进行云备份</a></li>
<li>使用文件系统快照</li>
<li>使用MongoDB自身的mongodump工具</li>
</ul>
<p>本文介绍第三种简单的备份，对于备份数据量不是太大的数据库还是很有效的。<br><a id="more"></a></p>
<p>Sheharyar Naseer在<a href="https://sheharyar.me/blog/regular-mongo-backups-using-cron/" target="_blank" rel="external">Regular Mongo Backups Using Cron</a>一文中提供了一个简单的脚本mongo_backup.sh：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/bash</span></div><div class="line"></div><div class="line">MONGO_DATABASE=<span class="string">"your_db_name"</span></div><div class="line">APP_NAME=<span class="string">"your_app_name"</span></div><div class="line"></div><div class="line">MONGO_HOST=<span class="string">"127.0.0.1"</span></div><div class="line">MONGO_PORT=<span class="string">"27017"</span></div><div class="line">TIMESTAMP=`date +%F-%H%M`</div><div class="line">MONGODUMP_PATH=<span class="string">"/usr/bin/mongodump"</span></div><div class="line">BACKUPS_DIR=<span class="string">"/home/username/backups/<span class="variable">$APP_NAME</span>"</span></div><div class="line">BACKUP_NAME=<span class="string">"<span class="variable">$APP_NAME</span>-<span class="variable">$TIMESTAMP</span>"</span></div><div class="line"></div><div class="line"><span class="comment"># mongo admin --eval "printjson(db.fsyncLock())"</span></div><div class="line"><span class="comment"># $MONGODUMP_PATH -h $MONGO_HOST:$MONGO_PORT -d $MONGO_DATABASE</span></div><div class="line"><span class="variable">$MONGODUMP_PATH</span> <span class="operator">-d</span> <span class="variable">$MONGO_DATABASE</span></div><div class="line"><span class="comment"># mongo admin --eval "printjson(db.fsyncUnlock())"</span></div><div class="line"></div><div class="line">mkdir -p <span class="variable">$BACKUPS_DIR</span></div><div class="line">mv dump <span class="variable">$BACKUP_NAME</span></div><div class="line">tar -zcvf <span class="variable">$BACKUPS_DIR</span>/<span class="variable">$BACKUP_NAME</span>.tgz <span class="variable">$BACKUP_NAME</span></div><div class="line">rm -rf <span class="variable">$BACKUP_NAME</span></div></pre></td></tr></table></figure>

<p>View <a href="https://gist.github.com/sheharyarn/0f04c1ba18462cddaaf5" target="_blank" rel="external">Gist</a> on Github</p>
<p>如果你想在备份的时候锁住数据库，避免备份的时候有更新操作，可以uncomment <code>fsyncLock</code> 和 <code>fsyncUnlock</code>这两行。</p>
<p>然后将其加入到cron中:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab <span class="operator">-e</span></div></pre></td></tr></table></figure>

<p>配置如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">00</span> <span class="number">00</span> * * * /bin/bash /home/username/scripts/mongo_backup.sh</div></pre></td></tr></table></figure>

<p>micahwedemeyer提供了更强大的一个脚本<a href="https://github.com/micahwedemeyer/automongobackup/blob/master/src/automongobackup.sh" target="_blank" rel="external">automongobackup.sh</a>，提供了更强大的备份的功能。</p>
<h3 id="参考资料">参考资料</h3>
<ol>
<li><a href="http://www.infoq.com/cn/articles/mongodb-deployment-backup-security" target="_blank" rel="external">http://www.infoq.com/cn/articles/mongodb-deployment-backup-security</a></li>
<li><a href="https://docs.mongodb.org/manual/reference/program/mongodump/" target="_blank" rel="external">https://docs.mongodb.org/manual/reference/program/mongodump/</a></li>
<li><a href="https://docs.mongodb.org/manual/reference/program/mongorestore/" target="_blank" rel="external">https://docs.mongodb.org/manual/reference/program/mongorestore/</a></li>
<li><a href="https://sheharyar.me/blog/regular-mongo-backups-using-cron/" target="_blank" rel="external">https://sheharyar.me/blog/regular-mongo-backups-using-cron/</a></li>
<li><a href="https://github.com/micahwedemeyer/automongobackup" target="_blank" rel="external">https://github.com/micahwedemeyer/automongobackup</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>在生产系统中，数据库的备份是必要的，否则当服务器被攻击，硬盘坏掉，运维误删等原因将数据库干掉的时候就欲哭无泪了。</p>
<p>备份MongoDB数据库常见的方式有三种：</p>
<ul>
<li>使用[MongoDB管理服务（MMS）(<a href="https://mms.mongodb.com/)进行云备份" target="_blank" rel="external">https://mms.mongodb.com/)进行云备份</a></li>
<li>使用文件系统快照</li>
<li>使用MongoDB自身的mongodump工具</li>
</ul>
<p>本文介绍第三种简单的备份，对于备份数据量不是太大的数据库还是很有效的。<br>]]>
    
    </summary>
    
      <category term="mongo" scheme="http://colobu.com/tags/mongo/"/>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nginx 限流]]></title>
    <link href="http://colobu.com/2015/10/26/nginx-limit-modules/"/>
    <id>http://colobu.com/2015/10/26/nginx-limit-modules/</id>
    <published>2015-10-26T08:37:22.000Z</published>
    <updated>2015-11-03T06:26:43.341Z</updated>
    <content type="html"><![CDATA[<p>电商平台营销时候，经常会碰到的大流量问题，除了做流量分流处理，可能还要做用户黑白名单、信誉分析，进而根据用户ip信誉权重做相应的流量拦截、限制流量。<br>Nginx自身有的请求限制模块<a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" target="_blank" rel="external">ngx_http_limit_req_module</a>、流量限制模块<a href="http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html" target="_blank" rel="external">ngx_stream_limit_conn_module</a>基于令牌桶算法，可以方便的控制令牌速率，自定义调节限流，实现基本的限流控制。</p>
<p>对于提供下载的网站，肯定是要进行流量控制的，例如软件下载站、视频服务等。<br>它也可以减少一些爬虫程序或者DDOS的攻击。</p>
<p>对这两个模块的介绍的文章也不少，这里转载一篇<a href="http://hopestar.github.io/" target="_blank" rel="external">hopestar</a>的文章: <a href="http://hopestar.github.io/2013/06/08/nginx-limit-moule-note/" target="_blank" rel="external">nginx限制IP连接数的范例参考</a>， 因为他介绍的很简洁。</p>
<blockquote>
<p> 下面文章的limit_zone指令已经被弃用，请用limit_conn_zone替换<br><a id="more"></a></p>
</blockquote>
<hr>
<p>如何Nginx限制同一个ip的连接数，限制并发数目:</p>
<h3 id="限流">限流</h3>
<h4 id="(1)_添加limit_zone和limit_req_zone">(1) 添加limit_zone和limit_req_zone</h4>
<p>这个变量只能在http使用 :</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">vi</span> /export/servers/nginx/conf/nginx.conf </div><div class="line">limit_zone one  <span class="variable">$binary_remote_addr</span>  <span class="number">20m</span>;</div><div class="line"><span class="title">limit_req_zone</span>  <span class="variable">$binary_remote_addr</span>  zone=req_one:<span class="number">20m</span> rate=12r/s;</div></pre></td></tr></table></figure>

<h4 id="(2)_添加limit_conn_和limit_req">(2) 添加limit_conn 和limit_req</h4>
<p>这个变量可以在<code>http</code>, <code>server</code>, <code>location</code>使用 我是限制nginx上的所有服务，所以添加到http里面 （如果你需要限制部分服务，可在nginx/conf/domains里面选择相应的server或者location添加上便可）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="title">vi</span> /export/servers/nginx/conf/nginx.conf </div><div class="line"></div><div class="line">limit_zone one <span class="variable">$binary_remote_addr</span> <span class="number">20m</span>;</div><div class="line"><span class="title">limit_req_zone</span> <span class="variable">$binary_remote_addr</span> zone=req_one:<span class="number">20m</span> rate=12r/s;</div><div class="line"><span class="title">limit_conn</span> one <span class="number">10</span>;</div><div class="line"><span class="title">limit_req</span> zone=req_one burst=<span class="number">120</span>;</div></pre></td></tr></table></figure>

<p>参数详解(数值按具体需要和服务器承载能力设置,):</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">limit_zone，是针对每个变量(这里指<span class="literal">IP</span>，即$binary_remote_addr)定义一个存储session状态的容器。这个示例中定义了一个20m的容器，按照32bytes/session，可以处理<span class="number">640000</span>个session。</div><div class="line">limit_req_zone 与limit_zone类似。rate是请求频率. 每秒允许<span class="number">12</span>个请求。</div><div class="line">limit_conn  one <span class="number">10</span> : 表示一个<span class="literal">IP</span>能发起<span class="number">10</span>个并发连接数</div><div class="line"><span class="label">limit_req:</span> 与limit_req_zone对应。burst表示缓存住的请求数。</div></pre></td></tr></table></figure>

<p>范例:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="title">http</span></div><div class="line">{</div><div class="line"><span class="title">limit_zone</span> one  <span class="variable">$binary_remote_addr</span>  <span class="number">20m</span>;</div><div class="line"><span class="title">limit_req_zone</span>  <span class="variable">$binary_remote_addr</span>  zone=req_one:<span class="number">20m</span> rate=12r/s;</div><div class="line"><span class="title">limit_conn</span>   one  <span class="number">10</span>;</div><div class="line"><span class="title">limit_req</span>   zone=req_one burst=<span class="number">120</span>;</div><div class="line"></div><div class="line"><span class="title">server</span>  {</div><div class="line">        <span class="title">listen</span>          <span class="number">80</span>;</div><div class="line">        <span class="title">server_name</span>     status.xxx.com ;</div><div class="line"></div><div class="line">        <span class="title">location</span> / {</div><div class="line">                 <span class="title">stub_status</span>            <span class="built_in">on</span>;</div><div class="line">                 <span class="title">access_log</span>             <span class="built_in">off</span>;</div><div class="line">        }</div><div class="line">}</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="(3)_重启nginx">(3) 重启nginx</h4>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/<span class="keyword">export</span>/servers/nginx/sbin/nginx <span class="operator">-s</span> reload</div></pre></td></tr></table></figure>

<p>Nginx限制流量/限制带宽 具体参考官方文档</p>
<h3 id="nginx白名单设置">nginx白名单设置</h3>
<p>以上配置会对所有的ip都进行限制，有些时候我们不希望对搜索引擎的蜘蛛或者某些自己的代理机过来的请求进行限制， 对于特定的白名单ip我们可以借助geo指令实现。</p>
<p>先在nginx的请求日志进行统计，查看那个ip的访问量比较大， 运行:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cat</span> access.<span class="built_in">log</span> | <span class="keyword">grep</span> <span class="string">"03/Jun"</span> |awk <span class="string">'{print $1}'</span>|<span class="built_in">sort</span> |uniq -<span class="keyword">c</span>|<span class="built_in">sort</span> -nrk <span class="number">1</span>|head -<span class="keyword">n</span> <span class="number">10</span></div><div class="line">#列出访问日志里面在<span class="number">6</span>月<span class="number">3</span>号这天前<span class="number">10</span>个访问量最大的ip.</div></pre></td></tr></table></figure>

<p>接下来就可以对这些IP进行分析了。看哪些需要进行白名单设置。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> http{</div><div class="line">     geo  <span class="variable">$limited</span>  { <span class="comment"># the variable created is $limited</span></div><div class="line">      <span class="keyword">default</span>          <span class="number">1</span>;</div><div class="line">      <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">32</span>     <span class="number">0</span>;</div><div class="line">      <span class="number">10.12</span><span class="number">.212</span><span class="number">.63</span>     <span class="number">0</span>;</div><div class="line">    }</div><div class="line">    map <span class="variable">$limited</span> <span class="variable">$limit</span> {</div><div class="line">    <span class="number">1</span> <span class="variable">$binary_remote_addr</span>;</div><div class="line">    <span class="number">0</span> <span class="string">""</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    limit_zone one  <span class="variable">$binary_remote_addr</span>  <span class="number">20</span>m;</div><div class="line">    limit_req_zone  <span class="variable">$limit</span>  zone=req_one:<span class="number">20</span>m rate=<span class="number">20</span>r/s;</div><div class="line">    limit_conn   one  <span class="number">10</span>;</div><div class="line">    limit_req   zone=req_one burst=<span class="number">120</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>上面两个需要用到map和geo模块，这是nginx自带的模块，有的运维喜欢把他们关闭，自己<code>./sbin/nginx -V</code> 留意一下。把配置的<code>--whithout-XXX-module</code> 去掉重新编译一下就可以了。 上面这段配置的意思是：</p>
<p>1.geo指令定义了一个白名单$limited变量，默认值为1，如果客户端ip在上面的范围内，$limited的值为0<br>2.使用map指令映射搜索引擎客户端的ip为空串，如果不是搜索引擎就显示本身真实的ip，这样搜索引擎ip就不能存到limit_req_zone内存session中，所以不会限制搜索引擎的ip访问</p>
<h3 id="PS:获取客户端的真实IP">PS:获取客户端的真实IP</h3>
<p>顺带一提，为了获取客户端的真实IP。该模块需要安装read_ip模块，运维应该默认有安装。没有的话也可自行安装： 配置方式相当简单，重新编译 Nginx 加上 --with-http_realip_module 参数，如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">.</span><span class="comment">/configure</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix=/opt/nginx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_stub_status_module</span>  <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">pcre=</span><span class="string">.</span><span class="string">.</span><span class="comment">/pcre</span><span class="literal">-</span><span class="comment">6</span><span class="string">.</span><span class="comment">6</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_realip_module</span></div><div class="line"><span class="comment">make</span></div><div class="line"><span class="comment">make</span> <span class="comment">install</span></div></pre></td></tr></table></figure>

<p>在server中增加:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">set_real_ip_from</span>   <span class="number">192.168.1.0</span>/<span class="number">24</span>;</div><div class="line"><span class="title">set_real_ip_from</span>   <span class="number">192.168.2.1</span>;</div><div class="line"><span class="title">real_ip_header</span>     [X-Real-IP|X-Forwarded-For];</div></pre></td></tr></table></figure>

<p>需要说明的地方就是设置IP源的时候可以设置单个IP，也可以设置IP段，另外是使用X-Real-IP还是X-Forwarded-For，取决于前面的服务器有哪个头。</p>
<p>set_real_ip_from 设置的IP端可以让运维查看日志，看下你的请求是来自哪些ip段。</p>
<p>重新加载一下服务，差不多就OK了。</p>
<p>再查看日志的话，应该可以看到客户端的真实IP了。</p>
<p>注意：如果未安装该模块的话你的获取到的IP端可能是来自前端代理（如squid）的IP，结果就是多个用户被当成单个用户对待，导致应用不能响应。 参考:<a href="http://hi.baidu.com/thinkinginlamp/item/e2cf05263eb4d18e6e2cc3e6" target="_blank" rel="external">http://hi.baidu.com/thinkinginlamp/item/e2cf05263eb4d18e6e2cc3e6</a></p>
<p>再PS一下： 自测: 有条件的自己可以用ab或者webben自测一下。</p>
<p>未安装前压测的话，因为有大量请求，所以access.log会有大量日志，而error.log日志没有变化。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@qrwefsdf talk]# webbench  -<span class="built_in">c</span> <span class="number">30</span> -t <span class="number">30</span> http:<span class="comment">//xxx.com  </span></div><div class="line"><span class="type">Webbench</span> - <span class="type">Simple</span> <span class="type">Web</span> <span class="type">Benchmark</span> <span class="number">1.5</span></div><div class="line"><span class="type">Copyright</span> (<span class="built_in">c</span>) <span class="type">Radim</span> <span class="type">Kolar</span> <span class="number">1997</span>-<span class="number">2004</span>, <span class="type">GPL</span> <span class="type">Open</span> <span class="type">Source</span> <span class="type">Software</span>.</div><div class="line"><span class="type">Benchmarking</span>: <span class="type">GET</span> http:<span class="comment">//xxx.com  </span></div><div class="line"><span class="number">30</span> clients, running <span class="number">30</span> sec.</div><div class="line"><span class="type">Speed</span>=<span class="number">193468</span> pages/<span class="built_in">min</span>, <span class="number">1254317</span> bytes/sec.</div><div class="line"><span class="type">Requests</span>: <span class="number">96734</span> susceed, <span class="number">0</span> failed.</div></pre></td></tr></table></figure>

<p>安装后会发现很多超出的请求会返回503,所以access.log日志变化不快，error.log有大量记录,提示limit_reque缓住了多少请求。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@qrwefsdf talk]# webbench  -<span class="built_in">c</span> <span class="number">30</span> -t <span class="number">30</span> http:<span class="comment">//xxxx.com</span></div><div class="line"><span class="type">Webbench</span> - <span class="type">Simple</span> <span class="type">Web</span> <span class="type">Benchmark</span> <span class="number">1.5</span></div><div class="line"><span class="type">Copyright</span> (<span class="built_in">c</span>) <span class="type">Radim</span> <span class="type">Kolar</span> <span class="number">1997</span>-<span class="number">2004</span>, <span class="type">GPL</span> <span class="type">Open</span> <span class="type">Source</span> <span class="type">Software</span>.</div><div class="line"><span class="type">Benchmarking</span>: <span class="type">GET</span> http:<span class="comment">//xxx.com  </span></div><div class="line"><span class="number">30</span> clients, running <span class="number">30</span> sec.</div><div class="line"><span class="type">Speed</span>=<span class="number">120</span> pages/<span class="built_in">min</span>, <span class="number">778</span> bytes/sec.</div><div class="line"><span class="type">Requests</span>: <span class="number">60</span> susceed, <span class="number">0</span> failed.</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>电商平台营销时候，经常会碰到的大流量问题，除了做流量分流处理，可能还要做用户黑白名单、信誉分析，进而根据用户ip信誉权重做相应的流量拦截、限制流量。<br>Nginx自身有的请求限制模块<a href="http://nginx.org/en/docs/http/ngx_http_limit_req_module.html" target="_blank" rel="external">ngx_http_limit_req_module</a>、流量限制模块<a href="http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html" target="_blank" rel="external">ngx_stream_limit_conn_module</a>基于令牌桶算法，可以方便的控制令牌速率，自定义调节限流，实现基本的限流控制。</p>
<p>对于提供下载的网站，肯定是要进行流量控制的，例如软件下载站、视频服务等。<br>它也可以减少一些爬虫程序或者DDOS的攻击。</p>
<p>对这两个模块的介绍的文章也不少，这里转载一篇<a href="http://hopestar.github.io/" target="_blank" rel="external">hopestar</a>的文章: <a href="http://hopestar.github.io/2013/06/08/nginx-limit-moule-note/" target="_blank" rel="external">nginx限制IP连接数的范例参考</a>， 因为他介绍的很简洁。</p>
<blockquote>
<p> 下面文章的limit_zone指令已经被弃用，请用limit_conn_zone替换<br>]]>
    
    </summary>
    
      <category term="nginx" scheme="http://colobu.com/tags/nginx/"/>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Virtualbox mount共享文件夹错误]]></title>
    <link href="http://colobu.com/2015/10/26/virtualbox-mount-shared-folder-error/"/>
    <id>http://colobu.com/2015/10/26/virtualbox-mount-shared-folder-error/</id>
    <published>2015-10-26T07:13:08.000Z</published>
    <updated>2015-10-27T00:54:07.166Z</updated>
    <content type="html"><![CDATA[<p>最近创建了一个Centos 7的虚拟机，使用的是virtualbox 版本 5.0.6 r103037。<br>安装了增强包之后，依然无法挂载共享文件夹，报错如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">...</span>]<span class="comment"># mount -t vboxsf share /mnt/share</span></div><div class="line">/sbin/mount.vboxsf: mounting failed with the error: No such device</div></pre></td></tr></table></figure>

<p>用redhat 6.4是正常的。<br><a href="http://stackoverflow.com/questions/28328775/virtualbox-mount-vboxsf-mounting-failed-with-the-error-no-such-device" target="_blank" rel="external">stackoverflow</a>有人也遇到了这个问题，解决办法如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">modprobe <span class="operator">-a</span> vboxguest vboxsf vboxvideo</div></pre></td></tr></table></figure>

<p>特别记录下来以备将来查询。</p>
<p>你也可以在<code>/etc/modules-load.d/</code>创建要加载的模块，一个文件加载一个模块，如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/etc/modules-<span class="operator"><span class="keyword">load</span>.d/vboxsf.conf</span></div><div class="line"></div><div class="line"># <span class="keyword">Load</span> vboxsf.ko <span class="keyword">at</span> boot</div><div class="line">vboxsf</div></pre></td></tr></table></figure>

<p>这样启动的时候就将相应的模块加载进来了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近创建了一个Centos 7的虚拟机，使用的是virtualbox 版本 5.0.6 r103037。<br>安装了增强包之后，依然无法挂载共享文件夹，报错如下：</p>
<figure class="highlight"><table><tr><td class="gu]]>
    </summary>
    
      <category term="virtualbox" scheme="http://colobu.com/tags/virtualbox/"/>
    
      <category term="linux" scheme="http://colobu.com/tags/linux/"/>
    
      <category term="Linux" scheme="http://colobu.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[创建超小的Golang docker 镜像]]></title>
    <link href="http://colobu.com/2015/10/12/create-minimal-golang-docker-images/"/>
    <id>http://colobu.com/2015/10/12/create-minimal-golang-docker-images/</id>
    <published>2015-10-12T04:21:19.000Z</published>
    <updated>2015-10-14T07:24:18.212Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.docker.io/" target="_blank" rel="external">Docker</a>是PaaS供应商dotCloud开源的一个基于LXC 的高级容器引擎，源代码托管在 GitHub 上, 基于Go语言开发并遵从Apache 2.0协议开源。正如DockerPool在免费Docker电子书<a href="http://dockerpool.com/static/books/docker_practice/index.html" target="_blank" rel="external">Docker —— 从入门到实践</a>中这样提到的：</p>
<blockquote>
<p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p>
<p>首先，Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。 其次，Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器。</p>
<p>容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而Docker 只需要启动 10 个隔离的应用即可。</p>
</blockquote>
<p>Docker让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架包括系统。</p>
<a id="more"></a>
<p>本文不会介绍Docker原理和操作，而是介绍如何使用Docker创建一个Golang应用程序的镜像，这样我们就可以在其它机器上运行这个镜像。<br>本文参考了很多的文章，这些文章列在了本文的底部。</p>
<h3 id="编写一个Golang服务器">编写一个Golang服务器</h3>
<p>这里我在研究<a href="https://github.com/fvbock/endless" target="_blank" rel="external">endless</a>库的时候写了一个测试程序，就用它来测试一下docker镜像的创建。<br>endless可以允许我们在重启网络服务器的时候零时间宕机， 英语是graceful restart,我称之为无缝重启。<br>服务器监听4242端口，顺便使用raymond模版引擎替换golang自带的模版引擎，采用bone这个高性能的mux库。<br>代码如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"flag"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"syscall"</span></div><div class="line">	<span class="string">"github.com/aymerick/raymond"</span></div><div class="line">	<span class="string">"github.com/fvbock/endless"</span></div><div class="line">	<span class="string">"github.com/go-zoo/bone"</span></div><div class="line">)</div><div class="line"><span class="keyword">var</span> (</div><div class="line">	<span class="comment">//homeTpl, _ = raymond.ParseFile("home.hbs")</span></div><div class="line">	homeTpl = raymond.MustParse(<span class="string">`&lt;html&gt;</span></div><div class="line">	&lt;head&gt;</div><div class="line">	  &lt;title&gt;test&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">	&lt;div class="entry"&gt;</div><div class="line">	  &lt;h1&gt;&lt;/h1&gt;</div><div class="line">	  &lt;div class="body"&gt;</div><div class="line">	    </div><div class="line">	  &lt;/div&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">	&lt;/html&gt;</div><div class="line">`)</div><div class="line">)</div><div class="line"><span class="keyword">func</span> homeHandler(rw http.ResponseWriter, req *http.Request) {</div><div class="line">	ctx := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">string</span>{<span class="string">"greet"</span>: <span class="string">"hello"</span>, <span class="string">"name"</span>: <span class="string">"world"</span>}</div><div class="line">	result := homeTpl.MustExec(ctx)</div><div class="line">	rw.Write([]<span class="typename">byte</span>(result))</div><div class="line">}</div><div class="line"><span class="keyword">func</span> varHandler(rw http.ResponseWriter, req *http.Request) {</div><div class="line">	varr := bone.GetValue(req, <span class="string">"var"</span>)</div><div class="line">	test := bone.GetValue(req, <span class="string">"test"</span>)</div><div class="line"></div><div class="line">	rw.Write([]<span class="typename">byte</span>(varr + <span class="string">" "</span> + test))</div><div class="line">}</div><div class="line"><span class="keyword">func</span> Handler404(rw http.ResponseWriter, req *http.Request) {</div><div class="line">	rw.Write([]<span class="typename">byte</span>(<span class="string">"These are not resources you're looking for ..."</span>))</div><div class="line">}</div><div class="line"><span class="keyword">func</span> restartHandler(rw http.ResponseWriter, req *http.Request) {</div><div class="line">	syscall.Kill(syscall.Getppid(), syscall.SIGHUP)</div><div class="line">	rw.Write([]<span class="typename">byte</span>(<span class="string">"restarted"</span>))</div><div class="line">}</div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	flag.Parse()</div><div class="line">	mux := bone.New()</div><div class="line">	<span class="comment">// Custom 404</span></div><div class="line">	mux.NotFoundFunc(Handler404)</div><div class="line">	<span class="comment">// Handle with any http method, Handle takes http.Handler as argument.</span></div><div class="line">	mux.Handle(<span class="string">"/index"</span>, http.HandlerFunc(homeHandler))</div><div class="line">	mux.Handle(<span class="string">"/index/:var/info/:test"</span>, http.HandlerFunc(varHandler))</div><div class="line">	<span class="comment">// Get, Post etc... takes http.HandlerFunc as argument.</span></div><div class="line">	mux.Post(<span class="string">"/home"</span>, http.HandlerFunc(homeHandler))</div><div class="line">	mux.Get(<span class="string">"/home/:var"</span>, http.HandlerFunc(varHandler))</div><div class="line">	mux.GetFunc(<span class="string">"/test/*"</span>, <span class="keyword">func</span>(rw http.ResponseWriter, req *http.Request) {</div><div class="line">		rw.Write([]<span class="typename">byte</span>(req.RequestURI))</div><div class="line">	})</div><div class="line">	mux.Get(<span class="string">"/restart"</span>, http.HandlerFunc(restartHandler))</div><div class="line">	err := endless.ListenAndServe(<span class="string">":4242"</span>, mux)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		log.Fatalln(err)</div><div class="line">	}</div><div class="line">	log.Println(<span class="string">"Server on 4242 stopped"</span>)</div><div class="line">	os.Exit<span class="number">(0</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Golang镜像">Golang镜像</h3>
<p>Docker官方提供了Golang各版本的镜像： <a href="https://hub.docker.com/_/golang/" target="_blank" rel="external">Official Repository - golang</a>.<br>它包含了Golang的编译和运行时环境。最简单的使用方法就是在你的<code>Dockerfile</code>文件中加入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FROM golan<span class="variable">g:1</span>.<span class="number">3</span>-onbuild</div></pre></td></tr></table></figure>

<p>这个镜像包含了多个<code>ONBUILD</code>触发器。你可以编译和运行你的镜像：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker build -t my-golang-app .</div><div class="line">$ docker run -it --rm --name my-running-app my-golang-app</div></pre></td></tr></table></figure>

<h3 id="为编译好的Golang应用创建小的镜像">为编译好的Golang应用创建小的镜像</h3>
<p>上面的Golang容器相当的大，因为它包含了Golang的编译和运行环境。<br>官方网站上列出了镜像的大小：</p>
<blockquote>
<p>golang:1.5.1-onbuild</p>
<p>$ docker pull library/golang@sha256:f938465579d1cde302a447fef237a5a45d7e96609b97c83b9144446615ad9e72</p>
<p>  Total Virtual Size: 709.5 MB (709470237 bytes)<br>   Total v2 Content-Length: 247.0 MB (246986021 bytes)</p>
</blockquote>
<p>实际上我们并不需要那么多的软件，因为我们的Golang应用程序是预先编译好的，而不是在Golang容器中现场编译运行，因此我们不需要Golang的编译环境等。如果你查看golang:1.5的Dockerfile,会发现它基于buildpack-deps:jessie-scm，会安装GCC及一堆的build工具，下载Go的发布文件并安装。基本上这些对于我们来说并不需要。我们需要的是：</p>
<blockquote>
<p>一个可以运行我们编译好的Golang应用的镜像。</p>
</blockquote>
<p>我们可以从<code>scratch</code>镜像创建。<br><code>scratch</code>镜像是一个空的镜像文件，特别适合创建超级小的镜像。<br><code>Dockerfile</code>文件如下：</p>
<figure class="highlight dockfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> scratch</div><div class="line">ADD main /</div><div class="line">CMD [<span class="string">"/main"</span>]</div></pre></td></tr></table></figure>

<p>运行<br>输出如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># docker build -t example-scratch .</div><div class="line">Sending build context to Docker daemon 8.054 MB</div><div class="line">Step 0 : FROM scratch</div><div class="line"> -<span class="ruby"><span class="input"><span class="prompt">--&gt;</span> </span></span></div><div class="line">Step 1 : ADD main /</div><div class="line"> -<span class="ruby"><span class="input"><span class="prompt">--&gt;</span> <span class="number">4</span>ad02fa47a7d</span></span></div><div class="line"></div><div class="line">Removing intermediate container d64080c4b42f</div><div class="line">Step 2 : CMD /main</div><div class="line"> -<span class="ruby"><span class="input"><span class="prompt">--&gt;</span> <span class="constant">Running</span> in <span class="number">5</span>d9a08c3a20e</span></span></div><div class="line"> -<span class="ruby"><span class="input"><span class="prompt">--&gt;</span> <span class="number">5</span>c29c8249678</span></span></div><div class="line">Removing intermediate container 5d9a08c3a20e</div><div class="line">Successfully built 5c29c8249678</div></pre></td></tr></table></figure>

<p>这样镜像就创建成功了，查看一下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root<span class="variable">@localhost</span> work]<span class="comment"># docker images</span></div><div class="line"><span class="constant">REPOSITORY</span>          <span class="constant">TAG</span>                 <span class="constant">IMAGE</span> <span class="constant">ID</span>            <span class="constant">CREATED</span>             <span class="constant">VIRTUAL</span> <span class="constant">SIZE</span></div><div class="line">example-scratch     latest              <span class="number">5</span>c29c8249678        <span class="number">3</span> minutes ago       <span class="number">8.052</span> <span class="constant">MB</span></div></pre></td></tr></table></figure>

<p>只有8M左右，非常的小。</p>
<p>但是运行这个镜像，容器无法创建：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run -it -p 4242:4242 example-scratch</span></div><div class="line">no such <span class="built_in">file</span> <span class="operator">or</span> <span class="built_in">directory</span></div><div class="line">Error response <span class="built_in">from</span> daemon: Cannot start container <span class="number">79</span>bb9fb62788b4a8c1487695a3219ddf3aa85bde2bc44473838f6f4d1583a204: [<span class="number">8</span>] System error: no such <span class="built_in">file</span> <span class="operator">or</span> <span class="built_in">directory</span></div></pre></td></tr></table></figure>

<p>原因是我们的main文件生成的时候依赖的一些库如libc还是动态链接的，但是scratch 镜像完全是空的，什么东西也不包含，所以生成main时候要按照下面的方式生成，使生成的main静态链接所有的库：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">CGO_ENABLED=</span><span class="number">0</span> <span class="variable">GOOS=</span>linux go build -a -installsuffix cgo -o main .</div></pre></td></tr></table></figure>

<p>然后重新生成镜像并运行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># docker build -t example-scratch .</span></div><div class="line"><span class="preprocessor"># docker run -it -p 4242:4242 example-scratch</span></div></pre></td></tr></table></figure>

<p>容器运行成功，在浏览器中访问<a href="http://宿主IP:4242/index成功返回结果" target="_blank" rel="external">http://宿主IP:4242/index成功返回结果</a></p>
<h3 id="发布">发布</h3>
<p>可以方便的将刚才的镜像发布到docker.io上。<br>首先将刚才的镜像打tag:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># docker images</span></div><div class="line">REPOSITORY         <span class="constant"> TAG </span>               <span class="constant"> IMAGE </span>ID           <span class="constant"> CREATED </span>           <span class="constant"> VIRTUAL </span>SIZE</div><div class="line">example-scratch     latest              <span class="number">2</span>ea4bbfd67dc        <span class="number">10</span> minutes ago      <span class="number">8.01</span> MB</div><div class="line"><span class="preprocessor"># docker tag 2ea4bbfd67dc smallnest/example-scratch</span></div><div class="line"><span class="preprocessor"># docker images</span></div><div class="line">REPOSITORY                 <span class="constant"> TAG </span>               <span class="constant"> IMAGE </span>ID           <span class="constant"> CREATED </span>           <span class="constant"> VIRTUAL </span>SIZE</div><div class="line">smallnest/example-scratch   latest              <span class="number">2</span>ea4bbfd67dc        <span class="number">10</span> minutes ago      <span class="number">8.01</span> MB</div><div class="line">example-scratch             latest              <span class="number">2</span>ea4bbfd67dc        <span class="number">10</span> minutes ago      <span class="number">8.01</span> MB</div></pre></td></tr></table></figure>

<p>运行<code>docker login</code>登录，然后运行下面的命令push到docker.io上。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push smallnest/example-scratch</div></pre></td></tr></table></figure>

<p>访问 <a href="https://hub.docker.com/r/smallnest/example-scratch/" target="_blank" rel="external">https://hub.docker.com/r/smallnest/example-scratch/</a> 可以看到刚刚push的这个镜像，这样我们就可以pull到其它机器上运行了。</p>
<h3 id="参考文档">参考文档</h3>
<ol>
<li><a href="https://blog.golang.org/docker" target="_blank" rel="external">https://blog.golang.org/docker</a></li>
<li><a href="https://hub.docker.com/_/golang/" target="_blank" rel="external">https://hub.docker.com/_/golang/</a></li>
<li><a href="https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/" target="_blank" rel="external">https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/</a></li>
<li><a href="https://medium.com/@kelseyhightower/optimizing-docker-images-for-static-binaries-b5696e26eb07" target="_blank" rel="external">https://medium.com/@kelseyhightower/optimizing-docker-images-for-static-binaries-b5696e26eb07</a></li>
<li><a href="http://www.iron.io/blog/2015/07/an-easier-way-to-create-tiny-golang-docker-images.html" target="_blank" rel="external">http://www.iron.io/blog/2015/07/an-easier-way-to-create-tiny-golang-docker-images.html</a></li>
<li><a href="https://labs.ctl.io/small-docker-images-for-go-apps/" target="_blank" rel="external">https://labs.ctl.io/small-docker-images-for-go-apps/</a></li>
<li><a href="http://dockerpool.com/static/books/docker_practice/introduction/why.html" target="_blank" rel="external">http://dockerpool.com/static/books/docker_practice/introduction/why.html</a></li>
<li><a href="https://docs.docker.com/installation/centos/" target="_blank" rel="external">https://docs.docker.com/installation/centos/</a></li>
<li><a href="http://segmentfault.com/a/1190000002766882" target="_blank" rel="external">http://segmentfault.com/a/1190000002766882</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.docker.io/" target="_blank" rel="external">Docker</a>是PaaS供应商dotCloud开源的一个基于LXC 的高级容器引擎，源代码托管在 GitHub 上, 基于Go语言开发并遵从Apache 2.0协议开源。正如DockerPool在免费Docker电子书<a href="http://dockerpool.com/static/books/docker_practice/index.html" target="_blank" rel="external">Docker —— 从入门到实践</a>中这样提到的：</p>
<blockquote>
<p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p>
<p>首先，Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。 其次，Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器。</p>
<p>容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而Docker 只需要启动 10 个隔离的应用即可。</p>
</blockquote>
<p>Docker让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架包括系统。</p>
]]>
    
    </summary>
    
      <category term="Docker" scheme="http://colobu.com/tags/Docker/"/>
    
      <category term="Go" scheme="http://colobu.com/tags/Go/"/>
    
      <category term="Docker" scheme="http://colobu.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux Signal及Golang中的信号处理]]></title>
    <link href="http://colobu.com/2015/10/09/Linux-Signals/"/>
    <id>http://colobu.com/2015/10/09/Linux-Signals/</id>
    <published>2015-10-09T07:21:28.000Z</published>
    <updated>2015-10-09T09:03:54.100Z</updated>
    <content type="html"><![CDATA[<p>信号(Signal)是Linux, 类Unix和其它POSIX兼容的操作系统中用来进程间通讯的一种方式。一个信号就是一个异步的通知，发送给某个进程，或者同进程的某个线程，告诉它们某个事件发生了。<br>当信号发送到某个进程中时，操作系统会中断该进程的正常流程，并进入相应的信号处理函数执行操作，完成后再回到中断的地方继续执行。<br>如果目标进程先前注册了某个信号的处理程序(signal handler),则此处理程序会被调用，否则缺省的处理程序被调用。</p>
<a id="more"></a>
<h3 id="发送信号">发送信号</h3>
<p><em>kill</em> <strong>系统调用(system call)</strong>可以用来发送一个特定的信号给进程。<br><em>kill</em> <strong>命令</strong>允许用户发送一个特定的信号给进程。<br><em>raise</em> <strong>库函数</strong>可以发送特定的信号给当前进程。</p>
<p>在Linux下运行<code>man kill</code>可以查看此命令的介绍和用法。</p>
<blockquote>
<p>The command <strong>kill</strong> sends the specified signal to the specified process or process group.  If no signal is specified, the TERM signal is sent.  The TERM signal will kill processes which do not catch  this  signal.   For  other  processes, it may be necessary to use the KILL (9) signal, since this signal cannot be caught.</p>
<p>Most  modern  shells  have  a  builtin kill function, with a usage rather similar to that of the command described here. The &#39;-a&#39; and &#39;-p&#39; options, and the possibility to specify pids by command name is a local extension.</p>
<p>If sig is 0, then no signal is sent, but error checking is still performed.</p>
</blockquote>
<p>一些异常比如除以0或者 segmentation violation 相应的会产生<code>SIGFPE</code>和<code>SIGSEGV</code>信号，缺省情况下导致core dump和程序退出。<br>内核在某些情况下发送信号，比如在进程往一个已经关闭的管道写数据时会产生<code>SIGPIPE</code>信号。<br>在进程的终端敲入特定的组合键也会导致系统发送某个特定的信号给此进程：</p>
<ul>
<li>Ctrl-C 发送 INT signal (SIGINT)，通常导致进程结束</li>
<li>Ctrl-Z 发送 TSTP signal (SIGTSTP); 通常导致进程挂起(suspend)</li>
<li>Ctrl-\ 发送 QUIT signal (SIGQUIT); 通常导致进程结束 和 dump core.</li>
<li>Ctrl-T (不是所有的UNIX都支持) 发送INFO signal (SIGINFO); 导致操作系统显示此运行命令的信息</li>
</ul>
<p><code>kill -9 pid</code> 会发送 <code>SIGKILL</code>信号给进程。</p>
<h3 id="处理信号">处理信号</h3>
<p>Signal handler可以通过<code>signal()</code>系统调用进行设置。如果没有设置，缺省的handler会被调用，当然进程也可以设置忽略此信号。<br>有两种信号不能被拦截和处理: <code>SIGKILL</code>和<code>SIGSTOP</code>。</p>
<p>当接收到信号时，进程会根据信号的响应动作执行相应的操作，信号的响应动作有以下几种：</p>
<ul>
<li>中止进程(Term)</li>
<li>忽略信号(Ign)</li>
<li>中止进程并保存内存信息(Core)</li>
<li>停止进程(Stop)</li>
<li>继续运行进程(Cont)</li>
</ul>
<p>用户可以通过<code>signal</code>或<code>sigaction</code>函数修改信号的响应动作（也就是常说的“注册信号”）。另外，在多线程中，各线程的信号响应动作都是相同的，不能对某个线程设置独立的响应动作。</p>
<h3 id="信号类型">信号类型</h3>
<p>个平台的信号定义或许有些不同。下面列出了POSIX中定义的信号。<br>Linux 使用34-64信号用作实时系统中。<br>命令<code>man 7 signal</code>提供了官方的信号介绍。</p>
<p>在POSIX.1-1990标准中定义的信号列表</p>
<table><thead><tr><th>信号</th><th>值</th><th>动作</th><th>说明</th></tr></thead><tbody><tr><td>SIGHUP</td><td>1</td><td>Term</td><td>终端控制进程结束(终端连接断开)</td></tr><tr><td>SIGINT</td><td>2</td><td>Term</td><td>用户发送INTR字符(Ctrl+C)触发</td></tr><tr><td>SIGQUIT</td><td>3</td><td>Core</td><td>用户发送QUIT字符(Ctrl+/)触发</td></tr><tr><td>SIGILL</td><td>4</td><td>Core</td><td>非法指令(程序错误、试图执行数据段、栈溢出等)</td></tr><tr><td>SIGABRT</td><td>6</td><td>Core</td><td>调用abort函数触发</td></tr><tr><td>SIGFPE</td><td>8</td><td>Core</td><td>算术运行错误(浮点运算错误、除数为零等)</td></tr><tr><td>SIGKILL</td><td>9</td><td>Term</td><td>无条件结束程序(不能被捕获、阻塞或忽略)</td></tr><tr><td>SIGSEGV</td><td>11</td><td>Core</td><td>无效内存引用(试图访问不属于自己的内存空间、对只读内存空间进行写操作)</td></tr><tr><td>SIGPIPE</td><td>13</td><td>Term</td><td>消息管道损坏(FIFO/Socket通信时，管道未打开而进行写操作)</td></tr><tr><td>SIGALRM</td><td>14</td><td>Term</td><td>时钟定时信号</td></tr><tr><td>SIGTERM</td><td>15</td><td>Term</td><td>结束程序(可以被捕获、阻塞或忽略)</td></tr><tr><td>SIGUSR1</td><td>30,10,16</td><td>Term</td><td>用户保留</td></tr><tr><td>SIGUSR2</td><td>31,12,17</td><td>Term</td><td>用户保留</td></tr><tr><td>SIGCHLD</td><td>20,17,18</td><td>Ign</td><td>子进程结束(由父进程接收)</td></tr><tr><td>SIGCONT</td><td>19,18,25</td><td>Cont</td><td>继续执行已经停止的进程(不能被阻塞)</td></tr><tr><td>SIGSTOP</td><td>17,19,23</td><td>Stop</td><td>停止进程(不能被捕获、阻塞或忽略)</td></tr><tr><td>SIGTSTP</td><td>18,20,24</td><td>Stop</td><td>停止进程(可以被捕获、阻塞或忽略)</td></tr><tr><td>SIGTTIN</td><td>21,21,26</td><td>Stop</td><td>后台程序从终端中读取数据时触发</td></tr><tr><td>SIGTTOU</td><td>22,22,27</td><td>Stop</td><td>后台程序向终端中写数据时触发</td></tr></tbody></table> 

<p>在SUSv2和POSIX.1-2001标准中的信号列表:</p>
<table><thead><tr><th>信号</th><th>值</th><th>动作</th><th>说明</th></tr></thead><tbody><tr><td>SIGTRAP</td><td>5</td><td>Core</td><td>Trap指令触发(如断点，在调试器中使用)</td></tr><tr><td>SIGBUS</td><td>0,7,10</td><td>Core</td><td>非法地址(内存地址对齐错误)</td></tr><tr><td>SIGPOLL</td><td></td><td>Term</td><td>Pollable event (Sys V). Synonym for SIGIO</td></tr><tr><td>SIGPROF</td><td>27,27,29</td><td>Term</td><td>性能时钟信号(包含系统调用时间和进程占用CPU的时间)</td></tr><tr><td>SIGSYS</td><td>12,31,12</td><td>Core</td><td>无效的系统调用(SVr4)</td></tr><tr><td>SIGURG</td><td>16,23,21</td><td>Ign</td><td>有紧急数据到达Socket(4.2BSD)</td></tr><tr><td>SIGVTALRM</td><td>26,26,28</td><td>Term</td><td>虚拟时钟信号(进程占用CPU的时间)(4.2BSD)</td></tr><tr><td>SIGXCPU</td><td>24,24,30</td><td>Core</td><td>超过CPU时间资源限制(4.2BSD)</td></tr><tr><td>SIGXFSZ</td><td>25,25,31</td><td>Core</td><td>超过文件大小资源限制(4.2BSD)</td></tr></tbody></table>

<h3 id="Go中的Signal发送和处理">Go中的Signal发送和处理</h3>
<p>有时候我们想在Go程序中处理Signal信号，比如收到<code>SIGTERM</code>信号后优雅的关闭程序(参看下一节的应用)。<br>Go信号通知机制可以通过往一个channel中发送<code>os.Signal</code>实现。<br>首先我们创建一个os.Signal channel，然后使用<code>signal.Notify</code>注册要接收的信号。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"os"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"os/signal"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"syscall"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line"></div><div class="line">    <span class="comment">// Go signal notification works by sending `os.Signal`</span></div><div class="line">    <span class="comment">// values on a channel. We'll create a channel to</span></div><div class="line">    <span class="comment">// receive these notifications (we'll also make one to</span></div><div class="line">    <span class="comment">// notify us when the program can exit).</span></div><div class="line">    sigs := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal,<span class="number"> 1</span>)</div><div class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">bool</span>,<span class="number"> 1</span>)</div><div class="line"></div><div class="line">    <span class="comment">// `signal.Notify` registers the given channel to</span></div><div class="line">    <span class="comment">// receive notifications of the specified signals.</span></div><div class="line">    signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)</div><div class="line"></div><div class="line">    <span class="comment">// This goroutine executes a blocking receive for</span></div><div class="line">    <span class="comment">// signals. When it gets one it'll print it out</span></div><div class="line">    <span class="comment">// and then notify the program that it can finish.</span></div><div class="line">    <span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">        sig := &lt;-sigs</div><div class="line">        fmt.Println()</div><div class="line">        fmt.Println(sig)</div><div class="line">        done &lt;- <span class="constant">true</span></div><div class="line">    }()</div><div class="line"></div><div class="line">    <span class="comment">// The program will wait here until it gets the</span></div><div class="line">    <span class="comment">// expected signal (as indicated by the goroutine</span></div><div class="line">    <span class="comment">// above sending a value on `done`) and then exit.</span></div><div class="line">    fmt.Println(<span class="string">"awaiting signal"</span>)</div><div class="line">    &lt;-done</div><div class="line">    fmt.Println(<span class="string">"exiting"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>go run main.go</code>执行这个程序，敲入ctrl-C会发送<code>SIGINT</code>信号。 此程序接收到这个信号后会打印退出。</p>
<h3 id="Go网络服务器如果无缝重启">Go网络服务器如果无缝重启</h3>
<p>Go很适合编写服务器端的网络程序。DevOps经常会遇到的一个情况是升级系统或者重新加载配置文件，在这种情况下我们需要重启此网络程序，如果网络程序暂停的时间较长，则给客户的感觉很不好。<br>如何实现优雅地重启一个Go网络程序呢。主要要解决两个问题：</p>
<ol>
<li>进程重启不需要关闭监听的端口</li>
<li>既有请求应当完全处理或者超时</li>
</ol>
<p><a href="http://twitter.com/humblehack" target="_blank" rel="external">@humblehack</a> 在他的文章<a href="http://grisha.org/blog/2014/06/03/graceful-restart-in-golang/" target="_blank" rel="external">Graceful Restart in Golang</a>中提供了一种方式，而<a href="https://github.com/fvbock" target="_blank" rel="external">Florian von Bock</a>根据此思路实现了一个框架<a href="https://github.com/fvbock/endless" target="_blank" rel="external">endless</a>。<br>此框架使用起来超级简单:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">err := endless.ListenAndServe(<span class="string">"localhost:4242"</span>, mux)</div></pre></td></tr></table></figure>

<p>只需替换 <code>http.ListenAndServe</code> 和 <code>http.ListenAndServeTLS</code>。</p>
<p>它会监听这些信号： <code>syscall.SIGHUP</code>, <code>syscall.SIGUSR1</code>, <code>syscall.SIGUSR2</code>, <code>syscall.SIGINT</code>, <code>syscall.SIGTERM</code>, 和 <code>syscall.SIGTSTP</code>。</p>
<p>此文章提到的思路是：</p>
<ol>
<li>通过<code>exec.Command</code> fork一个新的进程，同时继承当前进程的打开的文件(输入输出，socket等)</li>
</ol>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">file := netListener.File() <span class="comment">// this returns a Dup()</span></div><div class="line">path := <span class="string">"/path/to/executable"</span></div><div class="line">args := []<span class="typename">string</span>{</div><div class="line">    <span class="string">"-graceful"</span>}</div><div class="line"></div><div class="line">cmd := exec.Command(path, args...)</div><div class="line">cmd.Stdout = os.Stdout</div><div class="line">cmd.Stderr = os.Stderr</div><div class="line">cmd.ExtraFiles = []*os.File{file}</div><div class="line"></div><div class="line">err := cmd.Start()</div><div class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">    log.Fatalf(<span class="string">"gracefulRestart: Failed to launch, error: %v"</span>, err)</div><div class="line">}</div></pre></td></tr></table></figure>

<ol>
<li>子进程初始化<br>网络程序的启动代码</li>
</ol>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">server := &http.Server{Addr: <span class="string">"0.0.0.0:8888"</span>}</div><div class="line"></div><div class="line"> <span class="keyword">var</span> gracefulChild <span class="typename">bool</span></div><div class="line"> <span class="keyword">var</span> l net.Listever</div><div class="line"> <span class="keyword">var</span> err error</div><div class="line"></div><div class="line"> flag.BoolVar(&gracefulChild, <span class="string">"graceful"</span>, <span class="constant">false</span>, <span class="string">"listen on fd open 3 (internal use only)"</span>)</div><div class="line"></div><div class="line"> <span class="keyword">if</span> gracefulChild {</div><div class="line">     log.Print(<span class="string">"main: Listening to existing file descriptor 3."</span>)</div><div class="line">     f := os.NewFile<span class="number">(3</span>, <span class="string">""</span>)</div><div class="line">     l, err = net.FileListener(f)</div><div class="line"> } <span class="keyword">else</span> {</div><div class="line">     log.Print(<span class="string">"main: Listening on a new file descriptor."</span>)</div><div class="line">     l, err = net.Listen(<span class="string">"tcp"</span>, server.Addr)</div><div class="line"> }</div></pre></td></tr></table></figure>

<ol>
<li>父进程停止</li>
</ol>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> gracefulChild {</div><div class="line">    parent := syscall.Getppid()</div><div class="line">    log.Printf(<span class="string">"main: Killing parent pid: %v"</span>, parent)</div><div class="line">    syscall.Kill(parent, syscall.SIGTERM)</div><div class="line">}</div><div class="line"></div><div class="line">server.Serve(l)</div></pre></td></tr></table></figure>

<p>同时他还提供的如何处理已经正在处理的请求。可以查看它的文章了解详细情况。</p>
<p>因此，处理特定的信号可以实现程序无缝的重启。</p>
<h3 id="参考资料">参考资料</h3>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Unix_signal" target="_blank" rel="external">https://en.wikipedia.org/wiki/Unix_signal</a></li>
<li><a href="http://hutaow.com/blog/2013/10/19/linux-signal/" target="_blank" rel="external">http://hutaow.com/blog/2013/10/19/linux-signal/</a></li>
<li><a href="http://www.ucs.cam.ac.uk/docs/course-notes/unix-courses/Building/files/signals.pdf" target="_blank" rel="external">http://www.ucs.cam.ac.uk/docs/course-notes/unix-courses/Building/files/signals.pdf</a></li>
<li><a href="https://golang.org/pkg/os/signal/" target="_blank" rel="external">https://golang.org/pkg/os/signal/</a></li>
<li><a href="https://gobyexample.com/signals" target="_blank" rel="external">https://gobyexample.com/signals</a></li>
<li><a href="http://grisha.org/blog/2014/06/03/graceful-restart-in-golang/" target="_blank" rel="external">http://grisha.org/blog/2014/06/03/graceful-restart-in-golang/</a></li>
<li><a href="https://fitstar.github.io/falcore/hot_restart.html" target="_blank" rel="external">https://fitstar.github.io/falcore/hot_restart.html</a></li>
<li><a href="https://github.com/rcrowley/goagain" target="_blank" rel="external">https://github.com/rcrowley/goagain</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>信号(Signal)是Linux, 类Unix和其它POSIX兼容的操作系统中用来进程间通讯的一种方式。一个信号就是一个异步的通知，发送给某个进程，或者同进程的某个线程，告诉它们某个事件发生了。<br>当信号发送到某个进程中时，操作系统会中断该进程的正常流程，并进入相应的信号处理函数执行操作，完成后再回到中断的地方继续执行。<br>如果目标进程先前注册了某个信号的处理程序(signal handler),则此处理程序会被调用，否则缺省的处理程序被调用。</p>
]]>
    
    </summary>
    
      <category term="Linux" scheme="http://colobu.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[交叉编译Go程序]]></title>
    <link href="http://colobu.com/2015/09/28/go-cross-compiling/"/>
    <id>http://colobu.com/2015/09/28/go-cross-compiling/</id>
    <published>2015-09-28T06:10:33.000Z</published>
    <updated>2015-10-10T02:31:17.119Z</updated>
    <content type="html"><![CDATA[<p>Go 1.5以前，交叉编译程序还是有一点麻烦的，你需要<a href="http://dave.cheney.net/2013/07/09/an-introduction-to-cross-compilation-with-go-1-1" target="_blank" rel="external">massive scripts t</a>来编译和宿主机器不同的程序。</p>
<p>正如<a href="http://dave.cheney.net/2015/03/03/cross-compilation-just-got-a-whole-lot-better-in-go-1-5" target="_blank" rel="external"> comes with support for all architectures built in</a>文章中介绍的， Go 1.5可就简单的多了，你只需设置 <strong>GOOS</strong> 和 <strong>GOARCH </strong> 两个环境变量就能生成所需平台的Go程序。</p>
<p>比如使用下面的代码测试：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"runtime"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    fmt.Printf(<span class="string">"OS: %s\nArchitecture: %s\n"</span>, runtime.GOOS, runtime.GOARCH)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>编译它： <code>$ GOOS=darwin GOARCH=386 go build test.go</code><br>就可以生成运行在<code>OS X</code>上的程序。<br><a id="more"></a></p>
<p>可用的OS和ARCH的值如下：</p>
<table cellpadding="0"><tbody><tr><th width="50"></th><th align="left" width="100"><code>$GOOS</code></th><th align="left" width="100"><code>$GOARCH</code></th></tr><tr><td></td><td><code>darwin</code></td><td><code>386</code></td></tr><tr><td></td><td><code>darwin</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>darwin</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>darwin</code></td><td><code>arm64</code></td></tr><tr><td></td><td><code>dragonfly</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>freebsd</code></td><td><code>386</code></td></tr><tr><td></td><td><code>freebsd</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>freebsd</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>386</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>arm64</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>ppc64</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>ppc64le</code></td></tr><tr><td></td><td><code>netbsd</code></td><td><code>386</code></td></tr><tr><td></td><td><code>netbsd</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>netbsd</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>openbsd</code></td><td><code>386</code></td></tr><tr><td></td><td><code>openbsd</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>openbsd</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>plan9</code></td><td><code>386</code></td></tr><tr><td></td><td><code>plan9</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>solaris</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>windows</code></td><td><code>386</code></td></tr><tr><td></td><td><code>windows</code></td><td><code>amd64</code></td></tr></tbody></table>

<p>不同的操作系统下的库可能有不同的实现， 比如<a href="https://golang.org/src/syscall/" target="_blank" rel="external">syscall</a>库。go build没有内置的<code>#define</code>或者预处理器之类的处理平台相关的代码取舍， 而是采用tag和文件后缀的方式实现。<br><strong>tag方式</strong><br>tag遵循一下规则</p>
<ol>
<li>a build tag is evaluated as the OR of space-separated options</li>
<li>each option evaluates as the AND of its comma-separated terms</li>
<li>each term is an alphanumeric word or, preceded by !, its negation</li>
</ol>
<p>在文件的头部增加tag:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// +build darwin freebsd netbsd openbsd</span></div></pre></td></tr></table></figure>

<p>可以有多个tag,之间是<strong>AND</strong>的关系</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// +build linux darwin</span></div><div class="line"><span class="comment">// +build 386</span></div></pre></td></tr></table></figure>

<p>注意tag和package中间需要有空行分隔，下面的例子是不对的:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// +build !linux</span></div><div class="line"><span class="keyword">package</span> mypkg <span class="comment">// wrong</span></div></pre></td></tr></table></figure>

<p><strong>文件后缀方式</strong><br>以<em>_$GOOS.go</em>为后缀的文件只在此平台上编译，其它平台上编译时就当此文件不存在。完整的后缀如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_<span class="variable">$GOOS_</span><span class="variable">$GOARCH</span>.go</div></pre></td></tr></table></figure>

<p>如syscall_linux_amd64.go,syscall_windows_386.go,syscall_windows.go等。</p>
<h4 id="参考文档">参考文档</h4>
<ol>
<li><a href="http://golangcookbook.com/chapters/running/cross-compiling/" target="_blank" rel="external">http://golangcookbook.com/chapters/running/cross-compiling/</a></li>
<li><a href="http://dave.cheney.net/2013/07/09/an-introduction-to-cross-compilation-with-go-1-1" target="_blank" rel="external">http://dave.cheney.net/2013/07/09/an-introduction-to-cross-compilation-with-go-1-1</a></li>
<li><a href="http://dave.cheney.net/2015/03/03/cross-compilation-just-got-a-whole-lot-better-in-go-1-5" target="_blank" rel="external">http://dave.cheney.net/2015/03/03/cross-compilation-just-got-a-whole-lot-better-in-go-1-5</a></li>
<li><a href="https://golang.org/doc/install/source#environment" target="_blank" rel="external">https://golang.org/doc/install/source#environment</a></li>
<li><a href="http://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool" target="_blank" rel="external">http://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Go 1.5以前，交叉编译程序还是有一点麻烦的，你需要<a href="http://dave.cheney.net/2013/07/09/an-introduction-to-cross-compilation-with-go-1-1" target="_blank" rel="external">massive scripts t</a>来编译和宿主机器不同的程序。</p>
<p>正如<a href="http://dave.cheney.net/2015/03/03/cross-compilation-just-got-a-whole-lot-better-in-go-1-5" target="_blank" rel="external"> comes with support for all architectures built in</a>文章中介绍的， Go 1.5可就简单的多了，你只需设置 <strong>GOOS</strong> 和 <strong>GOARCH </strong> 两个环境变量就能生成所需平台的Go程序。</p>
<p>比如使用下面的代码测试：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"runtime"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    fmt.Printf(<span class="string">"OS: %s\nArchitecture: %s\n"</span>, runtime.GOOS, runtime.GOARCH)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>编译它： <code>$ GOOS=darwin GOARCH=386 go build test.go</code><br>就可以生成运行在<code>OS X</code>上的程序。<br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[几种Go序列化库的性能比较]]></title>
    <link href="http://colobu.com/2015/09/28/Golang-Serializer-Benchmark-Comparison/"/>
    <id>http://colobu.com/2015/09/28/Golang-Serializer-Benchmark-Comparison/</id>
    <published>2015-09-28T05:39:23.000Z</published>
    <updated>2015-09-28T06:03:08.306Z</updated>
    <content type="html"><![CDATA[<p>序列化库在网络传输，RPC，数据库访问等环境中经常用到，它的性能的好坏直接影响着整个产品的性能。<br>本文列出了几种高性能的Go语言的序列化库，并通过一个简单的无循环引用的数据结构测试它们的性能。<br>测试代码: <a href="https://github.com/smallnest/gosercomp" target="_blank" rel="external">gosercomp at github</a><br><a id="more"></a></p>
<h3 id="测试的_Serializers">测试的 Serializers</h3>
<p>以golang自带的<em>encoding/json</em>和<em>encoding/xml</em>为基准，测试以下性能比较好的几种序列化库。</p>
<ul>
<li><a href="http://golang.org/pkg/encoding/json/" target="_blank" rel="external">encoding/json</a></li>
<li><a href="http://golang.org/pkg/encoding/xml/" target="_blank" rel="external">encoding/xml</a></li>
<li><a href="http://github.com/youtube/vitess/go/bson" target="_blank" rel="external">github.com/youtube/vitess/go/bson</a></li>
<li><a href="http://github.com/philhofer/msgp" target="_blank" rel="external">github.com/philhofer/msgp</a></li>
<li><a href="http://github.com/golang/protobuf" target="_blank" rel="external">github.com/golang/protobuf</a></li>
<li><a href="http://github.com/gogo/protobuf" target="_blank" rel="external">github.com/gogo/protobuf</a></li>
<li><a href="http://github.com/google/flatbuffers" target="_blank" rel="external">github.com/google/flatbuffers</a></li>
</ul>
<h3 id="排除的_Serializers">排除的 Serializers</h3>
<p>基于 alecthomas 已有的<a href="https://github.com/alecthomas/go_serialization_benchmarks" target="_blank" rel="external">测试</a>，下面的库由于性能的原因没有进行测试。</p>
<ul>
<li><a href="http://golang.org/pkg/encoding/gob/" target="_blank" rel="external">encoding/gob</a></li>
<li><a href="http://github.com/alecthomas/binary" target="_blank" rel="external">github.com/alecthomas/binary</a></li>
<li><a href="http://github.com/davecgh/go-xdr/xdr" target="_blank" rel="external">github.com/davecgh/go-xdr/xdr</a></li>
<li><a href="http://github.com/ugorji/go/codec" target="_blank" rel="external">github.com/ugorji/go/codec</a></li>
<li><a href="http://labix.org/v2/mgo/bson" target="_blank" rel="external">labix.org/v2/mgo/bson</a></li>
<li><a href="http://github.com/DeDiS/protobuf" target="_blank" rel="external">github.com/DeDiS/protobuf</a></li>
<li><a href="http://gopkg.in/vmihailenco/msgpack.v2" target="_blank" rel="external">gopkg.in/vmihailenco/msgpack.v2</a></li>
</ul>
<h3 id="测试环境">测试环境</h3>
<p>对于<code>github.com/youtube/vitess/go/bson</code>，你可能需要安装 <code>goimports</code>和<code>codegen</code>:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/youtube/vitess/<span class="keyword">go</span>/bson</div><div class="line"><span class="keyword">go</span> get golang.org/x/tools/cmd/goimports</div><div class="line"><span class="keyword">go</span> get github.com/youtube/vitess/tree/master/<span class="keyword">go</span>/cmd/bsongen</div><div class="line">bsongen -file data.<span class="keyword">go</span> -o bson_data.<span class="keyword">go</span> -<span class="keyword">type</span> ColorGroup</div></pre></td></tr></table></figure>

<p>对于 <code>MessagePack</code>，你需要安装库以及利用<code>go generate</code>生成相关的类:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/tinylib/msgp</div><div class="line"><span class="keyword">go</span> generate</div></pre></td></tr></table></figure>

<p>对于<code>ProtoBuf</code>,你需要安装<a href="https://github.com/google/protobuf/releases" target="_blank" rel="external">protoc编译器</a>，以及protoc库以及生成相关的类：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/golang/protobuf</div><div class="line"><span class="keyword">go</span> generate</div></pre></td></tr></table></figure>

<p>对于<code>gogo/protobuf</code>,你需要安装库以及生成相关的类：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/gogo/protobuf/gogoproto</div><div class="line"><span class="keyword">go</span> get github.com/gogo/protobuf/protoc-gen-gofast</div><div class="line"><span class="keyword">go</span> generate</div></pre></td></tr></table></figure>

<p>对于<code>flatbuffers</code>,你需要安装<a href="https://github.com/google/flatbuffers/releases" target="_blank" rel="external">flatbuffers编译器</a>, 以及flatbuffers库：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">github.com/google/flatbuffers/<span class="keyword">go</span></div><div class="line"><span class="keyword">go</span> generate</div></pre></td></tr></table></figure>

<p>事实上，这里通过<code>go generate</code>生成相关的类，你也可以通过命令行生成，请参考<code>data.go</code>中的注释。</p>
<p>运行下面的命令测试:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">go test -bench</span>=<span class="string">.</span></div></pre></td></tr></table></figure>

<h3 id="测试数据">测试数据</h3>
<p>所有的测试基于以下的struct,自动生成的struct， 比如protobuf也和此结构基本一致。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ColorGroup <span class="keyword">struct</span> {</div><div class="line">	ID     <span class="typename">int</span> <span class="string">`json:"id" xml:"id,attr""`</span></div><div class="line">	Name   <span class="typename">string</span> <span class="string">`json:"name" xml:"name"`</span></div><div class="line">	Colors []<span class="typename">string</span> <span class="string">`json:"colors" xml:"colors"`</span></div><div class="line">}</div></pre></td></tr></table></figure>


<h3 id="性能测试结果">性能测试结果</h3>
<figure class="highlight csv"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="header">benchmark _name                               iter                 time/iter </span></div><div class="line">------------------------------------------------------------------------------</div><div class="line">BenchmarkMarshalByJson-4                      1000000              1877 ns/op</div><div class="line">BenchmarkUnmarshalByJson-4                    300000               4099 ns/op</div><div class="line"></div><div class="line">BenchmarkMarshalByXml-4                       200000               8315 ns/op</div><div class="line">BenchmarkUnmarshalByXml-4                     100000               26627 ns/op</div><div class="line"></div><div class="line">BenchmarkMarshalByBson-4                      500000               3518 ns/op</div><div class="line">BenchmarkUnmarshalByBson-4                    1000000              1778 ns/op</div><div class="line"></div><div class="line">BenchmarkMarshalByMsgp-4                      5000000              292 ns/op</div><div class="line">BenchmarkUnmarshalByMsgp-4                    3000000              543 ns/op</div><div class="line"></div><div class="line">BenchmarkMarshalByProtoBuf-4                  1000000              1011 ns/op</div><div class="line">BenchmarkUnmarshalByProtoBuf-4                1000000              1750 ns/op</div><div class="line"></div><div class="line">BenchmarkMarshalByGogoProtoBuf-4              5000000              220 ns/op</div><div class="line">BenchmarkUnmarshalByGogoProtoBuf-4            2000000              901 ns/op</div><div class="line"></div><div class="line">BenchmarkMarshalByFlatBuffers-4               3000000              566 ns/op</div><div class="line">BenchmarkUnmarshalByFlatBuffers-4             50000000             9.54 ns/op</div><div class="line">BenchmarUmByFlatBuffers<span class="emphasis">_withFields-4          3000000              554 ns/op</span></div></pre></td></tr></table></figure>

<p>多次测试结果差不多。<br>从结果上上来看， <strong>MessagePack</strong> , <strong>gogo/protobuf</strong> ,和 <strong>flatbuffers</strong> 差不多，这三个优秀的库在序列化和反序列化上各有千秋，而且都是跨语言的。<br>从便利性上来讲，你可以选择 <strong>MessagePack</strong> 和 <strong>gogo/protobuf</strong> 都可以，两者都有大厂在用。<br><strong>flatbuffers</strong> 有点反人类，因为它的操作很底层，而且从结果上来看，序列化的性能要差一点。但是它有一个好处，那就是如果你只需要特定的字段，<br>你无须将所有的字段都反序列化。从结果上看，不反序列化字段每个调用只用了9.54纳秒，这是因为字段只有在被访问的时候才从byte数组转化为相应的类型。<br>因此在特殊的场景下，它可以提高N被的性能。但是序列化的代码的面相太难看了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>序列化库在网络传输，RPC，数据库访问等环境中经常用到，它的性能的好坏直接影响着整个产品的性能。<br>本文列出了几种高性能的Go语言的序列化库，并通过一个简单的无循环引用的数据结构测试它们的性能。<br>测试代码: <a href="https://github.com/smallnest/gosercomp" target="_blank" rel="external">gosercomp at github</a><br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go 反射的规则]]></title>
    <link href="http://colobu.com/2015/09/23/laws-of-goang-reflection/"/>
    <id>http://colobu.com/2015/09/23/laws-of-goang-reflection/</id>
    <published>2015-09-23T06:56:44.000Z</published>
    <updated>2015-09-23T08:04:05.931Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="http://blog.golang.org/laws-of-reflection" target="_blank" rel="external">The Laws of Reflection</a><br>翻译: <a href="http://mikespook.com/2011/09/%E5%8F%8D%E5%B0%84%E7%9A%84%E8%A7%84%E5%88%99/" target="_blank" rel="external">反射的规则</a> by <a href="http://mikespook.com/author/mikespook/" target="_blank" rel="external">mikespook</a> 转载时略作修改</p>
<h3 id="反射的规则">反射的规则</h3>
<p>在运行时反射是程序检查其所拥有的结构，尤其是类型的一种能力；这是元编程的一种形式。它同时也是造成混淆的重要来源。</p>
<p>在这篇文章中将试图明确解释在 Go 中的反射是如何工作的。每个语言的反射模型都不同（同时许多语言根本不支持反射）。不过这篇文章是关于 Go 的，因此接下来的内容“反射”这一词表示“在 Go 中的反射”。<br><a id="more"></a></p>
<h3 id="类型_Types_和接口_Interfaces">类型 Types 和接口 Interfaces</h3>
<p>由于反射构建于类型系统之上，就从复习一下 Go 中的类型开始吧。<br>Go 是静态类型的。每一个变量有一个静态的类型，也就是说，有一个已知类型并且在编译时就确定下来了：<em>int</em>，<em>float32</em>，<em>MyType</em>，<em>[]byte</em> 等等。如果定义</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> MyInt <span class="typename">int</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> i <span class="typename">int</span></div><div class="line"><span class="keyword">var</span> j MyInt</div></pre></td></tr></table></figure>

<p>那么<em> i</em> 的类型为 <em>int</em> 而<em>j</em> 的类型为 <em>MyInt</em>。即使变量<em> i</em> 和 <em>j</em> 有相同的底层类型，它们仍然是有不同的静态类型的。未经转换是不能相互直接赋值的。</p>
<p>在类型中有一个重要的类别就是接口类型，表达了固定的一个方法集合。一个接口变量可以存储任意实际值（非接口），只要这个值直线了接口的方法。众所周知的一个例子就是<em> is io.Reade</em>r 和 <em>io.Writer</em>，来自 <a href="http://golang.org/pkg/io/" target="_blank" rel="external">io 包</a>的类型 <em>Reader</em> 和 <em>Writer</em>：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Reader is the interface that wraps the basic Read method.</span></div><div class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> {</div><div class="line">    Read(p []<span class="typename">byte</span>) (n <span class="typename">int</span>, err error)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// Writer is the interface that wraps the basic Write method.</span></div><div class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> {</div><div class="line">    Write(p []<span class="typename">byte</span>) (n <span class="typename">int</span>, err error)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>任何用这个声明实现了 <em>Read</em>（或 <em>Write</em>）方法的类型，可以说它实现了 <em>io.Reader</em>（或 <em>io.Writer</em>）。基于本讨论来说，这意味着 <em>io.Reader</em> 类型的变量可以保存任意值，只要这个值的类型实现了 Read 方法：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> r io.Reader</div><div class="line">r = os.Stdin</div><div class="line">r = bufio.NewReader(r)</div><div class="line">r = <span class="built_in">new</span>(bytes.Buffer)</div><div class="line"><span class="comment">// and so on</span></div></pre></td></tr></table></figure>

<p>有一个事情是一定要明确的，不论 <em>r</em> 保存了什么值，<em>r</em> 的类型总是<em> io.Reader</em>：Go 是静态类型，而 <em>r</em> 的静态类型是 <em>io.Reader</em>。</p>
<p>接口类型的一个极端重要的例子是空接口： <code>interface{}</code>, 它表示空的方法集合，由于任何值都有另个或者多个方法，所以任何值都可以满足它。</p>
<p>也有人说 Go 的接口是动态类型的，不过这是一种误解。它们是静态类型的：接口类型的变量总是具有相同的静态类型，即使在运行时存储在接口变量中的值可能会改变类型，该值将始终满足该接口。</p>
<p>对于所有这些都必须严谨的对待，因为反射和接口密切相关。</p>
<h3 id="接口的表现representation">接口的表现representation</h3>
<p>Russ Cox 已经写了一篇详细介绍 Go 中接口值表现的<a href="http://research.swtch.com/2009/12/go-data-structures-interfaces.html" target="_blank" rel="external">文章</a>。所以无需在这里重复整个故事了，不过简单的总结还是必要的。</p>
<p>接口类型的变量存储了两个内容：赋值给变量实际的值和这个值的类型描述。更准确的说，值是底层实现了接口的实际数据项目，而类型描述了这个项目完整的类型。例如下面，</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> r io.Reader</div><div class="line">tty, err := os.OpenFile(<span class="string">"/dev/tty"</span>, os.O_RDWR,<span class="number"> 0</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">    <span class="keyword">return</span> <span class="constant">nil</span>, err</div><div class="line">}</div><div class="line">r = tty</div></pre></td></tr></table></figure>

<p><em>r</em> 包含的是 <em>(value, type)</em> 对，如 <em>(tty, </em>os.File)<em>。注意类型 </em>os.File<em> 除了 </em>Read<em> 方法还实现了其他方法：尽管接口值仅仅提供了访问 </em>Read* 方法的可能，但是内部包含了这个值的完整的类型信息。这也就是为什么可以这样做：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> w io.Writer</div><div class="line">w = r.(io.Writer)</div></pre></td></tr></table></figure>

<p>在这个赋值中的表达式是一个类型断言：它断言 <em>r</em> 内部项的同时也实现了 <em>io.Writer</em>，因此可以赋值它到 <em>w</em>。在赋值之后，<em>w</em> 将会包含 <em>(tty, </em>os.File)<em>。跟在 </em>r* 中保存的一致。接口的静态类型决定了哪个方法可以通过接口变量调用，即便内部实际的值可能有一个更大的方法集。</p>
<p>接下来，可以这样做：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> empty <span class="keyword">interface</span>{}</div><div class="line">empty = w</div></pre></td></tr></table></figure>

<p>而空接口值 <em>e</em> 也将包含同样的 <em>(tty, </em>os.File)*。这很方便：空接口可以保存任何值同时保留关于那个值的所有信息。</p>
<p>（这里无需类型断言，因为 <em>w</em> 是肯定满足空接口的。在这个例子中，将一个值从 <em>Reader</em> 变为 <em>Writer</em>，由于 <em>Writer</em> 的方法不是 <em>Reader</em> 的子集，所以就必须明确使用类型断言。）</p>
<p>一个很重要的细节是接口内部的对总是 (value, 实际类型) 的格式，而不会有 (value, 接口类型) 的格式。接口不能保存接口值。</p>
<p>现在准备好来反射了。</p>
<h3 id="反射的第一条规则">反射的第一条规则</h3>
<p><strong>1 从接口值到反射对象的反射</strong></p>
<p>在基本的层面上，反射只是一个检查存储在接口变量中的类型和值的算法。从头说起，在 reflect 包中有两个类型需要了解：<code>Type</code> 和 <code>Value</code>。这两个类型使得可以访问接口变量的内容，还有两个简单的函数，<code>reflect.TypeOf</code> 和 <code>reflect.ValueOf</code>，从接口值中分别获取 <code>reflect.Type</code> 和 <code>reflect.Value</code>。（同样，从 <code>reflect.Value</code> 也很容易能够获得 <code>reflect.Type</code>，不过这里让 <code>Value</code> 和 <code>Type</code> 在概念上分离了。）</p>
<p>从 <code>TypeOf</code> 开始：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"reflect"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    <span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">    fmt.Println(<span class="string">"type:"</span>, reflect.TypeOf(x))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这个程序打印</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span>: <span class="typename">float64</span></div></pre></td></tr></table></figure>

<p>接口在哪里呢，读者可能会对此有疑虑，看起来程序传递了一个 <em>float64</em> 类型的变量 <em>x</em>，而不是一个接口值，到 <code>reflect.TypeOf</code>。但是，它确实就在那里：如同 <em>godoc</em> 报告的那样，<code>reflect.TypeOf</code> 的声明包含了空接口：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// TypeOf returns the reflection Type of the value in the interface{}.</span></div><div class="line"><span class="keyword">func</span> TypeOf(i <span class="keyword">interface</span>{}) Type</div></pre></td></tr></table></figure>

<p>当调用 <em>reflect.TypeOf(x)</em> 的时候，<em>x</em> 首先存储于一个作为参数传递的空接口中；<em>reflect.TypeOf</em> 解包这个空接口来还原类型信息。<br><em>reflect.ValueOf</em> 函数，当然就是还原那个值（从这里开始将会略过那些概念示例，而聚焦于可执行的代码）：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">fmt.Println(<span class="string">"value:"</span>, reflect.ValueOf(x))</div></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">value: &lt;<span class="typename">float64</span> Value&gt;</div></pre></td></tr></table></figure>

<p><em>reflect.Type</em> 和 <em>reflect.Value</em> 都有许多方法用于检查和操作它们。一个重要的例子是 <em>Value</em> 有一个 <em>Type</em> 方法返回 <em>reflect.Value</em> 的 <em>Type</em>。另一个是 <em>Type</em> 和 <em>Value </em>都有 <em>Kind</em> 方法返回一个常量来表示类型：<em>Uint</em>、<em>Float64</em>、<em>Slice</em> 等等。同样 <em>Value</em> 有叫做 <em>Int</em> 和 <em>Float</em> 的方法可以获取存储在内部的值（跟 <em>int64</em> 和 <em>float64</em> 一样）：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">v := reflect.ValueOf(x)</div><div class="line">fmt.Println(<span class="string">"type:"</span>, v.Type())</div><div class="line">fmt.Println(<span class="string">"kind is float64:"</span>, v.Kind() == reflect.Float64)</div><div class="line">fmt.Println(<span class="string">"value:"</span>, v.Float())</div></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span>: <span class="typename">float64</span></div><div class="line">kind is <span class="typename">float64</span>: <span class="constant">true</span></div><div class="line">value:<span class="number"> 3.4</span></div></pre></td></tr></table></figure>

<p>同时也有类似 <em>SetInt</em> 和 <em>SetFloat</em> 的方法，不过在使用它们之前需要理解可设置性，这部分的主题在下面的第三条规则中讨论。</p>
<p>反射库有着若干特性值得特别说明。首先，为了保持 API 的简洁，“获取者”和“设置者”用 <em>Value</em> 的最宽泛的类型来处理值：例如，<em>int64</em> 可用于所有带符号整数。也就是说 <em>Value</em> 的 <em>Int</em> 方法返回一个 <em>int64</em>，而 <em>SetInt</em> 值接受一个<em> int64</em>；所以可能必须转换到实际的类型：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">uint8</span> = <span class="string">'x'</span></div><div class="line">v := reflect.ValueOf(x)</div><div class="line">fmt.Println(<span class="string">"type:"</span>, v.Type())                            <span class="comment">// uint8.</span></div><div class="line">fmt.Println(<span class="string">"kind is uint8: "</span>, v.Kind() == reflect.Uint8) <span class="comment">// true.</span></div><div class="line">x = <span class="typename">uint8</span>(v.Uint())                                       <span class="comment">// v.Uint returns a uint64.</span></div></pre></td></tr></table></figure>

<p>第二个特性是反射对象的 <code>Kind</code> 描述了底层类型，而不是静态类型。如果一个反射对象包含了用户定义的整数类型的值，就像</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> MyInt <span class="typename">int</span></div><div class="line"><span class="keyword">var</span> x MyInt =<span class="number"> 7</span></div><div class="line">v := reflect.ValueOf(x)</div></pre></td></tr></table></figure>

<p><em>v</em> 的 <code>Kind</code> 仍然是 <em>reflect.Int</em>，尽管<em> x </em>的静态类型是 <em>MyInt</em>，而不是 <em>int</em>。换句话说，<code>Kind</code> 无法从 <em>MyInt</em> 中区分 <em>int</em>，而 <code>Type</code> 可以。</p>
<h3 id="反射的第二条规则">反射的第二条规则</h3>
<p><strong>2 从反射对象到接口值的反射</strong><br>如同物理中的反射，在 Go 中的反射也存在它自己的镜像。<br>从 <em>reflect.Value</em> 可以使用<em> Interface</em> 方法还原接口值；方法打包类型和值信息到接口表达中，并返回这个结果：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Interface returns v's value as an interface{}.</span></div><div class="line"><span class="keyword">func</span> (v Value) Interface() <span class="keyword">interface</span>{}</div></pre></td></tr></table></figure>

<p>因此可以这样：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">y := v.Interface().(<span class="typename">float64</span>) <span class="comment">// y 将为类型 float64。</span></div><div class="line">fmt.Println(y)</div></pre></td></tr></table></figure>

<p>通过反射对象 <em>v</em> 可以打印 <em>float64</em> 的表达值。</p>
<p>然而，还可以做得更好。<em>fmt.Println，fmt.Printf</em> 和其他的打印方法都是以一个空接口值作为参数的，由 <em>fmt</em> 包在内部解包的方式就像之前的例子一样。因此正确的打印 <em>reflect.Value </em>内容的方法就是将 <em>Interface</em> 方法的结果传递给格式化打印：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fmt.Println(v.Interface())</div></pre></td></tr></table></figure>

<p>（为什么不是 <em>fmt.Println(v)</em>？因为 <em>v</em> 是一个 <em>reflect.Value</em>；这里希望是它保存的实际的值。）由于值是 <em>float64</em>，如果需要的话，甚至可以使用浮点格式化：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fmt.Printf(<span class="string">"value is %7.1e\n"</span>, v.Interface())</div></pre></td></tr></table></figure>

<p>然后就得到这个</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3.4e+00</div></pre></td></tr></table></figure>

<p>再次强调，对于 <em>v.Interface()</em> 无需类型断言其为 <em>float64</em>；空接口值在内部有实际值的类型信息，而 <em>Printf</em> 会发现它。</p>
<p>简单来说，<em>Interface</em> 方法是 <em>ValueOf</em> 函数的镜像，除了返回值总是静态类型 <em>interface{}</em>。</p>
<p>回顾：反射可以从接口值得到反射对象，也可以反过来。</p>
<h3 id="反射的第三条规则">反射的第三条规则</h3>
<p><strong>3 要想修改反射对象，其值必须可设置</strong><br>第三条规则是最为精细和迷惑的，但是如果从第一个规则开始，还是足以让人明白的。</p>
<p>这里有一些不能工作的代码，值得学习。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">v := reflect.ValueOf(x)</div><div class="line">v.SetFloat<span class="number">(7.1</span>) <span class="comment">// Error: will panic.</span></div></pre></td></tr></table></figure>

<p>如果运行这个代码，它报出神秘的 panic 消息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">panic: reflect.Value.SetFloat <span class="keyword">using</span> unaddressable <span class="keyword">value</span></div></pre></td></tr></table></figure>

<p>问题不在于值 <em>7.1</em> 不能地址化；在于 <em>v</em> 不可设置。设置性是反射值的一个属性，并不是所有的反射值有它。</p>
<p>值的 <code>CanSet</code> 方法提供了值的设置性；在这个例子中，</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">v := reflect.ValueOf(x)</div><div class="line">fmt.Println(<span class="string">"settability of v:"</span> , v.CanSet())</div></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">settability <span class="keyword">of</span> v: <span class="literal">false</span></div></pre></td></tr></table></figure>

<p>对不可设置值调用 <code>Set</code> 方法会有错误。但是什么是设置性？<br>设置性有一点点像地址化，但是更严格。这是用于创建反射对象的时候，能够修改实际存储的属性。设置性用于决定反射对象是否保存原始项目。当这样</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">v := reflect.ValueOf(x)</div></pre></td></tr></table></figure>

<p>就传递了一个 <em>x</em> 的副本到 <em>reflect.ValueOf</em>，所以接口值作为 <em>reflect.ValueOf</em> 参数创建了 <em>x</em> 的副本，而不是 <em>x</em> 本身。因此，如果语句</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v.SetFloat<span class="number">(7.1</span>)</div></pre></td></tr></table></figure>

<p>允许执行，虽然 <em> v</em>  看起来是从 <em> x </em> 创建的，它也无法更新 <em> x</em> 。反之，如果在反射值内部允许更新 <em> x </em> 的副本，那么 <em> x</em>  本身不会收到影响。这会造成混淆，并且毫无意义，因此这是非法的，而设置性是用于解决这个问题的属性。<br>这很神奇？其实不是。这实际上是一个常见的非同寻常的情况。考虑传递 x 到函数：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f(x)</div></pre></td></tr></table></figure>

<p>由于传递的是 x 的值的副本，而不是 x 本身，所以并不期望 f 可以修改 x。如果想要 f 直接修改 x，必须向函数传递 x 的地址（也就是，指向 x 的指针）：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f(&x)</div></pre></td></tr></table></figure>

<p>这是清晰且熟悉的，而反射通过同样的途径工作。如果希望通过反射来修改 <em>x</em>，必须向反射库提供一个希望修改的值的指针。</p>
<p>来试试吧。首先像平常那样初始化 <em>x</em>，然后创建指向它的反射值，叫做 <em>p</em>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">p := reflect.ValueOf(&x) <span class="comment">// Note: take the address of x.</span></div><div class="line">fmt.Println(<span class="string">"type of p:"</span>, p.Type())</div><div class="line">fmt.Println(<span class="string">"settability of p:"</span>, p.CanSet())</div></pre></td></tr></table></figure>


<p>这样输出为</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> of p: *<span class="typename">float64</span></div><div class="line">settability of p: <span class="constant">false</span></div></pre></td></tr></table></figure>

<p>反射对象<em> p</em> 并不是可设置的，但是我们不是想设置 <em>p</em>，而是 <em>p。为了获得 </em>p<em> 指向的内容，调用值上的 <code>Elem</code> 方法，从指针间接指向，然后保存反射值的结果叫做 </em>v*：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v := p.Elem()</div><div class="line">fmt.Println(<span class="string">"settability of v:"</span>, v.CanSet())</div></pre></td></tr></table></figure>

<p>现在 v 是可设置的反射对象，如同示例的输出，</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">settability of v: <span class="constant">true</span></div></pre></td></tr></table></figure>

<p>而由于它来自 <em>x</em>，最终可以使用 <em>v.SetFloat</em> 来修改 <em>x </em>的值：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">v.SetFloat<span class="number">(7.1</span>)</div><div class="line">fmt.Println(v.Interface())</div><div class="line">fmt.Println(x)</div></pre></td></tr></table></figure>

<p>得到期望的输出</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">7.1</div><div class="line">7.1</div></pre></td></tr></table></figure>

<p>反射可能很难理解，但是语言做了它应该做的，尽管底层的实现被反射的 <em>Type</em> 和 <em>Value</em> 隐藏了。务必记得反射值需要某些内容的地址来修改它指向的东西。</p>
<h3 id="结构体">结构体</h3>
<p>在之前的例子中<em>v</em> 本身不是指针，它只是从一个指针中获取的。这种情况更加常见的是当使用反射修改结构体的字段的时候。也就是当有结构体的地址的时候，可以修改它的字段。</p>
<p>这里有一个分析结构值 <em>t</em> 的简单例子。由于希望等下对结构体进行修改，所以从它的地址创建了反射对象。设置了 <em>typeOfT</em> 为其类型，然后用直接的方法调用来遍历其字段（参考 <a href="http://golang.org/pkg/reflect/" target="_blank" rel="external">reflect 包</a>了解更多信息）。注意从结构类型中解析了字段名字，但是字段本身是原始的 <em>reflect.Value</em> 对象。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> {</div><div class="line">    A <span class="typename">int</span></div><div class="line">    B <span class="typename">string</span></div><div class="line">}</div><div class="line">t := T<span class="number">{23</span>, <span class="string">"skidoo"</span>}</div><div class="line">s := reflect.ValueOf(&t).Elem()</div><div class="line">typeOfT := s.Type()</div><div class="line"><span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt; s.NumField(); i++ {</div><div class="line">    f := s.Field(i)</div><div class="line">    fmt.Printf(<span class="string">"%d: %s %s = %v\n"</span>, i,</div><div class="line">        typeOfT.Field(i).Name, f.Type(), f.Interface())</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这个程序的输出是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>: <span class="string">A int = 23</span></div><div class="line"><span class="attribute">1</span>: <span class="string">B string = skidoo</span></div></pre></td></tr></table></figure>

<p>这里还有一个关于设置性的要点：<em>T</em> 的字段名要大写（可导出），因为只有可导出的字段是可设置的。</p>
<p>由于 <em>s</em> 包含可设置的反射对象，所以可以修改结构体的字段。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s.Field<span class="number">(0</span>).SetInt<span class="number">(77</span>)</div><div class="line">s.Field<span class="number">(1</span>).SetString(<span class="string">"Sunset Strip"</span>)</div><div class="line">fmt.Println(<span class="string">"t is now"</span>, t)</div></pre></td></tr></table></figure>

<p>这里是结果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">t <span class="keyword">is</span> <span class="keyword">now</span> {77 Sunset Strip}</div></pre></td></tr></table></figure>

<p>如果修改程序使得 <em>s</em> 创建于 <em>t</em>，而不是 <em>&amp;t</em>，调用 <code>SetInt</code> 和 <code>SetString</code> 会失败，因为 <em>t</em> 的字段不可设置。</p>
<h3 id="总结">总结</h3>
<p>再次提示，反射的规则如下：</p>
<ul>
<li>从接口值到反射对象的反射。</li>
<li>从反射对象到接口值的反射。</li>
<li>为了修改反射对象，其值必须可设置。</li>
</ul>
<p>一旦理解了 Go 中的反射的这些规则，就会变得容易使用了，虽然它仍然很微妙。这是一个强大的工具，除非真得有必要，否则应当避免使用或小心使用。</p>
<p>还有大量的关于反射的内容没有涉及到——channel 上的发送和接收、分配内存、使用 slice 和 map、调用方法和函数——但是这篇文章已经够长了。这些话题将会在以后的文章中逐一讲解。</p>
<p><em>Rob Pike 撰写，2011年9月</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="http://blog.golang.org/laws-of-reflection" target="_blank" rel="external">The Laws of Reflection</a><br>翻译: <a href="http://mikespook.com/2011/09/%E5%8F%8D%E5%B0%84%E7%9A%84%E8%A7%84%E5%88%99/" target="_blank" rel="external">反射的规则</a> by <a href="http://mikespook.com/author/mikespook/" target="_blank" rel="external">mikespook</a> 转载时略作修改</p>
<h3 id="反射的规则">反射的规则</h3>
<p>在运行时反射是程序检查其所拥有的结构，尤其是类型的一种能力；这是元编程的一种形式。它同时也是造成混淆的重要来源。</p>
<p>在这篇文章中将试图明确解释在 Go 中的反射是如何工作的。每个语言的反射模型都不同（同时许多语言根本不支持反射）。不过这篇文章是关于 Go 的，因此接下来的内容“反射”这一词表示“在 Go 中的反射”。<br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[goreq: 极简单的流式golang http client]]></title>
    <link href="http://colobu.com/2015/09/21/goreq-A-simplified-golang-http-client/"/>
    <id>http://colobu.com/2015/09/21/goreq-A-simplified-golang-http-client/</id>
    <published>2015-09-21T06:27:09.000Z</published>
    <updated>2015-09-21T08:49:25.503Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/smallnest/goreq" target="_blank" rel="external">goreq</a>是一个极其简单的流式golang http client。它是我寻找类似Java OKHttp库的golang http client库时创建的。<br>最原始的代码fork自<a href="https://github.com/parnurzeal/gorequest" target="_blank" rel="external">gorequest</a>，它实现了Node.js库<a href="https://github.com/visionmedia/superagent" target="_blank" rel="external">SuperAgent</a>类似的功能。但是gorequest有一些bug没有fix，用户也提出了一些新的特性没有支持。<br>我重构了代码，更正了一些bug，增加了新的特性，尤其是POST BODY现在可以支持任意类型， 不再局限于json或者form字符串格式。 因为改动比较大，不好提交pull requests,干脆创建了一个新的轮子。这就是这个项目的最初目的。</p>
<p>比如下面调用baidu API根据IP地址获取地理信息的例子：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">headers := <span class="string">`{"User-Agent":"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",</span></div><div class="line">		"Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",</div><div class="line">		"Referer":"http://developer.baidu.com/map/index.php?title=webapi/ip-api"}`</div><div class="line">	</div><div class="line">_, body, _ := goreq.New().SetHeaders(headers).Get(<span class="string">"http://api.map.baidu.com/location/ip?ak=E4805d16520de693a3fe707cdc962045&ip=202.198.16.3&coor=bd09ll"</span>).End()</div></pre></td></tr></table></figure>

<a id="more"></a>
<h3 id="支持的HTTP_METHOD">支持的HTTP METHOD</h3>
<p>支持 <strong>GET, POST, HEAD, PUT, DELETE, PATCH</strong> 等http method,而且都想HTTP GET一样简单， 比如下面的HTTP PUT:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_, body, _ := goreq.New().Put(<span class="string">"http://httpbin.org/put"</span>).SendRawString(<span class="string">"hello world"</span>).End()</div><div class="line"><span class="built_in">println</span>(body)</div></pre></td></tr></table></figure>

<p>输出结果:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  "<span class="attribute">args</span>": <span class="value">{}</span>,</div><div class="line">  "<span class="attribute">data</span>": <span class="value"><span class="string">"hello world"</span></span>,</div><div class="line">  "<span class="attribute">files</span>": <span class="value">{}</span>,</div><div class="line">  "<span class="attribute">form</span>": <span class="value">{}</span>,</div><div class="line">  "<span class="attribute">headers</span>": <span class="value">{</span></div><div class="line">    "<span class="attribute">Accept-Encoding</span>": <span class="value"><span class="string">"gzip"</span></span>,</div><div class="line">    "<span class="attribute">Content-Length</span>": <span class="value"><span class="string">"11"</span></span>,</div><div class="line">    "<span class="attribute">Content-Type</span>": <span class="value"><span class="string">"text/plain"</span></span>,</div><div class="line">    "<span class="attribute">Host</span>": <span class="value"><span class="string">"httpbin.org"</span></span>,</div><div class="line">    "<span class="attribute">User-Agent</span>": <span class="value"><span class="string">"Go-http-client/1.1"</span></span></div><div class="line">  },</div><div class="line">  "<span class="attribute">json</span>": <span class="value"><span class="literal">null</span></span>,</div><div class="line">  "<span class="attribute">origin</span>": <span class="value"><span class="string">"117.121.34.13"</span></span>,</div><div class="line">  "<span class="attribute">url</span>": <span class="value"><span class="string">"http://httpbin.org/put"</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Request_Body及Header">Request Body及Header</h3>
<p>发送一个JSON格式的内容也很简单， 你可以传入一个struct, GoReq自动将它转为一个JSON字符串。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_, body, _ := goreq.New().Put(<span class="string">"http://httpbin.org/put"</span>).SendMapString(<span class="string">"name=Baymax&password=12345678"</span>).End()</div></pre></td></tr></table></figure>

<p>注意在这种情况下(设置了body，未设置Content-Type)， Content-Type为<code>application/json</code>。<br>甚至你可以传递一个查询字符串：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_, body, _ := goreq.New().Put(<span class="string">"http://httpbin.org/put"</span>).ContentType(<span class="string">"json"</span>).SendMapString(<span class="string">"name=Baymax&password=12345678"</span>).End()</div></pre></td></tr></table></figure>

<p>注意在这种情况下(设置了body，未设置Content-Type)， Content-Type为<code>application/x-www-form-urlencoded</code>。所以这里显示地设置为&quot;application/json&quot;</p>
<h3 id="Proxy和超时">Proxy和超时</h3>
<p>可以为读写设置一个超时时间：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_, _, err := goreq.New().Get(<span class="string">"http://httpbin.org//delay/100"</span>).Timeout<span class="number">(10</span> * time.Second).End()</div><div class="line"><span class="built_in">println</span>(err<span class="number">[0</span>].Error())</div></pre></td></tr></table></figure>

<h3 id="Basic_Auth">Basic Auth</h3>
<p>GoReq支持Basic Auth身份验证:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_, body, _ := goreq.New().Get(<span class="string">"http://httpbin.org/basic-auth/Baymax/12345678"</span>).SetBasicAuth(<span class="string">"Baymax"</span>, <span class="string">"12345678"</span>).End()</div></pre></td></tr></table></figure>

<p>更多的例子和文档请查看 <a href="http://godoc.org/github.com/smallnest/goreq" target="_blank" rel="external">godoc</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/smallnest/goreq" target="_blank" rel="external">goreq</a>是一个极其简单的流式golang http client。它是我寻找类似Java OKHttp库的golang http client库时创建的。<br>最原始的代码fork自<a href="https://github.com/parnurzeal/gorequest" target="_blank" rel="external">gorequest</a>，它实现了Node.js库<a href="https://github.com/visionmedia/superagent" target="_blank" rel="external">SuperAgent</a>类似的功能。但是gorequest有一些bug没有fix，用户也提出了一些新的特性没有支持。<br>我重构了代码，更正了一些bug，增加了新的特性，尤其是POST BODY现在可以支持任意类型， 不再局限于json或者form字符串格式。 因为改动比较大，不好提交pull requests,干脆创建了一个新的轮子。这就是这个项目的最初目的。</p>
<p>比如下面调用baidu API根据IP地址获取地理信息的例子：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">headers := <span class="string">`{"User-Agent":"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",</span></div><div class="line">		"Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",</div><div class="line">		"Referer":"http://developer.baidu.com/map/index.php?title=webapi/ip-api"}`</div><div class="line">	</div><div class="line">_, body, _ := goreq.New().SetHeaders(headers).Get(<span class="string">"http://api.map.baidu.com/location/ip?ak=E4805d16520de693a3fe707cdc962045&ip=202.198.16.3&coor=bd09ll"</span>).End()</div></pre></td></tr></table></figure>

]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RecyclerView的拖动和滑动 第二部分 ：拖块，Grid以及自定义动画]]></title>
    <link href="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-2/"/>
    <id>http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-2/</id>
    <published>2015-09-16T01:57:50.000Z</published>
    <updated>2015-09-16T02:27:31.650Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-6a6f0c422efd" target="_blank" rel="external">Drag and Swipe with RecyclerView Part Two: Handles, Grids, and Custom Animations </a><br>翻译：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a> </p>
<p>在<a href="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/" target="_blank" rel="external">第一部分</a>，我们介绍了<a href="http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" target="_blank" rel="external">ItemTouchHelper</a>，以及<a href="http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html" target="_blank" rel="external">ItemTouchHelper.Callback</a> 的实现，在线性列表（RecyclerView）中添加基本的拖拽&amp;拖放与滑动删除。本文将在前文例子的基础上扩展，增加对grid布局的支持，处理拖拽的初始化，提示被选中的view，同时自定义滑动的动画。<br><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-2/1.gif" alt=""><br><a id="more"></a></p>
<h3 id="拖块">拖块</h3>
<p>当设计一个支持拖拽与拖放的列表的时候，通常都会包含一个提示可以触摸拖动的东西。它对于用户发现此功能与软件的易用性都是有帮助的，并且Material指南也<a href="http://www.google.com/design/spec/components/lists-controls.html#lists-controls-types-of-list-controls" target="_blank" rel="external">推荐 </a>在列表处于“编辑模式”的时候这样做。让我们的例子包含一个这样的滑块也相当简单。<br><img src="2.png" alt=""></p>
<p>首先，修改item的布局（item_main.xml）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">FrameLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/item"</span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"?listPreferredItemHeight"</span></div><div class="line">    <span class="attribute">android:clickable</span>=<span class="value">"true"</span></div><div class="line">    <span class="attribute">android:focusable</span>=<span class="value">"true"</span></div><div class="line">    <span class="attribute">android:foreground</span>=<span class="value">"?selectableItemBackground"</span>&gt;</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="title">TextView</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/text"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"center_vertical"</span></div><div class="line">        <span class="attribute">android:layout_marginLeft</span>=<span class="value">"16dp"</span></div><div class="line">        <span class="attribute">android:textAppearance</span>=<span class="value">"?android:attr/textAppearanceMedium"</span> /&gt;</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="title">ImageView</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/handle"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"?listPreferredItemHeight"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"center_vertical|right"</span></div><div class="line">        <span class="attribute">android:scaleType</span>=<span class="value">"center"</span></div><div class="line">        <span class="attribute">android:src</span>=<span class="value">"@drawable/ic_reorder_grey_500_24dp"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p>用于拖拽的图标可以在<a href="https://github.com/google/material-design-icons/blob/master/action/svg/production/ic_reorder_24px.svg" target="_blank" rel="external">Material Design Icons</a>里面找到，使用<a href="https://github.com/konifar/android-material-design-icon-generator-plugin" target="_blank" rel="external">Android Material Design 图标生成插件</a>来添加。</p>
<p>就如上篇文章简要提到的，你可以使用ItemTouchHelper.startDrag(ViewHolder) 开始一个拖拽。因此我们需要更改ViewHolder，让它包含这个拖拽图标，同时设置一个简单的触摸事件 listener来触发startDrag()的调用。</p>
<p>我们需要一个传递event up 的interface：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnStartDragListener</span> </span>{</div><div class="line"> </div><div class="line">    <span class="javadoc">/**</span></div><div class="line">     * Called when a view is requesting a start of a drag.</div><div class="line">     *</div><div class="line">     *<span class="javadoctag"> @param</span> viewHolder The holder of the view to drag.</div><div class="line">     */</div><div class="line">    <span class="keyword">void</span> onStartDrag(RecyclerView.ViewHolder viewHolder);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后，在<strong>ItemViewHolder</strong>中初始化拖拽图标的视图：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> ImageView handleView;</div><div class="line"><span class="keyword">public</span> <span class="title">ItemViewHolder</span>(View itemView) {</div><div class="line">    <span class="keyword">super</span>(itemView);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    handleView = (ImageView) itemView.findViewById(R.id.handle);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>并且更新<strong>RecyclerListAdapter</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OnStartDragListener mDragStartListener;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="title">RecyclerListAdapter</span>(OnStartDragListener dragStartListener) {</div><div class="line">    mDragStartListener = dragStartListener;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">}</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span>(<span class="keyword">final</span> ItemViewHolder holder, </div><div class="line">        <span class="keyword">int</span> position) {</div><div class="line">    <span class="comment">// ...    holder.handleView.setOnTouchListener(new OnTouchListener() {</span></div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span>(View v, MotionEvent event) {</div><div class="line">            <span class="keyword">if</span> (MotionEventCompat.getActionMasked(event) == </div><div class="line">                    MotionEvent.ACTION_DOWN) {</div><div class="line">                mDragStartListener.onStartDrag(holder);</div><div class="line">            }</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        }</div><div class="line">    });</div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在完整的RecyclerListAdapter类是<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/blob/001dcdc99f75f77a431fe5c303be54ab45cd9a32/app/src/main/java/co/paulburke/android/itemtouchhelperdemo/RecyclerListAdapter.java" target="_blank" rel="external">这样</a>的。</p>
<p>剩下的事情就是在Fragment中添加OnStartDragListener：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerListFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> </span></div><div class="line">        <span class="title">OnStartDragListener</span> {</div><div class="line">     </div><div class="line">    <span class="comment">// ...    @Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span>(View view, Bundle icicle) {</div><div class="line">        <span class="keyword">super</span>.onViewCreated(view, icicle);</div><div class="line"> </div><div class="line">        RecyclerListAdapter a = <span class="keyword">new</span> RecyclerListAdapter(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    }    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartDrag</span>(RecyclerView.ViewHolder viewHolder) {</div><div class="line">        mItemTouchHelper.startDrag(viewHolder);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>完整的RecyclerListFragment类现在是<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/blob/001dcdc99f75f77a431fe5c303be54ab45cd9a32/app/src/main/java/co/paulburke/android/itemtouchhelperdemo/RecyclerListFragment.java" target="_blank" rel="external">这样</a>的。现在运行一下，你应该可以通过触摸这个拖拽图标来开始拖拽操作了<br><img src="3.gif" alt=""></p>
<h3 id="提示被选中的View">提示被选中的View</h3>
<p>在我们上面描述的基础案例中，没有在视觉上暗示被拖拽的item被选中了。显然，这不是被期望的，不过这也很好解决。实际上，在ItemTouchHelper的帮助下，只要你的View Holder item 设置了背景，这种效果自然就可以得到。在Lollipop或者更高版本，Item 的深度（elevation）在拖拽和滑动期间会上升；在早起版本，滑动的时候是简单的淡化（fade）效果。</p>
<p>要在我们现有的例子中看到这种效果，只需添加一个背景到<a href="https://gist.github.com/iPaulPro/3b1742403ea6f27abbb4" target="_blank" rel="external">item_main.xml</a>的根FrameLayout，或者在<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/blob/b6d2464c45d8b504dbc17c473cdca271ded2bd80/app/src/main/java/co/paulburke/android/itemtouchhelperdemo/RecyclerListAdapter.java" target="_blank" rel="external">RecyclerListAdapter.ItemViewHolder</a>的构造函数中设置一个。效果如下：<br><img src="4.gif" alt=""></p>
<p>看起来不错，但是我们希望得到更多的控制。其中一种办法就是在它被选择或者被清除的时候让你的View Holder去处理这些变化。为此，可以使用ItemTouchHelper.Callback提供的两个回调方法。</p>
<ul>
<li><strong>onSelectedChanged(ViewHolder, int)</strong>: 在每次View Holder的状态变成拖拽 (ACTION_STATE_DRAG) 或者 滑动 (ACTION_STATE_SWIPE)的时候被调用。这是把你的item view变成激活状态的最佳地点。</li>
<li><strong>clearView(RecyclerView, ViewHolder)</strong> 在一个view被拖拽然后被放开的时候被调用，同时也会在滑动被取消或者完成ACTION_STATE_IDLE)的时候被调用。这里是恢复item view idle状态的典型地方。</li>
</ul>
<p>我们只需要把这些东西结合在一起就行了。<br>首先，为View Holder创建一个interface：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="javadoc">/**</span></div><div class="line"> * Notifies a View Holder of relevant callbacks from </div><div class="line"> * {@link ItemTouchHelper.Callback}.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemTouchHelperViewHolder</span> </span>{</div><div class="line"> </div><div class="line">    <span class="javadoc">/**</span></div><div class="line">     * Called when the {@link ItemTouchHelper} first registers an </div><div class="line">     * item as being moved or swiped.</div><div class="line">     * Implementations should update the item view to indicate </div><div class="line">     * it's active state.</div><div class="line">     */</div><div class="line">    <span class="keyword">void</span> onItemSelected();</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="javadoc">/**</span></div><div class="line">     * Called when the {@link ItemTouchHelper} has completed the </div><div class="line">     * move or swipe, and the active item state should be cleared.</div><div class="line">     */</div><div class="line">    <span class="keyword">void</span> onItemClear();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后，让SimpleItemTouchHelperCallback触发各自的回调：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSelectedChanged</span>(RecyclerView.ViewHolder viewHolder, </div><div class="line">        <span class="keyword">int</span> actionState) {</div><div class="line">   <span class="comment">// We only want the active item</span></div><div class="line">   <span class="keyword">if</span> (actionState != ItemTouchHelper.ACTION_STATE_IDLE) {</div><div class="line">        <span class="keyword">if</span> (viewHolder <span class="keyword">instanceof</span> ItemTouchHelperViewHolder) {</div><div class="line">            ItemTouchHelperViewHolder itemViewHolder = </div><div class="line">                    (ItemTouchHelperViewHolder) viewHolder;</div><div class="line">            itemViewHolder.onItemSelected();</div><div class="line">        }</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="keyword">super</span>.onSelectedChanged(viewHolder, actionState);</div><div class="line">}</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearView</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder) {</div><div class="line">    <span class="keyword">super</span>.clearView(recyclerView, viewHolder);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (viewHolder <span class="keyword">instanceof</span> ItemTouchHelperViewHolder) {</div><div class="line">        ItemTouchHelperViewHolder itemViewHolder = </div><div class="line">                (ItemTouchHelperViewHolder) viewHolder;</div><div class="line">        itemViewHolder.onItemClear();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在剩下的事情就是让RecyclerListAdapter.ItemViewHolder实现ItemTouchHelperViewHolder:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span></div><div class="line">        <span class="keyword">implements</span> <span class="title">ItemTouchHelperViewHolder</span> {</div><div class="line"> </div><div class="line">    <span class="comment">// ...    @Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span>() {</div><div class="line">        itemView.setBackgroundColor(Color.LTGRAY);</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClear</span>() {</div><div class="line">        itemView.setBackgroundColor(<span class="number">0</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在本例子中，我们简单的在item激活的时候添加了一个灰色背景，在被清除的时候移除了这个灰色背景。如果你的ItemTouchHelper和Adapter是在一起的，你可以</p>
<p>不这样设置，直接在 ItemTouchHelper.Callback中切换view的状态。</p>
<h3 id="Grid_布局">Grid 布局</h3>
<p>如果你想用GridLayoutManager来修改这个项目，你会发现不能正常工作。原因和解决办法都很简单：我们必须告诉ItemTouchHelper我们想支持向左拖动和向右拖动。在<strong>SimpleItemTouchHelperCallback</strong>中，我们已经指明了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder) {</div><div class="line">    <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;</div><div class="line">    <span class="keyword">int</span> swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;</div><div class="line">    <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>要支持grid布局，唯一需要的修改是向dragFlags中添加left和 right方向。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> dragFlags = ItemTouchHelper.UP   | ItemTouchHelper.DOWN | </div><div class="line">                ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT;</div></pre></td></tr></table></figure>

<p>但是，对于grid而言，滑动删除不是非常自然的设计，因此你可能需要这样来去掉此功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder) {</div><div class="line">    <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN | </div><div class="line">                    ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT;</div><div class="line">    <span class="keyword">int</span> swipeFlags = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>可以查看 <a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/blob/d164fba0f27c8aa38cfa7dbd4bc74d53dea44605/app/src/main/java/co/paulburke/android/itemtouchhelperdemo/RecyclerGridFragment.java" target="_blank" rel="external">RecyclerGridFragment</a> 来了解GridLayoutManager的例子。下面是运行效果：<br><img src="5.gif" alt=""></p>
<h3 id="自定义滑动动画">自定义滑动动画</h3>
<p>ItemTouchHelper.Callback 提供了非常方便的方法来控制拖拽和滑动期间的view动画。因为ItemTouchHelper其实是一个<a href="http://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemDecoration.html" target="_blank" rel="external">RecyclerView.ItemDecoration</a>，我可以<br>用同样的方式进行view的绘制。</p>
<p>在后面的部分，我们将更深入的讨论这个问题，但是这里也给出一个简单的例子，重写默认的滑动动画，显示线性淡化效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChildDraw</span>(Canvas c, RecyclerView recyclerView, </div><div class="line">        ViewHolder viewHolder, <span class="keyword">float</span> dX, <span class="keyword">float</span> dY, </div><div class="line">        <span class="keyword">int</span> actionState, <span class="keyword">boolean</span> isCurrentlyActive) {</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (actionState == ItemTouchHelper.ACTION_STATE_SWIPE) {</div><div class="line">        <span class="keyword">float</span> width = (<span class="keyword">float</span>) viewHolder.itemView.getWidth();</div><div class="line">        <span class="keyword">float</span> alpha = <span class="number">1.0</span>f - Math.abs(dX) / width;</div><div class="line">        viewHolder.itemView.setAlpha(alpha);</div><div class="line">        viewHolder.itemView.setTranslationX(dX);    </div><div class="line">    } <span class="keyword">else</span> {</div><div class="line">        <span class="keyword">super</span>.onChildDraw(c, recyclerView, viewHolder, dX, dY, </div><div class="line">                actionState, isCurrentlyActive);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>dX</strong> 与 <strong>dY</strong>参数代表目前被选择view 的移动距离，其中：</p>
<ul>
<li><strong>-1.0f</strong> is a full ItemTouchHelper.END to ItemTouchHelper.STARTswipe</li>
<li><strong>1.0f </strong> is a full ItemTouchHelper.START to ItemTouchHelper.END swipe</li>
</ul>
<p>为了不漏掉我们没有处理的actionState，记住务必调用super方法，这样其他的默认动画才会运行。</p>
<p>接下来的部分我们将讲解如何控制拖拽时候的绘制。</p>
<h3 id="结束语">结束语</h3>
<p>我们刚刚谈到了通过自定义ItemTouchHelper所能做的事情，这部分比较有趣。我也希望能在这部分中讲更多内容，但是考虑到文章的长度，我决定分开来写。第三部分会很快出来。</p>
<p>GitHub项目比我们的文章先更新，如果你不想看教程，直接看代码上的变化也行。</p>
<h3 id="源码">源码</h3>
<p>这个系列文章包含相应GitHub项目，<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/" target="_blank" rel="external">Android-ItemTouchHelper-Demo</a>。这部分提交的代码是从<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/commit/ef8f149d2299bf57c2f5450aea75dc19b099bdee" target="_blank" rel="external">f8f149 </a>到 <a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/commit/d164fba0f27c8aa38cfa7dbd4bc74d53dea44605" target="_blank" rel="external">d164fba</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-6a6f0c422efd" target="_blank" rel="external">Drag and Swipe with RecyclerView Part Two: Handles, Grids, and Custom Animations </a><br>翻译：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a> </p>
<p>在<a href="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/" target="_blank" rel="external">第一部分</a>，我们介绍了<a href="http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" target="_blank" rel="external">ItemTouchHelper</a>，以及<a href="http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html" target="_blank" rel="external">ItemTouchHelper.Callback</a> 的实现，在线性列表（RecyclerView）中添加基本的拖拽&amp;拖放与滑动删除。本文将在前文例子的基础上扩展，增加对grid布局的支持，处理拖拽的初始化，提示被选中的view，同时自定义滑动的动画。<br><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-2/1.gif" alt=""><br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://colobu.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RecyclerView的拖动和滑动 第一部分 ：基本的ItemTouchHelper示例]]></title>
    <link href="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/"/>
    <id>http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/</id>
    <published>2015-09-16T01:31:27.000Z</published>
    <updated>2015-09-16T01:58:29.467Z</updated>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf" target="_blank" rel="external">Drag and Swipe with RecyclerView </a><br>翻译: <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0630/3123.html" target="_blank" rel="external">RecyclerView的拖动和滑动 第一部分 ：基本的ItemTouchHelper示例</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a><br>另一个翻译: <a href="https://github.com/bboyfeiyu/android-tech-frontier/blob/master/issue-18/%E6%8B%96%E6%8B%BDRecyclerView.md" target="_blank" rel="external">拖拽RecyclerView</a> by <a href="https://github.com/objectlife" target="_blank" rel="external">objectlife</a></p>
<p><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/1.gif" alt=""><br>在安卓中，有许多关于如何使用RecyclerView实现<strong>“drag &amp; drop”</strong> 与 <strong>“wipe-to-dismiss”</strong>的教程，库和例子。即使现在已经有了新的，更优的实现方式，大多数仍然是使用老旧的<a href="http://developer.android.com/guide/topics/ui/drag-drop.html" target="_blank" rel="external">View.OnDragListener</a>以及Roman Nurik在<a href="https://github.com/romannurik/Android-SwipeToDismiss" target="_blank" rel="external">SwipeToDismiss</a>中所使用的方法。很少有人使用新的api，反而要么经常依赖于<code>GestureDetectors</code>和<code>onInterceptTouchEvent</code>，要么实现方式很复杂。实际上，在RecyclerView上添加拖动特性有一个非常简单的方法。这个方法只需要一个类，并且它也是Android 兼容包的一部分，它就是：</p>
<h4 style="text-align: center;"><a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" data-href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" class="markup--anchor markup--h4-anchor" rel="external" target="_blank">ItemTouchHelper</a></h4>

<p>ItemTouchHelper是一个强大的工具，它处理好了关于在RecyclerView上添加拖动排序与滑动删除的所有事情。它是RecyclerView.ItemDecoration的子类，也就是说它可以轻易的添加到几乎所有的LayoutManager和Adapter中。它还可以和现有的item动画一起工作，提供受类型限制的拖放动画等等，</p>
<p>这篇文章中，我会演示一个ItemTouchHelper的简单实现，然后在这个系列文章的后面部分，我们将拓展范围，探索一些新的特性。<br><a id="more"></a></p>
<h3 id="跳过开头部分">跳过开头部分</h3>
<p>只对完整源码感兴趣？直接跳到github： <a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo" target="_blank" rel="external">Android-ItemTouchHelper-Demo</a>。第一次提交的代码和本文的内容相对应。 在这里下载<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/releases" target="_blank" rel="external">demo apk</a> 。</p>
<h3 id="设置">设置</h3>
<p>第一件事是RecyclerView的基本设置，修改build.gradle，添加RecyclerView的依赖。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:22.2.0'</span></div></pre></td></tr></table></figure>

<p>ItemTouchHelper可以与几乎任意的RecyclerView.Adapter 和 LayoutManager使用，但是本文建立了几个基本的文件，可以在Gist上找到：<br><a href="https://gist.github.com/iPaulPro/2216ea5e14818056cfcc" target="_blank" rel="external">https://gist.github.com/iPaulPro/2216ea5e14818056cfcc</a></p>
<h3 id="使用_ItemTouchHelper_和_ItemTouchHelper-Callback">使用 ItemTouchHelper 和 ItemTouchHelper.Callback</h3>
<p>要使用ItemTouchHelper，你需要创建一个<a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html" target="_blank" rel="external">ItemTouchHelper.Callback</a>。这个接口可以让你监听“move”与 “swipe”事件。这里还是控制view被选中的状态以及重写默认动画的地方。如果你只是想要一个基本的实现，有一个帮助类可以使用：<a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.SimpleCallback.html" target="_blank" rel="external">SimpleCallback</a>,但是为了了解其工作机制，我们还是自己实现。</p>
<p>启用基本的拖动排序与滑动删除需要重写的主要回调方法是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getMovementFlags(RecyclerView, ViewHolder)</div><div class="line">onMove(RecyclerView, ViewHolder, ViewHolder)</div><div class="line">onSwiped(ViewHolder, <span class="keyword">int</span>)</div></pre></td></tr></table></figure>

<p>我也需要两个帮助方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">isLongPressDragEnabled()</div><div class="line">isItemViewSwipeEnabled()</div></pre></td></tr></table></figure>

<p>我们将一一解答上面的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder) {</div><div class="line">    <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;</div><div class="line">    <span class="keyword">int</span> swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;</div><div class="line">    <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>ItemTouchHelper可以让你轻易得到一个事件的方向。你需要重写<strong>getMovementFlags()</strong>方法来指定可以支持的拖放和滑动的方向。使用<strong>helperItemTouchHelper.makeMovementFlags(int, int)</strong>来构造返回的flag。这里我们启用了上下左右两种方向。注：上下为拖动（drag），左右为滑动（swipe）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLongPressDragEnabled</span>() {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>ItemTouchHelper可以用于没有滑动的拖动操作（或者反过来），你必须指明你到底要支持哪一种。要支持长按RecyclerView item进入拖动操作，你必须在<strong>isLongPressDragEnabled()</strong>方法中返回true。或者，也可以调用<strong>ItemTouchHelper.startDrag(RecyclerView.ViewHolder) </strong>方法来开始一个拖动。这会在后面讲到。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isItemViewSwipeEnabled</span>() {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>而要在view任意位置触摸事件发生时启用滑动操作，则直接在<strong>isItemViewSwipeEnabled()</strong>中返回true就可以了。或者，你也主动调用<strong>ItemTouchHelper.startSwipe(RecyclerView.ViewHolder) </strong>来开始滑动操作。</p>
<p>接下来的两个是<strong>onMove()</strong>和<strong>onSwiped()</strong>，用于通知底层数据的更新。首先我们创建一个可以将这些回调方法传递出去的接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemTouchHelperAdapter</span> </span>{</div><div class="line"> </div><div class="line">    <span class="keyword">void</span> onItemMove(<span class="keyword">int</span> fromPosition, <span class="keyword">int</span> toPosition);</div><div class="line"> </div><div class="line">    <span class="keyword">void</span> onItemDismiss(<span class="keyword">int</span> position);</div><div class="line">}</div></pre></td></tr></table></figure>

<p><a href="https://gist.github.com/iPaulPro/5d43325ac7ae579760a9" target="_blank" rel="external">ItemTouchHelperAdapter.java Gist</a></p>
<p>以本例来说，最简单的方法就是在我们的<strong>RecyclerListAdapter</strong> 中实现这个listener。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerListAdapter</span> <span class="keyword">extends</span> </span></div><div class="line">        <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">ItemViewHolder</span>&gt; </div><div class="line">        <span class="keyword">implements</span> <span class="title">ItemTouchHelperAdapter</span> {<span class="comment">// ... code from gist</span></div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemDismiss</span>(<span class="keyword">int</span> position) {</div><div class="line">    mItems.remove(position);</div><div class="line">    notifyItemRemoved(position);</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemMove</span>(<span class="keyword">int</span> from, <span class="keyword">int</span> to) {</div><div class="line">    Collections.swap(mItems, from, to);</div><div class="line">    notifyItemMoved(from, to);</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>notifyItemRemoved()</strong>和 <strong>notifyItemMoved()</strong>的调用非常重要，有了它们Adapter才能知道发生了改变。同时还需要注意的是每当一个view切换到了一个新的索引时，我们都需要改变item的位置，<strong>而不是在拖动事件结束的时候</strong>。</p>
<p>现在我们回来创建我们的<strong>SimpleItemTouchHelperCallback</strong>，我们仍然需要重写<strong>onMove()</strong> 和 <strong>onSwiped()</strong>。</p>
<p>首先我们添加一个构造函数以及一个引用adapter的成员变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ItemTouchHelperAdapter mAdapter;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="title">SimpleItemTouchHelperCallback</span>(</div><div class="line">        ItemTouchHelperAdapter adapter) {</div><div class="line">    mAdapter = adapter;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后重写剩下的事件同时通知adapter：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMove</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder, </div><div class="line">        RecyclerView.ViewHolder target) {</div><div class="line">    mAdapter.onItemMove(viewHolder.getAdapterPosition(), </div><div class="line">            target.getAdapterPosition());</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwiped</span>(RecyclerView.ViewHolder viewHolder, </div><div class="line">        <span class="keyword">int</span> direction) {</div><div class="line">    mAdapter.onItemDismiss(viewHolder.getAdapterPosition());</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这样Callback类大致如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleItemTouchHelperCallback</span> <span class="keyword">extends</span> <span class="title">ItemTouchHelper</span>.<span class="title">Callback</span> </span>{</div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ItemTouchHelperAdapter mAdapter;</div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="title">SimpleItemTouchHelperCallback</span>(ItemTouchHelperAdapter adapter) {</div><div class="line">        mAdapter = adapter;</div><div class="line">    }</div><div class="line">     </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLongPressDragEnabled</span>() {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">  </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isItemViewSwipeEnabled</span>() {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">  </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span>(RecyclerView recyclerView, ViewHolder viewHolder) {</div><div class="line">        <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;</div><div class="line">        <span class="keyword">int</span> swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;</div><div class="line">        <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">    }</div><div class="line">  </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMove</span>(RecyclerView recyclerView, ViewHolder viewHolder, </div><div class="line">            ViewHolder target) {</div><div class="line">        mAdapter.onItemMove(viewHolder.getAdapterPosition(), target.getAdapterPosition());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">  </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwiped</span>(ViewHolder viewHolder, <span class="keyword">int</span> direction) {</div><div class="line">        mAdapter.onItemDismiss(viewHolder.getAdapterPosition());</div><div class="line">    }</div><div class="line">  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Callback准备好了之后，我们就可以创建我们的ItemTouchHelper并调用<strong>attachToRecyclerView(RecyclerView)</strong> 了（参见<a href="https://gist.github.com/iPaulPro/2216ea5e14818056cfcc#file-mainfragment-java" target="_blank" rel="external">MainFragment.java</a>）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ItemTouchHelper.Callback callback = </div><div class="line">    <span class="keyword">new</span> SimpleItemTouchHelperCallback(adapter);</div><div class="line">ItemTouchHelper touchHelper = <span class="keyword">new</span> ItemTouchHelper(callback);</div><div class="line">touchHelper.attachToRecyclerView(recyclerView);</div></pre></td></tr></table></figure>

<p>运行之后，你可以看到如下的效果：<br><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/2.gif" alt=""></p>
<h3 id="结束语">结束语</h3>
<p>这是一个ItemTouchHelper的简单实现。但是已经阐明了在RecyclerView上实现拖动排序与滑动删除时根本不需要第三方库的。在下一部分中，我们将对被拖动或者滑动的item做更多外观上的控制。</p>
<h3 id="源代码">源代码</h3>
<p>我在github上创建了一个覆盖这个系列文章的项目：<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo" target="_blank" rel="external">Android-ItemTouchHelper-Demo</a>。第一次提交的代码和这部分相对应的，也有点第二部分的内容。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>英文原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf" target="_blank" rel="external">Drag and Swipe with RecyclerView </a><br>翻译: <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0630/3123.html" target="_blank" rel="external">RecyclerView的拖动和滑动 第一部分 ：基本的ItemTouchHelper示例</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a><br>另一个翻译: <a href="https://github.com/bboyfeiyu/android-tech-frontier/blob/master/issue-18/%E6%8B%96%E6%8B%BDRecyclerView.md" target="_blank" rel="external">拖拽RecyclerView</a> by <a href="https://github.com/objectlife" target="_blank" rel="external">objectlife</a></p>
<p><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/1.gif" alt=""><br>在安卓中，有许多关于如何使用RecyclerView实现<strong>“drag &amp; drop”</strong> 与 <strong>“wipe-to-dismiss”</strong>的教程，库和例子。即使现在已经有了新的，更优的实现方式，大多数仍然是使用老旧的<a href="http://developer.android.com/guide/topics/ui/drag-drop.html" target="_blank" rel="external">View.OnDragListener</a>以及Roman Nurik在<a href="https://github.com/romannurik/Android-SwipeToDismiss" target="_blank" rel="external">SwipeToDismiss</a>中所使用的方法。很少有人使用新的api，反而要么经常依赖于<code>GestureDetectors</code>和<code>onInterceptTouchEvent</code>，要么实现方式很复杂。实际上，在RecyclerView上添加拖动特性有一个非常简单的方法。这个方法只需要一个类，并且它也是Android 兼容包的一部分，它就是：</p>
<h4 style="text-align: center;"><a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" data-href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" class="markup--anchor markup--h4-anchor" rel="external" target="_blank">ItemTouchHelper</a></h4>

<p>ItemTouchHelper是一个强大的工具，它处理好了关于在RecyclerView上添加拖动排序与滑动删除的所有事情。它是RecyclerView.ItemDecoration的子类，也就是说它可以轻易的添加到几乎所有的LayoutManager和Adapter中。它还可以和现有的item动画一起工作，提供受类型限制的拖放动画等等，</p>
<p>这篇文章中，我会演示一个ItemTouchHelper的简单实现，然后在这个系列文章的后面部分，我们将拓展范围，探索一些新的特性。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://colobu.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在RecyclerView上使用布局动画]]></title>
    <link href="http://colobu.com/2015/09/16/layout-animations-on-recyclerview/"/>
    <id>http://colobu.com/2015/09/16/layout-animations-on-recyclerview/</id>
    <published>2015-09-16T01:05:23.000Z</published>
    <updated>2015-09-17T03:28:20.922Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://antonioleiva.com/layout-animations-on-recyclerview/" target="_blank" rel="external">Layout animations on RecyclerView </a><br>翻译: <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0915/3462.html" target="_blank" rel="external">在RecyclerView上使用布局动画（Layout animation）</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a><br>本文可以结合 Android LayoutAnimation使用及扩展  一起阅读。</p>
<p>自动Material Design出现以来，我对一些视频中演示的网格铺开动画感到惊讶。这是一种斜对角线动画，让activity从上到下从左到右铺开。非常漂亮。<br><img src="http://colobu.com/2015/09/16/layout-animations-on-recyclerview/1.png" alt=""><br>我一直试图尝试所有能得到那种效果的方法。一种办法是，使用RecyclerView::notifyItemInserted()方法，这是很多人都提到的办法。但是这个方法没有提供太多控制动画顺序的方法，因此看起来并不是一个好办法。另一个就是在onBind()中必要的时候对每个元素使用动画，这也的确可行。但是那样的话代码就比较脆弱和过于侵入性（我们是在adapter中添加的动画）。要让它恰当的工作比较困难。<br><img src="2.png" alt=""><br><a id="more"></a></p>
<h3 id="布局动画">布局动画</h3>
<p>最后，解决的办法居然比想象的简单。我得承认我很少用 布局动画（layout animation），因此我没能立即想到这个办法。但是在寻找答案的过程中，我发现了这个非常棒的代码： <a href="https://gist.github.com/Musenkishi/8df1ab549857756098ba" target="_blank" rel="external">gist from Musenkishi</a> ，它给我指明了解决方法。这里的问题是RecyclerView默认并没有使用 layout animation，但是这个代码可以让它能像GridView那样使用GridLayoutAnimation。我们提到的gist是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright (C) 2014 Freddie (Musenkishi) Lust-Hed</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *      http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line">  </div><div class="line"><span class="keyword">package</span> com.musenkishi.gists.view;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.GridLayoutManager;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"><span class="keyword">import</span> android.view.animation.GridLayoutAnimationController;</div><div class="line"> </div><div class="line"><span class="javadoc">/**</span></div><div class="line"> * An extension of RecyclerView, focused more on resembling a GridView.</div><div class="line"> * Unlike {@link android.support.v7.widget.RecyclerView}, this view can handle</div><div class="line"> * {@code &lt;gridLayoutAnimation&gt;} as long as you provide it a</div><div class="line"> * {@link android.support.v7.widget.GridLayoutManager} in</div><div class="line"> * {@code setLayoutManager(LayoutManager layout)}.</div><div class="line"> *</div><div class="line"> * Created by Freddie (Musenkishi) Lust-Hed.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GridRecyclerView</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span> </span>{</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="title">GridRecyclerView</span>(Context context) {</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="title">GridRecyclerView</span>(Context context, AttributeSet attrs) {</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="title">GridRecyclerView</span>(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle) {</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLayoutManager</span>(LayoutManager layout) {</div><div class="line">        <span class="keyword">if</span> (layout <span class="keyword">instanceof</span> GridLayoutManager){</div><div class="line">            <span class="keyword">super</span>.setLayoutManager(layout);</div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(<span class="string">"You should only use a GridLayoutManager with GridRecyclerView."</span>);</div><div class="line">        }</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachLayoutAnimationParameters</span>(View child, ViewGroup.LayoutParams params, <span class="keyword">int</span> index, <span class="keyword">int</span> count) {</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (getAdapter() != <span class="keyword">null</span> && getLayoutManager() <span class="keyword">instanceof</span> GridLayoutManager){</div><div class="line"> </div><div class="line">            GridLayoutAnimationController.AnimationParameters animationParams =</div><div class="line">                    (GridLayoutAnimationController.AnimationParameters) params.layoutAnimationParameters;</div><div class="line"> </div><div class="line">            <span class="keyword">if</span> (animationParams == <span class="keyword">null</span>) {</div><div class="line">                animationParams = <span class="keyword">new</span> GridLayoutAnimationController.AnimationParameters();</div><div class="line">                params.layoutAnimationParameters = animationParams;</div><div class="line">            }</div><div class="line"> </div><div class="line">            <span class="keyword">int</span> columns = ((GridLayoutManager) getLayoutManager()).getSpanCount();</div><div class="line"> </div><div class="line">            animationParams.count = count;</div><div class="line">            animationParams.index = index;</div><div class="line">            animationParams.columnsCount = columns;</div><div class="line">            animationParams.rowsCount = count / columns;</div><div class="line"> </div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> invertedIndex = count - <span class="number">1</span> - index;</div><div class="line">            animationParams.column = columns - <span class="number">1</span> - (invertedIndex % columns);</div><div class="line">            animationParams.row = animationParams.rowsCount - <span class="number">1</span> - invertedIndex / columns;</div><div class="line"> </div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">            <span class="keyword">super</span>.attachLayoutAnimationParameters(child, params, index, count);</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="配置布局动画">配置布局动画</h3>
<p>布局动画好的一面就是我们可以使用xml来定义与部署它们，因此我们的代码不会被动画穿插。我们只需用相应的布局动画定义xml。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">gridLayoutAnimation</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attribute">android:columnDelay</span>=<span class="value">"15%"</span></div><div class="line">    <span class="attribute">android:rowDelay</span>=<span class="value">"15%"</span></div><div class="line">    <span class="attribute">android:animation</span>=<span class="value">"@anim/slide_in_bottom"</span></div><div class="line">    <span class="attribute">android:animationOrder</span>=<span class="value">"normal"</span></div><div class="line">    <span class="attribute">android:direction</span>=<span class="value">"top_to_bottom|left_to_right"</span>/&gt;</div></pre></td></tr></table></figure>

<p>我们可以根据自己的喜好来自定义动画：</p>
<ul>
<li><strong>columnDelay / rowDelay</strong>:  行元素与列元素在动画时的延迟时间百分数。这样我们才能让下一行下一列view一个接一个的动画，而不是一起动画。</li>
<li><strong>animation: view</strong>: 出现在屏幕上的动画，我使用的是从底部滑出的动画。</li>
<li><strong>animationOrder</strong>: 可以是 normal, reverse 或者 random.</li>
<li><strong>direction</strong>: 指定item如何 基于列延迟显示出来，可取值：top_to_bottom, left_to_right,bottom_to_top,right_to_left。</li>
</ul>
<p>这里是slide 动画的xml代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">translate</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">           <span class="attribute">android:interpolator</span>=<span class="value">"@android:anim/decelerate_interpolator"</span></div><div class="line">           <span class="attribute">android:fromYDelta</span>=<span class="value">"100%p"</span> <span class="attribute">android:toYDelta</span>=<span class="value">"0"</span></div><div class="line">           <span class="attribute">android:duration</span>=<span class="value">"@android:integer/config_mediumAnimTime"</span>/&gt;</div></pre></td></tr></table></figure>

<h3 id="调整动画的时机">调整动画的时机</h3>
<p>如果你执行现在的代码，你会发现app打开的同时布局动画也在执行，因此你其实看不到什么效果。对于Lollipop 之前的设备你没什么办法，没有有效的方法可以知道进入动画何时完成（至少我不知道）。但是从Lollipop 开始，我们可以使用onEnterAnimationComplete来检查。因此在onCreate中，如果SDK 版本旧于Lollipop，RecyclerView直接落定：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) {</div><div class="line">    setRecyclerAdapter(recyclerView);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在Lollipop 或者更新设备，onEnterAnimationComplete会被调用。这是落定RecyclerView与请求新的布局动画的时机：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEnterAnimationComplete</span>() {</div><div class="line">    <span class="keyword">super</span>.onEnterAnimationComplete();</div><div class="line">    setRecyclerAdapter(recyclerView);</div><div class="line">    recyclerView.scheduleLayoutAnimation();</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="总结">总结</h3>
<p>你可以轻易调整此布局动画来产生别的进入动画。可以尝试弄弄动画设置看看能得到些什么效果。<br>本例子的代码在Github的  <a href="https://github.com/antoniolg/MaterializeYourApp" target="_blank" rel="external">Materialize your App repository</a> 。</p>
<p><strong>更多资料</strong></p>
<ol>
<li><a href="https://github.com/wasabeef/recyclerview-animators" target="_blank" rel="external">recyclerview-animators</a></li>
<li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0630/3123.html" target="_blank" rel="external">RecyclerView的拖动和滑动 第一部分 ：基本的ItemTouchHelper示例</a></li>
<li><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html" target="_blank" rel="external">RecyclerView的拖动和滑动 第二部分 ：拖块，Grid以及自定义动画</a></p>
</li>
<li><p><a href=""></a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://antonioleiva.com/layout-animations-on-recyclerview/" target="_blank" rel="external">Layout animations on RecyclerView </a><br>翻译: <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0915/3462.html" target="_blank" rel="external">在RecyclerView上使用布局动画（Layout animation）</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a><br>本文可以结合 Android LayoutAnimation使用及扩展  一起阅读。</p>
<p>自动Material Design出现以来，我对一些视频中演示的网格铺开动画感到惊讶。这是一种斜对角线动画，让activity从上到下从左到右铺开。非常漂亮。<br><img src="http://colobu.com/2015/09/16/layout-animations-on-recyclerview/1.png" alt=""><br>我一直试图尝试所有能得到那种效果的方法。一种办法是，使用RecyclerView::notifyItemInserted()方法，这是很多人都提到的办法。但是这个方法没有提供太多控制动画顺序的方法，因此看起来并不是一个好办法。另一个就是在onBind()中必要的时候对每个元素使用动画，这也的确可行。但是那样的话代码就比较脆弱和过于侵入性（我们是在adapter中添加的动画）。要让它恰当的工作比较困难。<br><img src="2.png" alt=""><br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://colobu.com/categories/Android/"/>
    
  </entry>
  
</feed>
