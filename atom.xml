<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[鸟窝]]></title>
  <subtitle><![CDATA[大道至简 Simplicity is the ultimate form of sophistication]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://colobu.com/"/>
  <updated>2016-04-11T04:11:44.274Z</updated>
  <id>http://colobu.com/</id>
  
  <author>
    <name><![CDATA[smallnest]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[谁是最快的Go Web框架]]></title>
    <link href="http://colobu.com/2016/04/06/the-fastest-golang-web-framework/"/>
    <id>http://colobu.com/2016/04/06/the-fastest-golang-web-framework/</id>
    <published>2016-04-06T06:14:26.000Z</published>
    <updated>2016-04-08T05:16:46.936Z</updated>
    <content type="html"><![CDATA[<p>前几天我写了一篇文章: <a href="http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/" target="_blank" rel="external">超全的Go Http路由框架性能比较</a>，利用Julien Schmidt实现的<a href="https://github.com/julienschmidt/go-http-routing-benchmark" target="_blank" rel="external">benchmark测试框架</a>对几乎所有的go web框架的路由功能进行了比较。我本来以为对Go web框架的性能考察就告以段落了，直到我写了一段简单的代码测试Irsi，用来模拟实际产品中的处理，才发现了Julien Schmidt测试框架的问题。</p>
<p>这段代码是这样的：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">    <span class="string">"github.com/kataras/iris"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	api := iris.New()</div><div class="line">	api.Get(<span class="string">"/rest/hello"</span>, <span class="keyword">func</span>(c *iris.Context) {</div><div class="line">		sleepTime, _ := strconv.Atoi(os.Args<span class="number">[1</span>])</div><div class="line">		<span class="keyword">if</span> sleepTime &gt;<span class="number"> 0</span> {</div><div class="line">			time.Sleep(time.Duration(sleepTime) * time.Millisecond)</div><div class="line">		}</div><div class="line"></div><div class="line">		c.Text(<span class="string">"Hello world"</span>)</div><div class="line">	})</div><div class="line">	api.Listen(<span class="string">":8080"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>当我将实际业务的处理时间模拟为10毫秒的时候，使用100并发进行测试：<br><code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>，Iris吞吐率才达到97 requests/second。详细介绍可以看我的文章： <a href="http://colobu.com/2016/04/01/Is-iris-the-fastest-golang-router-library/" target="_blank" rel="external">iris 真的是最快的Golang 路由框架吗? </a>。</p>
<p>虽然Iris的作者很快做了修改，临时解决了这个问题，但是也促使我重新审视Julien Schmidt测试框架,也促使我实现了一个测试Go web framework benchmak的框架： <a href="https://github.com/smallnest/go-web-framework-benchmark" target="_blank" rel="external">Go web framework benchmark</a>。</p>
<a id="more"></a>
<h2 id="重新审视Julien_Schmidt测试框架">重新审视Julien Schmidt测试框架</h2>
<p>如果查看Julien Schmidt测试框架的测试结果以及实现，可以看到他测试的只是web框架的<strong>路由功能</strong>，包括路径中参数的解析， 并不是测试一个完整的web框架的处理(接受连接、路由、Handler处理)。</p>
<p>他利用Go的benchmark测试框架的方法，实现了N多的Benchmark方法，通过手工创建一个http.Request,传递给router进行路由处理。</p>
<p>并且，他的Handler的业务非常的简单，有的handler里面没有任何业务逻辑，只是空的方法体，有的只是将参数写回到Response中。这并不能反映实际的产品的业务处理。</p>
<p>在实际的业务中，Handler必然要包含一定的业务处理，也出处理的时间可能从几毫秒到上百毫秒不等，一些业务逻辑处理起来还非常的慢，比如：</p>
<ul>
<li>从一个网络连接中读取数据</li>
<li>写数据到硬盘中</li>
<li>访问数据库</li>
<li>访问缓存服务器</li>
<li>调用其它服务，等待服务结果的返回</li>
<li>……</li>
</ul>
<p>如果加上这些业务逻辑的处理时间，各个web框架benchmark是否还如路由功能的benchmark一样呢？</p>
<p>因为路由的处理时间在整个web框架中的处理时间所占的比例比较小，所以实际的web框架的benchmark有可能和路由的benchmark关系不大。即使路由的性能最好，如果handler的处理没有很好的处理的化，也可能整体的性能也不会特别出色。</p>
<p>如果想实现一个高性能的路由器，一定要尽量避免在路由处理时分配新的对象，高性能的路由器都实现了零分配，如httprouter、Iris等。</p>
<p>很多web框架的Handler处理和Go的缺省实现一样，还是在连接所在的goroutine中执行，也有的框架实现了goroutine池，由一个goroutine池来处理连接和handler，避免太多的goroutine分配和回收，性能可能会好一些。</p>
<h2 id="实现一个Go_web_framework_benchmark库">实现一个Go web framework benchmark库</h2>
<p>所以，有必要实现一个新的测试框架(库),完整测试web框架的性能，包括连接、路由、handler处理等，基于此，我实现了<a href="https://github.com/smallnest/go-web-framework-benchmark" target="_blank" rel="external">Go web framework benchmark</a>。</p>
<p>它具有下面的功能：</p>
<ol>
<li>为每个web框架实现了/hello的Http Get服务,它返回<code>hello world</code>字符串。所有的web框架的实现都是一致的。</li>
<li>可以指定业务处理的时间，如10毫秒，100毫秒，500毫秒等</li>
<li>自动化测试</li>
</ol>
<p>这个框架并没有测试其它功能，如Post、Put，也没有测试路由的参数解析的功能，它的本意是期望通过Get方法的测试来比较各个框架对业务的处理的能力。</p>
<p>根据Julien Schmidt测试框架中测试到的go web框架，在加上lion，fasthttp,一共测试了下面的web框架。</p>
<ul>
<li><a href="https://golang.org/pkg/net/http/" target="_blank" rel="external">default http</a></li>
<li><a href="https://github.com/Unknwon/macaron" target="_blank" rel="external">macaron</a></li>
<li><a href="https://github.com/ant0ine/go-json-rest" target="_blank" rel="external">go-json-rest</a></li>
<li><a href="https://github.com/astaxie/beego" target="_blank" rel="external">beego</a></li>
<li><a href="https://github.com/bmizerany/pat" target="_blank" rel="external">pat</a></li>
<li><a href="https://github.com/celrenheit/lion" target="_blank" rel="external">lion</a></li>
<li><a href="https://github.com/dimfeld/httptreemux" target="_blank" rel="external">httptreemux</a></li>
<li><a href="https://github.com/emicklei/go-restful" target="_blank" rel="external">go-restful</a></li>
<li><a href="https://github.com/gin-gonic/gin" target="_blank" rel="external">gin</a></li>
<li><a href="https://github.com/go-martini/martini" target="_blank" rel="external">martini</a></li>
<li><a href="https://github.com/go-playground/lars" target="_blank" rel="external">lars</a></li>
<li><a href="https://github.com/go-zoo/bone" target="_blank" rel="external">bone</a></li>
<li><a href="https://github.com/gocraft/web" target="_blank" rel="external">gocraft</a></li>
<li><a href="https://github.com/gorilla/mux" target="_blank" rel="external">gorilla</a></li>
<li><a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="external">httprouter</a></li>
<li><a href="https://github.com/kataras/iris" target="_blank" rel="external">iris</a></li>
<li><a href="https://github.com/lunny/tango" target="_blank" rel="external">tango</a></li>
<li><a href="https://github.com/mailgun/route" target="_blank" rel="external">vulcan</a></li>
<li><a href="https://github.com/mikespook/possum" target="_blank" rel="external">possum</a></li>
<li><a href="https://github.com/naoina/denco" target="_blank" rel="external">denco</a></li>
<li><a href="https://github.com/pilu/traffic" target="_blank" rel="external">traffic</a></li>
<li><a href="https://github.com/plimble/ace" target="_blank" rel="external">ace</a></li>
<li><a href="https://github.com/rcrowley/go-tigertonic" target="_blank" rel="external">go-tigertonic</a></li>
<li><a href="https://github.com/buaazp/fasthttprouter" target="_blank" rel="external">fasthttprouter</a></li>
<li><a href="https://github.com/vanng822/r2router" target="_blank" rel="external">r2router</a></li>
<li><a href="https://github.com/zenazn/goji/web" target="_blank" rel="external">goji</a></li>
<li><a href="http://goji.io" target="_blank" rel="external">gojiv2</a></li>
<li><a href="http://gopkg.in/labstack/echo.v1" target="_blank" rel="external">echo</a></li>
</ul>
<h2 id="基本测试">基本测试</h2>
<p>首先我们先看一些业务逻辑处理时间分别为0ms，10ms,100ms,500ms时的各web框架的表现。</p>
<p>测试的并发数为5000。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wrk -t16 -c5000 <span class="operator">-d</span>30s http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span>/hello</div></pre></td></tr></table></figure>

<p><img src="benchmark.png" alt=""></p>
<p>注解：</p>
<ol>
<li>possum在测试的时候出现N多的<code>http: multiple response.WriteHeader calls</code>错误，它的性能比较低下。以下的测试possum也有问题。</li>
<li>默认的go标准库的实现性能已经很高</li>
<li>处理时间10ms和100ms， 各框架的性能差别不是特别巨大，但是500ms吞吐率下降的很厉害。</li>
<li>基于fasthttp实现的路由器/web框架表现非常好,如fasthttprouter、fasthttp-routing, echo-fasthttp，但是echo-fasthttp由于要与net/http兼容，性能稍差一点。</li>
</ol>
<blockquote>
<p>目前我并没有监控latency和cpu, memory指标，或许以后会加入。</p>
</blockquote>
<h2 id="并发量测试">并发量测试</h2>
<p>我们以业务逻辑处理时间为30ms为基准，测试并发量为100，1000，5000的情况下web框架的性能。</p>
<p><img src="concurrency.png" alt=""></p>
<p>注解：</p>
<ol>
<li>大部分的框架的性能差不太多</li>
<li>fasthttp表现还是非常好，是性能最好的框架，尤其在并发量大的情况下</li>
<li>并发量在1000的时候大部分的框架的吞吐率能达到3万/秒，并发量在5000的时候大部分二代框架能达到4万/秒</li>
</ol>
<p>综上测试，大部分的go web框架性能表现还可以，加上处理时间的测试后性能差别不是很大，不像测试路由功能一样泾渭分明。<br>fasthttp表现非常的好，需要考虑的是如果选它做web框架，你的代码将难以迁移到别的框架上,因为它实现了和标准库net/http不一样的接口。</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/06/the-fastest-golang-web-framework/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>前几天我写了一篇文章: <a href="http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/" target="_blank" rel="external">超全的Go Http路由框架性能比较</a>，利用Julien Schmidt实现的<a href="https://github.com/julienschmidt/go-http-routing-benchmark" target="_blank" rel="external">benchmark测试框架</a>对几乎所有的go web框架的路由功能进行了比较。我本来以为对Go web框架的性能考察就告以段落了，直到我写了一段简单的代码测试Irsi，用来模拟实际产品中的处理，才发现了Julien Schmidt测试框架的问题。</p>
<p>这段代码是这样的：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">    <span class="string">"github.com/kataras/iris"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	api := iris.New()</div><div class="line">	api.Get(<span class="string">"/rest/hello"</span>, <span class="keyword">func</span>(c *iris.Context) {</div><div class="line">		sleepTime, _ := strconv.Atoi(os.Args<span class="number">[1</span>])</div><div class="line">		<span class="keyword">if</span> sleepTime &gt;<span class="number"> 0</span> {</div><div class="line">			time.Sleep(time.Duration(sleepTime) * time.Millisecond)</div><div class="line">		}</div><div class="line"></div><div class="line">		c.Text(<span class="string">"Hello world"</span>)</div><div class="line">	})</div><div class="line">	api.Listen(<span class="string">":8080"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>当我将实际业务的处理时间模拟为10毫秒的时候，使用100并发进行测试：<br><code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>，Iris吞吐率才达到97 requests/second。详细介绍可以看我的文章： <a href="http://colobu.com/2016/04/01/Is-iris-the-fastest-golang-router-library/" target="_blank" rel="external">iris 真的是最快的Golang 路由框架吗? </a>。</p>
<p>虽然Iris的作者很快做了修改，临时解决了这个问题，但是也促使我重新审视Julien Schmidt测试框架,也促使我实现了一个测试Go web framework benchmak的框架： <a href="https://github.com/smallnest/go-web-framework-benchmark" target="_blank" rel="external">Go web framework benchmark</a>。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[转]Golang自动生成版本信息]]></title>
    <link href="http://colobu.com/2016/04/06/golang-auto-build-versioning/"/>
    <id>http://colobu.com/2016/04/06/golang-auto-build-versioning/</id>
    <published>2016-04-06T01:34:26.000Z</published>
    <updated>2016-04-06T01:41:22.451Z</updated>
    <content type="html"><![CDATA[<p>原文： <a href="http://www.trueeyu.com/?p=1935" target="_blank" rel="external">Golang自动生成版本信息</a></p>
<p><strong>需求</strong></p>
<p>golang程序在build时自动生成版本信息，使用 ./helloworld –version可以查看版本和build时间</p>
<p><strong>实现原理</strong></p>
<p>使用链接选项<code>-X</code>设置一个二进制文件中可以访问的变量</p>
<a id="more"></a>
<ul>
<li>实例1：</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> Version = <span class="string">"No Version Provided"</span></div><div class="line"> </div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    fmt.Println(<span class="string">"HelloWorld Version is:"</span>, Version)</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">go run -ldflags <span class="string">"-X main.Version 1.5"</span> helloworld.go</div><div class="line"> </div><div class="line">HelloWorld Version is: <span class="number">1.5</span></div></pre></td></tr></table></figure>

<ul>
<li>实例2</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line">import \"fmt\"</div><div class="line"> </div><div class="line">var buildstamp = \"no timestamp set\"</div><div class="line">var githash = \"no githash set\"</div><div class="line"> </div><div class="line">func main() {</div><div class="line">    fmt.Println(\"HelloWorld buildstamp is:\", buildstamp)</div><div class="line">    fmt.Println(\"HelloWorld buildgithash is:\", githash)</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">go build -ldflags \<span class="string">"-X main.buildstamp `date \'+%Y-%m-%d_%I:%M:%S\'` -X main.githash `git rev-parse HEAD`\" helloworld.go</span></div><div class="line"> </div><div class="line">./helloworld</div><div class="line"> </div><div class="line">HelloWorld buildstamp is: 2015-09-08_05:58:49</div><div class="line">HelloWorld buildgithash is: 1adb00d88d832687eb4148a3871829fb73021c29</div></pre></td></tr></table></figure>

<p><strong>参考资料</strong><br><a href="http://www.atatus.com/blog/golang-auto-build-versioning/" target="_blank" rel="external">golang-auto-build-versioning</a></p>
<hr>
<p>其它一些相关的介绍:</p>
<ol>
<li><a href="http://mengqi.info/html/2015/201502171941-build-go-program-with-git-version.html" target="_blank" rel="external">编译时向 go 程序写入 git 版本信息</a></li>
<li><a href="https://golang.org/cmd/link/" target="_blank" rel="external">command/link</a></li>
<li><a href="https://blog.cloudflare.com/setting-go-variables-at-compile-time/" target="_blank" rel="external">Setting Go variables from the outside</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/06/golang-auto-build-versioning/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>原文： <a href="http://www.trueeyu.com/?p=1935" target="_blank" rel="external">Golang自动生成版本信息</a></p>
<p><strong>需求</strong></p>
<p>golang程序在build时自动生成版本信息，使用 ./helloworld –version可以查看版本和build时间</p>
<p><strong>实现原理</strong></p>
<p>使用链接选项<code>-X</code>设置一个二进制文件中可以访问的变量</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iris 真的是最快的Golang 路由框架吗?]]></title>
    <link href="http://colobu.com/2016/04/01/Is-iris-the-fastest-golang-router-library/"/>
    <id>http://colobu.com/2016/04/01/Is-iris-the-fastest-golang-router-library/</id>
    <published>2016-04-01T07:57:03.000Z</published>
    <updated>2016-04-06T01:18:32.667Z</updated>
    <content type="html"><![CDATA[<p>依照我的前一篇文章（<a href="http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/" target="_blank" rel="external">超全的Go Http路由框架性能比较</a>）对各种Go http路由框架的比较， Iris明显胜出，它的性能远远超过其它Golang http路由框架。</p>
<p>但是，在真实的环境中，Iris真的就是最快的Golang http路由框架吗？</p>
<blockquote>
<p><strong>2016-04-05 更新：</strong> 我已经提交了一个<a href="https://github.com/kataras/iris/issues/55" target="_blank" rel="external">Bug</a>, 作者Makis已经做了一个临时的解决方案，性能已经恢复，所以准备使用Iris的读者不必担心。<br>根据我的测试，最新的Iris的测试如下：</p>
<ol>
<li>在业务逻辑需要10毫秒时，吞吐率可以达到9281 request/s</li>
<li>在业务逻辑需要1000毫秒时，吞吐率可以达到95  request/s<br>性能已经很不错了。</li>
</ol>
<p>我会做一个其它路由框架的测试，看看其它的框架是否也有本文所说的问题。</p>
</blockquote>
<a id="more"></a>
<h3 id="Benchmark测试分析">Benchmark测试分析</h3>
<p>在那篇文章中我使用的是Julien Schmidt的<a href="https://github.com/julienschmidt/go-http-routing-benchmark" target="_blank" rel="external">测试代码</a>,他模拟了静态路由、Github API、Goolge+ API、Parse API的各种情况，因为这些API是知名网站的开放的API，看起来测试挺真实可靠的。</p>
<p>但是，这个测试存在着一个严重的问题，就是Handler的业务逻辑非常的简单，各个框架的handler类似，比如Iris的Handler的实现：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> irisHandler(_ *iris.Context) {}</div><div class="line"></div><div class="line"><span class="keyword">func</span> irisHandlerWrite(c *iris.Context) {</div><div class="line">	io.WriteString(c.ResponseWriter, c.Param(<span class="string">"name"</span>))</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> irisHandlerTest(c *iris.Context) {</div><div class="line">	io.WriteString(c.ResponseWriter, c.Request.RequestURI)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>几乎没有任何的业务逻辑，最多是往Response中写入一个字符串。</p>
<p><strong>这和生产环境中的情况严重不符!</strong></p>
<p>实际的产品肯定会有一些业务的处理，比如参数的校验，数据的计算，本地文件的读取、远程服务的调用、缓存的读取、数据库的读取和写入等，有些操作可能花费的时间很多，一两个毫秒就可以搞定，有的却很耗时，可能需要几十毫秒，比如：</p>
<ul>
<li>从一个网络连接中读取数据</li>
<li>写数据到硬盘中</li>
<li>调用其它服务，等待服务结果的返回</li>
<li>……</li>
</ul>
<p>这才是我们常用的case,而不是一个简单的写字符串。</p>
<p>因此那个测试框架的Handler还应该加入时间花费的情况。</p>
<h3 id="模拟真实的Handler的情况">模拟真实的Handler的情况</h3>
<p>我们模拟一下真实的情况，看看Iris框架和Golang内置的Http路由框架的性能如何。</p>
<p>首先使用Iris实现一个Http Server:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/kataras/iris"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	api := iris.New()</div><div class="line">	api.Get(<span class="string">"/rest/hello"</span>, <span class="keyword">func</span>(c *iris.Context) {</div><div class="line">		sleepTime, _ := strconv.Atoi(os.Args<span class="number">[1</span>])</div><div class="line">		<span class="keyword">if</span> sleepTime &gt;<span class="number"> 0</span> {</div><div class="line">			time.Sleep(time.Duration(sleepTime) * time.Millisecond)</div><div class="line">		}</div><div class="line"></div><div class="line">		c.Text(<span class="string">"Hello world"</span>)</div><div class="line">	})</div><div class="line">	api.Listen(<span class="string">":8080"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>我们可以传递给它一个时间花费的参数sleepTime，模拟这个Handler在处理业务时要花费的时间，它会让处理这个Handler的暂停sleepTime毫秒，如果为0,则不需要暂停，这种情况类似上面的测试。</p>
<p>然后我们使用Go内置的路由功能实现一个Http Server:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// There are some golang RESTful libraries and mux libraries but i use the simplest to test.</span></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	http.HandleFunc(<span class="string">"/rest/hello"</span>, <span class="keyword">func</span>(w http.ResponseWriter, r *http.Request) {</div><div class="line">		sleepTime, _ := strconv.Atoi(os.Args<span class="number">[1</span>])</div><div class="line">		<span class="keyword">if</span> sleepTime &gt;<span class="number"> 0</span> {</div><div class="line">			time.Sleep(time.Duration(sleepTime) * time.Millisecond)</div><div class="line">		}</div><div class="line"></div><div class="line">		w.Write([]<span class="typename">byte</span>(<span class="string">"Hello world"</span>))</div><div class="line">	})</div><div class="line"></div><div class="line">	err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="constant">nil</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		log.Fatal(<span class="string">"ListenAndServe: "</span>, err)</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>编译两个程序进行测试。<br><strong>1、首先进行业务逻辑时间花费为0的测试</strong><br>运行程序<code>iris 0</code>,然后执行<code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>进行并发100,持续30秒的测试。<br>iris的吞吐率为46155 requests/second。</p>
<p>运行程序<code>gomux 0</code>,然后执行<code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>进行并发100,持续30秒的测试。<br>Go内置的路由程序的吞吐率为55944 requests/second。</p>
<p><em>两者的吞吐量差别不大，iris略差一点</em></p>
<p><strong>2、然后进行业务逻辑时间花费为10的测试</strong><br>运行程序<code>iris 10</code>,然后执行<code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>进行并发100,持续30秒的测试。<br>iris的吞吐率为97 requests/second。</p>
<p>运行程序<code>gomux 10</code>,然后执行<code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>进行并发100,持续30秒的测试。<br>Go内置的路由程序的吞吐率为9294 requests/second。</p>
<p><strong>3、最后进行业务逻辑时间花费为1000的测试</strong><br>这次模拟一个极端的情况，业务处理很慢，处理一个业务需要1秒的时间。</p>
<p>运行程序<code>iris 1000</code>,然后执行<code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>进行并发100,持续30秒的测试。<br>iris的吞吐率为1 requests/second。</p>
<p>运行程序<code>gomux 1000</code>,然后执行<code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>进行并发100,持续30秒的测试。<br>Go内置的路由程序的吞吐率为95 requests/second。</p>
<p>可以看到，如果加上业务逻辑的处理时间，Go内置的路由功能要远远好于Iris, 甚至可以说Iris的路由根本无法应用的有业务逻辑的产品中，随着业务逻辑的时间耗费加大，iris的吞吐量急剧下降。</p>
<p>而对于Go的内置路由来说，业务逻辑的时间耗费加大，单个client会等待更长的时间，但是并发量大的网站来说，吞吐率不会下降太多。<br>比如我们用1000的并发量测试<code>gomux 10</code>和<code>gomux 1000</code>。</p>
<ul>
<li><code>gomux 10</code>: 吞吐率为47664</li>
<li><code>gomux 1000</code>: 吞吐率为979</li>
</ul>
<p>这才是Http网站真实的情况，因为我们要应付的网站的并发量，网站应该支持同时有尽可能多的用户访问，即使单个用户得到返回页面需要上百毫秒也可以接受。</p>
<p>而Iris在业务逻辑的处理时间增大的情况下，无法支持大的吞吐率，即使在并发量很大的情况下(比如1000),吞吐率也很低。</p>
<h3 id="深入了解Go_http_server的实现">深入了解Go http server的实现</h3>
<p>Go http server实现的是每个request对应一个goroutine (goroutine per request), 考虑到Http Keep-Alive的情况，更准确的说是每个连接对应一个goroutine(goroutine per connection)。</p>
<p>因为goroutine是非常轻量级的，不会像Java那样 Thread per request会导致服务器资源不足，无法创建很多的Thread， Golang可以创建足够多的goroutine，所以goroutine per request的方式在Golang中没有问题。而且这还有一个好处，因为request是在一个goroutine中处理的，不必考虑对同一个Request/Response并发读写的问题。</p>
<p>如何查看Handler是在哪一个goroutine中执行的呢?我们需要实现一个函数来获取goroutine的Id:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> goID() <span class="typename">int</span> {</div><div class="line">	<span class="keyword">var</span> buf <span class="number">[64</span>]<span class="typename">byte</span></div><div class="line">	n := runtime.Stack(buf[:], <span class="constant">false</span>)</div><div class="line">	idField := strings.Fields(strings.TrimPrefix(<span class="typename">string</span>(buf[:n]), <span class="string">"goroutine "</span>))<span class="number">[0</span>]</div><div class="line">	id, err := strconv.Atoi(idField)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"cannot get goroutine id: %v"</span>, err))</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> id</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后在handler中打印出当前的goroutine id:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span>(c *iris.Context) {</div><div class="line">		fmt.Println(goID())</div><div class="line">		……</div><div class="line">}</div></pre></td></tr></table></figure>

<p>和</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span>(w http.ResponseWriter, r *http.Request) {</div><div class="line">		fmt.Println(goID())</div><div class="line">		……</div><div class="line">}</div></pre></td></tr></table></figure>

<p>启动<code>gomux 0</code>,然后运行<code>ab -c 5 -n 5 http://localhost:8080/rest/hello</code>测试一下，apache的ab命令使用5个并发并且每个并发两个请求访问服务器。<br>可以看到服务器的输出：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">21</div><div class="line">18</div><div class="line">17</div><div class="line">19</div><div class="line">20</div><div class="line">33</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">34</div></pre></td></tr></table></figure>

<p>因为没有指定<code>-k</code>参数，每个client发送两个请求会创建两个连接。</p>
<blockquote>
<p>你可以加上<code>-k</code>参数，可以看出会有重复的goroutine id出现，表明同一个持久连接会使用同一个goroutine处理。</p>
</blockquote>
<p>以上是通过实验验证我们的理论，下面是代码分析。</p>
<p><code>net/http/server.go</code>的<a href="https://github.com/golang/go/blob/master/src/net/http/server.go#L2146" target="_blank" rel="external">第2146行</a> <code>go c.serve()</code>表明，对于一个http连接，会启动一个goroutine:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (srv *Server) Serve(l net.Listener) error {</div><div class="line">	<span class="keyword">defer</span> l.Close()</div><div class="line">	<span class="keyword">if</span> fn := testHookServerServe; fn != <span class="constant">nil</span> {</div><div class="line">		fn(srv, l)</div><div class="line">	}</div><div class="line">	<span class="keyword">var</span> tempDelay time.Duration <span class="comment">// how long to sleep on accept failure</span></div><div class="line">	<span class="keyword">if</span> err := srv.setupHTTP2(); err != <span class="constant">nil</span> {</div><div class="line">		<span class="keyword">return</span> err</div><div class="line">	}</div><div class="line">	<span class="keyword">for</span> {</div><div class="line">		rw, e := l.Accept()</div><div class="line">		……</div><div class="line">		tempDelay =<span class="number"> 0</span></div><div class="line">		c := srv.newConn(rw)</div><div class="line">		c.setState(c.rwc, StateNew) <span class="comment">// before Serve can return</span></div><div class="line">		<span class="keyword">go</span> c.serve()</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>而这个<code>c.serve</code>方法会从连接中<a href="https://github.com/golang/go/blob/master/src/net/http/server.go#L2116" target="_blank" rel="external">读取request交由handler处理</a>:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (c *conn) serve() {</div><div class="line">	……</div><div class="line">	<span class="keyword">for</span> {</div><div class="line">		w, err := c.readRequest()</div><div class="line">		……</div><div class="line">		req := w.req</div><div class="line">		serverHandler{c.server}.ServeHTTP(w, w.req)</div><div class="line">		<span class="keyword">if</span> c.hijacked() {</div><div class="line">			<span class="keyword">return</span></div><div class="line">		}</div><div class="line">		w.finishRequest()</div><div class="line">		<span class="keyword">if</span> !w.shouldReuseConnection() {</div><div class="line">			<span class="keyword">if</span> w.requestBodyLimitHit || w.closedRequestBodyEarly() {</div><div class="line">				c.closeWriteAndWait()</div><div class="line">			}</div><div class="line">			<span class="keyword">return</span></div><div class="line">		}</div><div class="line">		c.setState(c.rwc, StateIdle)</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>而<code>ServeHTTP</code>的实现如下，如果没有配置handler或者路由器，则使用缺省的<strong>DefaultServeMux</strong>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request) {</div><div class="line">	handler := sh.srv.Handler</div><div class="line">	<span class="keyword">if</span> handler == <span class="constant">nil</span> {</div><div class="line">		handler = DefaultServeMux</div><div class="line">	}</div><div class="line">	<span class="keyword">if</span> req.RequestURI == <span class="string">"*"</span> && req.Method == <span class="string">"OPTIONS"</span> {</div><div class="line">		handler = globalOptionsHandler{}</div><div class="line">	}</div><div class="line">	handler.ServeHTTP(rw, req)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>可以看出这里并没有新开goroutine,而是在同一个connection对应的goroutine中执行的。如果试用Keep-Alive,还是在这个connection对应的goroutine中执行。</p>
<p>正如注释中所说的那样：</p>
<blockquote>
<pre><code>   <span class="comment">// HTTP cannot have multiple simultaneous active requests.[*]</span>
   <span class="comment">// Until the server replies to this request, it can't read another,</span>
   <span class="comment">// so we might as well run the handler in this goroutine.</span>
   <span class="comment">// [*] Not strictly true: HTTP pipelining.  We could let them all process</span>
   <span class="comment">// in parallel even if their responses need to be serialized.</span>
  serverHandler{<span class="built_in">c</span>.server}.<span class="type">ServeHTTP</span>(w, w.req)
</code></pre></blockquote>
<p>因此业务逻辑的时间花费会影响单个goroutine的执行时间，并且反映到客户的浏览器是是延迟时间latency增大了，如果并发量足够多，影响的是系统中的goroutine的数量以及它们的调度，吞吐率不会剧烈影响。</p>
<h3 id="Iris的分析">Iris的分析</h3>
<p>如果你使用Iris查看每个Handler是使用哪一个goroutine执行的，会发现每个连接也会用不同的goroutine执行，可是性能差在哪儿呢？<br><br>或者说,是什么原因导致Iris的性能急剧下降呢？</p>
<p>Iris服务器的监听和为连接启动一个goroutine没有什么明显不同，重要的不同在与Router处理Request的逻辑。</p>
<p>原因在于Iris为了提供性能，缓存了context,对于相同的请求url和method,它会从缓存中使用相同的context。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (r *MemoryRouter) ServeHTTP(res http.ResponseWriter, req *http.Request) {</div><div class="line">	<span class="keyword">if</span> ctx := r.cache.GetItem(req.Method, req.URL.Path); ctx != <span class="constant">nil</span> {</div><div class="line">		ctx.Redo(res, req)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	}</div><div class="line"></div><div class="line">	ctx := r.getStation().pool.Get().(*Context)</div><div class="line">	ctx.Reset(res, req)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> r.processRequest(ctx) {</div><div class="line">		<span class="comment">//if something found and served then add it's clone to the cache</span></div><div class="line">		r.cache.AddItem(req.Method, req.URL.Path, ctx.Clone())</div><div class="line">	}</div><div class="line"></div><div class="line">	r.getStation().pool.Put(ctx)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>由于并发量较大的时候，多个client的请求都会进入到上面的<code>ServeHTTP</code>方法中，导致相同的请求会进入下面的逻辑：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ctx := r.cache.GetItem(req.Method, req.URL.Path); ctx != <span class="constant">nil</span> {</div><div class="line">	ctx.Redo(res, req)</div><div class="line">	<span class="keyword">return</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>ctx.Redo(res, req)</code>导致不断循环，直到每个请求处理完毕，将context放回到池子中。</p>
<p>所以对于Iris来说，并发量大的情况下,对于相同的请求(req.URL.Path和Method相同)会进入排队的状态，导致性能低下。</p>
<h3 id="参考资料">参考资料</h3>
<ol>
<li><a href="https://blog.golang.org/context" target="_blank" rel="external">https://blog.golang.org/context</a></li>
<li><a href="https://www.reddit.com/r/golang/comments/3xz1f3/go_http_server_and_go_routines/" target="_blank" rel="external">https://www.reddit.com/r/golang/comments/3xz1f3/go_http_server_and_go_routines/</a></li>
<li><a href="http://screamingatmyscreen.com/2013/6/http-request-and-goroutines/" target="_blank" rel="external">http://screamingatmyscreen.com/2013/6/http-request-and-goroutines/</a></li>
<li><a href="https://groups.google.com/forum/#!topic/golang-nuts/iwCz_pqu8R4" target="_blank" rel="external">https://groups.google.com/forum/#!topic/golang-nuts/iwCz_pqu8R4</a></li>
<li><a href="https://groups.google.com/forum/#!topic/golang-nuts/ic3FxWZRyHs" target="_blank" rel="external">https://groups.google.com/forum/#!topic/golang-nuts/ic3FxWZRyHs</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/01/Is-iris-the-fastest-golang-router-library/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>依照我的前一篇文章（<a href="http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/" target="_blank" rel="external">超全的Go Http路由框架性能比较</a>）对各种Go http路由框架的比较， Iris明显胜出，它的性能远远超过其它Golang http路由框架。</p>
<p>但是，在真实的环境中，Iris真的就是最快的Golang http路由框架吗？</p>
<blockquote>
<p><strong>2016-04-05 更新：</strong> 我已经提交了一个<a href="https://github.com/kataras/iris/issues/55" target="_blank" rel="external">Bug</a>, 作者Makis已经做了一个临时的解决方案，性能已经恢复，所以准备使用Iris的读者不必担心。<br>根据我的测试，最新的Iris的测试如下：</p>
<ol>
<li>在业务逻辑需要10毫秒时，吞吐率可以达到9281 request/s</li>
<li>在业务逻辑需要1000毫秒时，吞吐率可以达到95  request/s<br>性能已经很不错了。</li>
</ol>
<p>我会做一个其它路由框架的测试，看看其它的框架是否也有本文所说的问题。</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何得到goroutine 的 id?]]></title>
    <link href="http://colobu.com/2016/04/01/how-to-get-goroutine-id/"/>
    <id>http://colobu.com/2016/04/01/how-to-get-goroutine-id/</id>
    <published>2016-04-01T02:26:29.000Z</published>
    <updated>2016-04-01T06:56:02.171Z</updated>
    <content type="html"><![CDATA[<p>使用Java的时候很容易得到线程的名字， 比如&quot;Thread.currentThread().getName&quot;，这样就可以进行一些监控操作或者设置线程相关的一些数据。当转向Golang开发的时候，却发现Go语言并没有提供获取当前goroutine id的操作。这是Golang的开发者故意为之，避免开发者滥用goroutine id实现goroutine local storage (类似java的&quot;thread-local&quot; storage)， 因为goroutine local storage很难进行垃圾回收。因此尽管以前暴露出了相应的方法，现在已经把它隐藏了。</p>
<blockquote>
<p>Please don&#39;t use goroutine local storage. It&#39;s highly discouraged. In fact, IIRC, we used to expose Goid, but it is hidden since we don&#39;t want people to do this.</p>
<p>Potential problems include:</p>
<ol>
<li>when goroutine goes away, its goroutine local storage won&#39;t be GCed. (you can get goid for the current goroutine, but you can&#39;t get a list of all running goroutines)</li>
<li>what if handler spawns goroutine itself? the new goroutine suddenly loses access to your goroutine local storage. You can guarantee that your own code won&#39;t spawn other goroutines,<br>but in general you can&#39;t make sure the standard library or any 3rd party code won&#39;t do that.</li>
</ol>
<p>thread local storage is invented to help reuse bad/legacy code that assumes global state, Go doesn&#39;t have legacy code like that, and you really should design your code so that state is passed explicitly and not as global (e.g. resort to goroutine local storage)</p>
</blockquote>
<p>当然Go的这种隐藏的做法还是有争议的，有点因噎废食。在debug log的时候goroutine id是很好的一个监控信息。本文介绍了两种获取goroutine id的方法。</p>
<a id="more"></a>
<p><strong>1、C代码扩展</strong><br>先前的一种方式是使用C语言暴露出获取goroutine方法,如<a href="https://github.com/davecheney/junk/tree/master/id" target="_blank" rel="external"></a></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "runtime.h"</span></div><div class="line"></div><div class="line">int64 ·Id(<span class="keyword">void</span>) {</div><div class="line">	<span class="keyword">return</span> g-&gt;goid;</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> id</div><div class="line"></div><div class="line"><span class="comment">// Id returns the id of the current goroutine.</span></div><div class="line"><span class="comment">// If you call this function you will go straight to hell.</span></div><div class="line"><span class="keyword">func</span> Id() <span class="typename">int64</span></div></pre></td></tr></table></figure>

<p>但是Go 1.4已经不支持在包中包含C代码 (<a href="http://tip.golang.org/doc/go1.4#gocmd" target="_blank" rel="external">go1.4#gocmd</a>)。</p>
<p>滴滴打车的huandu贡献了一个开源的项目<a href="https://github.com/huandu/goroutine" target="_blank" rel="external">goroutine</a>,可以在新的Go版本下获取goroutine的id (至少go 1.5.1, go 1.6下可用):<br>首先获取这个项目的最新版本</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> github.<span class="keyword">com</span>/huandu/goroutine</div></pre></td></tr></table></figure>

<p>然后你就可以在代码中调用相应的方法了：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Get id of current goroutine.</span></div><div class="line"><span class="keyword">var</span> id <span class="typename">int64</span> = goroutine.GoroutineId()</div><div class="line"><span class="built_in">println</span>(id)</div></pre></td></tr></table></figure>

<blockquote>
<p>实际使用中 <code>goroutine.GoroutineId()</code>并不能正确的获得当前的goroutine id, 似乎有些问题</p>
</blockquote>
<p><strong>2、第二种方法</strong><br>还有一种花招，可以用纯Go语言获取当前的goroutine id。代码如下所示：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"runtime"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">	<span class="string">"sync"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> GoID() <span class="typename">int</span> {</div><div class="line">	<span class="keyword">var</span> buf <span class="number">[64</span>]<span class="typename">byte</span></div><div class="line">	n := runtime.Stack(buf[:], <span class="constant">false</span>)</div><div class="line">	idField := strings.Fields(strings.TrimPrefix(<span class="typename">string</span>(buf[:n]), <span class="string">"goroutine "</span>))<span class="number">[0</span>]</div><div class="line">	id, err := strconv.Atoi(idField)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"cannot get goroutine id: %v"</span>, err))</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> id</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	fmt.Println(<span class="string">"main"</span>, GoID())</div><div class="line">	<span class="keyword">var</span> wg sync.WaitGroup</div><div class="line">	<span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt;<span class="number"> 10</span>; i++ {</div><div class="line">		i := i</div><div class="line">		wg.Add<span class="number">(1</span>)</div><div class="line">		<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">			<span class="keyword">defer</span> wg.Done()</div><div class="line">			fmt.Println(i, GoID())</div><div class="line">		}()</div><div class="line">	}</div><div class="line">	wg.Wait()</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>go run main.go</code>输出：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="title">main</span> <span class="number">1</span></div><div class="line"><span class="number">9</span> <span class="number">14</span></div><div class="line"><span class="number">0</span> <span class="number">5</span></div><div class="line"><span class="number">1</span> <span class="number">6</span></div><div class="line"><span class="number">2</span> <span class="number">7</span></div><div class="line"><span class="number">5</span> <span class="number">10</span></div><div class="line"><span class="number">6</span> <span class="number">11</span></div><div class="line"><span class="number">3</span> <span class="number">8</span></div><div class="line"><span class="number">7</span> <span class="number">12</span></div><div class="line"><span class="number">4</span> <span class="number">9</span></div><div class="line"><span class="number">8</span> <span class="number">13</span></div></pre></td></tr></table></figure>

<p>它利用<code>runtime.Stack</code>的堆栈信息。<a href="https://golang.org/pkg/runtime/#Stack" target="_blank" rel="external"><code>runtime.Stack(buf []byte, all bool) int</code></a>会将当前的堆栈信息写入到一个slice中，堆栈的第一行为<code>goroutine #### […</code>,其中<code>####</code>就是当前的gororutine id,通过这个花招就实现<code>GoID</code>方法了。</p>
<p>但是需要注意的是，获取堆栈信息会影响性能，所以建议你在debug的时候才用它。</p>
<h3 id="参考资料">参考资料</h3>
<ol>
<li><a href="https://groups.google.com/forum/#!topic/golang-nuts/Nt0hVV_nqHE" target="_blank" rel="external">https://groups.google.com/forum/#!topic/golang-nuts/Nt0hVV_nqHE</a></li>
<li><a href="http://wendal.net/2013/0205.html" target="_blank" rel="external">http://wendal.net/2013/0205.html</a></li>
<li><a href="http://blog.sgmansfield.com/2015/12/goroutine-ids/" target="_blank" rel="external">http://blog.sgmansfield.com/2015/12/goroutine-ids/</a></li>
<li><a href="http://dave.cheney.net/2013/09/07/how-to-include-c-code-in-your-go-package" target="_blank" rel="external">http://dave.cheney.net/2013/09/07/how-to-include-c-code-in-your-go-package</a></li>
<li><a href="http://golanghome.com/post/566" target="_blank" rel="external">http://golanghome.com/post/566</a></li>
<li><a href="https://github.com/t-yuki/goid" target="_blank" rel="external">https://github.com/t-yuki/goid</a></li>
<li><a href="https://github.com/petermattis/goid.git" target="_blank" rel="external">https://github.com/petermattis/goid.git</a></li>
<li><a href="https://github.com/huandu/goroutine" target="_blank" rel="external">https://github.com/huandu/goroutine</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/01/how-to-get-goroutine-id/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>使用Java的时候很容易得到线程的名字， 比如&quot;Thread.currentThread().getName&quot;，这样就可以进行一些监控操作或者设置线程相关的一些数据。当转向Golang开发的时候，却发现Go语言并没有提供获取当前goroutine id的操作。这是Golang的开发者故意为之，避免开发者滥用goroutine id实现goroutine local storage (类似java的&quot;thread-local&quot; storage)， 因为goroutine local storage很难进行垃圾回收。因此尽管以前暴露出了相应的方法，现在已经把它隐藏了。</p>
<blockquote>
<p>Please don&#39;t use goroutine local storage. It&#39;s highly discouraged. In fact, IIRC, we used to expose Goid, but it is hidden since we don&#39;t want people to do this.</p>
<p>Potential problems include:</p>
<ol>
<li>when goroutine goes away, its goroutine local storage won&#39;t be GCed. (you can get goid for the current goroutine, but you can&#39;t get a list of all running goroutines)</li>
<li>what if handler spawns goroutine itself? the new goroutine suddenly loses access to your goroutine local storage. You can guarantee that your own code won&#39;t spawn other goroutines,<br>but in general you can&#39;t make sure the standard library or any 3rd party code won&#39;t do that.</li>
</ol>
<p>thread local storage is invented to help reuse bad/legacy code that assumes global state, Go doesn&#39;t have legacy code like that, and you really should design your code so that state is passed explicitly and not as global (e.g. resort to goroutine local storage)</p>
</blockquote>
<p>当然Go的这种隐藏的做法还是有争议的，有点因噎废食。在debug log的时候goroutine id是很好的一个监控信息。本文介绍了两种获取goroutine id的方法。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vert.x 线程模型揭秘]]></title>
    <link href="http://colobu.com/2016/03/31/vertx-thread-model/"/>
    <id>http://colobu.com/2016/03/31/vertx-thread-model/</id>
    <published>2016-03-31T04:27:04.000Z</published>
    <updated>2016-03-31T09:49:07.997Z</updated>
    <content type="html"><![CDATA[<p>Vert.x是一个在JVM开发reactive应用的框架，可用于开发异步、可伸缩、高并发的Web应用(虽然不限于web应用)。其目的在于为JVM提供一个Node.js的替代方案。开发者可以通过它使用JavaScript、Ruby、Groovy、Java，甚至是混合语言来编写应用。<br>使用Vertx.x框架，可以用JavaScript、CoffeeScript、Ruby、Python、Groovy或Java开发应用程序的组件，最终应用程序可以是混合语言构建的。</p>
<p>本文试图揭示Vert.x的线程模型的应用，通过源代码分析Vert.x如何使用线程池处理请求的，以及比较Netty和Vert.x使用线程池的异同。</p>
<p>也许你觉得奇怪，默认启动一个Vert.x Verticle实例，它只用一个线程处理事件，在多核的情况下你需要创建多个Verticle实例以充分利用多个CPU Core的性能。</p>
<a id="more"></a>
<h2 id="Vert-x_实例">Vert.x 实例</h2>
<p>首先先啰嗦地介绍一些Vert.x概念，熟悉Vert.x开发的朋友可以跳过这一节。</p>
<p>在Vert.x里，如果你不使用Vertx对象，你几乎是寸步难行。</p>
<p>Vertx对象扮演着Vert.x控制中心的角色，同时它也提供了大量的功能，例如：</p>
<ul>
<li>编写TCP客户端和服务器</li>
<li>编写HTTP客户端和服务器，包括websocket</li>
<li>Event bus</li>
<li>共享数据</li>
<li>定时器</li>
<li>发布和卸载Verticle</li>
<li>UDP</li>
<li>DNS client</li>
<li>文件系统访问</li>
<li>高可用</li>
<li>集群</li>
</ul>
<p>如果你将Vert.x嵌入到你的应用程序中，你可以向下面这样获得一个Vertx对象的引用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vertx vertx = Vertx.vertx();</div></pre></td></tr></table></figure>

<p>当你实例化Vertx对象时，如果你感觉默认的参数不符合你的需求，你可以指定实例化时的参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vertx vertx = Vertx.vertx(<span class="keyword">new</span> VertxOptions().setWorkerPoolSize(<span class="number">40</span>));</div></pre></td></tr></table></figure>

<p><a href="http://vertx.io/docs/apidocs/io/vertx/core/VertxOptions.html" target="_blank" rel="external">VertxOptions</a>对象拥有很多关于Vertx实例设置，例如配置集群，高可用设置，线程池大小以及等等其他参数。下面就介绍一下它的线程池。</p>
<h3 id="线程池">线程池</h3>
<p>1、eventLoopGroup<br>这个对象是<code>NioEventLoopGroup</code>的一个实例，它的线程池的大小由<code>options.getEventLoopPoolSize()</code>决定，如果没有设置，默认为CPU核数 * 2。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eventLoopThreadFactory = <span class="keyword">new</span> VertxThreadFactory(<span class="string">"vert.x-eventloop-thread-"</span>, checker, <span class="keyword">false</span>);</div><div class="line">   eventLoopGroup = <span class="keyword">new</span> NioEventLoopGroup(options.getEventLoopPoolSize(), eventLoopThreadFactory);</div><div class="line">   eventLoopGroup.setIoRatio(NETTY_IO_RATIO);</div></pre></td></tr></table></figure>

<p>它的<code>EventLoop</code>和一个Context对应：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="title">ContextImpl</span>(……) {</div><div class="line">	……</div><div class="line">	EventLoopGroup group = vertx.getEventLoopGroup();</div><div class="line">    <span class="keyword">if</span> (group != <span class="keyword">null</span>) {</div><div class="line">      <span class="keyword">this</span>.eventLoop = group.next();</div><div class="line">    } <span class="keyword">else</span> {</div><div class="line">      <span class="keyword">this</span>.eventLoop = <span class="keyword">null</span>;</div><div class="line">    }</div><div class="line">	……</div><div class="line">}</div></pre></td></tr></table></figure>

<p>它用来执行标准的Verticle。</p>
<p>2、WorkerPool<br>用来执行worker Verticle。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">workerPool = Executors.newFixedThreadPool(<span class="keyword">options</span>.getWorkerPoolSize(),</div><div class="line">                <span class="keyword">new</span> VertxThreadFactory(<span class="string">"vert.x-worker-thread-"</span>, checker, <span class="keyword">true</span>));</div></pre></td></tr></table></figure>



<p>3、Internal Blocking Pool<br>内部使用的线程池，可以用来将阻塞代码异步化。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">internalBlockingPool = Executors.newFixedThreadPool(<span class="keyword">options</span>.getInternalBlockingPoolSize(),</div><div class="line">                <span class="keyword">new</span> VertxThreadFactory(<span class="string">"vert.x-internal-blocking-"</span>, checker, <span class="keyword">true</span>));</div></pre></td></tr></table></figure>

<p>不要在event loop中执行阻塞操作， 比如访问数据库或者网络资源，这绝对会影响你的应用的性能。对于这些阻塞操作，你可以将它们异步化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">vertx.executeBlocking(future -&gt; {</div><div class="line">  <span class="comment">// 下面这行代码可能花费很长时间</span></div><div class="line">  String result = someAPI.blockingMethod(<span class="string">"hello"</span>);</div><div class="line">  future.complete(result);</div><div class="line">}, res -&gt; {</div><div class="line">  System.out.println(<span class="string">"The result is: "</span> + res.result());</div><div class="line">});</div></pre></td></tr></table></figure>

<p>默认情况下executeBlocking会在同一个context中执行(同一个verticle实例)，它们会串行化执行。如果不关心这个执行的顺序，可以将ordered参数设为false，它们会在worker pool线程池中并行的执行。</p>
<p>另外一种执行阻塞代码的方式就是使用worker verticle，worker verticle总是在worker pool线程池中执行。</p>
<h3 id="Verticle">Verticle</h3>
<p>Verticle有点类似Actor模型，也可以实现并发的，可扩展的，易于发布的模型。</p>
<p>一个vert.x应用可以包含多个verticle实例，实例之间可以通过event bus通讯。</p>
<h4 id="三种类型">三种类型</h4>
<p><a href="http://vertx.io/docs/vertx-core/java/#_verticle_types" target="_blank" rel="external">http://vertx.io/docs/vertx-core/java/#_verticle_types</a></p>
<p>1、Standard Verticle： 最通用的类型，总是在event loop中执行。<br>2、Worker Verticle：它们使用worker pool线程池运行。一个verticle实例绝对不会在两个或者更多线程中并发执行。<br>3、Multi-threaded worker verticle：它们使用worker pool线程池运行。 一个verticle实例可以在多个线程中并发执行。</p>
<p>实现一个Verticle很简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyVerticle</span> <span class="keyword">extends</span> <span class="title">AbstractVerticle</span> </span>{</div><div class="line"></div><div class="line">  <span class="comment">// 当发布verticle时调用</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span>() {</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="comment">// 可以不实现。当 verticle 卸载时调用</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span>() {</div><div class="line">  }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="发布方式">发布方式</h4>
<p>1、命令行方式<br><code>vertx run SomeJavaSourceFile.java</code><br>或者通过<code>maven-shade-plugin</code>打包成一个<code>fat</code>包:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">transformers</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">transformer</span> <span class="attribute">implementation</span>=<span class="value">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">manifestEntries</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">Main-Class</span>&gt;</span>io.vertx.core.Starter<span class="tag">&lt;/<span class="title">Main-Class</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">Main-Verticle</span>&gt;</span>com.colobu.vertx.Main<span class="tag">&lt;/<span class="title">Main-Verticle</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">manifestEntries</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">transformer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">transformer</span> <span class="attribute">implementation</span>=<span class="value">"org.apache.maven.plugins.shade.resource.AppendingTransformer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">resource</span>&gt;</span>META-INF/services/io.vertx.core.spi.VerticleFactory<span class="tag">&lt;/<span class="title">resource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">transformer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">transformers</span>&gt;</span></div></pre></td></tr></table></figure>

<p>然后运行 <code>java -jar xxx-fat.jar</code>,你还可以传递一些参数。</p>
<p>2、编程方式<br>你也可以编程的方式,通过<code>vertx.deployVerticle</code>发布：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span>  <span class="keyword">extends</span> <span class="title">AbstractVerticle</span> </span>{</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">        VertxOptions vo = <span class="keyword">new</span> VertxOptions();</div><div class="line">        vo.setEventLoopPoolSize(<span class="number">16</span>);</div><div class="line">        Vertx vertx = Vertx.vertx(vo);</div><div class="line"></div><div class="line">        DeploymentOptions options = <span class="keyword">new</span> DeploymentOptions();</div><div class="line">        options.setInstances(<span class="number">100</span>);</div><div class="line"></div><div class="line">        vertx.deployVerticle(Main.class.getName(), options, e -&gt; {</div><div class="line">            System.out.println(e.succeeded());</div><div class="line">            System.out.println(e.failed());</div><div class="line">            System.out.println(e.cause());</div><div class="line">            System.out.println(e.result());</div><div class="line">        });</div><div class="line">    }</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span>() {</div><div class="line">        Handler&lt;HttpServerRequest&gt; handler = e -&gt; {</div><div class="line">            HttpServerResponse response = e.response();</div><div class="line">            response.putHeader(<span class="string">"content-type"</span>, <span class="string">"application/json"</span>).end(<span class="string">"Hello world"</span>);</div><div class="line">        };</div><div class="line">        vertx.createHttpServer().requestHandler(handler).listen(<span class="number">8080</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="Verticle发布和Vert-x线程模型">Verticle发布和Vert.x线程模型</h2>
<p>以上比较啰嗦，主要介绍了一些Vert.x的一些概念。下面是我想重点介绍的内容。</p>
<p>本节以实现一个简单的http server为例(编程方式发布Verticle)，分析 vert.x 的线程和Verticle的关系。只分析标准的Verticle。代码如上。</p>
<h3 id="Verticle发布过程">Verticle发布过程</h3>
<p>首先先创建一个Vertx实例，可以你可以通过<code>VertxOptions</code>设置线程池的大小。上面的例子中设置Event Loop线程池的大小为16:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vo.setEventLoopPoolSize(<span class="number">16</span>);</div></pre></td></tr></table></figure>

<p>因此即使你创建几百个Verticle，也只会有16个Event Loop处理它们，你可以通过<code>jstack</code>查看这些线程。你会看到多个名为<code>vert.x-eventloop-thread-&lt;num&gt;</code>的线程，一个<code>vertx-blocked-thread-checker</code>线程，一个<code>vert.x-acceptor-thread-0</code>。</p>
<p>调用<code>void deployVerticle(String name, DeploymentOptions options, Handler&lt;AsyncResult&lt;String&gt;&gt; completionHandler)</code>方法发布<code>Verticle</code>。<br><code>DeploymentOptions</code>对象可以设置发布参数，比如是否是worker verticle,多线程worker verticle, ha, 隔离组等， 重要的是instances，它用来指定分布的Verticle实例的数量，默认是一个。</p>
<p>底层调用<code>DeploymentManager</code>的<code>doDeployVerticle</code>来实现，它会根据实例数创建相应多的<code>Verticle</code>,然后调用<code>doDeploy</code>发布这些<code>Verticle</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Verticle[] verticles = createVerticles(verticleFactory, identifier, <span class="keyword">options</span>.getInstances(), <span class="keyword">cl</span>);</div></pre></td></tr></table></figure>

<p>我将<code>doDeploy</code>方法简化，让我们看一下关键代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDeploy</span>(String identifier, String deploymentID, DeploymentOptions options,</div><div class="line">                          ContextImpl parentContext,</div><div class="line">                          ContextImpl callingContext,</div><div class="line">                          Handler&lt;AsyncResult&lt;String&gt;&gt; completionHandler,</div><div class="line">                          ClassLoader tccl, Verticle... verticles) {</div><div class="line">        <span class="comment">//准备工作</span></div><div class="line">        ……</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (Verticle verticle: verticles) {</div><div class="line">            <span class="comment">//创建上下文</span></div><div class="line">            ContextImpl context = options.isWorker() ? vertx.createWorkerContext(options.isMultiThreaded(), deploymentID, conf, tccl) :</div><div class="line">                    vertx.createEventLoopContext(deploymentID, conf, tccl);</div><div class="line">            </div><div class="line">            deployment.addVerticle(<span class="keyword">new</span> VerticleHolder(verticle, context));</div><div class="line">            context.runOnContext(v -&gt; {</div><div class="line">                <span class="keyword">try</span> {</div><div class="line">                    verticle.init(vertx, context);</div><div class="line">                    Future&lt;Void&gt; startFuture = Future.future();</div><div class="line">                    verticle.start(startFuture);</div><div class="line">                    startFuture.setHandler(……);</div><div class="line">                } <span class="keyword">catch</span> (Throwable t) {}</div><div class="line">            });</div><div class="line">        }</div><div class="line">    }</div></pre></td></tr></table></figure>

<p>可以看到#11 行创建了一个上下文ContextImpl, 因为本例中我们不用worker模式，所以这个上下文是通过<code>vertx.createEventLoopContext(deploymentID, conf, tccl)</code>创建的。每个verticle都会创建一个新的上下文，因此verticle和上下文是意义对应的。</p>
<p>#17 行初始化verticle，#19 行启动这个verticle。还记得我们的例子中实现的<code>start</code>方法吗，它会在这里被调用。</p>
<p>这样，多个verticle实例被发布了。</p>
<h3 id="线程模型">线程模型</h3>
<p>首先插播一下Netty的线程模型，不感兴趣的可以略过。</p>
<h4 id="Netty的线程模型">Netty的线程模型</h4>
<p>虽然Vert.x底层籍由Netty实现，但是它的处理方式与Netty NIO的线程模型是不同的。<br>(以下谈论的Netty线程模型是指NIO的情况)<br>比如下面的Netty代码片段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">EventLoopGroup parentGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</div><div class="line">EventLoopGroup childGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">50</span>);</div><div class="line"><span class="keyword">try</span> {</div><div class="line">           ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">           b.group(parentGroup, childGroup)</div><div class="line">                   .channel(NioServerSocketChannel.class)</div><div class="line">                   .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;(){……});</div><div class="line"></div><div class="line">           Channel ch = b.bind(<span class="string">"0.0.0.0"</span>,<span class="number">8080</span>).sync().channel();</div><div class="line">           ch.closeFuture().sync();</div><div class="line">       } <span class="keyword">finally</span> {</div><div class="line">           parentGroup.shutdownGracefully();</div><div class="line">           childGroup.shutdownGracefully();</div><div class="line">       }</div></pre></td></tr></table></figure>

<p><code>NioEventLoopGroup</code>代表一组<code>EventLoop</code>，每个<code>EventLoop</code>映射一个线程，每个<code>Channel</code>注册一个<code>EventLoop</code>,但是一个<code>EventLoop</code>可以关联多个<code>Channel</code>。<br><code>parentGroup</code>用来处理Accept事件，而<code>childGroup</code>用来处理其余的IO事件。当有并发连接的时候，<code>Handler</code>会在<code>childGroup</code>线程池中执行。你可以指定<code>childGroup</code>的线程数量，如果没有指定，则从系统属性中读取&quot;io.netty.eventLoopThreads&quot;，如果这个属性没有设置，则使用CPU核数 <em> 2 (Runtime.getRuntime().availableProcessors() </em> 2))。一般<code>parentGroup</code>设置为1，我们只需要一个Acceptor处理客户端的连接即可。</p>
<p>当有多个并发连接的时候，每个连接/Channel被分配到一个<code>EventLoop</code>上。<code>EventLoop</code>选择是均匀地 (如果线程数是2的n次方，可以用比较快的选择方法PowerOfTwoEventExecutorChooser):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PowerOfTwoEventExecutorChooser</span> <span class="keyword">implements</span> <span class="title">EventExecutorChooser</span> </span>{</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> EventExecutor <span class="title">next</span>() {</div><div class="line">        <span class="keyword">return</span> children[childIndex.getAndIncrement() & children.length - <span class="number">1</span>];</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEventExecutorChooser</span> <span class="keyword">implements</span> <span class="title">EventExecutorChooser</span> </span>{</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> EventExecutor <span class="title">next</span>() {</div><div class="line">        <span class="keyword">return</span> children[Math.abs(childIndex.getAndIncrement() % children.length)];</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>因此一旦如果某个<code>EventLoop</code>处理慢了，则这个线程上的event可能出现堆积。<br>比如下面的代码故意在某个线程上处理慢一些，导致这个<code>EventLoop</code>上出现堆积，Netty并没有根据压力将时间分配到其它处理快的<code>EventLoop</code>上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>{</div><div class="line">	……</div><div class="line">	</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span>(ChannelHandlerContext ctx, Object msg) {</div><div class="line">        String name = Thread.currentThread().getName();</div><div class="line">        System.out.println(name);</div><div class="line">        <span class="keyword">if</span> (name.endsWith(<span class="string">"-5"</span>)) {</div><div class="line">            <span class="keyword">try</span> {</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">                e.printStackTrace();</div><div class="line">            }</div><div class="line">        }</div><div class="line">		……</div><div class="line"></div><div class="line">｝</div></pre></td></tr></table></figure>

<p>输出结果可以看到<code>nioEventLoopGroup-3-5</code>处理了同样多的请求，而且都堆积在后面了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line">nioEventLoopGroup-3-19</div><div class="line">nioEventLoopGroup-3-18</div><div class="line">nioEventLoopGroup-3-19</div><div class="line">nioEventLoopGroup-3-18</div><div class="line">nioEventLoopGroup-3-20</div><div class="line">nioEventLoopGroup-3-20</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div></pre></td></tr></table></figure>

<p>因此，我们可以了解到，当启动一个NIO方式的Netty实例的时候，它会使用一个线程池来处理http请求。</p>
<p>Netty 4.0的线程模型被很好的重定义，一个<code>ChannelHandler</code>实例的方法不会被并发的调用，除非它被<code>@Sharable</code>标记，因此你不应该增加一个ChannelHandler 实例多次。当你增加一个handler到ChannelPipeline中时，你可以指定一个特定的<code>EventExecutorGroup</code>来执行这个handler。如果没有指定，则使用Channel注册的<code>EventLoop</code>来执行。如果两个Handler被指定不同的<code>EventExecutorGroup</code>，则它们会并发执行，因此如果它们会访问共享数据的化，你需要关注并发控制的问题。更多内容可以查看 <a href="http://netty.io/wiki/new-and-noteworthy-in-4.0.html#well-defined-thread-model" target="_blank" rel="external">Netty的文档</a>。</p>
<h4 id="Vert-x的线程模型">Vert.x的线程模型</h4>
<p>Vert.x如何在线程中处理事件的呢，还是以我们的例子分析。</p>
<p>回顾一下我们实现的Verticle的start方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span>() {</div><div class="line">        Handler&lt;HttpServerRequest&gt; handler = e -&gt; {</div><div class="line">            HttpServerResponse response = e.response();</div><div class="line">            response.putHeader(<span class="string">"content-type"</span>, <span class="string">"application/json"</span>).end(<span class="string">"Hello world"</span>);</div><div class="line">        };</div><div class="line">        vertx.createHttpServer().requestHandler(handler).listen(<span class="number">8080</span>);</div><div class="line">    }</div></pre></td></tr></table></figure>

<p>在这个start方法中，我们创建了一个http server，让它监听 8080端口， http request的处理交给handler执行。 那么监听线程是哪一个？handler又是在哪个线程池中执行的呢？调用多个Verticle实例的方法为什么没有出现&quot;地址/端口被占用&quot;的异常呢？</p>
<p>首先vertx.createHttpServer()会创建一个HttpServerImpl对象，可以通过HttpServerOptions配置更多的参数，每个Verticle实例都会创建一个HttpServerImpl对象。requestHandler(handler)方法设置处理器，你还可以使用Vert.x-Web设置路由的功能。</p>
<p><code>listen(8080)</code>启动http 服务器，它实际调用netty实现的。<br>我将<code>listen</code>方法简化，去除一些检查代码和回调处理，只保留关键代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> HttpServer <span class="title">listen</span>(<span class="keyword">int</span> port, String host, Handler&lt;AsyncResult&lt;HttpServer&gt;&gt; listenHandler) {        </div><div class="line">        listenContext = vertx.getOrCreateContext();</div><div class="line">        listening = <span class="keyword">true</span>;       </div><div class="line">        <span class="keyword">synchronized</span> (vertx.sharedHttpServers()) {</div><div class="line">            id = <span class="keyword">new</span> ServerID(port, host);</div><div class="line">            HttpServerImpl shared = vertx.sharedHttpServers().get(id);</div><div class="line">            <span class="keyword">if</span> (shared == <span class="keyword">null</span>) {</div><div class="line">                serverChannelGroup = <span class="keyword">new</span> DefaultChannelGroup(<span class="string">"vertx-acceptor-channels"</span>, GlobalEventExecutor.INSTANCE);</div><div class="line">                ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">                bootstrap.group(vertx.getAcceptorEventLoopGroup(), availableWorkers);</div><div class="line">                bootstrap.channelFactory(<span class="keyword">new</span> VertxNioServerChannelFactory());</div><div class="line">                </div><div class="line">                bootstrap.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;Channel&gt;() {</div><div class="line">                    <span class="annotation">@Override</span></div><div class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span>(Channel ch) <span class="keyword">throws</span> Exception {</div><div class="line">                        ……</div><div class="line">                        pipeline.addLast(<span class="string">"handler"</span>, <span class="keyword">new</span> ServerHandler());</div><div class="line">                    }</div><div class="line">                });</div><div class="line"></div><div class="line">                addHandlers(<span class="keyword">this</span>, listenContext);</div><div class="line">                </div><div class="line">                vertx.sharedHttpServers().put(id, <span class="keyword">this</span>);</div><div class="line">                actualServer = <span class="keyword">this</span>;</div><div class="line">            } <span class="keyword">else</span> {</div><div class="line">                <span class="comment">// Server already exists with that host/port - we will use that</span></div><div class="line">                actualServer = shared;</div><div class="line">                addHandlers(actualServer, listenContext);</div><div class="line">                metrics = vertx.metricsSPI().createMetrics(<span class="keyword">this</span>, <span class="keyword">new</span> SocketAddressImpl(port, host), options);</div><div class="line">            }</div><div class="line">            </div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    }</div></pre></td></tr></table></figure>

<p>#6 行可以看到它会检查使用这个IP地址和端口的http server是否存在，如果存在的化直接跳到# 27行。因此回答上面的问题，多个Verticle实例不会引起冲突，因为它们会共享同一个http server。</p>
<p>这个http server通过netty ServerBootstrap创建。#10 行可以看到acceptor是一个单线程执行的,acceptorEventLoopGroup在VertxImpl中定义。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">acceptorEventLoopGroup </span>=<span class="string"> new NioEventLoopGroup(1, acceptorEventLoopThreadFactory);</span></div></pre></td></tr></table></figure>

<p>#10 行还显示，netty的IO worker线程池由<code>availableWorkers</code>确定，它是一个VertxEventLoopGroup对象。VertxEventLoopGroup类扩展<code>AbstractEventExecutorGroup</code>,实现了<code>EventLoopGroup</code>接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> EventLoop <span class="title">next</span>() {</div><div class="line">  <span class="keyword">if</span> (workers.isEmpty()) {</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    EventLoop worker = workers.get(pos).worker;</div><div class="line">    pos++;</div><div class="line">    checkPos();</div><div class="line">    <span class="keyword">return</span> worker;</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addWorker</span>(EventLoop worker) {</div><div class="line">  EventLoopHolder holder = findHolder(worker);</div><div class="line">  <span class="keyword">if</span> (holder == <span class="keyword">null</span>) {</div><div class="line">    workers.add(<span class="keyword">new</span> EventLoopHolder(worker));</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    holder.count++;</div><div class="line">  }</div><div class="line">} </div><div class="line">……</div></pre></td></tr></table></figure>

<p>线程的数量由<code>worker</code>的数量决定，worker的类型是EventLoop,对应一个线程，有多少<code>worker</code>就会有多少线程。</p>
<p>通过<code>addWorker</code>可以增加线程的数量，worker不会重复。</p>
<p>回到刚才的<code>listen</code>方法， #21 行addHandlers方法会配置handler在哪一个event loop中执行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addHandlers</span>(HttpServerImpl server, ContextImpl context) {</div><div class="line">  <span class="keyword">if</span> (requestStream.handler() != <span class="keyword">null</span>) {</div><div class="line">    server.reqHandlerManager.addHandler(requestStream.handler(), context);</div><div class="line">  }</div><div class="line">  <span class="keyword">if</span> (wsStream.handler() != <span class="keyword">null</span>) {</div><div class="line">    server.wsHandlerManager.addHandler(wsStream.handler(), context);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>server.reqHandlerManager.addHandler</code>方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addHandler</span>(Handler&lt;T&gt; handler, ContextImpl context) {</div><div class="line">  EventLoop worker = context.nettyEventLoop();</div><div class="line">  availableWorkers.addWorker(worker);</div><div class="line">  Handlers&lt;T&gt; handlers = <span class="keyword">new</span> Handlers&lt;&gt;();</div><div class="line">  Handlers&lt;T&gt; prev = handlerMap.putIfAbsent(worker, handlers);</div><div class="line">  <span class="keyword">if</span> (prev != <span class="keyword">null</span>) {</div><div class="line">    handlers = prev;</div><div class="line">  }</div><div class="line">  handlers.addHandler(<span class="keyword">new</span> HandlerHolder&lt;&gt;(context, handler));</div><div class="line">  hasHandlers = <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>#2 行得到这个上下文的EventLoop。 还记得上下文的EventLoop怎么创建出来的吗？每个<code>Verticle</code>实例关联一个上下文，因此一个<code>Verticle</code>实例只会创建一个worker。<br>把这个worker加入到availableWorkers，这样就增加了一个事件处理线程。</p>
<p>因此我们可以看出正常情况下Vert.x的每个<code>Verticle</code>实例只会用一个线程处理请求，在多核情况下一定要配置instance的数量。</p>
<p>如果配置的instance的数量大于eventLoopPoolSize数量，那么就会有一个Event Loop处理多个instance的情况。 线程配置的过多有时不会带来性能的提升，由于线程也有context swicthing，反而会带来性能的降低。</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/03/31/vertx-thread-model/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>Vert.x是一个在JVM开发reactive应用的框架，可用于开发异步、可伸缩、高并发的Web应用(虽然不限于web应用)。其目的在于为JVM提供一个Node.js的替代方案。开发者可以通过它使用JavaScript、Ruby、Groovy、Java，甚至是混合语言来编写应用。<br>使用Vertx.x框架，可以用JavaScript、CoffeeScript、Ruby、Python、Groovy或Java开发应用程序的组件，最终应用程序可以是混合语言构建的。</p>
<p>本文试图揭示Vert.x的线程模型的应用，通过源代码分析Vert.x如何使用线程池处理请求的，以及比较Netty和Vert.x使用线程池的异同。</p>
<p>也许你觉得奇怪，默认启动一个Vert.x Verticle实例，它只用一个线程处理事件，在多核的情况下你需要创建多个Verticle实例以充分利用多个CPU Core的性能。</p>
]]>
    
    </summary>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[超全的Go Http路由框架性能比较]]></title>
    <link href="http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/"/>
    <id>http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/</id>
    <published>2016-03-23T06:02:57.000Z</published>
    <updated>2016-03-28T02:00:32.180Z</updated>
    <content type="html"><![CDATA[<p>使用Go开发Web应用非常方便，它自己的路由器<a href="http://golang.org/pkg/net/http/#ServeMux" target="_blank" rel="external">default request multiplexer</a>超级简单，但是功能也有限，所幸net/http库的设计非常好，很容易实现自己定义的路由器，所以你如果在github搜一下，会找到很多的第三方的路由库。</p>
<p>但是这些路由库良莠不齐，尤其是早期实现的路由器，有些实现了很差的路由算法，有些没有仔细考虑内存的分配，导致垃圾回收的问题。</p>
<p>Julien Schmidt在实现<a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="external">HttpRouter</a>库的时候将测试代码抽象出一个测试框架，用来测试Go的各种的路由器，测试的库相当的全。这个测试框架放在了<a href="https://github.com/julienschmidt/go-http-routing-benchmark" target="_blank" rel="external">github</a>上。</p>
<p>对于架构师和Go Web开发人员来说，这个测试确实是一份值得参考的资料，在选择一款路由框架的时候非常有帮助。</p>
<blockquote>
<p>路由是Go Web框架的一个功能，它可以将不同的URL映射到相应的处理方法上。一些库只实现了路由的功能，也有一些库实现了完整的Web框架的特性，如上下文管理，Session的维护，模版的处理，ORM等。本文只比较路由的性能。</p>
</blockquote>
<a id="more"></a>
<p>这个项目的README并没有列出一部分的测试结果，我在Amazon AWS C3.xlarge机器上做了测试，下面是测试的结果，并整理成图表，分享给大家。</p>
<blockquote>
<p>C3：<a href="https://aws.amazon.com/cn/ec2/instance-types/" target="_blank" rel="external">https://aws.amazon.com/cn/ec2/instance-types/</a></p>
<p>功能：<br>   高频 Intel Xeon E5-2680 v2 (Ivy Bridge) 处理器<br>   对 Enhanced Networking 的支持<br>   支持集群<br>   采用 SSD 的实例存储</p>
<p>型号     vCPU     内存 (GiB)     SSD 存储 (GB)<br>c3.large     2     3.75     2 x 16<br>c3.xlarge     4     7.5     2 x 40<br>c3.2xlarge     8     15     2 x 80<br>c3.4xlarge     16     30     2 x 160<br>c3.8xlarge     32     60     2 x 320</p>
</blockquote>
<h2 id="路由框架">路由框架</h2>
<p>测试的路由框架包括(此处排名不分先后)：</p>
<ul>
<li><a href="https://github.com/Unknwon/macaron" target="_blank" rel="external">macaron</a></li>
<li><a href="https://github.com/ant0ine/go-json-rest" target="_blank" rel="external">JsonRest</a></li>
<li><a href="https://github.com/astaxie/beego" target="_blank" rel="external">beego</a></li>
<li><a href="https://github.com/bmizerany/pat" target="_blank" rel="external">pat</a></li>
<li><a href="https://github.com/go-playground/lars" target="_blank" rel="external">lars</a></li>
<li><a href="https://github.com/dimfeld/httptreemux" target="_blank" rel="external">httptreemux</a></li>
<li><a href="https://github.com/gin-gonic/gin" target="_blank" rel="external">gin</a></li>
<li><a href="https://github.com/go-martini/martini" target="_blank" rel="external">martini</a></li>
<li><a href="https://github.com/go-zoo/bone" target="_blank" rel="external">bone</a></li>
<li><a href="https://github.com/gocraft/web" target="_blank" rel="external">gocraft</a></li>
<li><a href="github.com/gorilla/mux">gorilla</a></li>
<li><a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="external">httprouter</a></li>
<li><a href="https://github.com/lunny/tango" target="_blank" rel="external">tango</a></li>
<li><a href="https://github.com/mailgun/route" target="_blank" rel="external">vulcan</a></li>
<li><a href="https://github.com/mikespook/possum" target="_blank" rel="external">possum</a></li>
<li><a href="https://github.com/naoina/denco" target="_blank" rel="external">denco</a></li>
<li><a href="https://github.com/pilu/traffic" target="_blank" rel="external">traffic</a></li>
<li><a href="https://github.com/plimble/ace" target="_blank" rel="external">ace</a></li>
<li><a href="https://github.com/revel/revel" target="_blank" rel="external">revel</a></li>
<li><a href="https://github.com/typepress/rivet" target="_blank" rel="external">rivet</a></li>
<li><a href="github.com/ursiform/bear">bear</a></li>
<li><a href="github.com/vanng822/r2router">r2router</a></li>
<li><a href="https://github.com/zenazn/goji/web" target="_blank" rel="external">goji</a></li>
<li><a href="http://goji.io" target="_blank" rel="external">gojiv2</a></li>
<li><a href="http://goji.io/pat" target="_blank" rel="external">gojiv2pat</a></li>
<li><a href="https://github.com/labstack/echo" target="_blank" rel="external">echo</a></li>
<li><a href="https://github.com/kataras/iris" target="_blank" rel="external">iris</a></li>
</ul>
<h2 id="Benchmark">Benchmark</h2>
<p>测试代码包含了几种测试case,在不同的测试case中，各路由/Web框架的性能可能会有些不同。</p>
<h3 id="静态路由测试">静态路由测试</h3>
<p>静态路由使用一组定义好的路由测试web框架，不带参数， 一共157个路由。路由定义如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> staticRoutes = []route{</div><div class="line">	{<span class="string">"GET"</span>, <span class="string">"/"</span>},</div><div class="line">	{<span class="string">"GET"</span>, <span class="string">"/cmd.html"</span>},</div><div class="line">	{<span class="string">"GET"</span>, <span class="string">"/code.html"</span>},</div><div class="line">	{<span class="string">"GET"</span>, <span class="string">"/contrib.html"</span>},</div><div class="line">	{<span class="string">"GET"</span>, <span class="string">"/contribute.html"</span>},</div><div class="line">	{<span class="string">"GET"</span>, <span class="string">"/debugging_with_gdb.html"</span>},</div><div class="line">	……</div></pre></td></tr></table></figure>

<p>它用来和Go官方的<a href="http://golang.org/pkg/net/http/#ServeMux" target="_blank" rel="external">http.ServeMux</a>路由库进行比较。</p>
<p><img src="staticroute.png" alt="静态路由Benchmark"></p>
<blockquote>
<p>纵坐标轴是单次操作所耗费的时间(纳秒),越小越好</p>
</blockquote>
<p>可以看到， 即使是官方库 HttpServeMux,也有不错的性能，一些其它的路由框架如GoRestful等居然性能远远低于官方库。<br><br>而性能最好的Denco框架，时间花费只有官方库的0.02%。</p>
<p>通过性能的对比，即使是web框架中的路由功能，不同的框架实现性能差别也是天壤之别。选择一款合适的路由库/Web框架，的确是架构师慎重考虑的一件事情。</p>
<blockquote>
<p>笔者最初开发 <a href="http://uridb.com网站的时候，看到了go-zoo/bone的网站，它列出了几款路由器的比较，显示bone的性能最好，所以笔者就选择了这个框架，很遗憾官方介绍只列出对它有利的几个框架。如果可以重来，看到本文结果的情况下，我会调研更多的框架，选择性能更好的一款路由库。" target="_blank" rel="external">http://uridb.com网站的时候，看到了go-zoo/bone的网站，它列出了几款路由器的比较，显示bone的性能最好，所以笔者就选择了这个框架，很遗憾官方介绍只列出对它有利的几个框架。如果可以重来，看到本文结果的情况下，我会调研更多的框架，选择性能更好的一款路由库。</a></p>
</blockquote>
<h3 id="微测试">微测试</h3>
<p>这个测试case用来测试路径带有参数的情况，参数作为路径的一部分。<br>分别测试路径带有1个参数(Param),5个参数(Param5)，20个参数(Param20)的情况，并没有往Response写数据。<br><code>ParamWrite</code>测试URL中带有一个参数，并且把这个参数值写入到Response中。</p>
<p>各框架的测试代码类似下面的代码：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> BenchmarkAce_Param(b *testing.B) {</div><div class="line">	router := loadAceSingle(<span class="string">"GET"</span>, <span class="string">"/user/:name"</span>, aceHandle)</div><div class="line"></div><div class="line">	r, _ := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"/user/gordon"</span>, <span class="constant">nil</span>)</div><div class="line">	benchRequest(b, router, r)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>测试结果如下：<br><img src="micro.png" alt="基本测试"></p>
<h3 id="Github_API">Github API</h3>
<p>这个测试模仿Github API, Github API包含203个路由，每个框架都实现了这些API的路由，返回Response为URL。<br>这个测试用来比较在大量路由情况下框架的表现。 (它还包含一个静态路由测试和一个参数测试，性能和下图差不多，放在一张图中不方便查看，所以这里不列出来了)</p>
<p><img src="github.png" alt="Github API Route Benchmark"></p>
<h3 id="Google+_API">Google+ API</h3>
<p>这个测试case用来测试Google+的13个路由的情况，实际Google+包含的API不止这些。</p>
<p><img src="googleplus.png" alt="Google+ API Route Benchmark"></p>
<h3 id="Parse_API">Parse API</h3>
<p>这个测试case用来测试Parse的API, 包含26个路由的情况，比较各框架的在真实的路由下的性能的情况。</p>
<p><img src="parse.png" alt="Parse API Route Benchmark"></p>
<h3 id="内存占用">内存占用</h3>
<p>即使在同样的路由映射的情况下，各框架的内存占用也是云壤之别。</p>
<p>在各种测试case下，各框架配置好路由的情况下占用的内存情况如下：</p>
<p><img src="mem.png" alt="内存占用"></p>
<p>如果你查看文末完整的测试结果，还可以发现在处理每个请求时，不同的框架会分配不同数量的中间对象，性能好的框架可能是0分配，但是有的框架居然达到了几百次的分配，差距相当的明显。</p>
<h2 id="结论">结论</h2>
<p>选择一个框架有很多的理由，比如灵活性、扩展性、API友好程度、文档详细程度、项目活跃度、社区活跃度等，但是性能和内存占用绝对是必须考虑的一个重要方面，虽然我不想列出唯一的一个推荐的路由库，但是在还是建议你在benchmark结果比较好几款路由库中做选择。</p>
<p>其中我看到了几个来自中国的程序员贡献的框架，加油。</p>
<h2 id="完整的测试数据">完整的测试数据</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div></pre></td><td class="code"><pre><div class="line">BenchmarkAce_Param               	 <span class="number">5000000</span>	       <span class="number">376</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_Param              	 <span class="number">1000000</span>	      <span class="number">1464</span> ns/op	     <span class="number">456</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_Param             	 <span class="number">1000000</span>	      <span class="number">2214</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_Param              	 <span class="number">1000000</span>	      <span class="number">1440</span> ns/op	     <span class="number">384</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkDenco_Param             	 <span class="number">5000000</span>	       <span class="number">261</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_Param              	<span class="number">20000000</span>	       <span class="number">106</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_Param               	<span class="number">20000000</span>	        <span class="number">94.5</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_Param        	 <span class="number">1000000</span>	      <span class="number">2263</span> ns/op	     <span class="number">648</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkGoji_Param              	 <span class="number">1000000</span>	      <span class="number">1060</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_Param            	 <span class="number">2000000</span>	       <span class="number">952</span> ns/op	     <span class="number">176</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_Param        	 <span class="number">1000000</span>	      <span class="number">2446</span> ns/op	     <span class="number">649</span> B/op	      <span class="number">13</span> allocs/op</div><div class="line">BenchmarkGoRestful_Param         	  <span class="number">200000</span>	     <span class="number">11008</span> ns/op	    <span class="number">2696</span> B/op	      <span class="number">27</span> allocs/op</div><div class="line">BenchmarkGorillaMux_Param        	  <span class="number">500000</span>	      <span class="number">4672</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_Param        	<span class="number">10000000</span>	       <span class="number">179</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_Param       	 <span class="number">2000000</span>	       <span class="number">986</span> ns/op	     <span class="number">352</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkIris_Param                 <span class="number">30000000</span>           <span class="number">51.3</span> ns/op          <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_Param             	 <span class="number">3000000</span>	       <span class="number">453</span> ns/op	      <span class="number">56</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkLARS_Param              	<span class="number">20000000</span>	        <span class="number">98.2</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_Param           	 <span class="number">1000000</span>	      <span class="number">3713</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_Param           	  <span class="number">300000</span>	      <span class="number">6801</span> ns/op	    <span class="number">1104</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkPat_Param               	 <span class="number">1000000</span>	      <span class="number">2474</span> ns/op	     <span class="number">648</span> B/op	      <span class="number">12</span> allocs/op</div><div class="line">BenchmarkPossum_Param            	 <span class="number">1000000</span>	      <span class="number">2440</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_Param          	 <span class="number">1000000</span>	      <span class="number">1339</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_Param             	  <span class="number">200000</span>	      <span class="number">8200</span> ns/op	    <span class="number">1632</span> B/op	      <span class="number">26</span> allocs/op</div><div class="line">BenchmarkRivet_Param             	 <span class="number">5000000</span>	       <span class="number">289</span> ns/op	      <span class="number">48</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_Param             	 <span class="number">1000000</span>	      <span class="number">1681</span> ns/op	     <span class="number">256</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkTigerTonic_Param        	  <span class="number">500000</span>	      <span class="number">4260</span> ns/op	     <span class="number">976</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkTraffic_Param           	  <span class="number">300000</span>	      <span class="number">6945</span> ns/op	    <span class="number">1960</span> B/op	      <span class="number">21</span> allocs/op</div><div class="line">BenchmarkVulcan_Param            	 <span class="number">2000000</span>	       <span class="number">925</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_Param5              	 <span class="number">2000000</span>	       <span class="number">729</span> ns/op	     <span class="number">160</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_Param5             	 <span class="number">1000000</span>	      <span class="number">1968</span> ns/op	     <span class="number">501</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_Param5            	  <span class="number">500000</span>	      <span class="number">2463</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_Param5             	 <span class="number">1000000</span>	      <span class="number">1857</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkDenco_Param5            	 <span class="number">2000000</span>	       <span class="number">730</span> ns/op	     <span class="number">160</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_Param5             	<span class="number">10000000</span>	       <span class="number">194</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_Param5              	<span class="number">10000000</span>	       <span class="number">170</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_Param5       	 <span class="number">1000000</span>	      <span class="number">3500</span> ns/op	     <span class="number">920</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkGoji_Param5             	 <span class="number">1000000</span>	      <span class="number">1453</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_Param5           	 <span class="number">1000000</span>	      <span class="number">1345</span> ns/op	     <span class="number">240</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_Param5       	  <span class="number">500000</span>	      <span class="number">4460</span> ns/op	    <span class="number">1097</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkGoRestful_Param5        	  <span class="number">100000</span>	     <span class="number">12908</span> ns/op	    <span class="number">2872</span> B/op	      <span class="number">27</span> allocs/op</div><div class="line">BenchmarkGorillaMux_Param5       	  <span class="number">300000</span>	      <span class="number">6696</span> ns/op	     <span class="number">816</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_Param5       	 <span class="number">3000000</span>	       <span class="number">531</span> ns/op	     <span class="number">160</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_Param5      	 <span class="number">1000000</span>	      <span class="number">2194</span> ns/op	     <span class="number">576</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkIris_Param5                <span class="number">30000000</span>          <span class="number">51.3</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_Param5            	 <span class="number">1000000</span>	      <span class="number">2043</span> ns/op	     <span class="number">440</span> B/op	      <span class="number">10</span> allocs/op</div><div class="line">BenchmarkLARS_Param5             	<span class="number">10000000</span>	       <span class="number">167</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_Param5          	  <span class="number">500000</span>	      <span class="number">4150</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_Param5          	  <span class="number">200000</span>	      <span class="number">8193</span> ns/op	    <span class="number">1232</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkPat_Param5              	  <span class="number">300000</span>	      <span class="number">5593</span> ns/op	     <span class="number">964</span> B/op	      <span class="number">32</span> allocs/op</div><div class="line">BenchmarkPossum_Param5           	 <span class="number">1000000</span>	      <span class="number">2470</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_Param5         	 <span class="number">1000000</span>	      <span class="number">1700</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_Param5            	  <span class="number">200000</span>	      <span class="number">9906</span> ns/op	    <span class="number">1984</span> B/op	      <span class="number">33</span> allocs/op</div><div class="line">BenchmarkRivet_Param5            	 <span class="number">2000000</span>	       <span class="number">937</span> ns/op	     <span class="number">240</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_Param5            	  <span class="number">500000</span>	      <span class="number">4129</span> ns/op	     <span class="number">944</span> B/op	      <span class="number">17</span> allocs/op</div><div class="line">BenchmarkTigerTonic_Param5       	  <span class="number">200000</span>	     <span class="number">13169</span> ns/op	    <span class="number">2471</span> B/op	      <span class="number">38</span> allocs/op</div><div class="line">BenchmarkTraffic_Param5          	  <span class="number">200000</span>	     <span class="number">10445</span> ns/op	    <span class="number">2248</span> B/op	      <span class="number">25</span> allocs/op</div><div class="line">BenchmarkVulcan_Param5           	 <span class="number">1000000</span>	      <span class="number">1188</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_Param20             	 <span class="number">1000000</span>	      <span class="number">1808</span> ns/op	     <span class="number">640</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_Param20            	  <span class="number">300000</span>	      <span class="number">5793</span> ns/op	    <span class="number">1665</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_Param20           	  <span class="number">300000</span>	      <span class="number">4254</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_Param20            	  <span class="number">200000</span>	      <span class="number">8633</span> ns/op	    <span class="number">2540</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkDenco_Param20           	 <span class="number">1000000</span>	      <span class="number">2361</span> ns/op	     <span class="number">640</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_Param20            	 <span class="number">3000000</span>	       <span class="number">510</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_Param20             	 <span class="number">5000000</span>	       <span class="number">398</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_Param20      	  <span class="number">200000</span>	     <span class="number">11806</span> ns/op	    <span class="number">3796</span> B/op	      <span class="number">15</span> allocs/op</div><div class="line">BenchmarkGoji_Param20            	  <span class="number">500000</span>	      <span class="number">4591</span> ns/op	    <span class="number">1246</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_Param20          	 <span class="number">1000000</span>	      <span class="number">2245</span> ns/op	     <span class="number">480</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_Param20      	  <span class="number">100000</span>	     <span class="number">15243</span> ns/op	    <span class="number">4485</span> B/op	      <span class="number">20</span> allocs/op</div><div class="line">BenchmarkGoRestful_Param20       	  <span class="number">100000</span>	     <span class="number">22360</span> ns/op	    <span class="number">5444</span> B/op	      <span class="number">29</span> allocs/op</div><div class="line">BenchmarkGorillaMux_Param20      	  <span class="number">100000</span>	     <span class="number">14276</span> ns/op	    <span class="number">2923</span> B/op	      <span class="number">10</span> allocs/op</div><div class="line">BenchmarkHttpRouter_Param20      	 <span class="number">1000000</span>	      <span class="number">1597</span> ns/op	     <span class="number">640</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_Param20     	  <span class="number">200000</span>	     <span class="number">10298</span> ns/op	    <span class="number">3196</span> B/op	      <span class="number">10</span> allocs/op</div><div class="line">BenchmarkKocha_Param20           	  <span class="number">300000</span>	      <span class="number">6376</span> ns/op	    <span class="number">1808</span> B/op	      <span class="number">27</span> allocs/op</div><div class="line">BenchmarkLARS_Param20            	 <span class="number">5000000</span>	       <span class="number">376</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_Param20         	  <span class="number">200000</span>	     <span class="number">10811</span> ns/op	    <span class="number">2892</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkMartini_Param20         	  <span class="number">100000</span>	     <span class="number">16657</span> ns/op	    <span class="number">3596</span> B/op	      <span class="number">13</span> allocs/op</div><div class="line">BenchmarkPat_Param20             	   <span class="number">50000</span>	     <span class="number">26382</span> ns/op	    <span class="number">4687</span> B/op	     <span class="number">111</span> allocs/op</div><div class="line">BenchmarkPossum_Param20          	 <span class="number">1000000</span>	      <span class="number">2483</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_Param20        	  <span class="number">200000</span>	      <span class="number">7794</span> ns/op	    <span class="number">2284</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkRevel_Param20           	  <span class="number">100000</span>	     <span class="number">20359</span> ns/op	    <span class="number">5510</span> B/op	      <span class="number">52</span> allocs/op</div><div class="line">BenchmarkRivet_Param20           	 <span class="number">1000000</span>	      <span class="number">3210</span> ns/op	    <span class="number">1024</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_Param20           	  <span class="number">100000</span>	     <span class="number">22607</span> ns/op	    <span class="number">8224</span> B/op	      <span class="number">47</span> allocs/op</div><div class="line">BenchmarkTigerTonic_Param20      	   <span class="number">30000</span>	     <span class="number">50040</span> ns/op	   <span class="number">10344</span> B/op	     <span class="number">118</span> allocs/op</div><div class="line">BenchmarkTraffic_Param20         	   <span class="number">50000</span>	     <span class="number">32472</span> ns/op	    <span class="number">7944</span> B/op	      <span class="number">45</span> allocs/op</div><div class="line">BenchmarkVulcan_Param20          	 <span class="number">1000000</span>	      <span class="number">1957</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_ParamWrite          	 <span class="number">3000000</span>	       <span class="number">513</span> ns/op	      <span class="number">40</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkBear_ParamWrite         	 <span class="number">1000000</span>	      <span class="number">1490</span> ns/op	     <span class="number">456</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_ParamWrite        	 <span class="number">1000000</span>	      <span class="number">2352</span> ns/op	       <span class="number">8</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBone_ParamWrite         	 <span class="number">1000000</span>	      <span class="number">1547</span> ns/op	     <span class="number">384</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkDenco_ParamWrite        	 <span class="number">5000000</span>	       <span class="number">329</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_ParamWrite         	<span class="number">10000000</span>	       <span class="number">234</span> ns/op	       <span class="number">8</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_ParamWrite          	<span class="number">10000000</span>	       <span class="number">239</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_ParamWrite   	 <span class="number">1000000</span>	      <span class="number">2456</span> ns/op	     <span class="number">656</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkGoji_ParamWrite         	 <span class="number">1000000</span>	      <span class="number">1177</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_ParamWrite       	 <span class="number">1000000</span>	      <span class="number">1252</span> ns/op	     <span class="number">208</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_ParamWrite   	 <span class="number">1000000</span>	      <span class="number">4063</span> ns/op	    <span class="number">1128</span> B/op	      <span class="number">18</span> allocs/op</div><div class="line">BenchmarkGoRestful_ParamWrite    	  <span class="number">200000</span>	     <span class="number">11313</span> ns/op	    <span class="number">2704</span> B/op	      <span class="number">28</span> allocs/op</div><div class="line">BenchmarkGorillaMux_ParamWrite   	  <span class="number">500000</span>	      <span class="number">5033</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_ParamWrite   	<span class="number">10000000</span>	       <span class="number">242</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_ParamWrite  	 <span class="number">1000000</span>	      <span class="number">1025</span> ns/op	     <span class="number">352</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkIris_ParamWrite            <span class="number">10000000</span>           <span class="number">165</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_ParamWrite        	 <span class="number">3000000</span>	       <span class="number">519</span> ns/op	      <span class="number">56</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkLARS_ParamWrite         	<span class="number">10000000</span>	       <span class="number">224</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_ParamWrite      	  <span class="number">500000</span>	      <span class="number">4903</span> ns/op	    <span class="number">1144</span> B/op	      <span class="number">13</span> allocs/op</div><div class="line">BenchmarkMartini_ParamWrite      	  <span class="number">200000</span>	      <span class="number">8170</span> ns/op	    <span class="number">1208</span> B/op	      <span class="number">15</span> allocs/op</div><div class="line">BenchmarkPat_ParamWrite          	  <span class="number">500000</span>	      <span class="number">4148</span> ns/op	    <span class="number">1072</span> B/op	      <span class="number">17</span> allocs/op</div><div class="line">BenchmarkPossum_ParamWrite       	 <span class="number">1000000</span>	      <span class="number">2482</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_ParamWrite     	 <span class="number">1000000</span>	      <span class="number">1426</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_ParamWrite        	  <span class="number">200000</span>	      <span class="number">9772</span> ns/op	    <span class="number">2096</span> B/op	      <span class="number">31</span> allocs/op</div><div class="line">BenchmarkRivet_ParamWrite        	 <span class="number">3000000</span>	       <span class="number">595</span> ns/op	     <span class="number">144</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkTango_ParamWrite        	 <span class="number">2000000</span>	       <span class="number">871</span> ns/op	     <span class="number">136</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkTigerTonic_ParamWrite   	  <span class="number">200000</span>	      <span class="number">6642</span> ns/op	    <span class="number">1408</span> B/op	      <span class="number">22</span> allocs/op</div><div class="line">BenchmarkTraffic_ParamWrite      	  <span class="number">200000</span>	      <span class="number">8751</span> ns/op	    <span class="number">2384</span> B/op	      <span class="number">25</span> allocs/op</div><div class="line">BenchmarkVulcan_ParamWrite       	 <span class="number">2000000</span>	       <span class="number">928</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GithubStatic        	 <span class="number">5000000</span>	       <span class="number">242</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBear_GithubStatic       	 <span class="number">2000000</span>	       <span class="number">681</span> ns/op	     <span class="number">120</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkBeego_GithubStatic      	 <span class="number">1000000</span>	      <span class="number">2216</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GithubStatic       	  <span class="number">100000</span>	     <span class="number">16700</span> ns/op	    <span class="number">2880</span> B/op	      <span class="number">60</span> allocs/op</div><div class="line">BenchmarkDenco_GithubStatic      	<span class="number">30000000</span>	        <span class="number">52.3</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkEcho_GithubStatic       	<span class="number">10000000</span>	       <span class="number">126</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GithubStatic        	<span class="number">10000000</span>	       <span class="number">122</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GithubStatic 	 <span class="number">1000000</span>	      <span class="number">1295</span> ns/op	     <span class="number">296</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoji_GithubStatic       	 <span class="number">5000000</span>	       <span class="number">302</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGojiv2_GithubStatic     	 <span class="number">2000000</span>	       <span class="number">903</span> ns/op	     <span class="number">160</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkGoRestful_GithubStatic  	   <span class="number">30000</span>	     <span class="number">52595</span> ns/op	    <span class="number">3720</span> B/op	      <span class="number">32</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GithubStatic 	 <span class="number">1000000</span>	      <span class="number">1736</span> ns/op	     <span class="number">329</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GithubStatic 	  <span class="number">100000</span>	     <span class="number">23750</span> ns/op	     <span class="number">448</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GithubStatic 	<span class="number">20000000</span>	        <span class="number">65.1</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GithubStatic	<span class="number">20000000</span>	        <span class="number">77.8</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkIris_GithubStatic          <span class="number">30000000</span>            <span class="number">51.3</span> ns/op         <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GithubStatic      	<span class="number">20000000</span>	        <span class="number">94.0</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkLARS_GithubStatic       	<span class="number">10000000</span>	       <span class="number">122</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GithubStatic    	 <span class="number">1000000</span>	      <span class="number">3143</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkMartini_GithubStatic    	  <span class="number">100000</span>	     <span class="number">18552</span> ns/op	     <span class="number">784</span> B/op	      <span class="number">10</span> allocs/op</div><div class="line">BenchmarkPat_GithubStatic        	  <span class="number">100000</span>	     <span class="number">14052</span> ns/op	    <span class="number">3648</span> B/op	      <span class="number">76</span> allocs/op</div><div class="line">BenchmarkPossum_GithubStatic     	 <span class="number">1000000</span>	      <span class="number">1516</span> ns/op	     <span class="number">416</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkR2router_GithubStatic   	 <span class="number">2000000</span>	       <span class="number">748</span> ns/op	     <span class="number">144</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkRevel_GithubStatic      	  <span class="number">300000</span>	      <span class="number">7086</span> ns/op	    <span class="number">1248</span> B/op	      <span class="number">23</span> allocs/op</div><div class="line">BenchmarkRivet_GithubStatic      	<span class="number">10000000</span>	       <span class="number">140</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkTango_GithubStatic      	 <span class="number">1000000</span>	      <span class="number">1862</span> ns/op	     <span class="number">256</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GithubStatic 	 <span class="number">5000000</span>	       <span class="number">392</span> ns/op	      <span class="number">48</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTraffic_GithubStatic    	   <span class="number">30000</span>	     <span class="number">56251</span> ns/op	   <span class="number">18904</span> B/op	     <span class="number">148</span> allocs/op</div><div class="line">BenchmarkVulcan_GithubStatic     	 <span class="number">1000000</span>	      <span class="number">1281</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GithubParam         	 <span class="number">3000000</span>	       <span class="number">597</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_GithubParam        	 <span class="number">1000000</span>	      <span class="number">1768</span> ns/op	     <span class="number">496</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_GithubParam       	  <span class="number">500000</span>	      <span class="number">2485</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GithubParam        	  <span class="number">300000</span>	      <span class="number">7780</span> ns/op	    <span class="number">1456</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkDenco_GithubParam       	 <span class="number">3000000</span>	       <span class="number">601</span> ns/op	     <span class="number">128</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_GithubParam        	<span class="number">10000000</span>	       <span class="number">214</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GithubParam         	<span class="number">10000000</span>	       <span class="number">202</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GithubParam  	 <span class="number">1000000</span>	      <span class="number">2656</span> ns/op	     <span class="number">712</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkGoji_GithubParam        	 <span class="number">1000000</span>	      <span class="number">1555</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_GithubParam      	 <span class="number">1000000</span>	      <span class="number">1945</span> ns/op	     <span class="number">256</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GithubParam  	 <span class="number">1000000</span>	      <span class="number">3201</span> ns/op	     <span class="number">713</span> B/op	      <span class="number">14</span> allocs/op</div><div class="line">BenchmarkGoRestful_GithubParam   	   <span class="number">10000</span>	    <span class="number">158940</span> ns/op	    <span class="number">3016</span> B/op	      <span class="number">31</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GithubParam  	  <span class="number">100000</span>	     <span class="number">13605</span> ns/op	     <span class="number">768</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GithubParam  	 <span class="number">5000000</span>	       <span class="number">403</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GithubParam 	 <span class="number">1000000</span>	      <span class="number">1373</span> ns/op	     <span class="number">384</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkIris_GithubParam           <span class="number">30000000</span>          <span class="number">51.8</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GithubParam       	 <span class="number">2000000</span>	       <span class="number">968</span> ns/op	     <span class="number">128</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkLARS_GithubParam        	<span class="number">10000000</span>	       <span class="number">197</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GithubParam     	 <span class="number">1000000</span>	      <span class="number">3782</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_GithubParam     	  <span class="number">100000</span>	     <span class="number">15844</span> ns/op	    <span class="number">1136</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkPat_GithubParam         	  <span class="number">200000</span>	      <span class="number">9531</span> ns/op	    <span class="number">2464</span> B/op	      <span class="number">48</span> allocs/op</div><div class="line">BenchmarkPossum_GithubParam      	 <span class="number">1000000</span>	      <span class="number">2370</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_GithubParam    	 <span class="number">1000000</span>	      <span class="number">1469</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_GithubParam       	  <span class="number">200000</span>	      <span class="number">8602</span> ns/op	    <span class="number">1744</span> B/op	      <span class="number">28</span> allocs/op</div><div class="line">BenchmarkRivet_GithubParam       	 <span class="number">3000000</span>	       <span class="number">609</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_GithubParam       	 <span class="number">1000000</span>	      <span class="number">2710</span> ns/op	     <span class="number">480</span> B/op	      <span class="number">12</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GithubParam  	  <span class="number">300000</span>	      <span class="number">6767</span> ns/op	    <span class="number">1408</span> B/op	      <span class="number">22</span> allocs/op</div><div class="line">BenchmarkTraffic_GithubParam     	  <span class="number">100000</span>	     <span class="number">23116</span> ns/op	    <span class="number">5992</span> B/op	      <span class="number">52</span> allocs/op</div><div class="line">BenchmarkVulcan_GithubParam      	 <span class="number">1000000</span>	      <span class="number">1927</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GithubAll           	   <span class="number">10000</span>	    <span class="number">113025</span> ns/op	   <span class="number">13792</span> B/op	     <span class="number">167</span> allocs/op</div><div class="line">BenchmarkBear_GithubAll          	   <span class="number">10000</span>	    <span class="number">336857</span> ns/op	   <span class="number">86448</span> B/op	     <span class="number">943</span> allocs/op</div><div class="line">BenchmarkBeego_GithubAll         	    <span class="number">3000</span>	    <span class="number">501042</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GithubAll          	     <span class="number">500</span>	   <span class="number">2844328</span> ns/op	  <span class="number">548736</span> B/op	    <span class="number">7241</span> allocs/op</div><div class="line">BenchmarkDenco_GithubAll         	   <span class="number">10000</span>	    <span class="number">109515</span> ns/op	   <span class="number">20224</span> B/op	     <span class="number">167</span> allocs/op</div><div class="line">BenchmarkEcho_GithubAll          	   <span class="number">30000</span>	     <span class="number">49252</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GithubAll           	   <span class="number">30000</span>	     <span class="number">43531</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GithubAll    	    <span class="number">5000</span>	    <span class="number">517208</span> ns/op	  <span class="number">131656</span> B/op	    <span class="number">1686</span> allocs/op</div><div class="line">BenchmarkGoji_GithubAll          	    <span class="number">3000</span>	    <span class="number">641485</span> ns/op	   <span class="number">56112</span> B/op	     <span class="number">334</span> allocs/op</div><div class="line">BenchmarkGojiv2_GithubAll        	    <span class="number">2000</span>	    <span class="number">869630</span> ns/op	  <span class="number">118864</span> B/op	    <span class="number">3103</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GithubAll    	    <span class="number">3000</span>	    <span class="number">611777</span> ns/op	  <span class="number">134371</span> B/op	    <span class="number">2737</span> allocs/op</div><div class="line">BenchmarkGoRestful_GithubAll     	     <span class="number">100</span>	  <span class="number">17388700</span> ns/op	  <span class="number">837832</span> B/op	    <span class="number">6913</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GithubAll    	     <span class="number">200</span>	   <span class="number">7694609</span> ns/op	  <span class="number">144464</span> B/op	    <span class="number">1588</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GithubAll    	   <span class="number">20000</span>	     <span class="number">72241</span> ns/op	   <span class="number">13792</span> B/op	     <span class="number">167</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GithubAll   	   <span class="number">10000</span>	    <span class="number">240082</span> ns/op	   <span class="number">65856</span> B/op	     <span class="number">671</span> allocs/op</div><div class="line">BenchmarkIris_GithubAll               <span class="number">100000</span>         <span class="number">21199</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GithubAll         	   <span class="number">10000</span>	    <span class="number">183300</span> ns/op	   <span class="number">23304</span> B/op	     <span class="number">843</span> allocs/op</div><div class="line">BenchmarkLARS_GithubAll          	   <span class="number">30000</span>	     <span class="number">42847</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GithubAll       	    <span class="number">2000</span>	    <span class="number">773393</span> ns/op	  <span class="number">201138</span> B/op	    <span class="number">1803</span> allocs/op</div><div class="line">BenchmarkMartini_GithubAll       	     <span class="number">200</span>	   <span class="number">6520353</span> ns/op	  <span class="number">228214</span> B/op	    <span class="number">2483</span> allocs/op</div><div class="line">BenchmarkPat_GithubAll           	     <span class="number">300</span>	   <span class="number">4863404</span> ns/op	 <span class="number">1499569</span> B/op	   <span class="number">27435</span> allocs/op</div><div class="line">BenchmarkPossum_GithubAll        	   <span class="number">10000</span>	    <span class="number">292668</span> ns/op	   <span class="number">84448</span> B/op	     <span class="number">609</span> allocs/op</div><div class="line">BenchmarkR2router_GithubAll      	   <span class="number">10000</span>	    <span class="number">270070</span> ns/op	   <span class="number">77328</span> B/op	     <span class="number">979</span> allocs/op</div><div class="line">BenchmarkRevel_GithubAll         	    <span class="number">1000</span>	   <span class="number">1637315</span> ns/op	  <span class="number">337424</span> B/op	    <span class="number">5512</span> allocs/op</div><div class="line">BenchmarkRivet_GithubAll         	   <span class="number">10000</span>	    <span class="number">106604</span> ns/op	   <span class="number">16272</span> B/op	     <span class="number">167</span> allocs/op</div><div class="line">BenchmarkTango_GithubAll         	    <span class="number">5000</span>	    <span class="number">493225</span> ns/op	   <span class="number">87075</span> B/op	    <span class="number">2267</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GithubAll    	    <span class="number">2000</span>	   <span class="number">1179077</span> ns/op	  <span class="number">233680</span> B/op	    <span class="number">5035</span> allocs/op</div><div class="line">BenchmarkTraffic_GithubAll       	     <span class="number">200</span>	   <span class="number">9399517</span> ns/op	 <span class="number">2659331</span> B/op	   <span class="number">21848</span> allocs/op</div><div class="line">BenchmarkVulcan_GithubAll        	    <span class="number">5000</span>	    <span class="number">314788</span> ns/op	   <span class="number">19894</span> B/op	     <span class="number">609</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GPlusStatic         	<span class="number">10000000</span>	       <span class="number">209</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBear_GPlusStatic        	 <span class="number">3000000</span>	       <span class="number">480</span> ns/op	     <span class="number">104</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkBeego_GPlusStatic       	 <span class="number">1000000</span>	      <span class="number">2157</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GPlusStatic        	<span class="number">10000000</span>	       <span class="number">235</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkDenco_GPlusStatic       	<span class="number">50000000</span>	        <span class="number">34.5</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkEcho_GPlusStatic        	<span class="number">20000000</span>	        <span class="number">98.5</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GPlusStatic         	<span class="number">20000000</span>	        <span class="number">92.7</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GPlusStatic  	 <span class="number">1000000</span>	      <span class="number">1039</span> ns/op	     <span class="number">280</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoji_GPlusStatic        	<span class="number">10000000</span>	       <span class="number">220</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGojiv2_GPlusStatic      	 <span class="number">2000000</span>	       <span class="number">708</span> ns/op	     <span class="number">160</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GPlusStatic  	 <span class="number">1000000</span>	      <span class="number">1364</span> ns/op	     <span class="number">329</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkGoRestful_GPlusStatic   	  <span class="number">200000</span>	     <span class="number">10222</span> ns/op	    <span class="number">2360</span> B/op	      <span class="number">26</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GPlusStatic  	  <span class="number">500000</span>	      <span class="number">3222</span> ns/op	     <span class="number">448</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GPlusStatic  	<span class="number">50000000</span>	        <span class="number">37.3</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GPlusStatic 	<span class="number">30000000</span>	        <span class="number">46.4</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkIris_GPlusStatic           <span class="number">30000000</span>            <span class="number">51.1</span> ns/op         <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GPlusStatic       	<span class="number">20000000</span>	        <span class="number">61.3</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkLARS_GPlusStatic        	<span class="number">20000000</span>	        <span class="number">94.9</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GPlusStatic     	 <span class="number">1000000</span>	      <span class="number">2634</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkMartini_GPlusStatic     	  <span class="number">300000</span>	      <span class="number">5255</span> ns/op	     <span class="number">784</span> B/op	      <span class="number">10</span> allocs/op</div><div class="line">BenchmarkPat_GPlusStatic         	 <span class="number">5000000</span>	       <span class="number">397</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkPossum_GPlusStatic      	 <span class="number">1000000</span>	      <span class="number">1348</span> ns/op	     <span class="number">416</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkR2router_GPlusStatic    	 <span class="number">2000000</span>	       <span class="number">624</span> ns/op	     <span class="number">144</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkRevel_GPlusStatic       	  <span class="number">300000</span>	      <span class="number">6526</span> ns/op	    <span class="number">1232</span> B/op	      <span class="number">23</span> allocs/op</div><div class="line">BenchmarkRivet_GPlusStatic       	<span class="number">20000000</span>	        <span class="number">90.1</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkTango_GPlusStatic       	 <span class="number">1000000</span>	      <span class="number">1342</span> ns/op	     <span class="number">208</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GPlusStatic  	<span class="number">10000000</span>	       <span class="number">247</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTraffic_GPlusStatic     	 <span class="number">1000000</span>	      <span class="number">3308</span> ns/op	    <span class="number">1192</span> B/op	      <span class="number">15</span> allocs/op</div><div class="line">BenchmarkVulcan_GPlusStatic      	 <span class="number">2000000</span>	       <span class="number">817</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GPlusParam          	 <span class="number">3000000</span>	       <span class="number">452</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_GPlusParam         	 <span class="number">1000000</span>	      <span class="number">1277</span> ns/op	     <span class="number">480</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_GPlusParam        	 <span class="number">1000000</span>	      <span class="number">2283</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GPlusParam         	 <span class="number">1000000</span>	      <span class="number">1208</span> ns/op	     <span class="number">384</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkDenco_GPlusParam        	 <span class="number">5000000</span>	       <span class="number">354</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_GPlusParam         	<span class="number">10000000</span>	       <span class="number">137</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GPlusParam          	<span class="number">10000000</span>	       <span class="number">128</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GPlusParam   	 <span class="number">1000000</span>	      <span class="number">1972</span> ns/op	     <span class="number">648</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkGoji_GPlusParam         	 <span class="number">2000000</span>	       <span class="number">987</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_GPlusParam       	 <span class="number">1000000</span>	      <span class="number">1048</span> ns/op	     <span class="number">176</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GPlusParam   	 <span class="number">1000000</span>	      <span class="number">2299</span> ns/op	     <span class="number">649</span> B/op	      <span class="number">13</span> allocs/op</div><div class="line">BenchmarkGoRestful_GPlusParam    	  <span class="number">100000</span>	     <span class="number">18783</span> ns/op	    <span class="number">2760</span> B/op	      <span class="number">29</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GPlusParam   	  <span class="number">300000</span>	      <span class="number">5566</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GPlusParam   	 <span class="number">5000000</span>	       <span class="number">272</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GPlusParam  	 <span class="number">2000000</span>	       <span class="number">876</span> ns/op	     <span class="number">352</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkIris_GPlusParam            <span class="number">30000000</span>          <span class="number">53.7</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GPlusParam        	 <span class="number">3000000</span>	       <span class="number">482</span> ns/op	      <span class="number">56</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkLARS_GPlusParam         	<span class="number">10000000</span>	       <span class="number">131</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GPlusParam      	 <span class="number">1000000</span>	      <span class="number">3259</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_GPlusParam      	  <span class="number">300000</span>	      <span class="number">6824</span> ns/op	    <span class="number">1104</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkPat_GPlusParam          	 <span class="number">1000000</span>	      <span class="number">2326</span> ns/op	     <span class="number">688</span> B/op	      <span class="number">12</span> allocs/op</div><div class="line">BenchmarkPossum_GPlusParam       	 <span class="number">1000000</span>	      <span class="number">2152</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_GPlusParam     	 <span class="number">1000000</span>	      <span class="number">1170</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_GPlusParam        	  <span class="number">300000</span>	      <span class="number">7518</span> ns/op	    <span class="number">1664</span> B/op	      <span class="number">26</span> allocs/op</div><div class="line">BenchmarkRivet_GPlusParam        	 <span class="number">5000000</span>	       <span class="number">330</span> ns/op	      <span class="number">48</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_GPlusParam        	 <span class="number">1000000</span>	      <span class="number">1773</span> ns/op	     <span class="number">272</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GPlusParam   	  <span class="number">500000</span>	      <span class="number">4049</span> ns/op	    <span class="number">1040</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkTraffic_GPlusParam      	  <span class="number">300000</span>	      <span class="number">6846</span> ns/op	    <span class="number">1976</span> B/op	      <span class="number">21</span> allocs/op</div><div class="line">BenchmarkVulcan_GPlusParam       	 <span class="number">1000000</span>	      <span class="number">1119</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GPlus2Params        	 <span class="number">3000000</span>	       <span class="number">500</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_GPlus2Params       	 <span class="number">1000000</span>	      <span class="number">1580</span> ns/op	     <span class="number">496</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_GPlus2Params      	  <span class="number">500000</span>	      <span class="number">2492</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GPlus2Params       	  <span class="number">500000</span>	      <span class="number">3390</span> ns/op	     <span class="number">736</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkDenco_GPlus2Params      	 <span class="number">3000000</span>	       <span class="number">464</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_GPlus2Params       	<span class="number">10000000</span>	       <span class="number">191</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GPlus2Params        	<span class="number">10000000</span>	       <span class="number">168</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GPlus2Params 	 <span class="number">1000000</span>	      <span class="number">2444</span> ns/op	     <span class="number">712</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkGoji_GPlus2Params       	 <span class="number">1000000</span>	      <span class="number">1399</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_GPlus2Params     	 <span class="number">1000000</span>	      <span class="number">2045</span> ns/op	     <span class="number">256</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GPlus2Params 	 <span class="number">1000000</span>	      <span class="number">2958</span> ns/op	     <span class="number">713</span> B/op	      <span class="number">14</span> allocs/op</div><div class="line">BenchmarkGoRestful_GPlus2Params  	  <span class="number">100000</span>	     <span class="number">23056</span> ns/op	    <span class="number">2920</span> B/op	      <span class="number">31</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GPlus2Params 	  <span class="number">200000</span>	     <span class="number">10588</span> ns/op	     <span class="number">768</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GPlus2Params 	 <span class="number">5000000</span>	       <span class="number">315</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GPlus2Params	 <span class="number">1000000</span>	      <span class="number">1217</span> ns/op	     <span class="number">384</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkIris_GPlus2Params          <span class="number">30000000</span>          <span class="number">54.1</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GPlus2Params      	 <span class="number">2000000</span>	       <span class="number">928</span> ns/op	     <span class="number">128</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkLARS_GPlus2Params       	<span class="number">10000000</span>	       <span class="number">168</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GPlus2Params    	 <span class="number">1000000</span>	      <span class="number">3434</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_GPlus2Params    	  <span class="number">100000</span>	     <span class="number">15189</span> ns/op	    <span class="number">1232</span> B/op	      <span class="number">15</span> allocs/op</div><div class="line">BenchmarkPat_GPlus2Params        	  <span class="number">200000</span>	      <span class="number">7206</span> ns/op	    <span class="number">2256</span> B/op	      <span class="number">34</span> allocs/op</div><div class="line">BenchmarkPossum_GPlus2Params     	 <span class="number">1000000</span>	      <span class="number">2169</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_GPlus2Params   	 <span class="number">1000000</span>	      <span class="number">1302</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_GPlus2Params      	  <span class="number">200000</span>	      <span class="number">8042</span> ns/op	    <span class="number">1760</span> B/op	      <span class="number">28</span> allocs/op</div><div class="line">BenchmarkRivet_GPlus2Params      	 <span class="number">3000000</span>	       <span class="number">483</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_GPlus2Params      	 <span class="number">1000000</span>	      <span class="number">2251</span> ns/op	     <span class="number">448</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GPlus2Params 	  <span class="number">300000</span>	      <span class="number">6479</span> ns/op	    <span class="number">1456</span> B/op	      <span class="number">22</span> allocs/op</div><div class="line">BenchmarkTraffic_GPlus2Params    	  <span class="number">100000</span>	     <span class="number">14594</span> ns/op	    <span class="number">3272</span> B/op	      <span class="number">31</span> allocs/op</div><div class="line">BenchmarkVulcan_GPlus2Params     	 <span class="number">1000000</span>	      <span class="number">1588</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GPlusAll            	  <span class="number">300000</span>	      <span class="number">6011</span> ns/op	     <span class="number">640</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkBear_GPlusAll           	  <span class="number">100000</span>	     <span class="number">17309</span> ns/op	    <span class="number">5488</span> B/op	      <span class="number">61</span> allocs/op</div><div class="line">BenchmarkBeego_GPlusAll          	   <span class="number">50000</span>	     <span class="number">30892</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GPlusAll           	  <span class="number">100000</span>	     <span class="number">22674</span> ns/op	    <span class="number">4912</span> B/op	      <span class="number">61</span> allocs/op</div><div class="line">BenchmarkDenco_GPlusAll          	  <span class="number">300000</span>	      <span class="number">4953</span> ns/op	     <span class="number">672</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkEcho_GPlusAll           	  <span class="number">500000</span>	      <span class="number">2543</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GPlusAll            	 <span class="number">1000000</span>	      <span class="number">2070</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GPlusAll     	   <span class="number">50000</span>	     <span class="number">26694</span> ns/op	    <span class="number">8040</span> B/op	     <span class="number">103</span> allocs/op</div><div class="line">BenchmarkGoji_GPlusAll           	  <span class="number">200000</span>	     <span class="number">13666</span> ns/op	    <span class="number">3696</span> B/op	      <span class="number">22</span> allocs/op</div><div class="line">BenchmarkGojiv2_GPlusAll         	  <span class="number">100000</span>	     <span class="number">17038</span> ns/op	    <span class="number">2640</span> B/op	      <span class="number">76</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GPlusAll     	   <span class="number">50000</span>	     <span class="number">31756</span> ns/op	    <span class="number">8117</span> B/op	     <span class="number">170</span> allocs/op</div><div class="line">BenchmarkGoRestful_GPlusAll      	   <span class="number">10000</span>	    <span class="number">207579</span> ns/op	   <span class="number">38664</span> B/op	     <span class="number">389</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GPlusAll     	   <span class="number">20000</span>	     <span class="number">83537</span> ns/op	    <span class="number">9248</span> B/op	     <span class="number">102</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GPlusAll     	  <span class="number">500000</span>	      <span class="number">3376</span> ns/op	     <span class="number">640</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GPlusAll    	  <span class="number">200000</span>	     <span class="number">11639</span> ns/op	    <span class="number">4032</span> B/op	      <span class="number">38</span> allocs/op</div><div class="line">BenchmarkIris_GPlusAll               <span class="number">1000000</span>          <span class="number">1227</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GPlusAll          	  <span class="number">200000</span>	      <span class="number">8193</span> ns/op	     <span class="number">976</span> B/op	      <span class="number">43</span> allocs/op</div><div class="line">BenchmarkLARS_GPlusAll           	 <span class="number">1000000</span>	      <span class="number">2086</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GPlusAll        	   <span class="number">30000</span>	     <span class="number">42275</span> ns/op	   <span class="number">12944</span> B/op	     <span class="number">115</span> allocs/op</div><div class="line">BenchmarkMartini_GPlusAll        	   <span class="number">10000</span>	    <span class="number">113111</span> ns/op	   <span class="number">14448</span> B/op	     <span class="number">165</span> allocs/op</div><div class="line">BenchmarkPat_GPlusAll            	   <span class="number">30000</span>	     <span class="number">57505</span> ns/op	   <span class="number">16576</span> B/op	     <span class="number">298</span> allocs/op</div><div class="line">BenchmarkPossum_GPlusAll         	  <span class="number">100000</span>	     <span class="number">18661</span> ns/op	    <span class="number">5408</span> B/op	      <span class="number">39</span> allocs/op</div><div class="line">BenchmarkR2router_GPlusAll       	  <span class="number">100000</span>	     <span class="number">15602</span> ns/op	    <span class="number">5040</span> B/op	      <span class="number">63</span> allocs/op</div><div class="line">BenchmarkRevel_GPlusAll          	   <span class="number">20000</span>	     <span class="number">99153</span> ns/op	   <span class="number">21136</span> B/op	     <span class="number">342</span> allocs/op</div><div class="line">BenchmarkRivet_GPlusAll          	  <span class="number">300000</span>	      <span class="number">4892</span> ns/op	     <span class="number">768</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkTango_GPlusAll          	  <span class="number">100000</span>	     <span class="number">24402</span> ns/op	    <span class="number">4304</span> B/op	     <span class="number">129</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GPlusAll     	   <span class="number">20000</span>	     <span class="number">63441</span> ns/op	   <span class="number">14256</span> B/op	     <span class="number">272</span> allocs/op</div><div class="line">BenchmarkTraffic_GPlusAll        	   <span class="number">10000</span>	    <span class="number">128642</span> ns/op	   <span class="number">37360</span> B/op	     <span class="number">392</span> allocs/op</div><div class="line">BenchmarkVulcan_GPlusAll         	  <span class="number">100000</span>	     <span class="number">16243</span> ns/op	    <span class="number">1274</span> B/op	      <span class="number">39</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_ParseStatic         	<span class="number">10000000</span>	       <span class="number">210</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBear_ParseStatic        	 <span class="number">3000000</span>	       <span class="number">561</span> ns/op	     <span class="number">120</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkBeego_ParseStatic       	 <span class="number">1000000</span>	      <span class="number">2178</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_ParseStatic        	 <span class="number">2000000</span>	       <span class="number">771</span> ns/op	     <span class="number">144</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkDenco_ParseStatic       	<span class="number">30000000</span>	        <span class="number">43.4</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkEcho_ParseStatic        	<span class="number">20000000</span>	       <span class="number">100</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_ParseStatic         	<span class="number">20000000</span>	        <span class="number">95.1</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_ParseStatic  	 <span class="number">1000000</span>	      <span class="number">1113</span> ns/op	     <span class="number">296</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoji_ParseStatic        	 <span class="number">5000000</span>	       <span class="number">282</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGojiv2_ParseStatic      	 <span class="number">2000000</span>	       <span class="number">726</span> ns/op	     <span class="number">160</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_ParseStatic  	 <span class="number">1000000</span>	      <span class="number">1407</span> ns/op	     <span class="number">329</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkGoRestful_ParseStatic   	  <span class="number">100000</span>	     <span class="number">14842</span> ns/op	    <span class="number">3656</span> B/op	      <span class="number">30</span> allocs/op</div><div class="line">BenchmarkGorillaMux_ParseStatic  	  <span class="number">500000</span>	      <span class="number">4249</span> ns/op	     <span class="number">448</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkHttpRouter_ParseStatic  	<span class="number">30000000</span>	        <span class="number">40.2</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_ParseStatic 	<span class="number">20000000</span>	        <span class="number">79.1</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_ParseStatic       	<span class="number">20000000</span>	        <span class="number">66.7</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkIris_ParseStatic           <span class="number">30000000</span>            <span class="number">51.5</span> ns/op         <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkLARS_ParseStatic        	<span class="number">20000000</span>	        <span class="number">95.0</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_ParseStatic     	 <span class="number">1000000</span>	      <span class="number">2703</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkMartini_ParseStatic     	  <span class="number">300000</span>	      <span class="number">5844</span> ns/op	     <span class="number">784</span> B/op	      <span class="number">10</span> allocs/op</div><div class="line">BenchmarkPat_ParseStatic         	 <span class="number">2000000</span>	       <span class="number">951</span> ns/op	     <span class="number">240</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkPossum_ParseStatic      	 <span class="number">1000000</span>	      <span class="number">1352</span> ns/op	     <span class="number">416</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkR2router_ParseStatic    	 <span class="number">2000000</span>	       <span class="number">677</span> ns/op	     <span class="number">144</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkRevel_ParseStatic       	  <span class="number">300000</span>	      <span class="number">6594</span> ns/op	    <span class="number">1248</span> B/op	      <span class="number">23</span> allocs/op</div><div class="line">BenchmarkRivet_ParseStatic       	<span class="number">20000000</span>	        <span class="number">96.7</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkTango_ParseStatic       	 <span class="number">1000000</span>	      <span class="number">1481</span> ns/op	     <span class="number">256</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkTigerTonic_ParseStatic  	 <span class="number">5000000</span>	       <span class="number">334</span> ns/op	      <span class="number">48</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTraffic_ParseStatic     	  <span class="number">500000</span>	      <span class="number">4885</span> ns/op	    <span class="number">1816</span> B/op	      <span class="number">20</span> allocs/op</div><div class="line">BenchmarkVulcan_ParseStatic      	 <span class="number">2000000</span>	       <span class="number">908</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_ParseParam          	 <span class="number">3000000</span>	       <span class="number">427</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_ParseParam         	 <span class="number">1000000</span>	      <span class="number">1248</span> ns/op	     <span class="number">467</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_ParseParam        	 <span class="number">1000000</span>	      <span class="number">2225</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_ParseParam         	 <span class="number">1000000</span>	      <span class="number">1510</span> ns/op	     <span class="number">464</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkDenco_ParseParam        	 <span class="number">5000000</span>	       <span class="number">346</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_ParseParam         	<span class="number">20000000</span>	       <span class="number">118</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_ParseParam          	<span class="number">20000000</span>	       <span class="number">100</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_ParseParam   	 <span class="number">1000000</span>	      <span class="number">1987</span> ns/op	     <span class="number">664</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkGoji_ParseParam         	 <span class="number">1000000</span>	      <span class="number">1060</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_ParseParam       	 <span class="number">1000000</span>	      <span class="number">1111</span> ns/op	     <span class="number">208</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_ParseParam   	 <span class="number">1000000</span>	      <span class="number">2142</span> ns/op	     <span class="number">649</span> B/op	      <span class="number">13</span> allocs/op</div><div class="line">BenchmarkGoRestful_ParseParam    	  <span class="number">100000</span>	     <span class="number">16895</span> ns/op	    <span class="number">4024</span> B/op	      <span class="number">31</span> allocs/op</div><div class="line">BenchmarkGorillaMux_ParseParam   	  <span class="number">500000</span>	      <span class="number">4709</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_ParseParam   	<span class="number">10000000</span>	       <span class="number">243</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_ParseParam  	 <span class="number">2000000</span>	       <span class="number">834</span> ns/op	     <span class="number">352</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkIris_ParseParam            <span class="number">30000000</span>          <span class="number">54.1</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_ParseParam        	 <span class="number">3000000</span>	       <span class="number">451</span> ns/op	      <span class="number">56</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkLARS_ParseParam         	<span class="number">20000000</span>	       <span class="number">104</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_ParseParam      	 <span class="number">1000000</span>	      <span class="number">3258</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_ParseParam      	  <span class="number">300000</span>	      <span class="number">6822</span> ns/op	    <span class="number">1104</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkPat_ParseParam          	 <span class="number">1000000</span>	      <span class="number">3342</span> ns/op	    <span class="number">1120</span> B/op	      <span class="number">17</span> allocs/op</div><div class="line">BenchmarkPossum_ParseParam       	 <span class="number">1000000</span>	      <span class="number">2132</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_ParseParam     	 <span class="number">1000000</span>	      <span class="number">1190</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_ParseParam        	  <span class="number">300000</span>	      <span class="number">7533</span> ns/op	    <span class="number">1664</span> B/op	      <span class="number">26</span> allocs/op</div><div class="line">BenchmarkRivet_ParseParam        	 <span class="number">5000000</span>	       <span class="number">285</span> ns/op	      <span class="number">48</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_ParseParam        	 <span class="number">1000000</span>	      <span class="number">1616</span> ns/op	     <span class="number">288</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkTigerTonic_ParseParam   	  <span class="number">500000</span>	      <span class="number">3820</span> ns/op	     <span class="number">992</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkTraffic_ParseParam      	  <span class="number">300000</span>	      <span class="number">6715</span> ns/op	    <span class="number">2248</span> B/op	      <span class="number">23</span> allocs/op</div><div class="line">BenchmarkVulcan_ParseParam       	 <span class="number">1000000</span>	      <span class="number">1008</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_Parse2Params        	 <span class="number">3000000</span>	       <span class="number">457</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_Parse2Params       	 <span class="number">1000000</span>	      <span class="number">1441</span> ns/op	     <span class="number">496</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_Parse2Params      	 <span class="number">1000000</span>	      <span class="number">2340</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_Parse2Params       	 <span class="number">1000000</span>	      <span class="number">1359</span> ns/op	     <span class="number">416</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkDenco_Parse2Params      	 <span class="number">5000000</span>	       <span class="number">410</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_Parse2Params       	<span class="number">10000000</span>	       <span class="number">145</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_Parse2Params        	<span class="number">10000000</span>	       <span class="number">124</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_Parse2Params 	 <span class="number">1000000</span>	      <span class="number">2290</span> ns/op	     <span class="number">712</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkGoji_Parse2Params       	 <span class="number">1000000</span>	      <span class="number">1062</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_Parse2Params     	 <span class="number">1000000</span>	      <span class="number">1060</span> ns/op	     <span class="number">192</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_Parse2Params 	 <span class="number">1000000</span>	      <span class="number">2609</span> ns/op	     <span class="number">713</span> B/op	      <span class="number">14</span> allocs/op</div><div class="line">BenchmarkGoRestful_Parse2Params  	   <span class="number">50000</span>	     <span class="number">25612</span> ns/op	    <span class="number">6856</span> B/op	      <span class="number">39</span> allocs/op</div><div class="line">BenchmarkGorillaMux_Parse2Params 	  <span class="number">300000</span>	      <span class="number">5184</span> ns/op	     <span class="number">768</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_Parse2Params 	 <span class="number">5000000</span>	       <span class="number">267</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_Parse2Params	 <span class="number">1000000</span>	      <span class="number">1121</span> ns/op	     <span class="number">384</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkIris_Parse2Params          <span class="number">30000000</span>          <span class="number">56.2</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_Parse2Params      	 <span class="number">2000000</span>	       <span class="number">835</span> ns/op	     <span class="number">128</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkLARS_Parse2Params       	<span class="number">10000000</span>	       <span class="number">129</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_Parse2Params    	 <span class="number">1000000</span>	      <span class="number">3409</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_Parse2Params    	  <span class="number">300000</span>	      <span class="number">6689</span> ns/op	    <span class="number">1136</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkPat_Parse2Params        	 <span class="number">1000000</span>	      <span class="number">3282</span> ns/op	     <span class="number">832</span> B/op	      <span class="number">17</span> allocs/op</div><div class="line">BenchmarkPossum_Parse2Params     	 <span class="number">1000000</span>	      <span class="number">2157</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_Parse2Params   	 <span class="number">1000000</span>	      <span class="number">1293</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_Parse2Params      	  <span class="number">200000</span>	      <span class="number">7881</span> ns/op	    <span class="number">1728</span> B/op	      <span class="number">28</span> allocs/op</div><div class="line">BenchmarkRivet_Parse2Params      	 <span class="number">3000000</span>	       <span class="number">433</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_Parse2Params      	 <span class="number">1000000</span>	      <span class="number">2111</span> ns/op	     <span class="number">416</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkTigerTonic_Parse2Params 	  <span class="number">300000</span>	      <span class="number">6109</span> ns/op	    <span class="number">1376</span> B/op	      <span class="number">22</span> allocs/op</div><div class="line">BenchmarkTraffic_Parse2Params    	  <span class="number">300000</span>	      <span class="number">6961</span> ns/op	    <span class="number">2040</span> B/op	      <span class="number">22</span> allocs/op</div><div class="line">BenchmarkVulcan_Parse2Params     	 <span class="number">1000000</span>	      <span class="number">1140</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_ParseAll            	  <span class="number">200000</span>	      <span class="number">9773</span> ns/op	     <span class="number">640</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkBear_ParseAll           	   <span class="number">50000</span>	     <span class="number">29056</span> ns/op	    <span class="number">8928</span> B/op	     <span class="number">110</span> allocs/op</div><div class="line">BenchmarkBeego_ParseAll          	   <span class="number">30000</span>	     <span class="number">58810</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_ParseAll           	   <span class="number">50000</span>	     <span class="number">32671</span> ns/op	    <span class="number">8048</span> B/op	      <span class="number">90</span> allocs/op</div><div class="line">BenchmarkDenco_ParseAll          	  <span class="number">200000</span>	      <span class="number">7228</span> ns/op	     <span class="number">928</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkEcho_ParseAll           	  <span class="number">300000</span>	      <span class="number">4502</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_ParseAll            	  <span class="number">500000</span>	      <span class="number">3799</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_ParseAll     	   <span class="number">30000</span>	     <span class="number">46784</span> ns/op	   <span class="number">13728</span> B/op	     <span class="number">181</span> allocs/op</div><div class="line">BenchmarkGoji_ParseAll           	  <span class="number">100000</span>	     <span class="number">21732</span> ns/op	    <span class="number">5376</span> B/op	      <span class="number">32</span> allocs/op</div><div class="line">BenchmarkGojiv2_ParseAll         	  <span class="number">100000</span>	     <span class="number">25764</span> ns/op	    <span class="number">4496</span> B/op	     <span class="number">121</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_ParseAll     	   <span class="number">30000</span>	     <span class="number">54617</span> ns/op	   <span class="number">13866</span> B/op	     <span class="number">321</span> allocs/op</div><div class="line">BenchmarkGoRestful_ParseAll      	    <span class="number">5000</span>	    <span class="number">528057</span> ns/op	  <span class="number">125600</span> B/op	     <span class="number">868</span> allocs/op</div><div class="line">BenchmarkGorillaMux_ParseAll     	   <span class="number">10000</span>	    <span class="number">166329</span> ns/op	   <span class="number">16560</span> B/op	     <span class="number">198</span> allocs/op</div><div class="line">BenchmarkHttpRouter_ParseAll     	  <span class="number">300000</span>	      <span class="number">4783</span> ns/op	     <span class="number">640</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_ParseAll    	  <span class="number">100000</span>	     <span class="number">16820</span> ns/op	    <span class="number">5728</span> B/op	      <span class="number">51</span> allocs/op</div><div class="line">BenchmarkIris_ParseAll                <span class="number">500000</span>          <span class="number">2431</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_ParseAll          	  <span class="number">200000</span>	     <span class="number">11006</span> ns/op	    <span class="number">1112</span> B/op	      <span class="number">54</span> allocs/op</div><div class="line">BenchmarkLARS_ParseAll           	  <span class="number">500000</span>	      <span class="number">4001</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_ParseAll        	   <span class="number">20000</span>	     <span class="number">82102</span> ns/op	   <span class="number">24160</span> B/op	     <span class="number">224</span> allocs/op</div><div class="line">BenchmarkMartini_ParseAll        	   <span class="number">10000</span>	    <span class="number">181166</span> ns/op	   <span class="number">25600</span> B/op	     <span class="number">276</span> allocs/op</div><div class="line">BenchmarkPat_ParseAll            	   <span class="number">20000</span>	     <span class="number">63217</span> ns/op	   <span class="number">17264</span> B/op	     <span class="number">343</span> allocs/op</div><div class="line">BenchmarkPossum_ParseAll         	   <span class="number">50000</span>	     <span class="number">36679</span> ns/op	   <span class="number">10816</span> B/op	      <span class="number">78</span> allocs/op</div><div class="line">BenchmarkR2router_ParseAll       	   <span class="number">50000</span>	     <span class="number">27948</span> ns/op	    <span class="number">8352</span> B/op	     <span class="number">120</span> allocs/op</div><div class="line">BenchmarkRevel_ParseAll          	   <span class="number">10000</span>	    <span class="number">191336</span> ns/op	   <span class="number">39424</span> B/op	     <span class="number">652</span> allocs/op</div><div class="line">BenchmarkRivet_ParseAll          	  <span class="number">200000</span>	      <span class="number">7394</span> ns/op	     <span class="number">912</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkTango_ParseAll          	   <span class="number">30000</span>	     <span class="number">44328</span> ns/op	    <span class="number">7664</span> B/op	     <span class="number">240</span> allocs/op</div><div class="line">BenchmarkTigerTonic_ParseAll     	   <span class="number">20000</span>	     <span class="number">84400</span> ns/op	   <span class="number">19424</span> B/op	     <span class="number">360</span> allocs/op</div><div class="line">BenchmarkTraffic_ParseAll        	   <span class="number">10000</span>	    <span class="number">184485</span> ns/op	   <span class="number">57776</span> B/op	     <span class="number">642</span> allocs/op</div><div class="line">BenchmarkVulcan_ParseAll         	   <span class="number">50000</span>	     <span class="number">30571</span> ns/op	    <span class="number">2548</span> B/op	      <span class="number">78</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_StaticAll           	   <span class="number">30000</span>	     <span class="number">47957</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkHttpServeMux_StaticAll  	    <span class="number">2000</span>	    <span class="number">787046</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkBeego_StaticAll         	    <span class="number">5000</span>	    <span class="number">380445</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBear_StaticAll          	   <span class="number">10000</span>	    <span class="number">112556</span> ns/op	   <span class="number">20336</span> B/op	     <span class="number">461</span> allocs/op</div><div class="line">BenchmarkBone_StaticAll          	   <span class="number">20000</span>	     <span class="number">94966</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkDenco_StaticAll         	  <span class="number">100000</span>	     <span class="number">13926</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkEcho_StaticAll          	   <span class="number">50000</span>	     <span class="number">32464</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_StaticAll           	   <span class="number">50000</span>	     <span class="number">29679</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_StaticAll    	   <span class="number">10000</span>	    <span class="number">193033</span> ns/op	   <span class="number">46440</span> B/op	     <span class="number">785</span> allocs/op</div><div class="line">BenchmarkGoji_StaticAll          	   <span class="number">20000</span>	     <span class="number">67110</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGojiv2_StaticAll        	   <span class="number">10000</span>	    <span class="number">171440</span> ns/op	   <span class="number">25120</span> B/op	     <span class="number">628</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_StaticAll    	   <span class="number">10000</span>	    <span class="number">279781</span> ns/op	   <span class="number">51653</span> B/op	    <span class="number">1727</span> allocs/op</div><div class="line">BenchmarkGoRestful_StaticAll     	     <span class="number">300</span>	   <span class="number">5746021</span> ns/op	  <span class="number">392312</span> B/op	    <span class="number">4694</span> allocs/op</div><div class="line">BenchmarkGorillaMux_StaticAll    	    <span class="number">1000</span>	   <span class="number">2241602</span> ns/op	   <span class="number">70432</span> B/op	    <span class="number">1107</span> allocs/op</div><div class="line">BenchmarkHttpRouter_StaticAll    	  <span class="number">100000</span>	     <span class="number">17340</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_StaticAll   	  <span class="number">100000</span>	     <span class="number">17313</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkIris_StaticAll               <span class="number">100000</span>         <span class="number">16659</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_StaticAll         	   <span class="number">50000</span>	     <span class="number">25972</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkLARS_StaticAll          	   <span class="number">50000</span>	     <span class="number">29267</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_StaticAll       	    <span class="number">5000</span>	    <span class="number">444243</span> ns/op	  <span class="number">118065</span> B/op	    <span class="number">1256</span> allocs/op</div><div class="line">BenchmarkMartini_StaticAll       	     <span class="number">500</span>	   <span class="number">3105201</span> ns/op	  <span class="number">132818</span> B/op	    <span class="number">2178</span> allocs/op</div><div class="line">BenchmarkPat_StaticAll           	    <span class="number">1000</span>	   <span class="number">1758983</span> ns/op	  <span class="number">533904</span> B/op	   <span class="number">11123</span> allocs/op</div><div class="line">BenchmarkPossum_StaticAll        	   <span class="number">10000</span>	    <span class="number">211771</span> ns/op	   <span class="number">65312</span> B/op	     <span class="number">471</span> allocs/op</div><div class="line">BenchmarkR2router_StaticAll      	   <span class="number">10000</span>	    <span class="number">124813</span> ns/op	   <span class="number">22608</span> B/op	     <span class="number">628</span> allocs/op</div><div class="line">BenchmarkRevel_StaticAll         	    <span class="number">2000</span>	   <span class="number">1036863</span> ns/op	  <span class="number">198240</span> B/op	    <span class="number">3611</span> allocs/op</div><div class="line">BenchmarkRivet_StaticAll         	   <span class="number">50000</span>	     <span class="number">35304</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkTango_StaticAll         	    <span class="number">5000</span>	    <span class="number">303647</span> ns/op	   <span class="number">40481</span> B/op	    <span class="number">1413</span> allocs/op</div><div class="line">BenchmarkTigerTonic_StaticAll    	   <span class="number">20000</span>	     <span class="number">69463</span> ns/op	    <span class="number">7504</span> B/op	     <span class="number">157</span> allocs/op</div><div class="line">BenchmarkTraffic_StaticAll       	    <span class="number">1000</span>	   <span class="number">2288676</span> ns/op	  <span class="number">729736</span> B/op	   <span class="number">14287</span> allocs/op</div><div class="line">BenchmarkVulcan_StaticAll        	   <span class="number">10000</span>	    <span class="number">215491</span> ns/op	   <span class="number">15386</span> B/op	     <span class="number">471</span> allocs/op</div></pre></td></tr></table></figure>

<p>路由建立后的内存占用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="variable">#GithubAPI</span> Routes: <span class="number">203</span></div><div class="line">   Ace: <span class="number">48992</span> <span class="built_in">Bytes</span></div><div class="line">   Bear: <span class="number">161496</span> <span class="built_in">Bytes</span></div><div class="line">   Beego: <span class="number">144536</span> <span class="built_in">Bytes</span></div><div class="line">   Bone: <span class="number">97696</span> <span class="built_in">Bytes</span></div><div class="line">   Denco: <span class="number">36440</span> <span class="built_in">Bytes</span></div><div class="line">   Echo: <span class="number">76264</span> <span class="built_in">Bytes</span></div><div class="line">   Gin: <span class="number">52464</span> <span class="built_in">Bytes</span></div><div class="line">   GocraftWeb: <span class="number">95304</span> <span class="built_in">Bytes</span></div><div class="line">   Goji: <span class="number">86104</span> <span class="built_in">Bytes</span></div><div class="line">   Gojiv2: <span class="number">144408</span> <span class="built_in">Bytes</span></div><div class="line">   GoJsonRest: <span class="number">134376</span> <span class="built_in">Bytes</span></div><div class="line">   GoRestful: <span class="number">1395576</span> <span class="built_in">Bytes</span></div><div class="line">   GorillaMux: <span class="number">1494848</span> <span class="built_in">Bytes</span></div><div class="line">   HttpRouter: <span class="number">37464</span> <span class="built_in">Bytes</span></div><div class="line">   HttpTreeMux: <span class="number">78736</span> <span class="built_in">Bytes</span></div><div class="line">   Iris: <span class="number">61928</span> <span class="built_in">Bytes</span></div><div class="line">   Kocha: <span class="number">785408</span> <span class="built_in">Bytes</span></div><div class="line">   LARS: <span class="number">49016</span> <span class="built_in">Bytes</span></div><div class="line">   Macaron: <span class="number">128200</span> <span class="built_in">Bytes</span></div><div class="line">   Martini: <span class="number">556192</span> <span class="built_in">Bytes</span></div><div class="line">   Pat: <span class="number">21200</span> <span class="built_in">Bytes</span></div><div class="line">   Possum: <span class="number">84368</span> <span class="built_in">Bytes</span></div><div class="line">   R2router: <span class="number">47104</span> <span class="built_in">Bytes</span></div><div class="line">   Revel: <span class="number">141504</span> <span class="built_in">Bytes</span></div><div class="line">   Rivet: <span class="number">42840</span> <span class="built_in">Bytes</span></div><div class="line">   Tango: <span class="number">54584</span> <span class="built_in">Bytes</span></div><div class="line">   TigerTonic: <span class="number">95136</span> <span class="built_in">Bytes</span></div><div class="line">   Traffic: <span class="number">1053712</span> <span class="built_in">Bytes</span></div><div class="line">   Vulcan: <span class="number">465184</span> <span class="built_in">Bytes</span></div><div class="line"></div><div class="line"><span class="variable">#GPlusAPI</span> Routes: <span class="number">13</span></div><div class="line">   Ace: <span class="number">3600</span> <span class="built_in">Bytes</span></div><div class="line">   Bear: <span class="number">7112</span> <span class="built_in">Bytes</span></div><div class="line">   Beego: <span class="number">9712</span> <span class="built_in">Bytes</span></div><div class="line">   Bone: <span class="number">6448</span> <span class="built_in">Bytes</span></div><div class="line">   Denco: <span class="number">3256</span> <span class="built_in">Bytes</span></div><div class="line">   Echo: <span class="number">7064</span> <span class="built_in">Bytes</span></div><div class="line">   Gin: <span class="number">3856</span> <span class="built_in">Bytes</span></div><div class="line">   GocraftWeb: <span class="number">7496</span> <span class="built_in">Bytes</span></div><div class="line">   Goji: <span class="number">2912</span> <span class="built_in">Bytes</span></div><div class="line">   Gojiv2: <span class="number">7376</span> <span class="built_in">Bytes</span></div><div class="line">   GoJsonRest: <span class="number">11544</span> <span class="built_in">Bytes</span></div><div class="line">   GoRestful: <span class="number">87608</span> <span class="built_in">Bytes</span></div><div class="line">   GorillaMux: <span class="number">71072</span> <span class="built_in">Bytes</span></div><div class="line">   HttpRouter: <span class="number">2712</span> <span class="built_in">Bytes</span></div><div class="line">   HttpTreeMux: <span class="number">7376</span> <span class="built_in">Bytes</span></div><div class="line">   Iris: <span class="number">6480</span> <span class="built_in">Bytes</span></div><div class="line">   Kocha: <span class="number">128880</span> <span class="built_in">Bytes</span></div><div class="line">   LARS: <span class="number">3624</span> <span class="built_in">Bytes</span></div><div class="line">   Macaron: <span class="number">8448</span> <span class="built_in">Bytes</span></div><div class="line">   Martini: <span class="number">23936</span> <span class="built_in">Bytes</span></div><div class="line">   Pat: <span class="number">1856</span> <span class="built_in">Bytes</span></div><div class="line">   Possum: <span class="number">7728</span> <span class="built_in">Bytes</span></div><div class="line">   R2router: <span class="number">3928</span> <span class="built_in">Bytes</span></div><div class="line">   Revel: <span class="number">10768</span> <span class="built_in">Bytes</span></div><div class="line">   Rivet: <span class="number">3064</span> <span class="built_in">Bytes</span></div><div class="line">   Tango: <span class="number">4912</span> <span class="built_in">Bytes</span></div><div class="line">   TigerTonic: <span class="number">9408</span> <span class="built_in">Bytes</span></div><div class="line">   Traffic: <span class="number">49472</span> <span class="built_in">Bytes</span></div><div class="line">   Vulcan: <span class="number">25704</span> <span class="built_in">Bytes</span></div><div class="line"></div><div class="line"><span class="variable">#ParseAPI</span> Routes: <span class="number">26</span></div><div class="line">   Ace: <span class="number">6592</span> <span class="built_in">Bytes</span></div><div class="line">   Bear: <span class="number">12320</span> <span class="built_in">Bytes</span></div><div class="line">   Beego: <span class="number">18416</span> <span class="built_in">Bytes</span></div><div class="line">   Bone: <span class="number">10992</span> <span class="built_in">Bytes</span></div><div class="line">   Denco: <span class="number">4184</span> <span class="built_in">Bytes</span></div><div class="line">   Echo: <span class="number">7984</span> <span class="built_in">Bytes</span></div><div class="line">   Gin: <span class="number">6816</span> <span class="built_in">Bytes</span></div><div class="line">   GocraftWeb: <span class="number">12800</span> <span class="built_in">Bytes</span></div><div class="line">   Goji: <span class="number">5232</span> <span class="built_in">Bytes</span></div><div class="line">   Gojiv2: <span class="number">14464</span> <span class="built_in">Bytes</span></div><div class="line">   GoJsonRest: <span class="number">14088</span> <span class="built_in">Bytes</span></div><div class="line">   GoRestful: <span class="number">126216</span> <span class="built_in">Bytes</span></div><div class="line">   GorillaMux: <span class="number">122184</span> <span class="built_in">Bytes</span></div><div class="line">   HttpRouter: <span class="number">4976</span> <span class="built_in">Bytes</span></div><div class="line">   HttpTreeMux: <span class="number">7784</span> <span class="built_in">Bytes</span></div><div class="line">   Iris: <span class="number">9928</span> <span class="built_in">Bytes</span></div><div class="line">   Kocha: <span class="number">181712</span> <span class="built_in">Bytes</span></div><div class="line">   LARS: <span class="number">6616</span> <span class="built_in">Bytes</span></div><div class="line">   Macaron: <span class="number">13232</span> <span class="built_in">Bytes</span></div><div class="line">   Martini: <span class="number">45952</span> <span class="built_in">Bytes</span></div><div class="line">   Pat: <span class="number">2560</span> <span class="built_in">Bytes</span></div><div class="line">   Possum: <span class="number">9200</span> <span class="built_in">Bytes</span></div><div class="line">   R2router: <span class="number">7056</span> <span class="built_in">Bytes</span></div><div class="line">   Revel: <span class="number">15488</span> <span class="built_in">Bytes</span></div><div class="line">   Rivet: <span class="number">5680</span> <span class="built_in">Bytes</span></div><div class="line">   Tango: <span class="number">8664</span> <span class="built_in">Bytes</span></div><div class="line">   TigerTonic: <span class="number">9840</span> <span class="built_in">Bytes</span></div><div class="line">   Traffic: <span class="number">93480</span> <span class="built_in">Bytes</span></div><div class="line">   Vulcan: <span class="number">44504</span> <span class="built_in">Bytes</span></div><div class="line"></div><div class="line"><span class="variable">#Static</span> Routes: <span class="number">157</span></div><div class="line">   HttpServeMux: <span class="number">16864</span> <span class="built_in">Bytes</span></div><div class="line">   Ace: <span class="number">30080</span> <span class="built_in">Bytes</span></div><div class="line">   Bear: <span class="number">30216</span> <span class="built_in">Bytes</span></div><div class="line">   Beego: <span class="number">93768</span> <span class="built_in">Bytes</span></div><div class="line">   Bone: <span class="number">37872</span> <span class="built_in">Bytes</span></div><div class="line">   Denco: <span class="number">9984</span> <span class="built_in">Bytes</span></div><div class="line">   Echo: <span class="number">60960</span> <span class="built_in">Bytes</span></div><div class="line">   Gin: <span class="number">30400</span> <span class="built_in">Bytes</span></div><div class="line">   GocraftWeb: <span class="number">55256</span> <span class="built_in">Bytes</span></div><div class="line">   Goji: <span class="number">27200</span> <span class="built_in">Bytes</span></div><div class="line">   Gojiv2: <span class="number">104464</span> <span class="built_in">Bytes</span></div><div class="line">   GoJsonRest: <span class="number">135864</span> <span class="built_in">Bytes</span></div><div class="line">   GoRestful: <span class="number">908200</span> <span class="built_in">Bytes</span></div><div class="line">   GorillaMux: <span class="number">668496</span> <span class="built_in">Bytes</span></div><div class="line">   HttpRouter: <span class="number">21128</span> <span class="built_in">Bytes</span></div><div class="line">   HttpTreeMux: <span class="number">73384</span> <span class="built_in">Bytes</span></div><div class="line">   Iris: <span class="number">37264</span> <span class="built_in">Bytes</span></div><div class="line">   Kocha: <span class="number">114816</span> <span class="built_in">Bytes</span></div><div class="line">   LARS: <span class="number">30104</span> <span class="built_in">Bytes</span></div><div class="line">   Macaron: <span class="number">35136</span> <span class="built_in">Bytes</span></div><div class="line">   Martini: <span class="number">308784</span> <span class="built_in">Bytes</span></div><div class="line">   Pat: <span class="number">20464</span> <span class="built_in">Bytes</span></div><div class="line">   Possum: <span class="number">92288</span> <span class="built_in">Bytes</span></div><div class="line">   R2router: <span class="number">23712</span> <span class="built_in">Bytes</span></div><div class="line">   Revel: <span class="number">93392</span> <span class="built_in">Bytes</span></div><div class="line">   Rivet: <span class="number">23880</span> <span class="built_in">Bytes</span></div><div class="line">   Tango: <span class="number">28008</span> <span class="built_in">Bytes</span></div><div class="line">   TigerTonic: <span class="number">79696</span> <span class="built_in">Bytes</span></div><div class="line">   Traffic: <span class="number">624416</span> <span class="built_in">Bytes</span></div><div class="line">   Vulcan: <span class="number">368520</span> <span class="built_in">Bytes</span></div></pre></td></tr></table></figure>

]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>使用Go开发Web应用非常方便，它自己的路由器<a href="http://golang.org/pkg/net/http/#ServeMux" target="_blank" rel="external">default request multiplexer</a>超级简单，但是功能也有限，所幸net/http库的设计非常好，很容易实现自己定义的路由器，所以你如果在github搜一下，会找到很多的第三方的路由库。</p>
<p>但是这些路由库良莠不齐，尤其是早期实现的路由器，有些实现了很差的路由算法，有些没有仔细考虑内存的分配，导致垃圾回收的问题。</p>
<p>Julien Schmidt在实现<a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="external">HttpRouter</a>库的时候将测试代码抽象出一个测试框架，用来测试Go的各种的路由器，测试的库相当的全。这个测试框架放在了<a href="https://github.com/julienschmidt/go-http-routing-benchmark" target="_blank" rel="external">github</a>上。</p>
<p>对于架构师和Go Web开发人员来说，这个测试确实是一份值得参考的资料，在选择一款路由框架的时候非常有帮助。</p>
<blockquote>
<p>路由是Go Web框架的一个功能，它可以将不同的URL映射到相应的处理方法上。一些库只实现了路由的功能，也有一些库实现了完整的Web框架的特性，如上下文管理，Session的维护，模版的处理，ORM等。本文只比较路由的性能。</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个速度快内存占用小的一致性哈希算法]]></title>
    <link href="http://colobu.com/2016/03/22/jump-consistent-hash/"/>
    <id>http://colobu.com/2016/03/22/jump-consistent-hash/</id>
    <published>2016-03-22T06:17:18.000Z</published>
    <updated>2016-03-23T08:23:17.078Z</updated>
    <content type="html"><![CDATA[<p>一致性哈希最早由 MIT的 Karger 提出，在发表于1997年的论文 <a href="https://www.akamai.com/es/es/multimedia/documents/technical-publication/consistent-hashing-and-random-trees-distributed-caching-protocols-for-relieving-hot-spots-on-the-world-wide-web-technical-publication.pdf" target="_blank" rel="external">Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web</a>， Karger et al 和合作者们提出了一致性哈希的概念(consistent hash)，用来解决分布式Cache的问题。这篇论文中提出在动态变化的Cache环境中，哈希算法应该满足的4个适应条件：：Balance(均衡)、Monotonicity(单调性)、Spread(分散性)、Load(负载)。</p>
<p>在分布式缓存系统中使用一致性哈希算法时，某个节点的添加和移除不会重新分配全部的缓存，而只会影响小部分的缓存系统，如果均衡性做的好的话，当添加一个节点时，会均匀地从其它节点移一部分缓存到新的节点上；当删除一个节点的时候，这个节点上的缓存会均匀地分配到其它活着的节点上。</p>
<p>一致性哈希缓存还被扩展到分布式存储系统上。数据被分成一组<strong>Shard</strong>,每个Shard由一个节点管理，当需要扩容时，我们可以添加新的节点，然后将其它Shard的一部分数据移动到这个节点上。比如我们有10个Shard的分布式存储系统，当前存储了120个数据，每个Shard存储了12个数据。当扩容成12个Shard时，我们从每个Shard上拿走2个数据，存入到新的两个Shard上,这样每个Shard都存储了10个数据，而整个过程中我们只移动了20/120=1/6的数据。</p>
<p>Karger 一致性哈希算法将每个节点(bucket)关联一个圆环上的一些随机点，对于一个键值，将其映射到圆环中的一个点上，然后按照顺时针方向找到第一个关联bucket的点，将值放入到这个bucke中。因此你需要存储一组bucket和它们的关联点，当bucket以及每个bucket的关联点很多的时候，你就需要多一点的内存来记录它。这个你经常在网上看到的介绍一致性哈希的算法(有些文章将节点均匀地分布在环上，比如节点1节点2节点3节点4节点1节点2节点3节点4……， 这是不对的，在这种情况下节点2挂掉后它上面的缓存全部转移给节点3了)。</p>
<p>其它的一致性算法还有<a href="https://en.wikipedia.org/wiki/Rendezvous_hashing" target="_blank" rel="external">Rendezvous hashing</a>, 计算一个key应该放入到哪个bucket时，它使用哈希函数h(key,bucket)计算每个候选bucket的值，然后返回值最大的bucket。buckets比较多的时候耗时也较长，有人也提出了一些改进的方法，比如将bucket组织成tree的结构，但是在reblance的时候花费时间又长了。</p>
<p>Java程序员熟悉的Memcached的客户端Spymemcached、Xmemcached以及Folsom都提供了Ketama算法。其实Ketama算法最早于2007年用c 实现(libketama)，很多其它语言也实现了相同的算法，它是基于Karger 一致性哈希算法实现：</p>
<ul>
<li>建立一组服务器的列表 (如: 1.2.3.4:11211, 5.6.7.8:11211, 9.8.7.6:11211)</li>
<li>为每个服务器节点计算一二百个哈希值</li>
<li>从概念上讲，这些数值被放入一个环上(continuum). (想象一个刻度为 0 到 2^32的时钟，这个时钟上就会散落着一些数字)</li>
<li>每一个数字关联一个服务器，所以服务器出现在这个环上的一些点上，它们是哈希分布的</li>
<li>为了找个一个Key应该放入哪个服务器，先哈希你的key，得到一个无符号整数, 沿着圆环找到和它相邻的最大的数，这个数对应的服务器就是被选择的服务器</li>
<li>对于靠近 2^32的 key, 因为没有超过它的数字点，按照圆环的原理，选择圆环中的第一个服务器。</li>
</ul>
<p>以上两种算法可以处理节点增加和移除的情况。对于分布式存储系统，当一个节点失效时，我们并不期望它被移除，而是使用备份节点替换它，或者将它恢复起来，因为我们不期望丢掉它上面的数据。对于这种情况(节点可以扩容，但是不会移除节点)，Google的 John Lamping, Eric Veach提供一个高效的几乎不占用持久内存的算法： <a href="http://120.52.73.75/arxiv.org/pdf/1406.2294v1.pdf" target="_blank" rel="external">Jump Consistent Hash</a>。</p>
<p><img src="/2016/03/22/jump-consistent-hash/jump.png" alt=""></p>
<a id="more"></a>
<p>Jump Consistent Hash算法的特点是：</p>
<ul>
<li>代码简单： 寥寥几行代码</li>
<li>不需要额外的内存映射：可是实时计算</li>
<li>快速</li>
<li>均匀：数据非常均匀地分布在各个节点</li>
</ul>
<p>具体的算法可以查看其论文。</p>
<p>C语言实现的Jump Consistent Hash如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int32_t JumpConsistentHash(uint64_t key, int32_t num_buckets)</div><div class="line">{</div><div class="line">    int64_t b = -<span class="number">1</span>, j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (j &lt; num_buckets) {</div><div class="line">        b = j;</div><div class="line">        key = key * <span class="number">2862933555777941757U</span>LL + <span class="number">1</span>;</div><div class="line">        j = (b + <span class="number">1</span>) * (<span class="keyword">double</span>(<span class="number">1L</span>L &lt;&lt; <span class="number">31</span>)/<span class="keyword">double</span>((key &gt;&gt; <span class="number">33</span>) + <span class="number">1</span>));</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> b;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>可以看出这个算法非常的简单，因此也很容易的用Go来实现：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> JumpHash(key <span class="typename">uint64</span>, buckets <span class="typename">int</span>) <span class="typename">int</span> {</div><div class="line">	<span class="keyword">var</span> b, j <span class="typename">int64</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> buckets &lt;=<span class="number"> 0</span> {</div><div class="line">		buckets =<span class="number"> 1</span></div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">for</span> j &lt; <span class="typename">int64</span>(buckets) {</div><div class="line">		b = j</div><div class="line">		key = key<span class="number">*2862933555777941757</span> +<span class="number"> 1</span></div><div class="line">		j = <span class="typename">int64</span>(<span class="typename">float64</span>(b<span class="number">+1</span>) * (<span class="typename">float64</span>(<span class="typename">int64</span><span class="number">(1</span>)&lt;<span class="number">&lt;31</span>) / <span class="typename">float64</span>((key&gt;<span class="number">&gt;33</span><span class="number">)+1</span>)))</div><div class="line">	}</div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="typename">int</span>(b)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>我们可以写段代码测试它，看看它的分布是否均匀，在新增加一个节点的时候，是否只移动了一部分的数据：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	buckets := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="typename">int</span>]<span class="typename">int</span>,<span class="number"> 10</span>)</div><div class="line">	count :=<span class="number"> 10</span></div><div class="line"></div><div class="line">	<span class="keyword">for</span> i := <span class="typename">uint64</span><span class="number">(0</span>); i &lt;<span class="number"> 120000</span>; i++ {</div><div class="line">		b := JumpHash(i, count)</div><div class="line">		buckets[b] = buckets[b] +<span class="number"> 1</span></div><div class="line">	}</div><div class="line">	fmt.Printf(<span class="string">"buckets: %v\n"</span>, buckets)</div><div class="line"></div><div class="line">	<span class="comment">//add two buckets</span></div><div class="line">	count =<span class="number"> 12</span></div><div class="line">	<span class="keyword">for</span> i := <span class="typename">uint64</span><span class="number">(0</span>); i &lt;<span class="number"> 120000</span>; i++ {</div><div class="line">		oldBucket := JumpHash(i, count<span class="number">-2</span>)</div><div class="line">		newBucket := JumpHash(i, count)</div><div class="line">		<span class="comment">//如果对象需要移动到新的bucket中,则首先从原来的bucket删除，再移动</span></div><div class="line">		<span class="keyword">if</span> oldBucket != newBucket {</div><div class="line">			buckets[oldBucket] = buckets[oldBucket] -<span class="number"> 1</span></div><div class="line">			buckets[newBucket] = buckets[newBucket] +<span class="number"> 1</span></div><div class="line">		}</div><div class="line"></div><div class="line">	}</div><div class="line">	fmt.Printf(<span class="string">"buckets after add two servers: %v\n"</span>, buckets)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>因为Jump consistent hash算法不使用节点挂掉，如果你真的有这种需求，比如你要做一个缓存系统，你可以考虑使用ketama算法，或者对Jump consistent hash算法改造一下：节点挂掉时我们不移除节点，只是标记这个节点不可用。当选择节点时，如果选择的节点不可用，则再一次Hash，尝试选择另外一个节点，比如下面的算法将key加1再进行选择。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> JumpHash(key <span class="typename">uint64</span>, buckets <span class="typename">int</span>, checkAlive <span class="keyword">func</span>(<span class="typename">int</span>) <span class="typename">bool</span>) <span class="typename">int</span> {</div><div class="line">	<span class="keyword">var</span> b, j <span class="typename">int64</span> =<span class="number"> -1</span>,<span class="number"> 0</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> buckets &lt;=<span class="number"> 0</span> {</div><div class="line">		buckets =<span class="number"> 1</span></div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">for</span> j &lt; <span class="typename">int64</span>(buckets) {</div><div class="line">		b = j</div><div class="line">		key = key<span class="number">*2862933555777941757</span> +<span class="number"> 1</span></div><div class="line">		j = <span class="typename">int64</span>(<span class="typename">float64</span>(b<span class="number">+1</span>) * (<span class="typename">float64</span>(<span class="typename">int64</span><span class="number">(1</span>)&lt;<span class="number">&lt;31</span>) / <span class="typename">float64</span>((key&gt;<span class="number">&gt;33</span><span class="number">)+1</span>)))</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">if</span> checkAlive != <span class="constant">nil</span> && !checkAlive(<span class="typename">int</span>(b)) {</div><div class="line">		<span class="keyword">return</span> JumpHash(key<span class="number">+1</span>, buckets, checkAlive) <span class="comment">//最好设置深度，避免key+1一直返回当掉的服务器</span></div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="typename">int</span>(b)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>上面的算法有一点问题，就是没有设定重试的测试，如果所有的节点都挂掉，则会进入死循环，所以最好设置一下重试次数(递归次数)，超过n次还没有选择到则返回失败。</p>
<h2 id="参考文档">参考文档</h2>
<ol>
<li><a href="http://120.52.73.75/arxiv.org/pdf/1406.2294v1.pdf" target="_blank" rel="external">http://120.52.73.75/arxiv.org/pdf/1406.2294v1.pdf</a></li>
<li><a href="https://news.ycombinator.com/item?id=8136408" target="_blank" rel="external">https://news.ycombinator.com/item?id=8136408</a></li>
<li><a href="http://www.last.fm/user/RJ/journal/2007/04/10/rz_libketama_-_a_consistent_hashing_algo_for_memcache_clients" target="_blank" rel="external">http://www.last.fm/user/RJ/journal/2007/04/10/rz_libketama_-_a_consistent_hashing_algo_for_memcache_clients</a></li>
<li><a href="https://www.akamai.com/us/en/multimedia/documents/technical-publication/consistent-hashing-and-random-trees-distributed-caching-protocols-for-relieving-hot-spots-on-the-world-wide-web-technical-publication.pdf" target="_blank" rel="external">https://www.akamai.com/us/en/multimedia/documents/technical-publication/consistent-hashing-and-random-trees-distributed-caching-protocols-for-relieving-hot-spots-on-the-world-wide-web-technical-publication.pdf</a></li>
<li><a href="https://en.wikipedia.org/wiki/Rendezvous_hashing" target="_blank" rel="external">https://en.wikipedia.org/wiki/Rendezvous_hashing</a></li>
<li><a href="https://disqus.com/home/discussion/byronheblog/jump_consistent_hashgoogle/" target="_blank" rel="external">https://disqus.com/home/discussion/byronheblog/jump_consistent_hashgoogle/</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/03/22/jump-consistent-hash/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>一致性哈希最早由 MIT的 Karger 提出，在发表于1997年的论文 <a href="https://www.akamai.com/es/es/multimedia/documents/technical-publication/consistent-hashing-and-random-trees-distributed-caching-protocols-for-relieving-hot-spots-on-the-world-wide-web-technical-publication.pdf" target="_blank" rel="external">Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web</a>， Karger et al 和合作者们提出了一致性哈希的概念(consistent hash)，用来解决分布式Cache的问题。这篇论文中提出在动态变化的Cache环境中，哈希算法应该满足的4个适应条件：：Balance(均衡)、Monotonicity(单调性)、Spread(分散性)、Load(负载)。</p>
<p>在分布式缓存系统中使用一致性哈希算法时，某个节点的添加和移除不会重新分配全部的缓存，而只会影响小部分的缓存系统，如果均衡性做的好的话，当添加一个节点时，会均匀地从其它节点移一部分缓存到新的节点上；当删除一个节点的时候，这个节点上的缓存会均匀地分配到其它活着的节点上。</p>
<p>一致性哈希缓存还被扩展到分布式存储系统上。数据被分成一组<strong>Shard</strong>,每个Shard由一个节点管理，当需要扩容时，我们可以添加新的节点，然后将其它Shard的一部分数据移动到这个节点上。比如我们有10个Shard的分布式存储系统，当前存储了120个数据，每个Shard存储了12个数据。当扩容成12个Shard时，我们从每个Shard上拿走2个数据，存入到新的两个Shard上,这样每个Shard都存储了10个数据，而整个过程中我们只移动了20/120=1/6的数据。</p>
<p>Karger 一致性哈希算法将每个节点(bucket)关联一个圆环上的一些随机点，对于一个键值，将其映射到圆环中的一个点上，然后按照顺时针方向找到第一个关联bucket的点，将值放入到这个bucke中。因此你需要存储一组bucket和它们的关联点，当bucket以及每个bucket的关联点很多的时候，你就需要多一点的内存来记录它。这个你经常在网上看到的介绍一致性哈希的算法(有些文章将节点均匀地分布在环上，比如节点1节点2节点3节点4节点1节点2节点3节点4……， 这是不对的，在这种情况下节点2挂掉后它上面的缓存全部转移给节点3了)。</p>
<p>其它的一致性算法还有<a href="https://en.wikipedia.org/wiki/Rendezvous_hashing" target="_blank" rel="external">Rendezvous hashing</a>, 计算一个key应该放入到哪个bucket时，它使用哈希函数h(key,bucket)计算每个候选bucket的值，然后返回值最大的bucket。buckets比较多的时候耗时也较长，有人也提出了一些改进的方法，比如将bucket组织成tree的结构，但是在reblance的时候花费时间又长了。</p>
<p>Java程序员熟悉的Memcached的客户端Spymemcached、Xmemcached以及Folsom都提供了Ketama算法。其实Ketama算法最早于2007年用c 实现(libketama)，很多其它语言也实现了相同的算法，它是基于Karger 一致性哈希算法实现：</p>
<ul>
<li>建立一组服务器的列表 (如: 1.2.3.4:11211, 5.6.7.8:11211, 9.8.7.6:11211)</li>
<li>为每个服务器节点计算一二百个哈希值</li>
<li>从概念上讲，这些数值被放入一个环上(continuum). (想象一个刻度为 0 到 2^32的时钟，这个时钟上就会散落着一些数字)</li>
<li>每一个数字关联一个服务器，所以服务器出现在这个环上的一些点上，它们是哈希分布的</li>
<li>为了找个一个Key应该放入哪个服务器，先哈希你的key，得到一个无符号整数, 沿着圆环找到和它相邻的最大的数，这个数对应的服务器就是被选择的服务器</li>
<li>对于靠近 2^32的 key, 因为没有超过它的数字点，按照圆环的原理，选择圆环中的第一个服务器。</li>
</ul>
<p>以上两种算法可以处理节点增加和移除的情况。对于分布式存储系统，当一个节点失效时，我们并不期望它被移除，而是使用备份节点替换它，或者将它恢复起来，因为我们不期望丢掉它上面的数据。对于这种情况(节点可以扩容，但是不会移除节点)，Google的 John Lamping, Eric Veach提供一个高效的几乎不占用持久内存的算法： <a href="http://120.52.73.75/arxiv.org/pdf/1406.2294v1.pdf" target="_blank" rel="external">Jump Consistent Hash</a>。</p>
<p><img src="/2016/03/22/jump-consistent-hash/jump.png" alt=""></p>
]]>
    
    </summary>
    
      <category term="架构" scheme="http://colobu.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spymemcached vs. xmemcached vs. Folsom]]></title>
    <link href="http://colobu.com/2016/03/17/spymemcached-vs-xmemcached-vs-Folsom/"/>
    <id>http://colobu.com/2016/03/17/spymemcached-vs-xmemcached-vs-Folsom/</id>
    <published>2016-03-17T07:47:03.000Z</published>
    <updated>2016-03-23T01:29:54.866Z</updated>
    <content type="html"><![CDATA[<p>我创建了一个项目，用来比较Java memcached client的性能：<a href="https://github.com/smallnest/Java-Memcached-Clients-Benchmark" target="_blank" rel="external">Java-Memcached-Clients-Benchmark</a></p>
<p><a href="https://github.com/couchbase/spymemcached" target="_blank" rel="external">spymemcached</a> 和 <a href="https://github.com/killme2008/xmemcached" target="_blank" rel="external">xmemcached</a>是Java中常用的Memcached的客户端。</p>
<p>spymemcached最早是由Dustin Sallings创建，至少从2006年就开始开发spymemcached，作为共同创建者加入到Couchbase以后到现在spymemcached由Couchbase来维护，2014年2月他加入了Google，兴趣也似乎转为了Golang。</p>
<p>xmemcached是原淘宝员工killme2008(庄晓丹, 花名“伯岩”)，现在在LeanCloud工作， killme2008的兴趣在于clojure。xmemcached也是一个历史悠久的项目了，1.2.5版发布于2010年。</p>
<p><a href="https://github.com/spotify/folsom" target="_blank" rel="external">Folsom</a>是一个比较新的Java Memcached client,它是现在如日中天的正版流媒体音乐服务平台<strong>Spotify</strong>的工程师们创建的，并且应用于公司的平台中。因为新(2015年初才第一次提交)，所以多扯几句。Folsom基于Netty实现，并在编程风格也更现代，异步，链式调用，metrics，代码简洁而有效。由有丰富经验的工程师维护，并且深度应用于他们公司高并发的产品应用中，没有遇到什么问题，值得信赖。</p>
<p>spymemcached和xmemcached开发比较早，代码容易带有历史的包袱，但是因为它们已经广泛地应用于许多实际的项目中，开发人员比较熟悉。</p>
<p>spymemcached的项目描述是这样的:&quot;A simple, asynchronous, single-threaded memcached client written in java. &quot;， 异步和单线程是它的特点，单个的client只使用单个的IO线程，这有一个陷阱，如果你的应用中有很多线程，那么分配给spymemcached client的线程的CPU时间片可能很少，这会降低spymemcached性能。这一点xmemcached也好很多。</p>
<p>我还遇到过spymemcached的一个<a href="http://colobu.com/2015/11/24/One-spymemcached-issue-when-one-node-fails/" target="_blank" rel="external">坑</a>。</p>
<p>xmemcached我觉得有问题的是没有提供异步接口，尽管它有一些方法提供了xxxWithNoRely,但是实际并不是异步的编程方式，只是忽略了memcached的返回,因为你想想异步地处理get方法，没办法，只能自己再包装。而且我测试的时候发现<code>setWithNoReply</code>还不稳定，抛出异常。</p>
<p>Folsom API非常的现代，但是了解它的人不多，所以没有经过广大的人民群众的检验，或许还没有暴露问题，另外文档也缺乏，只能看它的API和单元测试了解它的使用。</p>
<p>我还增加了一个Go memcached客户端的测试 <a href="https://github.com/bradfitz/gomemcache" target="_blank" rel="external">gomemcache</a>， 它是目前最常用的Go的客户端库。因为Go语言编程风格的原因，它所有的操作都是同步的，业务访问可以通过goroutine的方式实现异步访问。</p>
<a id="more"></a>
<p>我的测试很简单，用100个线程进行测试，每个线程会执行10000次的操作(批量查询gets执行100次的操作，每个操作查询100个key), 单个记录的数据分别是32 bytes、512 bytes 和 1024 bytes。</p>
<p><img src="32bytes.png" alt="单个记录为32字节的测试"><br>纵坐标是执行测试所需的时间，数值越小性能越好。</p>
<p>有几点需要说明</p>
<ul>
<li><code>get</code>方法是 spymemcached/Folsom 异步执行的，xmemcached执行的是<code>addWithNoReply</code>， gomemcache是同步执行的，所花时间较高</li>
<li>xmemcached和gomemcache 没有<code>异步get</code>的方法，测试空缺。</li>
<li><code>gets</code>批量查询的方法 gomemcache 所需时间很短，在图上没有显示出来。</li>
<li>xmemcached和gomemcache 没有<code>异步set</code>的方法,所以用同步set的数据来显示，所花时间较高。虽然xmemcached有<code>setWithNoReply</code>方法，但是会抛出异常。</li>
</ul>
<p><img src="512bytes.png" alt="单个记录为512字节的测试"></p>
<p><img src="1024bytes.png" alt="单个记录为1024字节的测试"></p>
<p>测试没有记录所需的内存和CPU占用。</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/03/17/spymemcached-vs-xmemcached-vs-Folsom/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>我创建了一个项目，用来比较Java memcached client的性能：<a href="https://github.com/smallnest/Java-Memcached-Clients-Benchmark" target="_blank" rel="external">Java-Memcached-Clients-Benchmark</a></p>
<p><a href="https://github.com/couchbase/spymemcached" target="_blank" rel="external">spymemcached</a> 和 <a href="https://github.com/killme2008/xmemcached" target="_blank" rel="external">xmemcached</a>是Java中常用的Memcached的客户端。</p>
<p>spymemcached最早是由Dustin Sallings创建，至少从2006年就开始开发spymemcached，作为共同创建者加入到Couchbase以后到现在spymemcached由Couchbase来维护，2014年2月他加入了Google，兴趣也似乎转为了Golang。</p>
<p>xmemcached是原淘宝员工killme2008(庄晓丹, 花名“伯岩”)，现在在LeanCloud工作， killme2008的兴趣在于clojure。xmemcached也是一个历史悠久的项目了，1.2.5版发布于2010年。</p>
<p><a href="https://github.com/spotify/folsom" target="_blank" rel="external">Folsom</a>是一个比较新的Java Memcached client,它是现在如日中天的正版流媒体音乐服务平台<strong>Spotify</strong>的工程师们创建的，并且应用于公司的平台中。因为新(2015年初才第一次提交)，所以多扯几句。Folsom基于Netty实现，并在编程风格也更现代，异步，链式调用，metrics，代码简洁而有效。由有丰富经验的工程师维护，并且深度应用于他们公司高并发的产品应用中，没有遇到什么问题，值得信赖。</p>
<p>spymemcached和xmemcached开发比较早，代码容易带有历史的包袱，但是因为它们已经广泛地应用于许多实际的项目中，开发人员比较熟悉。</p>
<p>spymemcached的项目描述是这样的:&quot;A simple, asynchronous, single-threaded memcached client written in java. &quot;， 异步和单线程是它的特点，单个的client只使用单个的IO线程，这有一个陷阱，如果你的应用中有很多线程，那么分配给spymemcached client的线程的CPU时间片可能很少，这会降低spymemcached性能。这一点xmemcached也好很多。</p>
<p>我还遇到过spymemcached的一个<a href="http://colobu.com/2015/11/24/One-spymemcached-issue-when-one-node-fails/" target="_blank" rel="external">坑</a>。</p>
<p>xmemcached我觉得有问题的是没有提供异步接口，尽管它有一些方法提供了xxxWithNoRely,但是实际并不是异步的编程方式，只是忽略了memcached的返回,因为你想想异步地处理get方法，没办法，只能自己再包装。而且我测试的时候发现<code>setWithNoReply</code>还不稳定，抛出异常。</p>
<p>Folsom API非常的现代，但是了解它的人不多，所以没有经过广大的人民群众的检验，或许还没有暴露问题，另外文档也缺乏，只能看它的API和单元测试了解它的使用。</p>
<p>我还增加了一个Go memcached客户端的测试 <a href="https://github.com/bradfitz/gomemcache" target="_blank" rel="external">gomemcache</a>， 它是目前最常用的Go的客户端库。因为Go语言编程风格的原因，它所有的操作都是同步的，业务访问可以通过goroutine的方式实现异步访问。</p>
]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Golang序列化框架对决 - 为什么andyleap/gencode那么快?]]></title>
    <link href="http://colobu.com/2016/03/16/why-is-go-gencode-so-fast/"/>
    <id>http://colobu.com/2016/03/16/why-is-go-gencode-so-fast/</id>
    <published>2016-03-16T05:32:01.000Z</published>
    <updated>2016-03-16T08:56:32.480Z</updated>
    <content type="html"><![CDATA[<p>我在github上创建了一个Go语言序列化/反序列化库的性能比较的项目<a href="https://github.com/smallnest/gosercomp" target="_blank" rel="external">gosercomp</a>，用来比较常见的Go语言生态圈的序列化库。<br>性能是以Go官方库提供的JSON/XML序列化库为基准，比较一下第三库能带来多大的性能提升。<br>尽管一些第三方库会自动产生<code>Struct</code>的代码，我们还是都以下面的数据结构为例：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ColorGroup <span class="keyword">struct</span> {</div><div class="line">	Id     <span class="typename">int</span>      <span class="string">`json:"id" xml:"id,attr" msg:"id"`</span></div><div class="line">	Name   <span class="typename">string</span>   <span class="string">`json:"name" xml:"name" msg:"name"`</span></div><div class="line">	Colors []<span class="typename">string</span> <span class="string">`json:"colors" xml:"colors" msg:"colors"`</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>其中<code>Colors</code>是一个slice。我并没有测试Struct嵌套以及循环引用的情况。</p>
<p>目前本项目包含了以下几种序列化库的性能比较：</p>
<ul>
<li><a href="http://golang.org/pkg/encoding/json/" target="_blank" rel="external">encoding/json</a></li>
<li><a href="http://golang.org/pkg/encoding/xml/" target="_blank" rel="external">encoding/xml</a></li>
<li><a href="http://github.com/youtube/vitess/go/bson" target="_blank" rel="external">github.com/youtube/vitess/go/bson</a></li>
<li><a href="http://github.com/tinylib/msgp" target="_blank" rel="external">github.com/tinylib/msgp</a></li>
<li><a href="http://github.com/golang/protobuf" target="_blank" rel="external">github.com/golang/protobuf</a></li>
<li><a href="http://github.com/gogo/protobuf" target="_blank" rel="external">github.com/gogo/protobuf</a></li>
<li><a href="http://github.com/google/flatbuffers" target="_blank" rel="external">github.com/google/flatbuffers</a></li>
<li><a href="https://github.com/apache/thrift/tree/master/lib/go" target="_blank" rel="external">Apache/Thrift</a></li>
<li><a href="https://github.com/linkedin/goavro" target="_blank" rel="external">Apache/Avro</a></li>
<li><a href="https://github.com/andyleap/gencode" target="_blank" rel="external">andyleap/gencode</a></li>
<li><a href="https://github.com/ugorji/go/tree/master/codec" target="_blank" rel="external">ugorji/go/codec</a></li>
</ul>
<p>对于序列化库的实现来讲，如果在运行时通过反射的方式进行序列化和反序列化，性能不会太好，比如官方库的Json和Xml序列化方法，所以高性能的序列化库很多都是通过代码生成在编译的时候提供序列化和反序列化的方法，下面我会介绍<a href="http://msgpack.org/" target="_blank" rel="external">MessagePack</a>和<a href="https://github.com/andyleap/gencode" target="_blank" rel="external">gencode</a>两种性能较高的序列化库。</p>
<p>本项目受<a href="https://github.com/alecthomas/go_serialization_benchmarks" target="_blank" rel="external">alecthomas/go_serialization_benchmarks</a>项目的启发。<br><a id="more"></a></p>
<p>对于第三方的序列化库，它们的数据结构的定义可能是自有形式的，比如<code>Thrift</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> go gosercomp</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThriftColorGroup</span> </span>{</div><div class="line">  <span class="number">1</span>: <span class="built_in">i32</span> id = <span class="number">0</span>,</div><div class="line">  <span class="number">2</span>: <span class="built_in">string</span> name,</div><div class="line">  <span class="number">3</span>: <span class="stl_container">list&lt;<span class="keyword">string</span>&gt;</span> colors,</div><div class="line">}</div></pre></td></tr></table></figure>

<p>比如<code>flatbuffers</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">namespace</span> <span class="tag">gosercomp</span>;</div><div class="line"></div><div class="line"><span class="tag">table</span>  <span class="tag">FlatBufferColorGroup</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">cgId</span>:<span class="value">int (id: <span class="number">0</span>)</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">name</span>:<span class="value">string (id: <span class="number">1</span>)</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">colors</span>:<span class="value"> [string] (id: <span class="number">2</span>)</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"></div><div class="line"><span class="tag">root_type</span> <span class="tag">FlatBufferColorGroup</span>;</div></pre></td></tr></table></figure>

<p>对于<code>protobuf</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> gosercomp;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">message</span> <span class="title">ProtoColorGroup</span> </span>{</div><div class="line">    <span class="keyword">required</span> <span class="built_in">int32</span> id = <span class="number">1</span>;</div><div class="line">    <span class="keyword">required</span> <span class="built_in">string</span> name = <span class="number">2</span>;</div><div class="line">    <span class="keyword">repeated</span> <span class="built_in">string</span> colors = <span class="number">3</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>看以看出，所有测试的数据结构都是一致的，它包含三个字段，一个是int类型的字段<code>Id</code>,一个是string类型的字段<code>Name</code>，一个是[]string类型的字段<code>Colors</code>。</p>
<h2 id="测试结果">测试结果</h2>
<p>完整的测试结果可以看<a href="https://github.com/smallnest/gosercomp" target="_blank" rel="external">这里</a>,</p>
<p>以下是Json、Xml、Protobuf、MessagePack、gencode的性能数据：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="header">benchmark _name                               iter                 time/iter        alloc bytes/iter    allocs/iter</span></div><div class="line">-------------------------------------------------------------------------------------------------------------------------</div><div class="line">BenchmarkMarshalByJson-4                         1000000          1909 ns/op         376 B/op           4 allocs/op</div><div class="line">BenchmarkUnmarshalByJson-4                        500000          4044 ns/op         296 B/op           9 allocs/op</div><div class="line"></div><div class="line">BenchmarkMarshalByXml-4                           200000          7893 ns/op        4801 B/op          12 allocs/op</div><div class="line">BenchmarkUnmarshalByXml-4                         100000         25615 ns/op        2807 B/op          67 allocs/op</div><div class="line"></div><div class="line">BenchmarkMarshalByProtoBuf-4                     2000000           969 ns/op         328 B/op           5 allocs/op</div><div class="line">BenchmarkUnmarshalByProtoBuf-4                   1000000          1617 ns/op         400 B/op          11 allocs/op</div><div class="line"></div><div class="line">BenchmarkMarshalByMsgp-4                         5000000           256 ns/op          80 B/op           1 allocs/op</div><div class="line">BenchmarkUnmarshalByMsgp-4                       3000000           459 ns/op          32 B/op           5 allocs/op</div><div class="line"></div><div class="line">BenchmarkMarshalByGencode-4                     20000000          66.4 ns/op           0 B/op           0 allocs/op</div><div class="line">BenchmarkUnmarshalByGencode-4                    5000000           271 ns/op          32 B/op           5 allocs/op</div></pre></td></tr></table></figure>

<p>可以看出Json、Xml的序列化和反序列化性能是很差的。想比较而言MessagePack有<strong>10x</strong>的性能的提升，而gencode比MessagePack的性能还要好很多。</p>
<h2 id="MessagePack的实现">MessagePack的实现</h2>
<p><a href="http://msgpack.org/" target="_blank" rel="external"><code>MessagePack</code></a>是一个高效的二进制序列化格式。它可以在多种语言直接交换数据格式。它将对象可以序列化更小的格式，比如对于很小的整数，它可以使用更少的存储(一个字节)。对于短字符串，它只需一个额外的字节来指示。</p>
<p><img src="msgp.png" alt=""></p>
<p>上图是一个27个字节的JSON数据，如果使用MessagePack的话可以用18个字节就可以表示了。</p>
<p>可以看出每个类型需要额外的0到n个字节来指明(数量依赖对象的大小或者长度)。上面的例子中<code>82</code>指示这个对象是包含两个元素的map (0x80 + 2), <code>A7</code> 代表一个短长度的字符串，字符串长度是7。<code>C3</code>代表true，<code>C2</code>代表false，<code>C0</code>代表nil。<code>00</code>代表是一个小整数。</p>
<p>完整的格式可以参照<a href="https://github.com/msgpack/msgpack/blob/master/spec.md#formats" target="_blank" rel="external">官方规范</a>。</p>
<p>MessagePack支持多种<a href="http://msgpack.org/#languages" target="_blank" rel="external">开发语言</a>。</p>
<blockquote>
<p>题外话，一个较新的RFC规范 <a href="https://tools.ietf.org/html/rfc7049" target="_blank" rel="external">CBOR/rfc7049</a> (简洁的二进制对象表示)定义了一个类似的规范，可以表达更详细的内容。</p>
</blockquote>
<p>推荐使用的Go MessagePack库是 <a href="https://github.com/tinylib/msgp" target="_blank" rel="external">tinylib/msgp</a>，它比<a href="https://github.com/ugorji/go/tree/master/codec" target="_blank" rel="external">ugorji/go</a>有更好的性能。</p>
<p>tinylib/msgp提供了一个代码生成工具<code>msgp</code>，可以为Golang的Struct生成序列化的代码，当然你的Struct应该定义<code>msg</code>标签，如本文上面定义的<code>ColorGroup</code>。通过<code>go generate</code>就可以自动生成代码，如本项目中生成的<code>msgp_gen.go</code>:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> gosercomp</div><div class="line"></div><div class="line"><span class="comment">// NOTE: THIS FILE WAS PRODUCED BY THE</span></div><div class="line"><span class="comment">// MSGP CODE GENERATION TOOL (github.com/tinylib/msgp)</span></div><div class="line"><span class="comment">// DO NOT EDIT</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"github.com/tinylib/msgp/msgp"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// MarshalMsg implements msgp.Marshaler</span></div><div class="line"><span class="keyword">func</span> (z *ColorGroup) MarshalMsg(b []<span class="typename">byte</span>) (o []<span class="typename">byte</span>, err error) {</div><div class="line">	o = msgp.Require(b, z.Msgsize())</div><div class="line">	<span class="comment">// map header, size 3</span></div><div class="line">	<span class="comment">// string "id"</span></div><div class="line">	o = <span class="built_in">append</span>(o,<span class="number"> 0</span>x83,<span class="number"> 0</span>xa2,<span class="number"> 0</span>x69,<span class="number"> 0</span>x64)</div><div class="line">	o = msgp.AppendInt(o, z.Id)</div><div class="line">	<span class="comment">// string "name"</span></div><div class="line">	o = <span class="built_in">append</span>(o,<span class="number"> 0</span>xa4,<span class="number"> 0</span>x6e,<span class="number"> 0</span>x61,<span class="number"> 0</span>x6d,<span class="number"> 0</span>x65)</div><div class="line">	o = msgp.AppendString(o, z.Name)</div><div class="line">	<span class="comment">// string "colors"</span></div><div class="line">	o = <span class="built_in">append</span>(o,<span class="number"> 0</span>xa6,<span class="number"> 0</span>x63,<span class="number"> 0</span>x6f,<span class="number"> 0</span>x6c,<span class="number"> 0</span>x6f,<span class="number"> 0</span>x72,<span class="number"> 0</span>x73)</div><div class="line">	o = msgp.AppendArrayHeader(o, <span class="typename">uint32</span>(<span class="built_in">len</span>(z.Colors)))</div><div class="line">	<span class="keyword">for</span> xvk := <span class="keyword">range</span> z.Colors {</div><div class="line">		o = msgp.AppendString(o, z.Colors[xvk])</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span></div><div class="line">}</div><div class="line"><span class="comment">// UnmarshalMsg implements msgp.Unmarshaler</span></div><div class="line"><span class="keyword">func</span> (z *ColorGroup) UnmarshalMsg(bts []<span class="typename">byte</span>) (o []<span class="typename">byte</span>, err error) {</div><div class="line">	<span class="keyword">var</span> field []<span class="typename">byte</span></div><div class="line">	_ = field</div><div class="line">	<span class="keyword">var</span> isz <span class="typename">uint32</span></div><div class="line">	isz, bts, err = msgp.ReadMapHeaderBytes(bts)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="keyword">return</span></div><div class="line">	}</div><div class="line">	<span class="keyword">for</span> isz &gt;<span class="number"> 0</span> {</div><div class="line">		isz--</div><div class="line">		field, bts, err = msgp.ReadMapKeyZC(bts)</div><div class="line">		<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">			<span class="keyword">return</span></div><div class="line">		}</div><div class="line">		<span class="keyword">switch</span> msgp.UnsafeString(field) {</div><div class="line">		<span class="keyword">case</span> <span class="string">"id"</span>:</div><div class="line">			z.Id, bts, err = msgp.ReadIntBytes(bts)</div><div class="line">			<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">				<span class="keyword">return</span></div><div class="line">			}</div><div class="line">		<span class="keyword">case</span> <span class="string">"name"</span>:</div><div class="line">	……</div></pre></td></tr></table></figure>

<p>生成的代码的使用类似官方库的Json和Xml，提供了Marshal和UnmarshalMsg的方法。</p>
<p>结合MessagePack的规范，可以看到<code>MarshalMsg</code>方法很简洁的，它使用了msgp.AppendXXX方法将相应的类型的数据写入到[]byte中，你可以预先分配/重用[]byte，这样可以实现 <code>zero alloc</code>。同时你也注意到，它也将字段的名字写入到序列化字节slice中，因此序列化后的数据包含对象的元数据。</p>
<p>反序列化的时候会读取字段的名字，再将相应的字节反序列化赋值给对象的相应的字段。</p>
<p>总体来说，MessagePack的性能已经相当高了，而且生成的数据也非常小，又是跨语言支持的，是值得关注的一个序列化库。</p>
<h2 id="gencode">gencode</h2>
<p>对于MessagePack还有没有可提升的空间？测试数据显示, <a href="https://github.com/andyleap/gencode" target="_blank" rel="external">andyleap/gencode</a>的性能还要好，甚至于性能是MessagePack的两倍。</p>
<p>andyleap/gencode的目标也是提供快速而且数据很少的序列化库。<br>它定义了自有的数据格式，并提供工具生成Golang代码。</p>
<p>下面是我测试用的数据格式。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GencodeColorGroup</span> </span>{</div><div class="line">	Id     int32</div><div class="line">	Name   <span class="built_in">string</span></div><div class="line">	Colors []<span class="built_in">string</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>它提供了类似于Golang的数据类型struct，定义结构也类似， 并提供了一组数据类型。</p>
<p>你可以通过它的工具生成数据结构的代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gencode.<span class="keyword">exe</span> <span class="keyword">go</span> -schema=gencode.schema -package gosercomp</div></pre></td></tr></table></figure>

<p>和MessagePack一样的处理，对于大于或者等于<code>0x80</code>的整数，它会使用2个或者更多的字节来表示。<br><br>但是与MessagePack不同的是，它不会写入字段的名字，也就是它不包含对象的元数据。同时，它写入的额外数据只包含字段的长度，并不需要指明数据的类型。<br>所有的值都以它的长度做先导，并没有像MessagePack那样为了节省空间会对对象进行压缩处理，所以它的代码会更直接而有效。</p>
<p>当然它们的处理都是通过字节的移位或者<code>copy</code>对字符串直接进行拷贝，这样的处理也非常的高效。</p>
<p>反序列化的时候也是依次解析出各字段的值，因为在编译的时候已经知道每个字段的类型，所以gencode无需元数据，可以聪明的对字节按照流的方式顺序处理。</p>
<p>可以看出，gencode相对于MessagePack,本身并没有为数据中加入额外的元数据的信息，也无需写入字段的类型信息，这样也可以减少生成的数据大小,同时它不会对小整数、短字符串，小的Map进行刻意的压缩，减少的代码的复杂度和判断分支，代码更加的简练而高效。</p>
<p>值得注意的是，gencode生成的代码除了官方库外不依赖其它的第三方库。</p>
<p>从测试数据来看，它的性能更胜一筹。</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/03/16/why-is-go-gencode-so-fast/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>我在github上创建了一个Go语言序列化/反序列化库的性能比较的项目<a href="https://github.com/smallnest/gosercomp" target="_blank" rel="external">gosercomp</a>，用来比较常见的Go语言生态圈的序列化库。<br>性能是以Go官方库提供的JSON/XML序列化库为基准，比较一下第三库能带来多大的性能提升。<br>尽管一些第三方库会自动产生<code>Struct</code>的代码，我们还是都以下面的数据结构为例：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ColorGroup <span class="keyword">struct</span> {</div><div class="line">	Id     <span class="typename">int</span>      <span class="string">`json:"id" xml:"id,attr" msg:"id"`</span></div><div class="line">	Name   <span class="typename">string</span>   <span class="string">`json:"name" xml:"name" msg:"name"`</span></div><div class="line">	Colors []<span class="typename">string</span> <span class="string">`json:"colors" xml:"colors" msg:"colors"`</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>其中<code>Colors</code>是一个slice。我并没有测试Struct嵌套以及循环引用的情况。</p>
<p>目前本项目包含了以下几种序列化库的性能比较：</p>
<ul>
<li><a href="http://golang.org/pkg/encoding/json/" target="_blank" rel="external">encoding/json</a></li>
<li><a href="http://golang.org/pkg/encoding/xml/" target="_blank" rel="external">encoding/xml</a></li>
<li><a href="http://github.com/youtube/vitess/go/bson" target="_blank" rel="external">github.com/youtube/vitess/go/bson</a></li>
<li><a href="http://github.com/tinylib/msgp" target="_blank" rel="external">github.com/tinylib/msgp</a></li>
<li><a href="http://github.com/golang/protobuf" target="_blank" rel="external">github.com/golang/protobuf</a></li>
<li><a href="http://github.com/gogo/protobuf" target="_blank" rel="external">github.com/gogo/protobuf</a></li>
<li><a href="http://github.com/google/flatbuffers" target="_blank" rel="external">github.com/google/flatbuffers</a></li>
<li><a href="https://github.com/apache/thrift/tree/master/lib/go" target="_blank" rel="external">Apache/Thrift</a></li>
<li><a href="https://github.com/linkedin/goavro" target="_blank" rel="external">Apache/Avro</a></li>
<li><a href="https://github.com/andyleap/gencode" target="_blank" rel="external">andyleap/gencode</a></li>
<li><a href="https://github.com/ugorji/go/tree/master/codec" target="_blank" rel="external">ugorji/go/codec</a></li>
</ul>
<p>对于序列化库的实现来讲，如果在运行时通过反射的方式进行序列化和反序列化，性能不会太好，比如官方库的Json和Xml序列化方法，所以高性能的序列化库很多都是通过代码生成在编译的时候提供序列化和反序列化的方法，下面我会介绍<a href="http://msgpack.org/" target="_blank" rel="external">MessagePack</a>和<a href="https://github.com/andyleap/gencode" target="_blank" rel="external">gencode</a>两种性能较高的序列化库。</p>
<p>本项目受<a href="https://github.com/alecthomas/go_serialization_benchmarks" target="_blank" rel="external">alecthomas/go_serialization_benchmarks</a>项目的启发。<br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[uridb.com 即将关站]]></title>
    <link href="http://colobu.com/2016/03/14/uridb-com-is-closing/"/>
    <id>http://colobu.com/2016/03/14/uridb-com-is-closing/</id>
    <published>2016-03-14T08:17:10.000Z</published>
    <updated>2016-03-14T08:41:28.546Z</updated>
    <content type="html"><![CDATA[<p>运行了半年，到了关闭<a href="http://uridb.com" target="_blank" rel="external">uri技术流</a>网站的时候了。正好DigitalOcean里面的钱用完了，不准备续费了。</p>
<p>URIDB是我去年10月份启动的一个side project，主要用来检验Golang的web的功能，以及尝试了解运行一个独立网站所需要的成本和精力。</p>
<p>网站的整体架构如下：<br>1、 Golang: 完全用Go语言实现, </p>
<ul>
<li>web框架使用的<a href="github.com/go-zoo/bone">bone</a>,它不是一个主流的Golang web框架，但是却有很高的性能，使用起来也很方便。</li>
<li>session管理使用的是<a href="github.com/gorilla/sessions">gorilla/sessions</a>。</li>
<li>验证码是<a href="github.com/dchest/captcha">captcha</a></li>
<li>memcached client使用的是<a href="github.com/bradfitz/gomemcache/memcache">gomemcache</a></li>
<li>oauth自己实现</li>
<li>短链接自己实现</li>
<li>mongo client使用的是<a href="github.com/kidstuff/mongostore">mongostore</a></li>
</ul>
<p>2、MongoDB: 数据库<br>3、Memcached: 缓存系统<br>4、Nginx: 负载均衡和转换，静态资源分配到static.uridb.com上<br>5、机器人: 自己实现的slack机器人，API库采用的是<a href="github.com/nlopes/slack">nlopes/slack</a><br>6、前端: Bootstrap+JQuery。单页应用设计，通过AJAX获取JSON数据显示。</p>
<p>自创建以来，访问量很低，基本每天在100用户左右，所以没有动力继续坚持下去了。谢谢曾经访问过这个网站的朋友，谢谢你们的支持。</p>
<p>在它消失之前，截个图。<br><img src="/2016/03/14/uridb-com-is-closing/uridb.png" alt=""></p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/03/14/uridb-com-is-closing/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>运行了半年，到了关闭<a href="http://uridb.com" target="_blank" rel="external">uri技术流</a>网站的时候了。正好DigitalOcean里面的钱用完了，不准备续费了。</p>
<p>URIDB是我去年10月份启动]]>
    </summary>
    
      <category term="程序人生" scheme="http://colobu.com/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[转]各大互联网公司架构演进之路汇总]]></title>
    <link href="http://colobu.com/2016/03/10/Summary-of-Architectures/"/>
    <id>http://colobu.com/2016/03/10/Summary-of-Architectures/</id>
    <published>2016-03-10T03:46:42.000Z</published>
    <updated>2016-03-10T04:14:58.362Z</updated>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://www.hollischuang.com/archives/1036" target="_blank" rel="external">各大互联网公司架构演进之路汇总</a> by <a href="http://www.hollischuang.com/" target="_blank" rel="external">HollisChuang</a><br>请转载时务必保留文章的上述原始出处。</p>
<p><article class="article-content"><br><a href="http://www.hollischuang.com/archives/728" target="_blank" rel="external">大型网站架构演化历程</a><br><a href="http://www.hollischuang.com/archives/1132" target="_blank" rel="external">大型网站架构技术一览</a></article></p>
<p><h2>Web</h2><br><a href="http://www.infoq.com/cn/articles/technical-architecture-of-alipay-and-ant-check-later" target="_blank" rel="external">支付宝和蚂蚁花呗的技术架构及实践</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=402390133&amp;idx=1&amp;sn=395cf6e500ea912fe66eb0a1c7a47e8d&amp;scene=4#wechat_redirect" target="_blank" rel="external">支付宝的高可用与容灾架构演进</a><br><a href="http://www.infoq.com/cn/presentations/juhuasuan-architecture-evolution-system-optimization" target="_blank" rel="external">聚划算架构演进和系统优化</a> （视频+PPT）<br><a href="http://www.infoq.com/cn/news/2014/06/taobao-trading-system" target="_blank" rel="external">淘宝交易系统演进之路</a> （专访）<br><a href="http://history.programmer.com.cn/7578/" target="_blank" rel="external">淘宝数据魔方技术架构解析</a><br><a href="http://www.infoq.com/cn/presentations/taobao-technology-development-and-architecture-experience" target="_blank" rel="external">淘宝技术发展历程和架构经验分享</a>（视频+PPT）（2.3日更新）<br><a href="http://www.infoq.com/cn/presentations/practise-of-stability-architecture-in-fast-transition-period" target="_blank" rel="external">高德——快速转型时期的稳定性架构实践</a>（视频+PPT）（2.3日更新）<br><a href="http://my.oschina.net/xianggao/blog/524943" target="_blank" rel="external">秒杀系统架构分析与实战</a><br><a href="http://www.infoq.com/cn/presentations/tencent-community-search" target="_blank" rel="external">腾讯社区搜索架构演进</a>（视频+PPT）<br><a href="http://www.csdn.net/article/2014-11-11/2822576" target="_blank" rel="external">京东峰值系统设计</a><br><a href="http://www.cnblogs.com/mindwind/p/5017591.html" target="_blank" rel="external">京东咚咚架构演进</a><br><a href="http://www.infoq.com/cn/articles/weibo-platform-archieture" target="_blank" rel="external">新浪微博平台架构</a><br><a href="http://c.blog.sina.com.cn/profile.php?blogid=a466bf9189000rsw" target="_blank" rel="external">微博图床架构揭秘</a><br><a href="http://www.wbrecom.com/?p=540" target="_blank" rel="external">微博推荐架构的演进</a><br><a href="http://www.csdn.net/article/2014-11-07/2822541" target="_blank" rel="external">当当网系统分级与海量信息动态发布实践</a><br><a href="http://www.infoq.com/cn/presentations/the-realization-of-dangdang-architecture-evolution-and-planning" target="_blank" rel="external">当当网架构演进及规划实现</a>（视频+PPT）<br><a href="http://colobu.com/2015/07/24/brief-history-scaling-linkedin" target="_blank" rel="external">LinkedIn架构这十年</a><br><a href="http://muratbuffalo.blogspot.com/2014/10/facebooks-software-architecture.html" target="_blank" rel="external">Facebook’s software architecture</a>（英文）<br><a href="http://www.infoq.com/cn/news/2014/12/zhihu-architecture-evolution" target="_blank" rel="external">从0到100——知乎架构变迁史</a><br><a href="http://www.infoq.com/cn/articles/douban-infrastructure-2014" target="_blank" rel="external">豆瓣的基础架构</a><br><a href="http://www.infoq.com/cn/presentations/sogou-search-advertising-retrieval-system" target="_blank" rel="external">搜狗搜索广告检索系统-弹性架构演进之路</a>（视频+PPT）<br><a href="http://www.csdn.net/article/2014-11-07/2822545" target="_blank" rel="external">小米网抢购系统开发实践</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=402182304&amp;idx=1&amp;sn=1bd68d72e6676ff782e92b0df8b07d35&amp;scene=1&amp;srcid=12045k1zDgO7DLlMLwimBKjC&amp;from=groupmessage&amp;isappinstalled=0#wechat_redirect" target="_blank" rel="external">小米抢购限流峰值系统「大秒」架构解密</a><br><a href="http://www.csdn.net/article/2014-11-11/2822577" target="_blank" rel="external">海尔电商峰值系统架构设计最佳实践</a><br><a href="http://www.csdn.net/article/2014-11-11/2822578" target="_blank" rel="external">唯品会峰值系统架构演变</a><br><a href="http://www.csdn.net/article/2014-11-11/2822579" target="_blank" rel="external">1号店电商峰值与流式计算</a><br><a href="http://www.csdn.net/article/2014-11-11/2822597" target="_blank" rel="external">蘑菇街如何在双11中创造99.99%的可用性</a><br><a href="http://www.csdn.net/article/2014-11-11/2822581" target="_blank" rel="external">麦包包峰值架构实践</a><br><a href="http://www.infoq.com/cn/articles/suning-product-details-system-architecture-design" target="_blank" rel="external">苏宁易购：商品详情系统架构设计</a><br><a href="http://www.infoq.com/cn/news/2015/11/ctrip-evolution-tech" target="_blank" rel="external">携程的技术演进之路</a><br><a href="http://www.infoq.com/cn/presentations/performance-evolution-of-liba-technology-architecture" target="_blank" rel="external">篱笆网技术架构性能演进</a>（视频+PPT）<br><a href="http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=408215395&amp;idx=1&amp;sn=cc49792ef0948a140c37d99306363774" target="_blank" rel="external">从技术细节看美团的架构</a>（1.26日更新）<br><a href="http://www.infoq.com/cn/articles/evolution-of-meituan-cloud-network-architecture" target="_blank" rel="external">美团云的网络架构演进之路</a>(2.3日更新)<br><a href="http://www.infoq.com/cn/presentations/baidu-open-cloud-big-data-technology-evolution" target="_blank" rel="external">百度开放云大数据技术演进历程</a>（视频+PPT）(2.3日更新)<br><a href="http://www.infoq.com/cn/presentations/tuniu-supply-chain-system-architecture-evolution" target="_blank" rel="external">途牛供应链系统的架构演进</a>（视频+PPT）(2.3日更新)<br><a href="http://www.infoq.com/cn/news/2015/09/Airbnb-Hadoop" target="_blank" rel="external">Airbnb架构要点分享</a>(2.3日更新)<br><a href="http://www.cnblogs.com/netfocus/p/5187241.html" target="_blank" rel="external">12306核心模型设计思路和架构设计</a>（2.20日更新）</p>
<p><h2>无线</h2><br><a href="http://www.infoq.com/cn/articles/alibaba-mobile-infrastructure" target="_blank" rel="external">阿里无线技术架构演进</a><br><a href="https://yq.aliyun.com/articles/128" target="_blank" rel="external">支付宝钱包客户端技术架构</a>(2.3日更新)<br><a href="http://www.infoq.com/cn/news/2014/12/taobao-app-evolution" target="_blank" rel="external">手机淘宝构架演化实践</a><br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=400995270&amp;idx=1&amp;sn=5b090490896f95b061a3ccd86baa3274&amp;scene=0#wechat_redirect" target="_blank" rel="external">手淘技术架构演进细节</a><br><a href="http://www.infoq.com/cn/articles/taobao-mobile-terminal-access-gateway-infrastructure" target="_blank" rel="external">手机淘宝移动端接入网关基础架构演进之路</a><br><a href="http://www.infoq.com/cn/articles/the-road-of-the-growth-weixin-background?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=global" target="_blank" rel="external">微信后台系统的演进之路</a><br><a href="https://www.zybuluo.com/yulin718/note/93148" target="_blank" rel="external">微信红包的架构设计简介</a><br><a href="http://www.infoq.com/cn/articles/wechat-android-app-architecture" target="_blank" rel="external">微信Android客户端架构演进之路</a><br><a href="http://www.infoq.com/cn/presentations/evolution-of-android-qq-music-architecture" target="_blank" rel="external">Android QQ音乐架构演进</a>（视频+PPT）<br><a href="http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;mid=402041851&amp;idx=1&amp;sn=10e83c9dc614ae36bba63da9d5614b86&amp;scene=0#wechat_redirect" target="_blank" rel="external">快的打车架构实践</a><br><a href="http://blog.jobbole.com/92641" target="_blank" rel="external">Uber 四年时间增长近 40 倍，背后架构揭秘</a><br><a href="http://weibo.com/p/1001643867507730568365" target="_blank" rel="external">Uber容错设计与多机房容灾方案</a><br><a href="http://www.infoq.com/cn/presentations/public-comment-mobile-application-architecture-evolution" target="_blank" rel="external">大众点评移动应用的架构演进</a>（视频+PPT）<br><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDUwMzU3Mw==&amp;mid=401044540&amp;idx=1&amp;sn=24b7d8fb655ae6dd5d989d0cb3c08e90&amp;scene=2&amp;srcid=0106EtxRjD2jHxzomxVPTwY3&amp;from=timeline&amp;isappinstalled=0&amp;uin=NzgwODIwNDgw&amp;key=&amp;devicetype=webwx&amp;version=70000001&amp;lang=zh_CN&amp;pass_ticket=46hW44w3Hxd7VY9rutz7mgLu1JGe2T1AAKNQpxNoYOSGi8NpmNYr%2BAZj%2BiXtRX2F" target="_blank" rel="external">饿了么移动APP的架构演进</a></p>
<p><h3>其他</h3><br><a href="http://www.csdn.net/article/2015-12-22/2826542" target="_blank" rel="external">魅族实时消息推送架构</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=407844753&amp;idx=1&amp;sn=dd291f772828f4834a016e96f03ee98a&amp;scene=0" target="_blank" rel="external">魅族云端同步的架构实践和协议细节</a></p>
<p><hr><br>欢迎补充！~</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/03/10/Summary-of-Architectures/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>原文地址：<a href="http://www.hollischuang.com/archives/1036" target="_blank" rel="external">各大互联网公司架构演进之路汇总</a> by <a href="http://www.hollis]]>
    </summary>
    
      <category term="架构" scheme="http://colobu.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java Stream 详解]]></title>
    <link href="http://colobu.com/2016/03/02/Java-Stream/"/>
    <id>http://colobu.com/2016/03/02/Java-Stream/</id>
    <published>2016-03-02T08:31:20.000Z</published>
    <updated>2016-03-07T02:39:45.924Z</updated>
    <content type="html"><![CDATA[<p>Stream是 Java 8新增加的类，用来补充集合类。</p>
<p>Stream代表数据流，流中的数据元素的数量可能是有限的，也可能是无限的。</p>
<p>Stream和其它集合类的区别在于：其它集合类主要关注与有限数量的数据的访问和有效管理(增删改)，而Stream并没有提供访问和管理元素的方式，而是通过声明数据源的方式，利用可计算的操作在数据源上执行，当然<code>BaseStream.iterator()</code> 和 <code>BaseStream.spliterator()</code>操作提供了遍历元素的方法。</p>
<p>Java Stream提供了提供了串行和并行两种类型的流，保持一致的接口，提供函数式编程方式，以管道方式提供中间操作和最终执行操作，为Java语言的集合提供了现代语言提供的类似的高阶函数操作，简化和提高了Java集合的功能。</p>
<p>本文首先介绍Java Stream的特点，然后按照功能分类逐个介绍流的中间操作和终点操作，最后会介绍第三方为Java Stream做的扩展。</p>
<blockquote>
<p>前年年底的时候我写了一些关于Java 8 Lambda和Stream的文章，本文应该在那个时候完成。后来忙于项目和写《Scala集合技术手册》(Scala Collections Cookbook)这本书，一直没来得及写Java Stream的文章，现在这篇文章算是对 Java Stream的一个总结吧。</p>
</blockquote>
<a id="more"></a>
<h2 id="介绍">介绍</h2>
<p>本节翻译整理自<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html" target="_blank" rel="external">Javadoc</a>，并对流的这些特性做了进一步的解释。</p>
<p>Stream接口还包含几个基本类型的子接口如IntStream, LongStream 和 DoubleStream。</p>
<p>关于流和其它集合具体的区别，可以参照下面的列表：</p>
<ol>
<li><strong>不存储数据</strong>。流是基于数据源的对象，它本身不存储数据元素，而是通过管道将数据源的元素传递给操作。</li>
<li><strong>函数式编程</strong>。流的操作不会修改数据源，例如<code>filter</code>不会将数据源中的数据删除。</li>
<li><strong>延迟操作</strong>。流的很多操作如filter,map等中间操作是延迟执行的，只有到终点操作才会将操作顺序执行。</li>
<li><strong>可以解绑</strong>。对于无限数量的流，有些操作是可以在有限的时间完成的，比如<code>limit(n)</code> 或 <code>findFirst()</code>，这些操作可是实现&quot;短路&quot;(Short-circuiting)，访问到有限的元素后就可以返回。</li>
<li><strong>纯消费</strong>。流的元素只能访问一次，类似Iterator，操作没有回头路，如果你想从头重新访问流的元素，对不起，你得重新生成一个新的流。</li>
</ol>
<p>流的操作是以管道的方式串起来的。流管道包含一个数据源，接着包含零到N个中间操作，最后以一个终点操作结束。</p>
<h3 id="并行_Parallelism">并行 Parallelism</h3>
<p>所有的流操作都可以串行执行或者并行执行。<br>除非显示地创建并行流，否则Java库中创建的都是串行流。 <code>Collection.stream()</code>为集合创建串行流而<code>Collection.parallelStream()</code>为集合创建并行流。<code>IntStream.range(int, int)</code>创建的是串行流。通过<code>parallel()</code>方法可以将串行流转换成并行流,<code>sequential()</code>方法将流转换成串行流。</p>
<p>除非方法的Javadoc中指明了方法在并行执行的时候结果是不确定(比如findAny、forEach)，否则串行和并行执行的结果应该是一样的。</p>
<h3 id="Non-interference">Non-interference</h3>
<p>流可以从非线程安全的集合中创建，当流的管道执行的时候，非concurrent数据源不应该被改变。下面的代码会抛出<code>java.util.ConcurrentModificationException</code>异常：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; l = <span class="keyword">new</span> ArrayList(Arrays.asList(<span class="string">"one"</span>, <span class="string">"two"</span>));</div><div class="line">Stream&lt;String&gt; sl = l.stream();</div><div class="line">sl.forEach(s -&gt; l.add(<span class="string">"three"</span>));</div></pre></td></tr></table></figure>

<p>在设置中间操作的时候，可以更改数据源，只有在执行终点操作的时候，才有可能出现并发问题(抛出异常，或者不期望的结果)，比如下面的代码不会抛出异常：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; l = <span class="keyword">new</span> ArrayList(Arrays.asList(<span class="string">"one"</span>, <span class="string">"two"</span>));</div><div class="line">Stream&lt;String&gt; sl = l.stream();</div><div class="line">l.add(<span class="string">"three"</span>);</div><div class="line">sl.forEach(System.out::println);</div></pre></td></tr></table></figure>

<p>对于concurrent数据源，不会有这样的问题，比如下面的代码很正常：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; l = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;(Arrays.asList(<span class="string">"one"</span>, <span class="string">"two"</span>));</div><div class="line">Stream&lt;String&gt; sl = l.stream();</div><div class="line">sl.forEach(s -&gt; l.add(<span class="string">"three"</span>));</div></pre></td></tr></table></figure>

<p>虽然我们上面例子是在终点操作中对非并发数据源进行修改，但是非并发数据源也可能在其它线程中修改，同样会有并发问题。</p>
<h3 id="无状态_Stateless_behaviors">无状态 Stateless behaviors</h3>
<p>大部分流的操作的参数都是函数式接口，可以使用Lambda表达式实现。它们用来描述用户的行为，称之为行为参数(behavioral parameters)。</p>
<p>如果这些行为参数有状态，则流的操作的结果可能是不确定的，比如下面的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; l = <span class="keyword">new</span> ArrayList(Arrays.asList(<span class="string">"one"</span>, <span class="string">"two"</span>, ……));</div><div class="line">class State {</div><div class="line">    <span class="keyword">boolean</span> s;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">final</span> State state = <span class="keyword">new</span> State();</div><div class="line"></div><div class="line">Stream&lt;String&gt; sl = l.stream().map(e -&gt; {</div><div class="line">    <span class="keyword">if</span> (state.s)</div><div class="line">        <span class="keyword">return</span> <span class="string">"OK"</span>;</div><div class="line">    <span class="keyword">else</span> {</div><div class="line">        state.s = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    } </div><div class="line">});</div><div class="line">sl.forEach(System.out::println);</div></pre></td></tr></table></figure>

<p>上面的代码在并行执行时多次的执行结果可能是不同的。这是因为这个lambda表达式是有状态的。</p>
<h3 id="副作用_Side-effects">副作用 Side-effects</h3>
<p>有副作用的行为参数是被鼓励使用的。</p>
<p>副作用指的是行为参数在执行的时候有输入输入，比如网络输入输出等。</p>
<p>这是因为Java不保证这些副作用对其它线程可见，也不保证相同流管道上的同样的元素的不同的操作运行在同一个线程中。</p>
<p>很多有副作用的行为参数可以被转换成无副作用的实现。一般来说<code>println()</code>这样的副作用代码不会有害。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">stream.filter(s -&gt; pattern.matcher(s).matches())</div><div class="line">      .forEach(s -&gt; results.add(s));  <span class="comment">// 副作用代码</span></div></pre></td></tr></table></figure>

<p>上面的代码可以改成无副作用的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt;results =</div><div class="line">    stream.filter(s -&gt; pattern.matcher(s).matches())</div><div class="line">          .collect(Collectors.toList());  <span class="comment">// No side-effects!</span></div></pre></td></tr></table></figure>

<h3 id="排序_Ordering">排序 Ordering</h3>
<p>某些流的返回的元素是有确定顺序的，我们称之为 <em>encounter order</em>。这个顺序是流提供它的元素的顺序，比如数组的encounter order是它的元素的排序顺序，List是它的迭代顺序(iteration order)，对于HashSet,它本身就没有encounter order。</p>
<p>一个流是否是encounter order主要依赖数据源和它的中间操作，比如数据源List和Array上创建的流是有序的(ordered)，但是在HashSet创建的流不是有序的。</p>
<p><code>sorted()</code>方法可以将流转换成有序的，<code>unordered</code>可以将流转换成无序的。<br>除此之外，一个操作可能会影响流的有序,比如<code>map</code>方法，它会用不同的值甚至类型替换流中的元素，所以输入元素的有序性已经变得没有意义了，但是对于<code>filter</code>方法来说，它只是丢弃掉一些值而已，输入元素的有序性还是保障的。</p>
<p>对于串行流，流有序与否不会影响其性能，只是会影响确定性(determinism)，无序流在多次执行的时候结果可能是不一样的。</p>
<p>对于并行流，去掉有序这个约束可能会提供性能，比如<code>distinct</code>、<code>groupingBy</code>这些聚合操作。</p>
<h3 id="结合性_Associativity">结合性 Associativity</h3>
<p>一个操作或者函数<code>op</code>满足结合性意味着它满足下面的条件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(a op b) op <span class="built_in">c</span> == a op (b op <span class="built_in">c</span>)</div></pre></td></tr></table></figure>

<p>对于并发流来说，如果操作满足结合性，我们就可以并行计算：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a op b op <span class="built_in">c</span> op d == (a op b) op (<span class="built_in">c</span> op d)</div></pre></td></tr></table></figure>

<p>比如<code>min</code>、<code>max</code>以及字符串连接都是满足结合性的。</p>
<h2 id="创建Stream">创建Stream</h2>
<p>可以通过多种方式创建流：</p>
<p>1、通过集合的<code>stream()</code>方法或者<code>parallelStream()</code>，比如<code>Arrays.asList(1,2,3).stream()</code>。<br>2、通过<code>Arrays.stream(Object[])</code>方法, 比如<code>Arrays.stream(new int[]{1,2,3})</code>。<br>3、使用流的静态方法，比如<code>Stream.of(Object[])</code>, <code>IntStream.range(int, int)</code> 或者 <code>Stream.iterate(Object, UnaryOperator)</code>，如<code>Stream.iterate(0, n -&gt; n * 2)</code>，或者<code>generate(Supplier&lt;T&gt; s)</code>如<code>Stream.generate(Math::random)</code>。<br>4、<code>BufferedReader.lines()</code>从文件中获得行的流。<br>5、<code>Files</code>类的操作路径的方法，如<code>list</code>、<code>find</code>、<code>walk</code>等。<br>6、随机数流<code>Random.ints()</code>。<br>7、其它一些类提供了创建流的方法，如<code>BitSet.stream()</code>, <code>Pattern.splitAsStream(java.lang.CharSequence)</code>, 和 <code>JarFile.stream()</code>。<br>8、更底层的使用<code>StreamSupport</code>，它提供了将<code>Spliterator</code>转换成流的方法。</p>
<h2 id="中间操作_intermediate_operations">中间操作 intermediate operations</h2>
<p>中间操作会返回一个新的流，并且操作是延迟执行的(lazy)，它不会修改原始的数据源，而且是由在终点操作开始的时候才真正开始执行。<br>这个Scala集合的转换操作不同，Scala集合转换操作会生成一个新的中间集合，显而易见Java的这种设计会减少中间对象的生成。</p>
<p>下面介绍流的这些中间操作：</p>
<h3 id="distinct">distinct</h3>
<p><code>distinct</code>保证输出的流中包含唯一的元素，它是通过<code>Object.equals(Object)</code>来检查是否包含相同的元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; l = Stream.of(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>)</div><div class="line">        .distinct()</div><div class="line">        .collect(Collectors.toList());</div><div class="line">System.out.println(l); <span class="comment">//[a, b, c]</span></div></pre></td></tr></table></figure>

<h3 id="filter">filter</h3>
<p><code>filter</code>返回的流中只包含满足断言(predicate)的数据。</p>
<p>下面的代码返回流中的偶数集合。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; l = IntStream.range(<span class="number">1</span>,<span class="number">10</span>)</div><div class="line">        .filter( i -&gt; i % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">        .boxed()</div><div class="line">        .collect(Collectors.toList());</div><div class="line">System.out.println(l); <span class="comment">//[2, 4, 6, 8]</span></div></pre></td></tr></table></figure>

<h3 id="map">map</h3>
<p><code>map</code>方法将流中的元素映射成另外的值，新的值类型可以和原来的元素的类型不同。</p>
<p>下面的代码中将字符元素映射成它的哈希码(ASCII值)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; l = Stream.of(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</div><div class="line">        .map( c -&gt; c.hashCode())</div><div class="line">        .collect(Collectors.toList());</div><div class="line">System.out.println(l); <span class="comment">//[97, 98, 99]</span></div></pre></td></tr></table></figure>

<h3 id="flatmap">flatmap</h3>
<p><code>flatmap</code>方法混合了<code>map</code> + <code>flattern</code>的功能，它将映射后的流的元素全部放入到一个新的流中。它的方法定义如下：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? <span class="keyword">super</span> T,? <span class="keyword">extends</span> Stream&lt;? <span class="keyword">extends</span> R&gt;&gt; mapper)</div></pre></td></tr></table></figure>

<p>可以看到<code>mapper</code>函数会将每一个元素转换成一个流对象，而<code>flatMap</code>方法返回的流包含的元素为<code>mapper</code>生成的所有流中的元素。</p>
<p>下面这个例子中将一首唐诗生成一个按行分割的流，然后在这个流上调用flatmap得到单词的小写形式的集合，去掉重复的单词然后打印出来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">String poetry = <span class="string">"Where, before me, are the ages that have gone?\n"</span> +</div><div class="line">        <span class="string">"And where, behind me, are the coming generations?\n"</span> +</div><div class="line">        <span class="string">"I think of heaven and earth, without limit, without end,\n"</span> +</div><div class="line">        <span class="string">"And I am all alone and my tears fall down."</span>;</div><div class="line"></div><div class="line">Stream&lt;String&gt; lines = Arrays.stream(poetry.split(<span class="string">"\n"</span>));</div><div class="line">Stream&lt;String&gt; words = lines.flatMap(line -&gt; Arrays.stream(line.split(<span class="string">" "</span>)));</div><div class="line">List&lt;String&gt; l = words.map( w -&gt; {</div><div class="line">    <span class="keyword">if</span> (w.endsWith(<span class="string">","</span>) || w.endsWith(<span class="string">"."</span>) || w.endsWith(<span class="string">"?"</span>))</div><div class="line">        <span class="keyword">return</span> w.substring(<span class="number">0</span>,w.length() -<span class="number">1</span>).trim().toLowerCase();</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> w.trim().toLowerCase();</div><div class="line">}).distinct().sorted().collect(Collectors.toList());</div><div class="line">System.out.println(l); <span class="comment">//[ages, all, alone, am, and, are, before, behind, coming, down, earth, end, fall, generations, gone, have, heaven, i, limit, me, my, of, tears, that, the, think, where, without]</span></div></pre></td></tr></table></figure>

<p><code>flatMapToDouble</code>、<code>flatMapToInt</code>、<code>flatMapToLong</code>提供了转换成特定流的方法。</p>
<h3 id="limit">limit</h3>
<p><code>limit</code>方法指定数量的元素的流。对于串行流，这个方法是有效的，这是因为它只需返回前n个元素即可，但是对于有序的并行流，它可能花费相对较长的时间，如果你不在意有序，可以将有序并行流转换为无序的，可以提高性能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Integer&gt; l = IntStream.range(<span class="number">1</span>,<span class="number">100</span>).limit(<span class="number">5</span>)</div><div class="line">        .boxed()</div><div class="line">        .collect(Collectors.toList());</div><div class="line">System.out.println(l);<span class="comment">//[1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure>

<h3 id="peek">peek</h3>
<p><code>peek</code>方法方法会使用一个Consumer消费流中的元素，但是返回的流还是包含原来的流中的元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String[] arr = <span class="keyword">new</span> String[]{<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>};</div><div class="line">Arrays.stream(arr)</div><div class="line">        .peek(System.out::println) <span class="comment">//a,b,c,d</span></div><div class="line">        .count();</div></pre></td></tr></table></figure>

<h3 id="sorted">sorted</h3>
<p><code>sorted()</code>将流中的元素按照自然排序方式进行排序，如果元素没有实现<code>Comparable</code>，则终点操作执行时会抛出<code>java.lang.ClassCastException</code>异常。<br><code>sorted(Comparator&lt;? super T&gt; comparator)</code>可以指定排序的方式。</p>
<p>对于有序流，排序是稳定的。对于非有序流，不保证排序稳定。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">String[] arr = <span class="keyword">new</span> String[]{<span class="string">"b_123"</span>,<span class="string">"c+342"</span>,<span class="string">"b#632"</span>,<span class="string">"d_123"</span>};</div><div class="line">List&lt;String&gt; l  = Arrays.stream(arr)</div><div class="line">        .sorted((s1,s2) -&gt; {</div><div class="line">            <span class="keyword">if</span> (s1.charAt(<span class="number">0</span>) == s2.charAt(<span class="number">0</span>))</div><div class="line">                <span class="keyword">return</span> s1.substring(<span class="number">2</span>).compareTo(s2.substring(<span class="number">2</span>));</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> s1.charAt(<span class="number">0</span>) - s2.charAt(<span class="number">0</span>);</div><div class="line">        })</div><div class="line">        .collect(Collectors.toList());</div><div class="line">System.out.println(l); <span class="comment">//[b_123, b#632, c+342, d_123]</span></div></pre></td></tr></table></figure>

<h3 id="skip">skip</h3>
<p><code>skip</code>返回丢弃了前n个元素的流，如果流中的元素小于或者等于n，则返回空的流。</p>
<h2 id="终点操作_terminal_operations">终点操作 terminal operations</h2>
<h3 id="Match">Match</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> 	<span class="title">allMatch</span>(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> 	<span class="title">anyMatch</span>(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> 	<span class="title">noneMatch</span>(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</div></pre></td></tr></table></figure>

<p>这一组方法用来检查流中的元素是否满足断言。<br><code>allMatch</code>只有在所有的元素都满足断言时才返回true,否则flase,流为空时总是返回true<br><br><code>anyMatch</code>只有在任意一个元素满足断言时就返回true,否则flase,<br><br><code>noneMatch</code>只有在所有的元素都不满足断言时才返回true,否则flase,<br></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">      System.out.println(Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).allMatch( i -&gt; i &gt; <span class="number">0</span>)); <span class="comment">//true</span></div><div class="line">      System.out.println(Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).anyMatch( i -&gt; i &gt; <span class="number">0</span>)); <span class="comment">//true</span></div><div class="line">      System.out.println(Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).noneMatch( i -&gt; i &gt; <span class="number">0</span>)); <span class="comment">//false</span></div><div class="line"></div><div class="line">System.out.println(Stream.&lt;Integer&gt;empty().allMatch( i -&gt; i &gt; <span class="number">0</span>)); <span class="comment">//true</span></div><div class="line">      System.out.println(Stream.&lt;Integer&gt;empty().anyMatch( i -&gt; i &gt; <span class="number">0</span>)); <span class="comment">//false</span></div><div class="line">      System.out.println(Stream.&lt;Integer&gt;empty().noneMatch( i -&gt; i &gt; <span class="number">0</span>)); <span class="comment">//true</span></div></pre></td></tr></table></figure>

<h3 id="count">count</h3>
<p><code>count</code>方法返回流中的元素的数量。它实现为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mapToLong(e -&gt; <span class="number">1</span>L).sum();</div></pre></td></tr></table></figure>

<h3 id="collect">collect</h3>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;R,A&gt; R 	collect(Collector&lt;? <span class="keyword">super</span> T,A,R&gt; collector)</div><div class="line">&lt;R&gt; R 	collect(Supplier&lt;R&gt; supplier, BiConsumer&lt;R,? <span class="keyword">super</span> T&gt; accumulator, BiConsumer&lt;R,R&gt; combiner)</div></pre></td></tr></table></figure>

<p>使用一个collector执行<code>mutable reduction</code>操作。辅助类<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html" target="_blank" rel="external"><code>Collectors</code></a>提供了很多的collector，可以满足我们日常的需求，你也可以创建新的collector实现特定的需求。它是一个值得关注的类，你需要熟悉这些特定的收集器，如聚合类<code>averagingInt</code>、最大最小值<code>maxBy</code> <code>minBy</code>、计数<code>counting</code>、分组<code>groupingBy</code>、字符串连接<code>joining</code>、分区<code>partitioningBy</code>、汇总<code>summarizingInt</code>、化简<code>reducing</code>、转换<code>toXXX</code>等。</p>
<p>第二个提供了更底层的功能，它的逻辑类似下面的伪代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">R result = supplier.get();</div><div class="line"><span class="keyword">for</span> (T element : <span class="keyword">this</span> stream)</div><div class="line">    accumulator.accept(result, element);</div><div class="line"><span class="keyword">return</span> result;</div></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; asList = stringStream.collect(ArrayList::<span class="keyword">new</span>, ArrayList::add,</div><div class="line">                                           ArrayList::addAll);</div><div class="line">String concat = stringStream.collect(StringBuilder::<span class="keyword">new</span>, StringBuilder::append,</div><div class="line">                                     StringBuilder::append)</div><div class="line">                            .toString();</div></pre></td></tr></table></figure>

<h3 id="find">find</h3>
<p><code>findAny()</code>返回任意一个元素，如果流为空，返回空的Optional，对于并行流来说，它只需要返回任意一个元素即可，所以性能可能要好于<code>findFirst()</code>，但是有可能多次执行的时候返回的结果不一样。<br><code>findFirst()</code>返回第一个元素，如果流为空，返回空的Optional。</p>
<h3 id="forEach、forEachOrdered">forEach、forEachOrdered</h3>
<p><code>forEach</code>遍历流的每一个元素，执行指定的action。它是一个终点操作，和<code>peek</code>方法不同。这个方法不担保按照流的<code>encounter order</code>顺序执行，如果对于有序流按照它的<code>encounter order</code>顺序执行，你可以使用<code>forEachOrdered</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).forEach(System.out::println);</div></pre></td></tr></table></figure>

<h3 id="max、min">max、min</h3>
<p><code>max</code>返回流中的最大值，<br><code>min</code>返回流中的最小值。</p>
<h3 id="reduce">reduce</h3>
<p><code>reduce</code>是常用的一个方法，事实上很多操作都是基于它实现的。<br>它有几个重载方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pubic Optional&lt;T&gt; 	reduce(BinaryOperator&lt;T&gt; accumulator)</div><div class="line">pubic T 	reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</div><div class="line">pubic &lt;U&gt; U 	reduce(U identity, BiFunction&lt;U,? <span class="keyword">super</span> T,U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</div></pre></td></tr></table></figure>

<p>第一个方法使用流中的第一个值作为初始值，后面两个方法则使用一个提供的初始值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Optional&lt;Integer&gt; total = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).reduce( (x, y) -&gt; x +y);</div><div class="line">Integer total2 = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).reduce(<span class="number">0</span>, (x, y) -&gt; x +y);</div></pre></td></tr></table></figure>

<p>值得注意的是<code>accumulator</code>应该满足结合性(associative)。</p>
<h3 id="toArray()">toArray()</h3>
<p>将流中的元素放入到一个数组中。</p>
<h2 id="组合">组合</h2>
<p><code>concat</code>用来连接类型一样的两个流。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Stream&lt;T&gt; 	<span class="title">concat</span>(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</div></pre></td></tr></table></figure>

<p>``</p>
<h2 id="转换">转换</h2>
<p><code>toArray</code>方法将一个流转换成数组，而如果想转换成其它集合类型，西需要调用<code>collect</code>方法，利用<code>Collectors.toXXX</code>方法进行转换：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,C extends Collection&lt;T&gt;&gt; Collector&lt;T,?,C&gt; 	<span class="title">toCollection</span>(Supplier&lt;C&gt; collectionFactory)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> …… 	<span class="title">toConcurrentMap</span>(……)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Collector&lt;T,?,List&lt;T&gt;&gt; 	<span class="title">toList</span>()</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> …… 	<span class="title">toMap</span>(……)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Collector&lt;T,?,Set&lt;T&gt;&gt; 	<span class="title">toSet</span>()</div></pre></td></tr></table></figure>

<h2 id="更进一步">更进一步</h2>
<p>虽然Stream提供了很多的操作，但是相对于Scala等语言，似乎还少了一些。一些开源项目提供了额外的一些操作，比如<a href="https://github.com/poetix/protonpack" target="_blank" rel="external">protonpack</a>项目提供了下列方法：</p>
<ul>
<li>takeWhile and takeUntil</li>
<li>skipWhile and skipUntil</li>
<li>zip and zipWithIndex</li>
<li>unfold</li>
<li>MapStream</li>
<li>aggregate</li>
<li>Streamable<t></t></li>
<li>unique collector</li>
</ul>
<p><a href="https://github.com/NitorCreations/java8-utils" target="_blank" rel="external">java8-utils</a> 也提供了一些有益的辅助方法。</p>
<h2 id="参考文档">参考文档</h2>
<ol>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html" target="_blank" rel="external">https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html</a></li>
<li><a href="http://www.leveluplunch.com/java/examples/" target="_blank" rel="external">http://www.leveluplunch.com/java/examples/</a></li>
<li><a href="https://github.com/poetix/protonpack" target="_blank" rel="external">https://github.com/poetix/protonpack</a></li>
<li><a href="https://github.com/NitorCreations/java8-utils" target="_blank" rel="external">https://github.com/NitorCreations/java8-utils</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/03/02/Java-Stream/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>Stream是 Java 8新增加的类，用来补充集合类。</p>
<p>Stream代表数据流，流中的数据元素的数量可能是有限的，也可能是无限的。</p>
<p>Stream和其它集合类的区别在于：其它集合类主要关注与有限数量的数据的访问和有效管理(增删改)，而Stream并没有提供访问和管理元素的方式，而是通过声明数据源的方式，利用可计算的操作在数据源上执行，当然<code>BaseStream.iterator()</code> 和 <code>BaseStream.spliterator()</code>操作提供了遍历元素的方法。</p>
<p>Java Stream提供了提供了串行和并行两种类型的流，保持一致的接口，提供函数式编程方式，以管道方式提供中间操作和最终执行操作，为Java语言的集合提供了现代语言提供的类似的高阶函数操作，简化和提高了Java集合的功能。</p>
<p>本文首先介绍Java Stream的特点，然后按照功能分类逐个介绍流的中间操作和终点操作，最后会介绍第三方为Java Stream做的扩展。</p>
<blockquote>
<p>前年年底的时候我写了一些关于Java 8 Lambda和Stream的文章，本文应该在那个时候完成。后来忙于项目和写《Scala集合技术手册》(Scala Collections Cookbook)这本书，一直没来得及写Java Stream的文章，现在这篇文章算是对 Java Stream的一个总结吧。</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java CompletableFuture 详解]]></title>
    <link href="http://colobu.com/2016/02/29/Java-CompletableFuture/"/>
    <id>http://colobu.com/2016/02/29/Java-CompletableFuture/</id>
    <published>2016-02-29T08:49:32.000Z</published>
    <updated>2016-03-02T05:05:36.883Z</updated>
    <content type="html"><![CDATA[<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html" target="_blank" rel="external">Future</a>是Java 5添加的类，用来描述一个异步计算的结果。你可以使用<code>isDone</code>方法检查计算是否完成，或者使用<code>get</code>阻塞住调用线程，直到计算完成返回结果，你也可以使用<code>cancel</code>方法停止任务的执行。</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicFuture</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> ExecutionException, InterruptedException {</div><div class="line">        ExecutorService es = Executors.newFixedThreadPool(<span class="number">10</span>);</div><div class="line">        Future&lt;Integer&gt; f = es.submit(() -&gt;{</div><div class="line">                <span class="comment">// 长时间的异步计算</span></div><div class="line">                <span class="comment">// ……</span></div><div class="line">                <span class="comment">// 然后返回结果</span></div><div class="line">                <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">            });</div><div class="line"><span class="comment">//        while(!f.isDone())</span></div><div class="line"><span class="comment">//            ;</span></div><div class="line">        f.get();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>虽然<code>Future</code>以及相关使用方法提供了异步执行任务的能力，但是对于结果的获取却是很不方便，只能通过阻塞或者轮询的方式得到任务的结果。阻塞的方式显然和我们的异步编程的初衷相违背，轮询的方式又会耗费无谓的CPU资源，而且也不能及时地得到计算结果，为什么不能用观察者设计模式当计算结果完成及时通知监听者呢？</p>
<p>很多语言，比如Node.js，采用回调的方式实现异步编程。Java的一些框架，比如Netty，自己扩展了Java的 <code>Future</code>接口，提供了<code>addListener</code>等多个扩展方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ChannelFuture future = bootstrap.connect(<span class="keyword">new</span> InetSocketAddress(host, port));</div><div class="line">      future.addListener(<span class="keyword">new</span> ChannelFutureListener()</div><div class="line">      {</div><div class="line">              <span class="annotation">@Override</span></div><div class="line">              <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span>(ChannelFuture future) <span class="keyword">throws</span> Exception</div><div class="line">              {</div><div class="line">                  <span class="keyword">if</span> (future.isSuccess()) {</div><div class="line">                      <span class="comment">// SUCCESS</span></div><div class="line">                  }</div><div class="line">                  <span class="keyword">else</span> {</div><div class="line">                      <span class="comment">// FAILURE</span></div><div class="line">                  }</div><div class="line">              }</div><div class="line">      });</div></pre></td></tr></table></figure>

<p>Google guava也提供了通用的扩展Future:<a href="http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/ListenableFuture.html" target="_blank" rel="external">ListenableFuture</a>、<a href="http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/SettableFuture.html" target="_blank" rel="external">SettableFuture</a>  以及辅助类<a href="http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html" target="_blank" rel="external">Futures</a>等,方便异步编程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> String name = ...;</div><div class="line">inFlight.add(name);</div><div class="line">ListenableFuture&lt;Result&gt; future = service.query(name);</div><div class="line">future.addListener(<span class="keyword">new</span> Runnable() {</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">    processedCount.incrementAndGet();</div><div class="line">    inFlight.remove(name);</div><div class="line">    lastProcessed.set(name);</div><div class="line">    logger.info(<span class="string">"Done with {0}"</span>, name);</div><div class="line">  }</div><div class="line">}, executor);</div></pre></td></tr></table></figure>

<p>Scala也提供了简单易用且功能强大的Future/Promise<a href="http://docs.scala-lang.org/overviews/core/futures.html" target="_blank" rel="external">异步编程模式</a>。</p>
<p>作为正统的Java类库，是不是应该做点什么，加强一下自身库的功能呢？</p>
<p>在Java 8中, 新增加了一个包含50个方法左右的类: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html" target="_blank" rel="external">CompletableFuture</a>，提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的方法。</p>
<p>下面我们就看一看它的功能吧。<br><a id="more"></a></p>
<h2 id="主动完成计算">主动完成计算</h2>
<p>CompletableFuture类实现了<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html" target="_blank" rel="external">CompletionStage</a>和<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html" target="_blank" rel="external">Future</a>接口，所以你还是可以像以前一样通过阻塞或者轮询的方式获得结果，尽管这种方式不推荐使用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> T 	<span class="title">get</span>()</div><div class="line"><span class="keyword">public</span> T 	<span class="title">get</span>(<span class="keyword">long</span> timeout, TimeUnit unit)</div><div class="line"><span class="keyword">public</span> T 	<span class="title">getNow</span>(T valueIfAbsent)</div><div class="line"><span class="keyword">public</span> T 	<span class="title">join</span>()</div></pre></td></tr></table></figure>

<p><code>getNow</code>有点特殊，如果结果已经计算完则返回结果或者抛出异常，否则返回给定的<code>valueIfAbsent</code>值。<br><code>join</code>返回计算的结果或者抛出一个unchecked异常(CompletionException)，它和<code>get</code>对抛出的异常的处理有些细微的区别，你可以运行下面的代码进行比较：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">});</div><div class="line"><span class="comment">//future.join();</span></div><div class="line">future.get();</div></pre></td></tr></table></figure>

<p>尽管Future可以代表在另外的线程中执行的一段异步代码，但是你还是可以在本身线程中执行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Integer&gt; <span class="title">compute</span>() {</div><div class="line">    <span class="keyword">final</span> CompletableFuture&lt;Integer&gt; future = <span class="keyword">new</span> CompletableFuture&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> future;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>上面的代码中<code>future</code>没有关联任何的<code>Callback</code>、线程池、异步任务等，如果客户端调用<code>future.get</code>就会一致傻等下去。你可以通过下面的代码完成一个计算，触发客户端的等待：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f.complete(<span class="number">100</span>);</div></pre></td></tr></table></figure>

<p>当然你也可以抛出一个异常，而不是一个成功的计算结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f.completeExceptionally(<span class="keyword">new</span> Exception());</div></pre></td></tr></table></figure>

<p>完整的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicMain</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Integer&gt; <span class="title">compute</span>() {</div><div class="line">        <span class="keyword">final</span> CompletableFuture&lt;Integer&gt; future = <span class="keyword">new</span> CompletableFuture&lt;&gt;();</div><div class="line">        <span class="keyword">return</span> future;</div><div class="line">    }</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> Exception {</div><div class="line">        <span class="keyword">final</span> CompletableFuture&lt;Integer&gt; f = compute();</div><div class="line">        class Client extends Thread {</div><div class="line">            CompletableFuture&lt;Integer&gt; f;</div><div class="line">            Client(String threadName, CompletableFuture&lt;Integer&gt; f) {</div><div class="line">                <span class="keyword">super</span>(threadName);</div><div class="line">                <span class="keyword">this</span>.f = f;</div><div class="line">            }</div><div class="line">            <span class="annotation">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">                <span class="keyword">try</span> {</div><div class="line">                    System.out.println(<span class="keyword">this</span>.getName() + <span class="string">": "</span> + f.get());</div><div class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">                    e.printStackTrace();</div><div class="line">                } <span class="keyword">catch</span> (ExecutionException e) {</div><div class="line">                    e.printStackTrace();</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="keyword">new</span> Client(<span class="string">"Client1"</span>, f).start();</div><div class="line">        <span class="keyword">new</span> Client(<span class="string">"Client2"</span>, f).start();</div><div class="line">        System.out.println(<span class="string">"waiting"</span>);</div><div class="line">        f.complete(<span class="number">100</span>);</div><div class="line">        <span class="comment">//f.completeExceptionally(new Exception());</span></div><div class="line">        System.in.read();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>可以看到我们并没有把<code>f.complete(100);</code>放在另外的线程中去执行，但是在大部分情况下我们可能会用一个线程池去执行这些异步任务。<code>CompletableFuture.complete()</code>、<code>CompletableFuture.completeExceptionally</code>只能被调用一次。但是我们有两个后门方法可以重设这个值:<code>obtrudeValue</code>、<code>obtrudeException</code>，但是使用的时候要小心，因为<code>complete</code>已经触发了客户端，有可能导致客户端会得到不期望的结果。</p>
<h2 id="创建CompletableFuture对象。">创建CompletableFuture对象。</h2>
<p><code>CompletableFuture.completedFuture</code>是一个静态辅助方法，用来返回一个已经计算好的<code>CompletableFuture</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title">completedFuture</span>(U value)</div></pre></td></tr></table></figure>

<p>而以下四个静态方法用来为一段异步执行的代码创建<code>CompletableFuture</code>对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; 	<span class="title">runAsync</span>(Runnable runnable)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; 	<span class="title">runAsync</span>(Runnable runnable, Executor executor)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">supplyAsync</span>(Supplier&lt;U&gt; supplier)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">supplyAsync</span>(Supplier&lt;U&gt; supplier, Executor executor)</div></pre></td></tr></table></figure>

<p>以<code>Async</code>结尾并且没有指定<code>Executor</code>的方法会使用<code>ForkJoinPool.commonPool()</code>作为它的线程池执行异步代码。</p>
<p><code>runAsync</code>方法也好理解，它以<code>Runnable</code>函数式接口类型为参数，所以<code>CompletableFuture</code>的计算结果为空。<br><br><code>supplyAsync</code>方法以<code>Supplier&lt;U&gt;</code>函数式接口类型为参数,<code>CompletableFuture</code>的计算结果类型为<code>U</code>。</p>
<p>因为方法的参数类型都是函数式接口，所以可以使用lambda表达式实现异步任务，比如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">    <span class="comment">//长时间的计算任务</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"·00"</span>;</div><div class="line">});</div></pre></td></tr></table></figure>

<h2 id="计算结果完成时的处理">计算结果完成时的处理</h2>
<p>当<code>CompletableFuture</code>的计算结果完成，或者抛出异常的时候，我们可以执行特定的<code>Action</code>。主要是下面的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; 	<span class="title">whenComplete</span>(BiConsumer&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> Throwable&gt; action)</div><div class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; 	<span class="title">whenCompleteAsync</span>(BiConsumer&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> Throwable&gt; action)</div><div class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt; 	<span class="title">whenCompleteAsync</span>(BiConsumer&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> Throwable&gt; action, Executor executor)</div><div class="line"><span class="keyword">public</span> CompletableFuture&lt;T&gt;     <span class="title">exceptionally</span>(Function&lt;Throwable,? extends T&gt; fn)</div></pre></td></tr></table></figure>

<p>可以看到<code>Action</code>的类型是<code>BiConsumer&lt;? super T,? super Throwable&gt;</code>，它可以处理正常的计算结果，或者异常情况。<br>方法不以<code>Async</code>结尾，意味着<code>Action</code>使用相同的线程执行，而<code>Async</code>可能会使用其它的线程去执行(如果使用相同的线程池，也可能会被同一个线程选中执行)。</p>
<p>注意这几个方法都会返回<code>CompletableFuture</code>，当<code>Action</code>执行完毕后它的结果返回原始的<code>CompletableFuture</code>的计算结果或者返回异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random rand = <span class="keyword">new</span> Random();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> t = System.currentTimeMillis();</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> getMoreData() {</div><div class="line">        System.out.println(<span class="string">"begin to start compute"</span>);</div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            Thread.sleep(<span class="number">10000</span>);</div><div class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        }</div><div class="line">        System.out.println(<span class="string">"end to start compute. passed "</span> + (System.currentTimeMillis() - t)/<span class="number">1000</span> + <span class="string">" seconds"</span>);</div><div class="line">        <span class="keyword">return</span> rand.nextInt(<span class="number">1000</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> Exception {</div><div class="line">        CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(Main::getMoreData);</div><div class="line">        Future&lt;Integer&gt; f = future.whenComplete((v, e) -&gt; {</div><div class="line">            System.out.println(v);</div><div class="line">            System.out.println(e);</div><div class="line">        });</div><div class="line">        System.out.println(f.get());</div><div class="line">        System.in.read();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>exceptionally</code>方法返回一个新的CompletableFuture，当原始的CompletableFuture抛出异常的时候，就会触发这个CompletableFuture的计算，调用function计算值，否则如果原始的CompletableFuture正常计算完后，这个新的CompletableFuture也计算完成，它的值和原始的CompletableFuture的计算的值相同。也就是这个<code>exceptionally</code>方法用来处理异常的情况。</p>
<p>下面一组方法虽然也返回CompletableFuture对象，但是对象的值和原来的CompletableFuture计算的值不同。当原先的CompletableFuture的值计算完成或者抛出异常的时候，会触发这个CompletableFuture对象的计算，结果由<code>BiFunction</code>参数计算而得。因此这组方法兼有<code>whenComplete</code>和转换的两个功能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">handle</span>(BiFunction&lt;? <span class="keyword">super</span> T,Throwable,? extends U&gt; fn)</div><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">handleAsync</span>(BiFunction&lt;? <span class="keyword">super</span> T,Throwable,? extends U&gt; fn)</div><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">handleAsync</span>(BiFunction&lt;? <span class="keyword">super</span> T,Throwable,? extends U&gt; fn, Executor executor)</div></pre></td></tr></table></figure>

<p>同样，不以<code>Async</code>结尾的方法由原来的线程计算，以<code>Async</code>结尾的方法由默认的线程池<code>ForkJoinPool.commonPool()</code>或者指定的线程池<code>executor</code>运行。</p>
<h2 id="转换">转换</h2>
<p><code>CompletableFuture</code>可以作为monad(单子)和functor。由于回调风格的实现，我们不必因为等待一个计算完成而阻塞着调用线程，而是告诉<code>CompletableFuture</code>当计算完成的时候请执行某个<code>function</code>。而且我们还可以将这些操作串联起来，或者将<code>CompletableFuture</code>组合起来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">thenApply</span>(Function&lt;? <span class="keyword">super</span> T,? extends U&gt; fn)</div><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">thenApplyAsync</span>(Function&lt;? <span class="keyword">super</span> T,? extends U&gt; fn)</div><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">thenApplyAsync</span>(Function&lt;? <span class="keyword">super</span> T,? extends U&gt; fn, Executor executor)</div></pre></td></tr></table></figure>

<p>这一组函数的功能是当原来的CompletableFuture计算完后，将结果传递给函数<code>fn</code>，将<code>fn</code>的结果作为新的<code>CompletableFuture</code>计算结果。因此它的功能相当于将<code>CompletableFuture&lt;T&gt;</code>转换成<code>CompletableFuture&lt;U&gt;</code>。</p>
<p>这三个函数的区别和上面介绍的一样，不以<code>Async</code>结尾的方法由原来的线程计算，以<code>Async</code>结尾的方法由默认的线程池<code>ForkJoinPool.commonPool()</code>或者指定的线程池<code>executor</code>运行。Java的CompletableFuture类总是遵循这样的原则，下面就不一一赘述了。</p>
<p>使用例子如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">    <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">});</div><div class="line">CompletableFuture&lt;String&gt; f =  future.thenApplyAsync(i -&gt; i * <span class="number">10</span>).thenApply(i -&gt; i.toString());</div><div class="line">System.out.println(f.get()); <span class="comment">//"1000"</span></div></pre></td></tr></table></figure>

<p>需要注意的是，这些转换并不是马上执行的，也不会阻塞，而是在前一个stage完成后继续执行。</p>
<p>它们与<code>handle</code>方法的区别在于<code>handle</code>方法会处理正常计算值和异常，因此它可以屏蔽异常，避免异常继续抛出。而<code>thenApply</code>方法只是用来处理正常值，因此一旦有异常就会抛出。</p>
<h2 id="纯消费(执行Action)">纯消费(执行Action)</h2>
<p>上面的方法是当计算完成的时候，会生成新的计算结果(<code>thenApply</code>, <code>handle</code>)，或者返回同样的计算结果<code>whenComplete</code>，<code>CompletableFuture</code>还提供了一种处理结果的方法，只对结果执行<code>Action</code>,而不返回新的计算值，因此计算值为<code>Void</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; 	<span class="title">thenAccept</span>(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</div><div class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; 	<span class="title">thenAcceptAsync</span>(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</div><div class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; 	<span class="title">thenAcceptAsync</span>(Consumer&lt;? <span class="keyword">super</span> T&gt; action, Executor executor)</div></pre></td></tr></table></figure>

<p>看它的参数类型也就明白了，它们是函数式接口<code>Consumer</code>，这个接口只有输入，没有返回值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">    <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">});</div><div class="line">CompletableFuture&lt;Void&gt; f =  future.thenAccept(System.out::println);</div><div class="line">System.out.println(f.get());</div></pre></td></tr></table></figure>

<p><code>thenAcceptBoth</code>以及相关方法提供了类似的功能，当两个CompletionStage都正常完成计算的时候，就会执行提供的<code>action</code>，它用来组合另外一个异步的结果。<br><code>runAfterBoth</code>是当两个CompletionStage都正常完成计算的时候,执行一个Runnable，这个Runnable并不使用计算的结果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; 	<span class="title">thenAcceptBoth</span>(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U&gt; action)</div><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; 	<span class="title">thenAcceptBothAsync</span>(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U&gt; action)</div><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; 	<span class="title">thenAcceptBothAsync</span>(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U&gt; action, Executor executor)</div><div class="line"><span class="keyword">public</span>     CompletableFuture&lt;Void&gt; 	<span class="title">runAfterBoth</span>(CompletionStage&lt;?&gt; other,  Runnable action)</div></pre></td></tr></table></figure>

<p>例子如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">    <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">});</div><div class="line">CompletableFuture&lt;Void&gt; f =  future.thenAcceptBoth(CompletableFuture.completedFuture(<span class="number">10</span>), (x, y) -&gt; System.out.println(x * y));</div><div class="line">System.out.println(f.get());</div></pre></td></tr></table></figure>

<p>更彻底地，下面一组方法当计算完成的时候会执行一个Runnable,与<code>thenAccept</code>不同，Runnable并不使用CompletableFuture计算的结果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; 	<span class="title">thenRun</span>(Runnable action)</div><div class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; 	<span class="title">thenRunAsync</span>(Runnable action)</div><div class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; 	<span class="title">thenRunAsync</span>(Runnable action, Executor executor)</div></pre></td></tr></table></figure>

<p>因此先前的CompletableFuture计算的结果被忽略了,这个方法返回<code>CompletableFuture&lt;Void&gt;</code>类型的对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">    <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">});</div><div class="line">CompletableFuture&lt;Void&gt; f =  future.thenRun(() -&gt; System.out.println(<span class="string">"finished"</span>));</div><div class="line">System.out.println(f.get());</div></pre></td></tr></table></figure>

<blockquote>
<p>因此，你可以根据方法的参数的类型来加速你的记忆。<code>Runnable</code>类型的参数会忽略计算的结果，<code>Consumer</code>是纯消费计算结果，<code>BiConsumer</code>会组合另外一个<code>CompletionStage</code>纯消费，<code>Function</code>会对计算结果做转换，<code>BiFunction</code>会组合另外一个<code>CompletionStage</code>的计算结果做转换。</p>
</blockquote>
<h2 id="组合">组合</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">thenCompose</span>(Function&lt;? <span class="keyword">super</span> T,? extends CompletionStage&lt;U&gt;&gt; fn)</div><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">thenComposeAsync</span>(Function&lt;? <span class="keyword">super</span> T,? extends CompletionStage&lt;U&gt;&gt; fn)</div><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">thenComposeAsync</span>(Function&lt;? <span class="keyword">super</span> T,? extends CompletionStage&lt;U&gt;&gt; fn, Executor executor)</div></pre></td></tr></table></figure>

<p>这一组方法接受一个Function作为参数，这个Function的输入是当前的CompletableFuture的计算值，返回结果将是一个新的CompletableFuture，这个新的CompletableFuture会组合原来的CompletableFuture和函数返回的CompletableFuture。因此它的功能类似:</p>
<pre>
A +--> B +---> C
</pre>

<p>记住，<code>thenCompose</code>返回的对象并不一是函数<code>fn</code>返回的对象，如果原来的<code>CompletableFuture</code>还没有计算出来，它就会生成一个新的组合后的CompletableFuture。</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">    <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">});</div><div class="line">CompletableFuture&lt;String&gt; f =  future.thenCompose( i -&gt; {</div><div class="line">    <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">        <span class="keyword">return</span> (i * <span class="number">10</span>) + <span class="string">""</span>;</div><div class="line">    });</div><div class="line">});</div><div class="line">System.out.println(f.get()); <span class="comment">//1000</span></div></pre></td></tr></table></figure>

<p>而下面的一组方法<code>thenCombine</code>用来复合另外一个CompletionStage的结果。它的功能类似：</p>
<p><pre><br>A +<br>  |<br>  +------&gt; C<br>  +------^<br>B +<br></pre><br>两个CompletionStage是并行执行的，它们之间并没有先后依赖顺序，<code>other</code>并不会等待先前的<code>CompletableFuture</code>执行完毕后再执行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; 	<span class="title">thenCombine</span>(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U,? extends V&gt; fn)</div><div class="line"><span class="keyword">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; 	<span class="title">thenCombineAsync</span>(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U,? extends V&gt; fn)</div><div class="line"><span class="keyword">public</span> &lt;U,V&gt; CompletableFuture&lt;V&gt; 	<span class="title">thenCombineAsync</span>(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? <span class="keyword">super</span> T,? <span class="keyword">super</span> U,? extends V&gt; fn, Executor executor)</div></pre></td></tr></table></figure>

<p>其实从功能上来讲,它们的功能更类似<code>thenAcceptBoth</code>，只不过<code>thenAcceptBoth</code>是纯消费，它的函数参数没有返回值，而<code>thenCombine</code>的函数参数<code>fn</code>有返回值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">    <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">});</div><div class="line">CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">    <span class="keyword">return</span> <span class="string">"abc"</span>;</div><div class="line">});</div><div class="line">CompletableFuture&lt;String&gt; f =  future.thenCombine(future2, (x,y) -&gt; y + <span class="string">"-"</span> + x);</div><div class="line">System.out.println(f.get()); <span class="comment">//abc-100</span></div></pre></td></tr></table></figure>

<h2 id="Either">Either</h2>
<p><code>thenAcceptBoth</code>和<code>runAfterBoth</code>是当两个CompletableFuture都计算完成，而我们下面要了解的方法是当任意一个CompletableFuture计算完成的时候就会执行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; 	<span class="title">acceptEither</span>(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="keyword">super</span> T&gt; action)</div><div class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; 	<span class="title">acceptEitherAsync</span>(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="keyword">super</span> T&gt; action)</div><div class="line"><span class="keyword">public</span> CompletableFuture&lt;Void&gt; 	<span class="title">acceptEitherAsync</span>(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="keyword">super</span> T&gt; action, Executor executor)</div><div class="line"></div><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">applyToEither</span>(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="keyword">super</span> T,U&gt; fn)</div><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">applyToEitherAsync</span>(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="keyword">super</span> T,U&gt; fn)</div><div class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; 	<span class="title">applyToEitherAsync</span>(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="keyword">super</span> T,U&gt; fn, Executor executor)</div></pre></td></tr></table></figure>

<p><code>acceptEither</code>方法是当任意一个CompletionStage完成的时候，<code>action</code>这个消费者就会被执行。这个方法返回<code>CompletableFuture&lt;Void&gt;</code><br><br><code>applyToEither</code>方法是当任意一个CompletionStage完成的时候，<code>fn</code>会被执行，它的返回值会当作新的<code>CompletableFuture&lt;U&gt;</code>的计算结果。</p>
<p>下面这个例子有时会输出<code>100</code>,有时候会输出<code>200</code>,哪个Future先完成就会根据它的结果计算。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Random rand = <span class="keyword">new</span> Random();</div><div class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        Thread.sleep(<span class="number">10000</span> + rand.nextInt(<span class="number">1000</span>));</div><div class="line">    } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">        e.printStackTrace();</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">});</div><div class="line">CompletableFuture&lt;Integer&gt; future2 = CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        Thread.sleep(<span class="number">10000</span> + rand.nextInt(<span class="number">1000</span>));</div><div class="line">    } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">        e.printStackTrace();</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">200</span>;</div><div class="line">});</div><div class="line">CompletableFuture&lt;String&gt; f =  future.applyToEither(future2,i -&gt; i.toString());</div></pre></td></tr></table></figure>

<h2 id="辅助方法_allOf_和_anyOf">辅助方法 <code>allOf</code> 和 <code>anyOf</code></h2>
<p>前面我们已经介绍了几个静态方法：<code>completedFuture</code>、<code>runAsync</code>、<code>supplyAsync</code>,下面介绍的这两个方法用来组合多个CompletableFuture。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; 	    <span class="title">allOf</span>(CompletableFuture&lt;?&gt;... cfs)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Object&gt; 	<span class="title">anyOf</span>(CompletableFuture&lt;?&gt;... cfs)</div></pre></td></tr></table></figure>

<p><code>allOf</code>方法是当所有的<code>CompletableFuture</code>都执行完后执行计算。<br><br><code>anyOf</code>方法是当任意一个<code>CompletableFuture</code>执行完后就会执行计算，计算的结果相同。</p>
<p>下面的代码运行结果有时是100,有时是&quot;abc&quot;。但是<code>anyOf</code>和<code>applyToEither</code>不同。<code>anyOf</code>接受任意多的CompletableFuture但是<code>applyToEither</code>只是判断两个CompletableFuture,<code>anyOf</code>返回值的计算结果是参数中其中一个CompletableFuture的计算结果，<code>applyToEither</code>返回值的计算结果却是要经过<code>fn</code>处理的。当然还有静态方法的区别，线程池的选择等。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Random rand = <span class="keyword">new</span> Random();</div><div class="line">CompletableFuture&lt;Integer&gt; future1 = CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        Thread.sleep(<span class="number">10000</span> + rand.nextInt(<span class="number">1000</span>));</div><div class="line">    } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">        e.printStackTrace();</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">});</div><div class="line">CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        Thread.sleep(<span class="number">10000</span> + rand.nextInt(<span class="number">1000</span>));</div><div class="line">    } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">        e.printStackTrace();</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="string">"abc"</span>;</div><div class="line">});</div><div class="line"><span class="comment">//CompletableFuture&lt;Void&gt; f =  CompletableFuture.allOf(future1,future2);</span></div><div class="line">CompletableFuture&lt;Object&gt; f =  CompletableFuture.anyOf(future1,future2);</div><div class="line">System.out.println(f.get());</div></pre></td></tr></table></figure>

<p>我想通过上面的介绍，应该把CompletableFuture的方法和功能介绍完了(<code>cancel</code>、<code>isCompletedExceptionally()</code>、<code>isDone()</code>以及继承于Object的方法无需介绍了， <code>toCompletableFuture()</code>返回CompletableFuture本身)，希望你能全面了解CompletableFuture强大的功能，并将它应用到Java的异步编程中。如果你有使用它的开源项目，可以留言分享一下。</p>
<h2 id="更进一步">更进一步</h2>
<p>如果你用过Guava的Future类，你就会知道它的<code>Futures</code>辅助类提供了很多便利方法，用来处理多个Future，而不像Java的CompletableFuture，只提供了<code>allOf</code>、<code>anyOf</code>两个方法。 比如有这样一个需求，将多个CompletableFuture组合成一个CompletableFuture，这个组合后的CompletableFuture的计算结果是个List,它包含前面所有的CompletableFuture的计算结果，guava的<code>Futures.allAsList</code>可以实现这样的功能，但是对于java CompletableFuture，我们需要一些辅助方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CompletableFuture&lt;List&lt;T&gt;&gt; <span class="title">sequence</span>(List&lt;CompletableFuture&lt;T&gt;&gt; futures) {</div><div class="line">       CompletableFuture&lt;Void&gt; allDoneFuture = CompletableFuture.allOf(futures.toArray(<span class="keyword">new</span> CompletableFuture[futures.size()]));</div><div class="line">       <span class="keyword">return</span> allDoneFuture.thenApply(v -&gt; futures.stream().map(CompletableFuture::join).collect(Collectors.&lt;T&gt;toList()));</div><div class="line">   }</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CompletableFuture&lt;Stream&lt;T&gt;&gt; <span class="title">sequence</span>(Stream&lt;CompletableFuture&lt;T&gt;&gt; futures) {</div><div class="line">       List&lt;CompletableFuture&lt;T&gt;&gt; futureList = futures.filter(f -&gt; f != <span class="keyword">null</span>).collect(Collectors.toList());</div><div class="line">       <span class="keyword">return</span> sequence(futureList);</div><div class="line">   }</div></pre></td></tr></table></figure>

<p>或者Java Future转CompletableFuture:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CompletableFuture&lt;T&gt; <span class="title">toCompletable</span>(Future&lt;T&gt; future, Executor executor) {</div><div class="line">    <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; {</div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            <span class="keyword">return</span> future.get();</div><div class="line">        } <span class="keyword">catch</span> (InterruptedException | ExecutionException e) {</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">        }</div><div class="line">    }, executor);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>github有多个项目可以实现Java CompletableFuture与其它Future (如Guava ListenableFuture)之间的转换，如<a href="https://github.com/spotify/futures-extra" target="_blank" rel="external">spotify/futures-extra</a>、<a href="https://github.com/lukas-krecan/future-converter" target="_blank" rel="external">future-converter</a>、<a href="https://github.com/scala/scala-java8-compat/blob/master/src/main/scala/scala/compat/java8/FutureConverters.scala" target="_blank" rel="external">scala/scala-java8-compat
</a>等。</p>
<h2 id="参考文档">参考文档</h2>
<ol>
<li><a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwivnI-BwJ7LAhWpg4MKHRr8CB0QFggcMAA&amp;url=http%3A%2F%2Fwww.nurkiewicz.com%2F2013%2F05%2Fjava-8-definitive-guide-to.html&amp;usg=AFQjCNHxOcm4uRrqZGl1ognxfaTtmB5k5A&amp;sig2=A5rXKfQuabGJMHXAhPUIgA&amp;bvm=bv.115339255,d.eWE" target="_blank" rel="external">Java 8: Definitive guide to CompletableFuture</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html" target="_blank" rel="external">https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html" target="_blank" rel="external">https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/02/29/Java-CompletableFuture/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html" target="_blank" rel="external">Future</a>是Java 5添加的类，用来描述一个异步计算的结果。你可以使用<code>isDone</code>方法检查计算是否完成，或者使用<code>get</code>阻塞住调用线程，直到计算完成返回结果，你也可以使用<code>cancel</code>方法停止任务的执行。</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicFuture</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> ExecutionException, InterruptedException {</div><div class="line">        ExecutorService es = Executors.newFixedThreadPool(<span class="number">10</span>);</div><div class="line">        Future&lt;Integer&gt; f = es.submit(() -&gt;{</div><div class="line">                <span class="comment">// 长时间的异步计算</span></div><div class="line">                <span class="comment">// ……</span></div><div class="line">                <span class="comment">// 然后返回结果</span></div><div class="line">                <span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">            });</div><div class="line"><span class="comment">//        while(!f.isDone())</span></div><div class="line"><span class="comment">//            ;</span></div><div class="line">        f.get();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>虽然<code>Future</code>以及相关使用方法提供了异步执行任务的能力，但是对于结果的获取却是很不方便，只能通过阻塞或者轮询的方式得到任务的结果。阻塞的方式显然和我们的异步编程的初衷相违背，轮询的方式又会耗费无谓的CPU资源，而且也不能及时地得到计算结果，为什么不能用观察者设计模式当计算结果完成及时通知监听者呢？</p>
<p>很多语言，比如Node.js，采用回调的方式实现异步编程。Java的一些框架，比如Netty，自己扩展了Java的 <code>Future</code>接口，提供了<code>addListener</code>等多个扩展方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ChannelFuture future = bootstrap.connect(<span class="keyword">new</span> InetSocketAddress(host, port));</div><div class="line">      future.addListener(<span class="keyword">new</span> ChannelFutureListener()</div><div class="line">      {</div><div class="line">              <span class="annotation">@Override</span></div><div class="line">              <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span>(ChannelFuture future) <span class="keyword">throws</span> Exception</div><div class="line">              {</div><div class="line">                  <span class="keyword">if</span> (future.isSuccess()) {</div><div class="line">                      <span class="comment">// SUCCESS</span></div><div class="line">                  }</div><div class="line">                  <span class="keyword">else</span> {</div><div class="line">                      <span class="comment">// FAILURE</span></div><div class="line">                  }</div><div class="line">              }</div><div class="line">      });</div></pre></td></tr></table></figure>

<p>Google guava也提供了通用的扩展Future:<a href="http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/ListenableFuture.html" target="_blank" rel="external">ListenableFuture</a>、<a href="http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/SettableFuture.html" target="_blank" rel="external">SettableFuture</a>  以及辅助类<a href="http://google.github.io/guava/releases/19.0/api/docs/com/google/common/util/concurrent/Futures.html" target="_blank" rel="external">Futures</a>等,方便异步编程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> String name = ...;</div><div class="line">inFlight.add(name);</div><div class="line">ListenableFuture&lt;Result&gt; future = service.query(name);</div><div class="line">future.addListener(<span class="keyword">new</span> Runnable() {</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">    processedCount.incrementAndGet();</div><div class="line">    inFlight.remove(name);</div><div class="line">    lastProcessed.set(name);</div><div class="line">    logger.info(<span class="string">"Done with {0}"</span>, name);</div><div class="line">  }</div><div class="line">}, executor);</div></pre></td></tr></table></figure>

<p>Scala也提供了简单易用且功能强大的Future/Promise<a href="http://docs.scala-lang.org/overviews/core/futures.html" target="_blank" rel="external">异步编程模式</a>。</p>
<p>作为正统的Java类库，是不是应该做点什么，加强一下自身库的功能呢？</p>
<p>在Java 8中, 新增加了一个包含50个方法左右的类: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html" target="_blank" rel="external">CompletableFuture</a>，提供了非常强大的Future的扩展功能，可以帮助我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的方法。</p>
<p>下面我们就看一看它的功能吧。<br>]]>
    
    </summary>
    
      <category term="CompletableFuture" scheme="http://colobu.com/tags/CompletableFuture/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Web框架性能基准测试 (Round 12)]]></title>
    <link href="http://colobu.com/2016/02/26/techempower-benchmarks-round12/"/>
    <id>http://colobu.com/2016/02/26/techempower-benchmarks-round12/</id>
    <published>2016-02-26T05:35:39.000Z</published>
    <updated>2016-03-14T03:37:54.878Z</updated>
    <content type="html"><![CDATA[<p>以前我发布过 techempower的 <a href="http://colobu.com/2015/11/27/techempower-benchmarks-round11/" target="_blank" rel="external">第11轮的测试</a>、<a href="http://colobu.com/2015/04/21/web-framework-benchmarks/" target="_blank" rel="external">第9轮的测试</a>，现在<a href="https://www.techempower.com/benchmarks/#section=data-r12&amp;hw=peak&amp;test=update" target="_blank" rel="external">第12轮的测试出来了</a>，结果肯定又会出人意料。</p>
<p>techempower的测试有好几个case，我们以每个request包含12个数据库的插入操作为例，看看各个web框架的性能，以TPS为指标排序(每秒返回的response多的在前面，性能越好)</p>
<p><a href="https://github.com/valyala/fasthttp" target="_blank" rel="external">go fasthttp</a> + postgresql居然排到了第一，啧啧,以前前几名都是C/C++的框架排第一,这次C++ web框架wt排在了第二。<br><br>nodejs + Mysql表现不俗，排在了第6位。<br><br>undertow edge + Postgres排在了第8位<br><br>依然没有netty的测试，我期待Netty的表现，应该比undertow要高吧。<br><br>Go原生web框架的表现不好，排名很低。<br><br>Java生态圈的框架如Spring、dropwizard等表现的不温不火。<br></p>
<p><img src="/2016/02/26/techempower-benchmarks-round12/testresult.png" alt="排名靠前的Web框架" title="排名靠前的Web框架"></p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/02/26/techempower-benchmarks-round12/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>以前我发布过 techempower的 <a href="http://colobu.com/2015/11/27/techempower-benchmarks-round11/" target="_blank" rel="external">第11轮的测试</a>、<a ]]>
    </summary>
    
      <category term="高并发编程" scheme="http://colobu.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[异步编程模型的说明]]></title>
    <link href="http://colobu.com/2016/02/26/Do-not-make-ignorance-as-fearless/"/>
    <id>http://colobu.com/2016/02/26/Do-not-make-ignorance-as-fearless/</id>
    <published>2016-02-26T04:23:56.000Z</published>
    <updated>2016-03-02T01:26:25.566Z</updated>
    <content type="html"><![CDATA[<p>前几日在看到Alexander Temerev在github上创建了一个项目<a href="https://github.com/atemerev/skynet" target="_blank" rel="external">skynet</a>,用来比较各语言的并发编程的性能，当时觉得这个项目挺有趣，也就翻译整理了一下，写了一篇文章：<a href="http://colobu.com/2016/02/23/1M-threads-microbenchmark/" target="_blank" rel="external">1百万线程的性能</a>,并且分享在<a href="http://colobu.com/2016/02/23/1M-threads-microbenchmark/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">开发者头条</a>上。</p>
<p>本身这个项目涉及的语言很多，测试代码也不一定完全合理，因此这个项目的issue中也有很多讨论，也有很多贡献者提供了其它语言的测试代码，或者完善了现有的测试代码。</p>
<p>很多读者也对这个项目感兴趣，也在我的文章中留言表达了自己的观点，我很赞赏这些有意义的观点。</p>
<p>这个项目的描述是&quot;Skynet 1M threads microbenchmark&quot;，我也采用了这样的描述作为文章的标题。当然大家都知道这个项目比较的并不是1百万线程的性能，<br>而是各个语言中为并发编程实现的类似线程的编程模型，这个各个语言为并发编程而做的努力。</p>
<p>当然，每个编程语言实现的并发编程模型也不尽相同，我们没办法用一个统一的概念称呼它们，姑且叫做&quot;线程”吧。</p>
<p>各种语言的编程模型从内存实现上可以分为两类：</p>
<ol>
<li><strong>基于共享内存的模型</strong>：采用单一的统一的内存镜像，并发单元通过共享内存进行通讯，比如Java中的线程</li>
<li><strong>基于消息传递的模型</strong>：每个并发单元包含自有的内存，并发单元通过消息交换进行通讯，比如go channel，Scala Actor等</li>
</ol>
<p>从实现上来说，至少有三种模型实现：</p>
<ol>
<li><strong>基于线程的实现</strong>： 大部分的操作系统（轻量级的进程、内核级、用户级）、Java、C、C++都是这种实现</li>
<li><strong>基于Actor的实现</strong>：Scala, Erlang等</li>
<li><strong>基于Coroutine的实现</strong>：Haskell, Python等</li>
</ol>
<p>当然，有些语言也不止一种实现，比如Python还有Pykka，它是一种actor的实现。 Java也可以使用Akka Actor实现Actor模型,比如Go实现了goroutine和CSP模型(channel)。</p>
<p>Paul Butcher写了一本书，叫<a href="https://book.douban.com/subject/26337939/" target="_blank" rel="external">七周七并发模型</a>, 对并发编程想了解的不妨看看。</p>
<h2 id="参考文档：">参考文档：</h2>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Light-weight_process" target="_blank" rel="external">https://en.wikipedia.org/wiki/Light-weight_process</a></li>
<li><a href="https://en.wikipedia.org/wiki/Coroutine" target="_blank" rel="external">https://en.wikipedia.org/wiki/Coroutine</a></li>
<li><a href="https://en.wikipedia.org/wiki/Green_threads" target="_blank" rel="external">https://en.wikipedia.org/wiki/Green_threads</a></li>
<li><a href="http://tutorials.jenkov.com/java-concurrency/concurrency-models.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-concurrency/concurrency-models.html</a></li>
<li><a href="https://en.wikipedia.org/wiki/Concurrency_%28computer_science%29#Models" target="_blank" rel="external">https://en.wikipedia.org/wiki/Concurrency_%28computer_science%29#Models</a></li>
<li><a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes" target="_blank" rel="external">https://en.wikipedia.org/wiki/Communicating_sequential_processes</a></li>
<li><a href="http://www.amazon.com/Seven-Concurrency-Models-Weeks-Programmers/dp/1937785653" target="_blank" rel="external">http://www.amazon.com/Seven-Concurrency-Models-Weeks-Programmers/dp/1937785653</a></li>
<li><a href="http://berb.github.io/diploma-thesis/original/056_other.html" target="_blank" rel="external">http://berb.github.io/diploma-thesis/original/056_other.html</a></li>
<li><a href="http://grid.cs.gsu.edu/~tcpp/curriculum/sites/default/files/Programming%20with%20Concurrency%20-%20Threads%20Actors%20and%20Coroutines.pptx" target="_blank" rel="external">http://grid.cs.gsu.edu/~tcpp/curriculum/sites/default/files/Programming%20with%20Concurrency%20-%20Threads%20Actors%20and%20Coroutines.pptx</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/02/26/Do-not-make-ignorance-as-fearless/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>前几日在看到Alexander Temerev在github上创建了一个项目<a href="https://github.com/atemerev/skynet" target="_blank" rel="external">skynet</a>,用来比较各语言的并发编程]]>
    </summary>
    
      <category term="读书笔记" scheme="http://colobu.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ignite vs Hazelcast]]></title>
    <link href="http://colobu.com/2016/02/25/Ignite-vs-Hazelcast/"/>
    <id>http://colobu.com/2016/02/25/Ignite-vs-Hazelcast/</id>
    <published>2016-02-25T05:47:07.000Z</published>
    <updated>2016-02-25T07:33:13.259Z</updated>
    <content type="html"><![CDATA[<p>内存数据网格<a href="https://hazelcast.com/" target="_blank" rel="external">Hazelcast</a>和<a href="https://ignite.apache.org/" target="_blank" rel="external">Ignite</a>是大家非常熟悉的两种分布式内存数据网格工具。</p>
<p>Hazelcast 是一款基于 Java的内存数据网格，它的名称和公司的名称相同。hazelcast支持分布式队列，集合，map，线程池，锁，支持事务处理，分布式的监听和事件，支持动态增加集群节点，动态备份数据，动态failover等。</p>
<p>关于Apache Ignite 的中文介绍可以参考李玉珏写的<a href="http://my.oschina.net/liyuj/blog/516836" target="_blank" rel="external">Apache Ignite(一)：简介以及和Coherence、Gemfire、Redis等的比较</a>等系列文章。Ignite来源于尼基塔·伊万诺夫于2007年创建的GridGain系统公司开发的GridGain软件，2015年1月，GridGain通过Apache 2.0许可进入Apache的孵化器进行孵化，很快就于8月25日毕业并且成为Apache的顶级项目，9月28日即发布了1.4.0版，2016年1月初发布了1.5.0版，迭代速度很快。</p>
<p>两个产品背后的公司Hazelcast和GridGain都有风投的背影。所以产品在开源免费的基础上还会提供商业版的支持。</p>
<p>我没有在实际产品中使用过这两款产品，仅仅关注过这一类的产品，所以并不完全了解它们的详细特性，但是最近的一些有趣的争论引起了我的兴趣，特地跟踪了多个帖子，弄清楚了争论的来龙去脉，特地整理了一下，也算作为我的性能系列的文章的一部分吧。</p>
<p>最近的事件是这两个产品背后的公司进行了激烈的性能之争。</p>
<p>起因是GridGain发布了一篇性能报告：<a href="go.gridgain.com/Benchmark_GridGain_vs_Hazelcast.html">GridGain vs. Hazelcast Benchmarks</a>, 它比较了最新的GridGain Community Edition 1.5.0 和 最新的Hazelcast 3.6-EA2的性能，测试数据显示Ignite的性能要好于Hazelcast。相关的测试代码可以参照<a href="https://github.com/apacheignite/yardstick-ignite" target="_blank" rel="external">yardstick-ignite
</a>和<a href="https://github.com/gridgain/yardstick-hazelcast" target="_blank" rel="external">yardstick-hazelcast
</a></p>
<p>进一步GridGain还到Hazelcast的用户讨论组中踢馆子，他们把测试结果和代码发布在Hazelcast的邮件列表中，请Hazelcast的人review和提意见。嚣张啊！<br>Hazelcast的CEO Luck把这个帖子从邮件列表中删除了，并说：</p>
<blockquote>
<p>我们认为你在我的地盘上发布这样的性能数据是不合适的。 我们将删除这个帖子，请发布在你的地盘上。</p>
</blockquote>
<p>当然，这也不是GridGain第一次踢馆子，在2015初Apache孵化器Ignite项目的导师Konstantin Boudnik就到Tachyon 的邮件列表中比较这两个项目的缓存特性差异，也被认为是营销惨遭删帖。</p>
<a id="more"></a>
<p>Hazelcast的CEO Luck也进行了有理有据的<a href="http://blog.hazelcast.com/fake-benchmark-corrected-benchmark-shows-hazelcast-3-6-is-much-faster-than-gridgainapache-ignite-1-5/" target="_blank" rel="external">反驳</a>，它根据GridGain的测试代码在它们的测试环境中进行了测试，根据它们的测试结果，Hazelcast 3.6-EA 也比Ignite 1.4.1快(但是Luck在它的反驳文章中的标题中写的是Ignite 1.5，估计被气晕了)。</p>
<p>他也指出GridGain的测试不公正的地方：</p>
<ol>
<li>Hazelcast的备份设置为同步复制但是Ignite自己设置为异步复制</li>
<li>对Hazelcast的测试使用<code>map.put()</code>代替<code>map.set()</code>,但是Ignite的<code>put</code>等价Hazelcast的<code>map.set()</code>，因为它们才是无返回值的方法</li>
</ol>
<p>更正了这两处错误，Hazelcast重新做了测试，相关的<a href="https://github.com/Danny-Hazelcast/hzCmd-bench" target="_blank" rel="external">代码</a>和<a href="https://github.com/Danny-Hazelcast/hzCmd-bench/tree/master/lab/vs" target="_blank" rel="external">配置</a>也发布在github上。</p>
<p>最后他指出GridGain在测试中造假, 不符合Apache孵化器的准则，你不能污蔑啊，不能诽谤啊，造假得出的性能报告有什么意义。</p>
<p>这里是Hazelcast的<a href="https://hazelcast.com/resources/benchmark-gridgain/" target="_blank" rel="external">测试报告</a>。</p>
<p>相信Hazelcast CEO的文章鲜明地指出了GridGain错误，扭转了对他们不利的印象，而且反驳的观点也不错。我比较佩服他们争论的方式，比骂街文明多了。</p>
<p>GridGain创始人之一Dmitriy Setrakyan,也是他们的工程EVP，次日又进行了反驳，对Luck的造假指控进行了辩解。<br>首先他对Luck在邮件列表中删除他的帖子耿耿于怀，讽刺删帖行为是商业公司和Apache项目的区别。</p>
<p>GridGain根据Luck博客的反馈又重新进行了测试，结果表明大部分在AWS上的测试Ignite要比Hazelcast快50% ~100%,当然他文章的标题有点夸张，Ignite要比Hazelcast快两倍。</p>
<p>对于Luck指出的错误，他进行了解释：</p>
<ol>
<li><strong>Map.put() -&gt; Map.set()问题</strong>: GridGain更正了错误，但是测试结果没有显著的区别</li>
<li><strong>备份复制的问题</strong>：他说它们的配置和Hazelcast的完全一样。</li>
</ol>
<p>公说公有理，婆说婆有理，这场争论还会持续下去。对于开发者来说，有竞争未必是一件坏事。</p>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="http://www.theregister.co.uk/2016/02/22/gridgain_benchmark_hazelcast_bunfight/" target="_blank" rel="external">http://www.theregister.co.uk/2016/02/22/gridgain_benchmark_hazelcast_bunfight/</a></li>
<li>go.gridgain.com/Benchmark_GridGain_vs_Hazelcast.html</li>
<li><a href="http://blog.hazelcast.com/fake-benchmark-corrected-benchmark-shows-hazelcast-3-6-is-much-faster-than-gridgainapache-ignite-1-5/" target="_blank" rel="external">http://blog.hazelcast.com/fake-benchmark-corrected-benchmark-shows-hazelcast-3-6-is-much-faster-than-gridgainapache-ignite-1-5/</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/02/25/Ignite-vs-Hazelcast/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>内存数据网格<a href="https://hazelcast.com/" target="_blank" rel="external">Hazelcast</a>和<a href="https://ignite.apache.org/" target="_blank" rel="external">Ignite</a>是大家非常熟悉的两种分布式内存数据网格工具。</p>
<p>Hazelcast 是一款基于 Java的内存数据网格，它的名称和公司的名称相同。hazelcast支持分布式队列，集合，map，线程池，锁，支持事务处理，分布式的监听和事件，支持动态增加集群节点，动态备份数据，动态failover等。</p>
<p>关于Apache Ignite 的中文介绍可以参考李玉珏写的<a href="http://my.oschina.net/liyuj/blog/516836" target="_blank" rel="external">Apache Ignite(一)：简介以及和Coherence、Gemfire、Redis等的比较</a>等系列文章。Ignite来源于尼基塔·伊万诺夫于2007年创建的GridGain系统公司开发的GridGain软件，2015年1月，GridGain通过Apache 2.0许可进入Apache的孵化器进行孵化，很快就于8月25日毕业并且成为Apache的顶级项目，9月28日即发布了1.4.0版，2016年1月初发布了1.5.0版，迭代速度很快。</p>
<p>两个产品背后的公司Hazelcast和GridGain都有风投的背影。所以产品在开源免费的基础上还会提供商业版的支持。</p>
<p>我没有在实际产品中使用过这两款产品，仅仅关注过这一类的产品，所以并不完全了解它们的详细特性，但是最近的一些有趣的争论引起了我的兴趣，特地跟踪了多个帖子，弄清楚了争论的来龙去脉，特地整理了一下，也算作为我的性能系列的文章的一部分吧。</p>
<p>最近的事件是这两个产品背后的公司进行了激烈的性能之争。</p>
<p>起因是GridGain发布了一篇性能报告：<a href="go.gridgain.com/Benchmark_GridGain_vs_Hazelcast.html">GridGain vs. Hazelcast Benchmarks</a>, 它比较了最新的GridGain Community Edition 1.5.0 和 最新的Hazelcast 3.6-EA2的性能，测试数据显示Ignite的性能要好于Hazelcast。相关的测试代码可以参照<a href="https://github.com/apacheignite/yardstick-ignite" target="_blank" rel="external">yardstick-ignite
</a>和<a href="https://github.com/gridgain/yardstick-hazelcast" target="_blank" rel="external">yardstick-hazelcast
</a></p>
<p>进一步GridGain还到Hazelcast的用户讨论组中踢馆子，他们把测试结果和代码发布在Hazelcast的邮件列表中，请Hazelcast的人review和提意见。嚣张啊！<br>Hazelcast的CEO Luck把这个帖子从邮件列表中删除了，并说：</p>
<blockquote>
<p>我们认为你在我的地盘上发布这样的性能数据是不合适的。 我们将删除这个帖子，请发布在你的地盘上。</p>
</blockquote>
<p>当然，这也不是GridGain第一次踢馆子，在2015初Apache孵化器Ignite项目的导师Konstantin Boudnik就到Tachyon 的邮件列表中比较这两个项目的缓存特性差异，也被认为是营销惨遭删帖。</p>
]]>
    
    </summary>
    
      <category term="Ignite" scheme="http://colobu.com/tags/Ignite/"/>
    
      <category term="Hazelcast" scheme="http://colobu.com/tags/Hazelcast/"/>
    
      <category term="架构" scheme="http://colobu.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kafka Connect简介]]></title>
    <link href="http://colobu.com/2016/02/24/kafka-connect/"/>
    <id>http://colobu.com/2016/02/24/kafka-connect/</id>
    <published>2016-02-24T05:53:42.000Z</published>
    <updated>2016-02-24T07:18:53.697Z</updated>
    <content type="html"><![CDATA[<p>Kafka 0.9+增加了一个新的特性<strong>Kafka Connect</strong>,可以更方便的创建和管理数据流管道。它为Kafka和其它系统创建规模可扩展的、可信赖的流数据提供了一个简单的模型，通过<strong>connectors</strong>可以将大数据从其它系统导入到Kafka中，也可以从Kafka中导出到其它系统。Kafka Connect可以将完整的数据库注入到Kafka的Topic中，或者将服务器的系统监控指标注入到Kafka，然后像正常的Kafka流处理机制一样进行数据流处理。而导出工作则是将数据从Kafka Topic中导出到其它数据存储系统、查询系统或者离线分析系统等，比如数据库、<a href="https://www.elastic.co/" target="_blank" rel="external">Elastic Search</a>、<a href="https://ignite.apache.org/" target="_blank" rel="external">Apache Ignite</a>等。</p>
<p>Kafka Connect特性包括：</p>
<ul>
<li>Kafka connector通用框架,提供统一的集成API</li>
<li>同时支持分布式模式和单机模式</li>
<li>REST 接口，用来查看和管理Kafka connectors</li>
<li>自动化的offset管理，开发人员不必担心错误处理的影响</li>
<li>分布式、可扩展</li>
<li>流/批处理集成</li>
</ul>
<a id="more"></a>
<h2 id="流数据平台">流数据平台</h2>
<p><img src="http://cdn2.hubspot.net/hub/540072/hubfs/blog-files/Kafka_and_the_age_of_streaming_data_integration/Kafka_and_the_age_of_streaming_data_integration_image_stream_data_platform.png?t=1455819300250&amp;width=380" alt=""></p>
<p>基于Kafka， LinkedIn等一些大公司已经建立起架构类似的、可扩展的流数据平台。它包含两个功能，数据集成和流处理。<br>Kafka Connect则是为数据集成而生。</p>
<p><img src="http://cdn2.hubspot.net/hub/540072/hubfs/blog-files/Kafka_and_the_age_of_streaming_data_integration/Kafka_and_the_age_of_streaming_data_integration_imagine_kafka_logo-336253-edited.png?t=1455819300250&amp;width=195" alt=""></p>
<p>多年来，Kafka已经成为处理大数据流的平台标准，<a href="https://cwiki.apache.org/confluence/display/KAFKA/Powered+By" target="_blank" rel="external">成千上万的公司在使用它</a>。程序员在构建它们的平台的时候也遇到一些问题：</p>
<ul>
<li>Schema管理</li>
<li>容错</li>
<li>并行化</li>
<li>数据延迟</li>
<li>分发担保</li>
<li>运营与监控</li>
</ul>
<p>这些棘手的问题都要程序员去处理，如果有一个统一的框架去完成这些事情，将可以大大减少程序员的工作量，因此Kafka 0.9中提供了这一特性，负责处理这些问题。<br><img src="http://cdn2.hubspot.net/hub/540072/hubfs/blog-files/Kafka_and_the_age_of_streaming_data_integration/Kafka_and_the_age_of_streaming_data_integration_image_kafka_connect.png?t=1455819300250&amp;width=580&amp;height=435" alt=""></p>
<p>Kafka背后的公司confluent鼓励社区创建更多的开源的connector，将Kafka生态圈壮大起来，促进Kafka Connnect的应用。</p>
<p>Kafka Connnect有两个核心概念：Source和Sink。 Source负责导入数据到Kafka，Sink负责从Kafka导出数据，它们都被称为Connector。<br><img src="http://cdn2.hubspot.net/hub/540072/hubfs/blog-files/Kafka_and_the_age_of_streaming_data_integration/Kafka_and_the_age_of_streaming_data_integration_image_sources_sinks.png?t=1455819300250&amp;width=580&amp;height=435" alt=""></p>
<p>当前Kafka Connect支持两种分发担保：at least once (至少一次) 和 at most once(至多一次)，exactly once将在未来支持。</p>
<p>当前已有的Connectors包括：</p>
<table><tbody><tr><td style="text-align: center;"><strong>Connector Name</strong></td><td style="text-align: center;"><strong>Owner</strong></td><td style="text-align: center;"><strong>Status</strong></td></tr><tr><td style="text-align: center;">&nbsp;<a href="http://docs.confluent.io/2.0.0/connect/connect-hdfs/docs/index.html" target="_blank">HDFS</a></td><td style="text-align: center;"><a href="mailto:confluent-platform@googlegroups.com" target="_blank" rel="external">confluent-platform@googlegroups.com</a></td><td style="text-align: center;"><a href="http://www.confluent.io/developer#download" target="_blank" rel="external">Confluent&nbsp;supported</a></td></tr><tr><td style="text-align: center;"><a href="http://docs.confluent.io/2.0.0/connect/connect-jdbc/docs/index.html" target="_blank">JDBC</a></td><td style="text-align: center;"><a href="mailto:confluent-platform@googlegroups.com" target="_blank" rel="external">confluent-platform@googlegroups.com</a></td><td style="text-align: center;"><a href="http://www.confluent.io/developer#download" target="_blank" rel="external"><span>Confluent&nbsp;supported</span></a></td></tr><tr><td style="text-align: center;"><a href="https://github.com/debezium" target="_blank">Debezium - CDC Sources</a></td><td style="text-align: center;"><a href="mailto:debezium@gmail.com" target="_blank">debezium@gmail.com</a></td><td style="text-align: center;"><span>Community project</span>&nbsp;&nbsp;</td></tr><tr><td style="text-align: center;">&nbsp;<a href="https://github.com/DataReply/kafka-connect-mongodb" target="_blank" rel="external">MongoDB Source</a></td><td style="text-align: center;">&nbsp;<a href="mailto:a.patelli@reply.de" target="_blank">a.patelli@reply.de</a><span><br>&nbsp;</span><a href="mailto:a.topchyan@reply.de" target="_blank">a.topchyan@reply.de</a></td><td style="text-align: center;">In progress&nbsp;</td></tr><tr><td style="text-align: center;">&nbsp;<a href="https://github.com/evokly/kafka-connect-mqtt" target="_blank" rel="external"><span>MQTT Source</span></a></td><td style="text-align: center;"><a href="mailto:tomasz.pietrzak@evok.ly" target="_blank">tomasz.pietrzak@evok.ly</a></td><td style="text-align: center;">Community project&nbsp;</td></tr><tr><td style="text-align: center;">&nbsp;<a href="https://github.com/wushujames/kafka-mysql-connector" target="_blank" rel="external"><span>MySQL Binlog Source</span></a></td><td style="text-align: center;"><a href="mailto:wushujames@gmail.com" class="external-link" rel="external" target="_blank">wushujames@gmail.com</a></td><td style="text-align: center;">In progress&nbsp;</td></tr><tr><td style="text-align: center;"><a href="https://github.com/rollulus/twitter-kafka-connect" target="_blank" rel="external"><span>Twitter Source</span></a></td><td style="text-align: center;">&nbsp;<a href="mailto:rollulus@xs4all.nl" target="_blank" rel="external">rollulus@xs4all.nl</a></td><td style="text-align: center;">In progress&nbsp;&nbsp;</td></tr><tr><td style="text-align: center;"><span>&nbsp;</span><a href="https://github.com/andrewstevenson/stream-reactor/tree/master/kafka-connect-cassandra" target="_blank">Cassandra Sink</a></td><td style="text-align: center;"><span>&nbsp;</span><a href="https://github.com/andrewstevenson/stream-reactor/tree/master/kafka-connect-cassandra" target="_blank">Cassandra Sink</a>&nbsp;</td><td style="text-align: center;">Community project&nbsp;</td></tr><tr><td style="text-align: center;"><a href="https://github.com/ksenji/kafka-connect-es" target="_blank">Elastic Search Sink</a></td><td style="text-align: center;"><span><a href="mailto:ksenji@gmail.com" target="_blank" rel="external">ksenji@gmail.com</a></span></td><td style="text-align: center;">Community project</td></tr><tr><td style="text-align: center;"><a href="https://github.com/hannesstockner/kafka-connect-elasticsearch" target="_blank" rel="external">Elastic Search Sink</a></td><td style="text-align: center;"><span><a href="mailto:hannes.stockner@gmail.com" class="external-link" rel="external" target="_blank">hannes.stockner@gmail.com</a></span></td><td style="text-align: center;">In progress</td></tr><tr><td style="text-align: center;"><a href="https://github.com/DataReply/kafka-connect-elastic-search-sink" target="_blank" rel="external">Elastic Search Sink</a></td><td style="text-align: center;"><span><a href="mailto:a.patelli@reply.de" target="_blank">a.patelli@reply.de</a><span><br>&nbsp;</span><a href="mailto:a.topchyan@reply.de" target="_blank">a.topchyan@reply.de</a></span></td><td style="text-align: center;">In progress&nbsp;</td></tr><tr><td style="text-align: center;"><a href="https://github.com/apache/ignite/tree/master/modules/kafka" target="_blank" rel="external">Apache Ignite Sink</a></td><td style="text-align: center;"><a href="https://ignite.apache.org/" target="_blank" rel="external"><span>Apache Ignite Project</span></a></td><td style="text-align: center;"><p>Community project</p><p><span style="font-size: 13px;">(Planned for Apache Ignite 1.6 Release)</span></p></td></tr></tbody></table>

<p>Connectors的发布和开发可以参照<a href="http://kafka.apache.org/documentation.html#connect_user" target="_blank" rel="external">官方文档</a>。如果以前你通过producer API/consumer API写了一些导入导出的功能，不妨尝试一下换成Kafka Connect，看看是否简化了你的代码，提高了应用可扩展和容错的能力。</p>
<h2 id="参考文档">参考文档</h2>
<ol>
<li><a href="http://www.confluent.io/blog/announcing-kafka-connect-building-large-scale-low-latency-data-pipelines" target="_blank" rel="external">http://www.confluent.io/blog/announcing-kafka-connect-building-large-scale-low-latency-data-pipelines</a></li>
<li><a href="http://www.confluent.io/developers/connectors" target="_blank" rel="external">http://www.confluent.io/developers/connectors</a></li>
<li><a href="http://kafka.apache.org/documentation.html#connect" target="_blank" rel="external">http://kafka.apache.org/documentation.html#connect</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/02/24/kafka-connect/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>Kafka 0.9+增加了一个新的特性<strong>Kafka Connect</strong>,可以更方便的创建和管理数据流管道。它为Kafka和其它系统创建规模可扩展的、可信赖的流数据提供了一个简单的模型，通过<strong>connectors</strong>可以将大数据从其它系统导入到Kafka中，也可以从Kafka中导出到其它系统。Kafka Connect可以将完整的数据库注入到Kafka的Topic中，或者将服务器的系统监控指标注入到Kafka，然后像正常的Kafka流处理机制一样进行数据流处理。而导出工作则是将数据从Kafka Topic中导出到其它数据存储系统、查询系统或者离线分析系统等，比如数据库、<a href="https://www.elastic.co/" target="_blank" rel="external">Elastic Search</a>、<a href="https://ignite.apache.org/" target="_blank" rel="external">Apache Ignite</a>等。</p>
<p>Kafka Connect特性包括：</p>
<ul>
<li>Kafka connector通用框架,提供统一的集成API</li>
<li>同时支持分布式模式和单机模式</li>
<li>REST 接口，用来查看和管理Kafka connectors</li>
<li>自动化的offset管理，开发人员不必担心错误处理的影响</li>
<li>分布式、可扩展</li>
<li>流/批处理集成</li>
</ul>
]]>
    
    </summary>
    
      <category term="Kafka" scheme="http://colobu.com/tags/Kafka/"/>
    
      <category term="大数据" scheme="http://colobu.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[1百万线程的性能]]></title>
    <link href="http://colobu.com/2016/02/23/1M-threads-microbenchmark/"/>
    <id>http://colobu.com/2016/02/23/1M-threads-microbenchmark/</id>
    <published>2016-02-23T05:22:45.000Z</published>
    <updated>2016-03-02T01:25:01.534Z</updated>
    <content type="html"><![CDATA[<p>瑞士的金融软件工程师和创业者<a href="https://www.linkedin.com/in/temerev" target="_blank" rel="external">Alexander Temerev</a>在github上创建了一个项目<a href="https://github.com/atemerev/skynet" target="_blank" rel="external">skynet
</a>,用来测试各语言(框架)的多线程并行计算的性能，并得到了一些有用的数据。本文翻译整理自这个项目的说明。</p>
<p>测试并行性能的代码逻辑很简单：创建一个actor(goroutine,或者其它语言中类似的并发库)，它会创建10个子actor,然后每个子actor再创建10个子actor，一直这样创建下去，直到创建了1百万个actor，每个actor包含一个唯一的数字(0到999999)。然后最底层的actor把它们的数字返回给父actor，父actor计算总和后再把结果返回给它的父actor，一直返回直到根actor，这样根actor的包含数字就是0到999999的和，结果应该为499999500000。</p>
<p>所以测试代码的逻辑就是并行计算0到999999的和，测试各种语言的并行库性能。</p>
<p>当然标题是不准确的，只是借用了这个项目的名称，1百万的线程不太可能在一台机器上创建，Alexander Temerev比较的是一些语言的并发框架的实现，聪明的读者应该明白项目性能测试的是什么东西，<br>它包括了Scala Actor、Scala-Future、Go、erlang、haskell、C# Core、C# TPL、RxJava、node-bluebird、python、rust等语言/框架的测试代码。所以大家不必吐槽标题中的&quot;线程&quot;，其实比较的是异步编程模型的性能。<br><a id="more"></a><br><img src="https://upload.wikimedia.org/wikipedia/commons/d/d3/IBM_Blue_Gene_P_supercomputer.jpg" alt="图片来自维基百科" title="图片来自维基百科"></p>
<p>作者列出了在三种测试环境中性能结果：</p>
<h3 id="测试环境一：垃圾的Macbook_12&quot;_&#39;2015,_Core_M,_OS_X">测试环境一：垃圾的Macbook 12&quot; &#39;2015, Core M, OS X</h3>
<h4 id="Actors">Actors</h4>
<ul>
<li>Scala/Akka: 6379 ms.</li>
<li>Erlang (non-HIPE): 4414 ms.</li>
<li>Erlang (HIPE): 3999 ms.</li>
</ul>
<h4 id="Coroutines_/_channels">Coroutines / channels</h4>
<ul>
<li>Haskell (GHC 7.10.3): 6181 ms.</li>
<li>Go: 979 ms.</li>
</ul>
<h4 id="Futures_/_promises">Futures / promises</h4>
<ul>
<li>.NET Core: 650 ms.</li>
<li>RxJava: 219 ms.</li>
</ul>
<h3 id="测试环境二：i7-4770,_Win8-1">测试环境二：i7-4770, Win8.1</h3>
<h4 id="Actors-1">Actors</h4>
<ul>
<li>Scala/Akka: 4419 ms</li>
<li>Erlang (non-HIPE): 1700 ms.</li>
</ul>
<h4 id="Coroutines_/_channels-1">Coroutines / channels</h4>
<ul>
<li>Haskell (GHC 7.10.3): 2820 ms.</li>
<li>Go: 629 ms.</li>
<li>F# MailboxProcessor: 756ms. (should be faster?..)</li>
</ul>
<h4 id="Futures_/_promises-1">Futures / promises</h4>
<ul>
<li>.NET Core: Async (8 threads) 290 ms</li>
<li>Node-bluebird (Promise) 285ms / 195ms (after warmup)</li>
<li>.NET Full (TPL): 118 ms.</li>
</ul>
<h3 id="测试环境三：i7-4771,_Ubuntu_15-10">测试环境三：i7-4771, Ubuntu 15.10</h3>
<ul>
<li>Scala/Akka: 1700-2700 ms</li>
<li>Haskell (GHC 7.10.3): 41-44 ms</li>
<li>Erlang (non-HIPE): 700-1100 ms</li>
<li>Erlang (HIPE): 2100-3500 ms</li>
<li>Go: 200-224 ms</li>
</ul>
<p>根据上面不同的操作环境和硬件配置，你应该对各语言的并行计算的能力有一个初步的印象，你可以在你的硬件环境中测试相应的代码，<br>运行办法可以参照作者的说明：<a href="https://github.com/atemerev/skynet#how-to-run" target="_blank" rel="external">How to run</a></p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/02/23/1M-threads-microbenchmark/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>瑞士的金融软件工程师和创业者<a href="https://www.linkedin.com/in/temerev" target="_blank" rel="external">Alexander Temerev</a>在github上创建了一个项目<a href="https://github.com/atemerev/skynet" target="_blank" rel="external">skynet
</a>,用来测试各语言(框架)的多线程并行计算的性能，并得到了一些有用的数据。本文翻译整理自这个项目的说明。</p>
<p>测试并行性能的代码逻辑很简单：创建一个actor(goroutine,或者其它语言中类似的并发库)，它会创建10个子actor,然后每个子actor再创建10个子actor，一直这样创建下去，直到创建了1百万个actor，每个actor包含一个唯一的数字(0到999999)。然后最底层的actor把它们的数字返回给父actor，父actor计算总和后再把结果返回给它的父actor，一直返回直到根actor，这样根actor的包含数字就是0到999999的和，结果应该为499999500000。</p>
<p>所以测试代码的逻辑就是并行计算0到999999的和，测试各种语言的并行库性能。</p>
<p>当然标题是不准确的，只是借用了这个项目的名称，1百万的线程不太可能在一台机器上创建，Alexander Temerev比较的是一些语言的并发框架的实现，聪明的读者应该明白项目性能测试的是什么东西，<br>它包括了Scala Actor、Scala-Future、Go、erlang、haskell、C# Core、C# TPL、RxJava、node-bluebird、python、rust等语言/框架的测试代码。所以大家不必吐槽标题中的&quot;线程&quot;，其实比较的是异步编程模型的性能。<br>]]>
    
    </summary>
    
      <category term="高并发编程" scheme="http://colobu.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[创建安卓app的30个经验教训]]></title>
    <link href="http://colobu.com/2016/02/19/building-android-apps-30-things-that-experience-made-me-learn-the-hard-way/"/>
    <id>http://colobu.com/2016/02/19/building-android-apps-30-things-that-experience-made-me-learn-the-hard-way/</id>
    <published>2016-02-19T03:19:01.000Z</published>
    <updated>2016-02-19T08:34:32.678Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="https://medium.com/@cesarmcferreira/building-android-apps-30-things-that-experience-made-me-learn-the-hard-way-313680430bf9#.pd03h3p6e" target="_blank" rel="external">Building Android Apps — 30 things that experience made me learn the hard way</a> by <a href="https://medium.com/@cesarmcferreira" target="_blank" rel="external">César Ferreira</a></p>
<p>中文: <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0218/3978.html" target="_blank" rel="external">创建安卓app的30个经验教训</a> by <a href="http://www.jcodecraeer.com/templets/jcodecraeer/images/logo.png" target="_blank" rel="external">泡在网上的日子</a></p>
<p>世人分两种：一是从苦逼的过程中学习经验，一是学习别人的经验。这里是我一路走来学到的一些东西，分享给你：<br><a id="more"></a><br><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*5fIjH9lyqhLI-MbHz-zbYg.gif" alt=""></p>
<ol>
<li>在添加任何第三方库之前，请三思。 要慎重！</li>
<li>如果用户看不到，就不要绘制它！</li>
<li>除非真的需要，否则别使用数据库；</li>
<li>达到65k方法数限制来的非常快，真的，非常快！不过 <a href="https://medium.com/@rotxed/dex-skys-the-limit-no-65k-methods-is-28e6cb40cf71" target="_blank" rel="external">multidexing</a> 可以拯救你;</li>
<li><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a> 是 <a href="https://medium.com/swlh/party-tricks-with-rxjava-rxandroid-retrolambda-1b06ed7cd29c" target="_blank" rel="external">AsyncTasks及其它异步方式</a> 的最佳替代者；</li>
<li><a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit</a> 可能是现在最佳的网络请求库；</li>
<li>使用 <a href="https://medium.com/android-news/retrolambda-on-android-191cc8151f85" target="_blank" rel="external">Retrolambda</a> 来简化你的代码；</li>
<li>把 <a href="https://medium.com/swlh/party-tricks-with-rxjava-rxandroid-retrolambda-1b06ed7cd29c" target="_blank" rel="external">RxJava 和 Retrofit 以及 Retrolambda 结合起来</a>会让你酷炸天！</li>
<li>我使用 <a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">EventBus</a> 而且它也很好，但是我并不会用太多，因为这样代码库会变得凌乱；</li>
<li><a href="https://medium.com/the-engineering-team/package-by-features-not-layers-2d076df1964d" target="_blank" rel="external">包名按照功能来</a>，而不是按分层来;</li>
<li>把所有东西都移到 应用线程application thread之外；</li>
<li><a href="http://developer.android.com/tools/help/layoutopt.html" target="_blank" rel="external">lint</a> 可以帮助你优化布局与布局树，这样你就能识别出那些可能已经被移除的冗余的View；</li>
<li>如果你在使用gradle，使用一切可能的方式去<a href="https://medium.com/the-engineering-team/speeding-up-gradle-builds-619c442113cb" target="_blank" rel="external">加速它</a>；</li>
<li>检查构建过程的<a href="https://medium.com/the-engineering-team/speeding-up-gradle-builds-619c442113cb" target="_blank" rel="external">性能报告</a>，以便知道什么占据了编译时间；</li>
<li>使用一个 <a href="http://fernandocejas.com/2015/07/18/architecting-android-the-evolution/" target="_blank" rel="external">流行的</a> 架构；</li>
<li><a href="http://stackoverflow.com/a/67500/794485" target="_blank" rel="external">测试时比较花时间，但是一旦你找到诀窍它可以比不使用测试更快、更健壮;</a></li>
<li>使用 <a href="http://fernandocejas.com/2015/04/11/tasting-dagger-2-on-android/" target="_blank" rel="external">依赖注入</a> 让你的app更模块化，从而更易于测试；</li>
<li>收听 <a href="http://fragmentedpodcast.com/" target="_blank" rel="external">fragmented podcast</a> 将会让你受益；</li>
<li><a href="https://www.reddit.com/r/Android/comments/2hywu9/google_play_only_one_strike_is_needed_to_ruin_you/" target="_blank" rel="external">千万别用私人邮箱作为你安卓市场的发布者账号;</a></li>
<li>总是使用<a href="http://developer.android.com/training/keyboard-input/style.html" target="_blank" rel="external">合适的输入类型</a>；</li>
<li>Use analytics to find usage patterns and isolate bugs;</li>
<li>关注最新的 <a href="http://android-arsenal.com/" target="_blank" rel="external">libraries</a>（使用<a href="https://github.com/cesarferreira/dryrun" target="_blank" rel="external">dryrun</a> 来快速查看它们的的效果）；</li>
<li>你的service应该只做你所需的事情，并且尽快死去；</li>
<li>使用 <a href="http://developer.android.com/reference/android/accounts/AccountManager.html" target="_blank" rel="external">Account Manager</a> 来提示登录用户名和邮箱地址；</li>
<li>使用CI（持续集成）来构建和发布你的beta和产品apk；</li>
<li>不要运行自己的CI server，维护server是费时的事情，因为磁盘空间，安全问题，更新server以防止SSL攻击等等原因。使用circleci, travis 或者 shippable, 它们便宜，而且你也可以少担心一些事情；</li>
<li><a href="https://github.com/Triple-T/gradle-play-publisher" target="_blank" rel="external">自动发布到应用市场</a>;</li>
<li>如果一个library很大而你只需要使用其中的一部分功能，你应该寻找一个更小的来替代（比如依靠proguard ）；</li>
<li>不要使用多于实际需要的module。从零开始编译一个module或者仅仅是检查上个module是否最新所需要的时间几乎是加载 binary .jar/.aar依赖的4倍以上；</li>
<li>开始考虑<a href="http://developer.android.com/tools/help/vector-asset-studio.html" target="_blank" rel="external">用SVG来替代PNG</a> ；</li>
<li>为使用的库提供抽象类， 这样在需要的时候很容易切换到新的库上。(例如AppLogger.d(“message”) 可以使用 Log.d(TAG, message)，以后可以切换至Timber.d(message));</li>
<li>监控你的连接情况以及连接类型（wifi之下更新更多数据？）；</li>
<li>监控你的电源和电量（在充电的时候更新更多的数据？电量低的时候暂停更新？）；</li>
<li>用户界面就如笑话一样，如果还需要你解释，那么证明它并不够好；</li>
<li><a href="https://twitter.com/danlew42/status/677151453476032512" target="_blank" rel="external">性能测试很重要: 写一些慢的实现来保证优化不会导致测试失败</a></li>
</ol>
<p>如果有什么疑问请在<a href="https://twitter.com/cesarmcferreira" target="_blank" rel="external">tweet</a>留言。</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/02/19/building-android-apps-30-things-that-experience-made-me-learn-the-hard-way/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="https://medium.com/@cesarmcferreira/building-android-apps-30-things-that-experience-made-me-learn-the-hard-way-313680430bf9#.pd03h3p6e" target="_blank" rel="external">Building Android Apps — 30 things that experience made me learn the hard way</a> by <a href="https://medium.com/@cesarmcferreira" target="_blank" rel="external">César Ferreira</a></p>
<p>中文: <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0218/3978.html" target="_blank" rel="external">创建安卓app的30个经验教训</a> by <a href="http://www.jcodecraeer.com/templets/jcodecraeer/images/logo.png" target="_blank" rel="external">泡在网上的日子</a></p>
<p>世人分两种：一是从苦逼的过程中学习经验，一是学习别人的经验。这里是我一路走来学到的一些东西，分享给你：<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://colobu.com/tags/Android/"/>
    
      <category term="Android" scheme="http://colobu.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala Async 库]]></title>
    <link href="http://colobu.com/2016/02/15/Scala-Async/"/>
    <id>http://colobu.com/2016/02/15/Scala-Async/</id>
    <published>2016-02-15T08:07:38.000Z</published>
    <updated>2016-02-15T08:45:46.094Z</updated>
    <content type="html"><![CDATA[<p>在我以前的文章中，我介绍了<a href="http://colobu.com/2015/06/11/Scala-Future-and-Promise/" target="_blank" rel="external">Scala Future and Promise</a>。<code>Future</code>代表一个异步计算，你可以设置你的回调函数或者利用<code>Await.result</code>等待获取异步计算的结果,你还可以组合多个<code>future</code>为一个新的<code>future</code>。<code>Promise</code>让你可以控制是否完成计算还是抛出异常，它的<code>future</code>方法返回一个<code>Future</code>对象，<code>complete</code>、<code>success</code>和<code>failure</code>允许你完成计算。如果想要同步操作，可以使用<code>Await.result</code>等待<code>Future</code>完成或者超时，对于没有实现<code>Awaitable</code>的代码块，可以使用<code>blocking</code>方法实现同步执行。<br><a id="more"></a></p>
<p>以上是对上一篇文章的总结。Scala官方还提供了一个<code>Async</code>库，用来简化Scala异步操作，尽管这个库还没有正式加入到Scala的标准库中。它是通过Scala <code>macro</code>特性实现的。</p>
<p><code>async</code>用来标记一块异步执行的代码，通常这块代码中包含包含一个或者多个<code>await</code>调用。如果没有<code>await</code>调用，我们用<code>future</code>方法就可以了。<br>这样,对于复杂的异步代码，你不必使用<code>map</code>、<code>flatMap</code>或者回调来实现复杂的多层的调用嵌套。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ExecutionContext.Implicits.global</div><div class="line"><span class="keyword">import</span> scala.async.Async.{async, await}</div><div class="line"></div><div class="line"><span class="keyword">val</span> future = async {</div><div class="line">  <span class="keyword">val</span> f1 = async { ...; <span class="keyword">true</span> }</div><div class="line">  <span class="keyword">val</span> f2 = async { ...; <span class="number">42</span> }</div><div class="line">  <span class="keyword">if</span> (await(f1)) await(f2) <span class="keyword">else</span> <span class="number">0</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>比如下面的代码，我们使用纯<code>future</code>实现：</p>
<figure class="highlight scaladef"><figcaption><span>slowCalcFuture: Future[Int] = ...</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">val future1 = slowCalcFuture</div><div class="line">val future2 = slowCalcFuture</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">combined</span>:</span> Future[Int] = <span class="keyword">for</span> {</div><div class="line">  r1 &lt;- future1</div><div class="line">  r2 &lt;- future2</div><div class="line">} <span class="keyword">yield</span> r1 + r2</div></pre></td></tr></table></figure>

<p>如果使用<code>async/await</code>，代码将得到简化。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> combined: Future[Int] = async {</div><div class="line">  <span class="keyword">val</span> future1 = slowCalcFuture</div><div class="line">  <span class="keyword">val</span> future2 = slowCalcFuture</div><div class="line">  await(future1) + await(future2)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>事实上，这个框架是<a href="http://docs.scala-lang.org/sips/pending/async.html" target="_blank" rel="external">SIP-22 - Async</a>的参考实现。这个Scala特性提议发布于2013年。</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/02/15/Scala-Async/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>在我以前的文章中，我介绍了<a href="http://colobu.com/2015/06/11/Scala-Future-and-Promise/" target="_blank" rel="external">Scala Future and Promise</a>。<code>Future</code>代表一个异步计算，你可以设置你的回调函数或者利用<code>Await.result</code>等待获取异步计算的结果,你还可以组合多个<code>future</code>为一个新的<code>future</code>。<code>Promise</code>让你可以控制是否完成计算还是抛出异常，它的<code>future</code>方法返回一个<code>Future</code>对象，<code>complete</code>、<code>success</code>和<code>failure</code>允许你完成计算。如果想要同步操作，可以使用<code>Await.result</code>等待<code>Future</code>完成或者超时，对于没有实现<code>Awaitable</code>的代码块，可以使用<code>blocking</code>方法实现同步执行。<br>]]>
    
    </summary>
    
      <category term="Scala" scheme="http://colobu.com/tags/Scala/"/>
    
      <category term="Scala" scheme="http://colobu.com/categories/Scala/"/>
    
  </entry>
  
</feed>
