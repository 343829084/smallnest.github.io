<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[鸟窝]]></title>
  <subtitle><![CDATA[大道至简 Simplicity is the ultimate form of sophistication]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://colobu.com/"/>
  <updated>2016-05-11T09:35:15.946Z</updated>
  <id>http://colobu.com/</id>
  
  <author>
    <name><![CDATA[smallnest]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[更好的Scala I/O: better-files]]></title>
    <link href="http://colobu.com/2016/05/11/better-files-Simple-safe-and-intuitive-Scala-I-O/"/>
    <id>http://colobu.com/2016/05/11/better-files-Simple-safe-and-intuitive-Scala-I-O/</id>
    <published>2016-05-11T08:09:21.000Z</published>
    <updated>2016-05-11T09:35:04.755Z</updated>
    <content type="html"><![CDATA[<p>对于使用Scala的程序员来说， I/O操作如文件的读写通常使用<a href="http://www.scala-lang.org/api/current/#scala.io.Source$" target="_blank" rel="external">scala.io.Source</a>来实现。但是这个类功能还是欠缺的，而且功能混乱，因此在Scala类库的增强提案(<a href="https://github.com/scala/slip/issues/19" target="_blank" rel="external">Scala IO fix-up/overhaul</a>)中如何改进它争论相当的大，甚至有些开发者提议将这个库废掉，让社区实现的第三方来完成这方面的工作，或者引导开发者使用<code>java.nio</code>来实现I/O操作。</p>
<p>当然，作为一个使用Scala的公司来说，可能会自己实现了辅助的I/O操作的方法， 比如类似FileUtils等名称的一些类。Java程序员可能已经熟悉了使用<a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html" target="_blank" rel="external">java.nio.file.Files</a>、<a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/io/Files.html" target="_blank" rel="external">Guava</a>、<a href="https://commons.apache.org/proper/commons-io/" target="_blank" rel="external">Apache common-io</a>、<a href="http://jodd.org/api/jodd/io/FileUtil.html" target="_blank" rel="external">jodd FileUtil</a>等开源I/O库，但是如果使用Scala进行I/O操作时，虽然还是可以使用这些Java I/O库,但是毕竟还是不是那么纯粹，因此，我们可以关注一下Scala实现的I/O库，比如<a href="https://github.com/sbt/io" target="_blank" rel="external">sbt io</a>、<a href="http://www.lihaoyi.com/Ammonite/#Ammonite-Ops" target="_blank" rel="external">Ammonite-Ops</a>、<a href="https://github.com/pathikrit/better-files" target="_blank" rel="external">better-files</a>等。</p>
<p>本文为你推荐<a href="https://github.com/pathikrit/better-files" target="_blank" rel="external">better-files</a>。</p>
<a id="more"></a>
<p>为什么推荐<a href="https://github.com/pathikrit/better-files" target="_blank" rel="external">better-files</a>呢？让我们看看它的功能，就明白它的简单而强大了，就像一把I/O操作的瑞士军刀。</p>
<p>要使用better-files,只需加入下面的依赖：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">libraryDependencies += <span class="string">"com.github.pathikrit"</span> %% <span class="string">"better-files"</span> % <span class="keyword">version</span></div></pre></td></tr></table></figure>

<p>它对Java NIO库进行了包装，不依赖其它的第三方库。</p>
<blockquote>
<p>以下介绍摘译自better-files的<a href="https://github.com/pathikrit/better-files#tutorial-" target="_blank" rel="external">官方文档</a>。</p>
</blockquote>
<h3 id="实例化">实例化</h3>
<p>下面的实例都是等价的，才可以采用多种方式得到File对象。可以通过字符串、String interpolator, Java File、隐式转换、定义的常量和操作符&quot;/&quot;等产生File对象。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> better.files._</div><div class="line"><span class="keyword">import</span> java.io.{File =&gt; JFile}</div><div class="line"></div><div class="line"><span class="keyword">val</span> f = File(<span class="string">"/User/johndoe/Documents"</span>)                      <span class="comment">// using constructor</span></div><div class="line"><span class="keyword">val</span> f1: File = file<span class="string">"/User/johndoe/Documents"</span>                 <span class="comment">// using string interpolator</span></div><div class="line"><span class="keyword">val</span> f2: File = <span class="string">"/User/johndoe/Documents"</span>.toFile              <span class="comment">// convert a string path to a file</span></div><div class="line"><span class="keyword">val</span> f3: File = <span class="keyword">new</span> JFile(<span class="string">"/User/johndoe/Documents"</span>).toScala  <span class="comment">// convert a Java file to Scala</span></div><div class="line"><span class="keyword">val</span> f4: File = root/<span class="string">"User"</span>/<span class="string">"johndoe"</span>/<span class="string">"Documents"</span>             <span class="comment">// using root helper to start from root</span></div><div class="line"><span class="keyword">val</span> f5: File = `~` / <span class="string">"Documents"</span>                             <span class="comment">// also equivalent to `home / "Documents"`</span></div><div class="line"><span class="keyword">val</span> f6: File = <span class="string">"/User"</span>/<span class="string">"johndoe"</span>/<span class="string">"Documents"</span>                 <span class="comment">// using file separator DSL</span></div><div class="line"><span class="keyword">val</span> f7: File = home/<span class="string">"Documents"</span>/<span class="string">"presentations"</span>/`..`         <span class="comment">// Use `..` to navigate up to parent</span></div></pre></td></tr></table></figure>

<h3 id="文件读写">文件读写</h3>
<p>可以一行搞定：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> file = root/<span class="string">"tmp"</span>/<span class="string">"test.txt"</span></div><div class="line">file.overwrite(<span class="string">"hello"</span>)</div><div class="line">file.appendLine().append(<span class="string">"world"</span>)</div><div class="line">assert(file.contentAsString == <span class="string">"hello\nworld"</span>)</div></pre></td></tr></table></figure>

<p>类似C++/Shell风格的读写，和上面的功能一样：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">file &lt; <span class="string">"hello"</span>     <span class="comment">// same as file.overwrite("hello")</span></div><div class="line">file &lt;&lt; <span class="string">"world"</span>    <span class="comment">// same as file.appendLines("world")</span></div><div class="line">assert(file! == <span class="string">"hello\nworld"</span>)</div></pre></td></tr></table></figure>

<p>或者这样：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"hello"</span> `&gt;:` file</div><div class="line"><span class="string">"world"</span> &gt;&gt;: file</div><div class="line"><span class="keyword">val</span> bytes: Array[Byte] = file.loadBytes</div></pre></td></tr></table></figure>

<p><strong>流式接口风格：</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(root/<span class="string">"tmp"</span>/<span class="string">"diary.txt"</span>)</div><div class="line"> .createIfNotExists()  </div><div class="line"> .appendLine()</div><div class="line"> .appendLines(<span class="string">"My name is"</span>, <span class="string">"Inigo Montoya"</span>)</div><div class="line"> .moveTo(home/<span class="string">"Documents"</span>)</div><div class="line"> .renameTo(<span class="string">"princess_diary.txt"</span>)</div><div class="line"> .changeExtensionTo(<span class="string">".md"</span>)</div><div class="line"> .lines</div></pre></td></tr></table></figure>


<h3 id="Stream和编码">Stream和编码</h3>
<p>产生迭代器：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> bytes  : Iterator[Byte]            = file.bytes</div><div class="line"><span class="keyword">val</span> chars  : Iterator[Char]            = file.chars</div><div class="line"><span class="keyword">val</span> lines  : Iterator[String]          = file.lines</div><div class="line"><span class="keyword">val</span> source : scala.io.BufferedSource   = file.newBufferedSource <span class="comment">// needs to be closed, unlike the above APIs which auto closes when iterator ends</span></div></pre></td></tr></table></figure>

<p>编解码：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> content: String = file.contentAsString  <span class="comment">// default codec</span></div><div class="line"><span class="comment">// custom codec:</span></div><div class="line"><span class="keyword">import</span> scala.io.Codec</div><div class="line">file.contentAsString(Codec.ISO8859)</div><div class="line"><span class="comment">//or</span></div><div class="line"><span class="keyword">import</span> scala.io.Codec.string2codec</div><div class="line">file.write(<span class="string">"hello world"</span>)(codec = <span class="string">"US-ASCII"</span>)</div></pre></td></tr></table></figure>

<h3 id="与Java交互">与Java交互</h3>
<p>转换成Java对象：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> file: File = tmp / <span class="string">"hello.txt"</span></div><div class="line"><span class="keyword">val</span> javaFile     : java.io.File                 = file.toJava</div><div class="line"><span class="keyword">val</span> uri          : java.net.uri                 = file.uri</div><div class="line"><span class="keyword">val</span> reader       : java.io.BufferedReader       = file.newBufferedReader </div><div class="line"><span class="keyword">val</span> outputstream : java.io.OutputStream         = file.newOutputStream </div><div class="line"><span class="keyword">val</span> writer       : java.io.BufferedWriter       = file.newBufferedWriter </div><div class="line"><span class="keyword">val</span> inputstream  : java.io.InputStream          = file.newInputStream</div><div class="line"><span class="keyword">val</span> path         : java.nio.file.Path           = file.path</div><div class="line"><span class="keyword">val</span> fs           : java.nio.file.FileSystem     = file.fileSystem</div><div class="line"><span class="keyword">val</span> channel      : java.nio.channel.FileChannel = file.newFileChannel</div><div class="line"><span class="keyword">val</span> ram          : java.io.RandomAccessFile     = file.newRandomAccess</div><div class="line"><span class="keyword">val</span> fr           : java.io.FileReader           = file.newFileReader</div><div class="line"><span class="keyword">val</span> fw           : java.io.FileWriter           = file.newFileWriter(append = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">val</span> printer      : java.io.PrintWriter          = file.newPrintWriter</div></pre></td></tr></table></figure>

<p>以及</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">file1.reader &gt; file2.writer       <span class="comment">// pipes a reader to a writer</span></div><div class="line">System.in &gt; file2.out             <span class="comment">// pipes an inputstream to an outputstream</span></div><div class="line">src.pipeTo(sink)                  <span class="comment">// if you don't like symbols</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> bytes   : Iterator[Byte]        = inputstream.bytes</div><div class="line"><span class="keyword">val</span> bis     : BufferedInputStream   = inputstream.buffered  </div><div class="line"><span class="keyword">val</span> bos     : BufferedOutputStream  = outputstream.buffered   </div><div class="line"><span class="keyword">val</span> reader  : InputStreamReader     = inputstream.reader</div><div class="line"><span class="keyword">val</span> writer  : OutputStreamWriter    = outputstream.writer</div><div class="line"><span class="keyword">val</span> printer : PrintWriter           = outputstream.printWriter</div><div class="line"><span class="keyword">val</span> br      : BufferedReader        = reader.buffered</div><div class="line"><span class="keyword">val</span> bw      : BufferedWriter        = writer.buffered</div><div class="line"><span class="keyword">val</span> mm      : MappedByteBuffer      = fileChannel.toMappedByteBuffer</div></pre></td></tr></table></figure>

<h3 id="模式匹配">模式匹配</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * <span class="property">@return</span> <span class="literal">true</span> <span class="keyword">if</span> file <span class="keyword">is</span> a directory <span class="reserved">with</span> <span class="literal">no</span> children <span class="keyword">or</span> a file <span class="reserved">with</span> <span class="literal">no</span> contents</div><div class="line"> */</div><div class="line">def isEmpty(<span class="attribute">file</span>: File): Boolean = file match {</div><div class="line">  <span class="reserved">case</span> File.Type.SymbolicLink<span class="function"><span class="params">(to)</span> =&gt;</span> isEmpty(to)  <span class="regexp">//</span> <span class="keyword">this</span> must be first <span class="reserved">case</span> statement <span class="keyword">if</span> you want to handle symlinks specially; <span class="keyword">else</span> will follow link</div><div class="line">  <span class="reserved">case</span> File.Type.Directory<span class="function"><span class="params">(files)</span> =&gt;</span> files.isEmpty</div><div class="line">  <span class="reserved">case</span> File.Type.RegularFile<span class="function"><span class="params">(content)</span> =&gt;</span> content.isEmpty</div><div class="line">  <span class="reserved">case</span> _<span class="function"> =&gt;</span> file.notExists    <span class="regexp">//</span> a file may <span class="keyword">not</span> be one <span class="keyword">of</span> the above e.g. UNIX pipes, sockets, devices etc</div><div class="line">}</div><div class="line"><span class="regexp">//</span> <span class="keyword">or</span> as extractors <span class="literal">on</span> <span class="attribute">LHS</span>:</div><div class="line">val File.Type.Directory(researchDocs) = home<span class="regexp">/"Downloads"/</span><span class="string">"research"</span></div></pre></td></tr></table></figure>

<h3 id="通配符">通配符</h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> dir = <span class="string">"src"</span>/<span class="string">"test"</span></div><div class="line"><span class="keyword">val</span> matches: Iterator[File] = dir.glob(<span class="string">"**/*.{java,scala}"</span>)</div><div class="line"><span class="comment">// above code is equivalent to:</span></div><div class="line">dir.listRecursively.filter(f =&gt; f.extension == Some(<span class="string">".java"</span>) || f.extension == Some(<span class="string">".scala"</span>))</div></pre></td></tr></table></figure>

<p>甚至使用正则表达式：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> matches = dir.glob(<span class="string">"^\\w*$"</span>)(syntax = File.PathMatcherSyntax.regex)</div></pre></td></tr></table></figure>

<h3 id="文件系统操作">文件系统操作</h3>
<p>文件系统操作也非常的便利：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">file</span>.touch()</div><div class="line"><span class="keyword">file</span>.<span class="keyword">delete</span>()     <span class="comment">// unlike the Java API, also works on directories as expected (deletes children recursively)</span></div><div class="line"><span class="keyword">file</span>.clear()      <span class="comment">// If directory, deletes all children; if file clears contents</span></div><div class="line"><span class="keyword">file</span>.renameTo(newName: String)</div><div class="line"><span class="keyword">file</span>.moveTo(destination)</div><div class="line"><span class="keyword">file</span>.copyTo(destination)       <span class="comment">// unlike the default API, also works on directories (copies recursively)</span></div><div class="line"><span class="keyword">file</span>.linkTo(destination)                     <span class="comment">// ln file destination</span></div><div class="line"><span class="keyword">file</span>.symbolicLinkTo(destination)             <span class="comment">// ln -s file destination</span></div><div class="line"><span class="keyword">file</span>.{checksum, md5, sha1, sha256, sha512, digest}   <span class="comment">// also works for directories</span></div><div class="line"><span class="keyword">file</span>.setOwner(user: String)    <span class="comment">// chown user file</span></div><div class="line"><span class="keyword">file</span>.setGroup(<span class="keyword">group</span>: String)   <span class="comment">// chgrp group file</span></div><div class="line">Seq(file1, file2) &gt;: file3     <span class="comment">// same as cat file1 file2 &gt; file3</span></div><div class="line">Seq(file1, file2) &gt;&gt;: file3    <span class="comment">// same as cat file1 file2 &gt;&gt; file3</span></div><div class="line"><span class="keyword">file</span>.isReadLocked <span class="regexp">/ file.isWriteLocked /</span> <span class="keyword">file</span>.isLocked</div><div class="line"><span class="keyword">File</span>.newTemporaryDirectory() <span class="regexp">/ File.newTemporaryFile() /</span><span class="regexp">/ create temp dir/</span><span class="keyword">file</span></div></pre></td></tr></table></figure>

<h3 id="UNIX_DSL">UNIX DSL</h3>
<p>甚至提供了UNIX命令风格的操作：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import better.files_, Cmds._  <span class="comment"> // must import Cmds._ to bring in these utils</span></div><div class="line">pwd / cwd    <span class="comment"> // current dir</span></div><div class="line">cp(file1, file2)</div><div class="line">mv(file1, file2)</div><div class="line">rm(<span class="built_in">file</span>) <span class="comment">/*or*/</span> del(<span class="built_in">file</span>)</div><div class="line">ls(<span class="built_in">file</span>) <span class="comment">/*or*/</span> dir(<span class="built_in">file</span>)</div><div class="line"><span class="built_in">ln</span>(file1, file2)    <span class="comment"> // hard link</span></div><div class="line">ln_s(file1, file2)  <span class="comment"> // soft link</span></div><div class="line">cat(file1)</div><div class="line">cat(file1) &gt;&gt;: <span class="built_in">file</span></div><div class="line">touch(<span class="built_in">file</span>)</div><div class="line">mkdir(<span class="built_in">file</span>)</div><div class="line">mkdirs(<span class="built_in">file</span>)        <span class="comment"> // mkdir -p</span></div><div class="line">chown(owner, <span class="built_in">file</span>)</div><div class="line">chgrp(owner, <span class="built_in">file</span>)</div><div class="line">chmod_+(permission, <span class="built_in">files</span>) <span class="comment"> // add permission</span></div><div class="line">chmod_-(permission, <span class="built_in">files</span>) <span class="comment"> // remove permission</span></div><div class="line">md5(<span class="built_in">file</span>) / sha1(<span class="built_in">file</span>) / sha256(<span class="built_in">file</span>) / sha512(<span class="built_in">file</span>)</div><div class="line">unzip(zipFile)(targetDir)</div><div class="line">zip(<span class="built_in">file</span>*)(zipFile)</div></pre></td></tr></table></figure>

<h3 id="文件属性">文件属性</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">file</span>.name       // simpler than java.io.File#getName</div><div class="line"><span class="keyword">file</span>.extension</div><div class="line"><span class="keyword">file</span>.contentType</div><div class="line"><span class="keyword">file</span>.lastModifiedTime     // returns JSR-<span class="number">310</span> time</div><div class="line"><span class="keyword">file</span>.owner / <span class="keyword">file</span>.group</div><div class="line"><span class="keyword">file</span>.isDirectory / <span class="keyword">file</span>.isSymbolicLink / <span class="keyword">file</span>.isRegularFile</div><div class="line"><span class="keyword">file</span>.isHidden</div><div class="line"><span class="keyword">file</span>.<span class="keyword">hide</span>() / <span class="keyword">file</span>.<span class="keyword">unhide</span>()</div><div class="line"><span class="keyword">file</span>.isOwnerExecutable / <span class="keyword">file</span>.isGroupReadable // etc. see <span class="keyword">file</span>.permissions</div><div class="line"><span class="keyword">file</span>.size                 // <span class="keyword">for</span> <span class="keyword">a</span> directory, computes the directory size</div><div class="line"><span class="keyword">file</span>.posixAttributes / <span class="keyword">file</span>.dosAttributes  // see <span class="keyword">file</span>.attributes</div><div class="line"><span class="keyword">file</span>.isEmpty      // true <span class="keyword">if</span> <span class="keyword">file</span> <span class="built_in">has</span> <span class="keyword">no</span> content (<span class="built_in">or</span> <span class="keyword">no</span> children <span class="keyword">if</span> directory) <span class="built_in">or</span> does not exist</div><div class="line"><span class="keyword">file</span>.isParentOf / <span class="keyword">file</span>.isChildOf / <span class="keyword">file</span>.isSiblingOf / <span class="keyword">file</span>.siblings</div></pre></td></tr></table></figure>

<p><code>chmod</code>:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.nio.file.attribute.PosixFilePermission</div><div class="line">file.addPermission(PosixFilePermission.OWNER_EXECUTE)      <span class="comment">// chmod +X file</span></div><div class="line">file.removePermission(PosixFilePermission.OWNER_WRITE)     <span class="comment">// chmod -w file</span></div><div class="line">assert(file.permissionsAsString == <span class="string">"rw-r--r--"</span>)</div><div class="line"></div><div class="line"><span class="comment">// The following are all equivalent:</span></div><div class="line">assert(file.permissions contains PosixFilePermission.OWNER_EXECUTE)</div><div class="line">assert(file(PosixFilePermission.OWNER_EXECUTE))</div><div class="line">assert(file.isOwnerExecutable)</div></pre></td></tr></table></figure>

<h3 id="文件比较">文件比较</h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">file1 == file2    <span class="comment">// equivalent to `file1.isSamePathAs(file2)`</span></div><div class="line">file1 === file2   <span class="comment">// equivalent to `file1.isSameContentAs(file2)` (works for regular-files and directories)</span></div><div class="line">file1 != file2    <span class="comment">// equivalent to `!file1.isSamePathAs(file2)`</span></div><div class="line">file1 =!= file2   <span class="comment">// equivalent to `!file1.isSameContentAs(file2)`</span></div></pre></td></tr></table></figure>

<p>排序:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> files = myDir.list.toSeq</div><div class="line">files.sorted(File.Order.byName) </div><div class="line">files.max(File.Order.bySize) </div><div class="line">files.min(File.Order.byDepth) </div><div class="line">files.max(File.Order.byModificationTime) </div><div class="line">files.sorted(File.Order.byDirectoriesFirst)</div></pre></td></tr></table></figure>

<h3 id="压缩解压缩">压缩解压缩</h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Unzipping:</span></div><div class="line"><span class="keyword">val</span> zipFile: File = file<span class="string">"path/to/research.zip"</span></div><div class="line"><span class="keyword">val</span> research: File = zipFile.unzipTo(destination = home/<span class="string">"Documents"</span>/<span class="string">"research"</span>) </div><div class="line"></div><div class="line"><span class="comment">// Zipping:</span></div><div class="line"><span class="keyword">val</span> zipFile: File = directory.zipTo(destination = home/<span class="string">"Desktop"</span>/<span class="string">"toEmail.zip"</span>)</div><div class="line"></div><div class="line"><span class="comment">// Zipping/Unzipping to temporary files/directories:</span></div><div class="line"><span class="keyword">val</span> someTempZipFile: File = directory.zip()</div><div class="line"><span class="keyword">val</span> someTempDir: File = zipFile.unzip()</div><div class="line">assert(directory === someTempDir)</div><div class="line"></div><div class="line"><span class="comment">// Gzip handling:</span></div><div class="line">File(<span class="string">"countries.gz"</span>).newInputStream.gzipped.lines.take(<span class="number">10</span>).foreach(println)</div></pre></td></tr></table></figure>

<h3 id="轻量级的ARM_(自动化的资源管理)">轻量级的ARM (自动化的资源管理)</h3>
<p>Auto-close Java closeables:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> {</div><div class="line">  in &lt;- file1.newInputStream.autoClosed</div><div class="line">  out &lt;- file2.newOutputStream.autoClosed</div><div class="line">} in.pipeTo(out)</div></pre></td></tr></table></figure>

<p><code>better-files</code>提供了更加便利的管理，因此下面的代码</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> {</div><div class="line"> reader &lt;- file.newBufferedReader.autoClosed</div><div class="line">} foo(reader)</div></pre></td></tr></table></figure>

<p>可以写成：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> {</div><div class="line"> reader &lt;- file.bufferedReader    <span class="comment">// returns ManagedResource[BufferedReader]</span></div><div class="line">} foo(reader)</div><div class="line"></div><div class="line"><span class="comment">// or simply:</span></div><div class="line">file.bufferedReader.map(foo)</div></pre></td></tr></table></figure>

<h3 id="Scanner">Scanner</h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> data = t1 &lt;&lt; s<span class="string">"""</span></div><div class="line">  | Hello World</div><div class="line">  | 1 true 2 3</div><div class="line">""".stripMargin</div><div class="line"><span class="keyword">val</span> scanner: Scanner = data.newScanner()</div><div class="line">assert(scanner.next[String] == <span class="string">"Hello"</span>)</div><div class="line">assert(scanner.lineNumber == <span class="number">1</span>)</div><div class="line">assert(scanner.next[String] == <span class="string">"World"</span>)</div><div class="line">assert(scanner.next[(Int, Boolean)] == (<span class="number">1</span>, <span class="keyword">true</span>))</div><div class="line">assert(scanner.tillEndOfLine() == <span class="string">" 2 3"</span>)</div><div class="line">assert(!scanner.hasNext)</div></pre></td></tr></table></figure>

<p>你甚至可以写定制的Scanner。</p>
<h3 id="文件监控">文件监控</h3>
<p>普通的Java文件监控：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.nio.file.{StandardWatchEventKinds =&gt; EventType}</div><div class="line"><span class="keyword">val</span> service: java.nio.file.WatchService = myDir.newWatchService</div><div class="line">myDir.register(service, events = Seq(EventType.ENTRY_CREATE, EventType.ENTRY_DELETE))</div></pre></td></tr></table></figure>

<p><code>better-files</code>抽象了一个简单的接口：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> watcher = <span class="keyword">new</span> ThreadBackedFileMonitor(myDir, recursive = <span class="keyword">true</span>) {</div><div class="line">  <span class="keyword">override</span> <span class="keyword">def</span> onCreate(file: File) = println(s<span class="string">"$file got created"</span>)</div><div class="line">  <span class="keyword">override</span> <span class="keyword">def</span> onModify(file: File) = println(s<span class="string">"$file got modified"</span>)</div><div class="line">  <span class="keyword">override</span> <span class="keyword">def</span> onDelete(file: File) = println(s<span class="string">"$file got deleted"</span>)</div><div class="line">}</div><div class="line">watcher.start()</div></pre></td></tr></table></figure>

<p>或者用下面的写法：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.nio.file.{Path, StandardWatchEventKinds =&gt; EventType, WatchEvent}</div><div class="line"></div><div class="line"><span class="keyword">val</span> watcher = <span class="keyword">new</span> ThreadBackedFileMonitor(myDir, recursive = <span class="keyword">true</span>) {</div><div class="line">  <span class="keyword">override</span> <span class="keyword">def</span> dispatch(eventType: WatchEvent.Kind[Path], file: File) = eventType <span class="keyword">match</span> {</div><div class="line">    <span class="keyword">case</span> EventType.ENTRY_CREATE =&gt; println(s<span class="string">"$file got created"</span>)</div><div class="line">    <span class="keyword">case</span> EventType.ENTRY_MODIFY =&gt; println(s<span class="string">"$file got modified"</span>)</div><div class="line">    <span class="keyword">case</span> EventType.ENTRY_DELETE =&gt; println(s<span class="string">"$file got deleted"</span>)</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Akka_风格的文件监控">Akka 风格的文件监控</h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> akka.actor.{ActorRef, ActorSystem}</div><div class="line"><span class="keyword">import</span> better.files._, FileWatcher._</div><div class="line"></div><div class="line">implicit <span class="keyword">val</span> system = ActorSystem(<span class="string">"mySystem"</span>)</div><div class="line"></div><div class="line"><span class="keyword">val</span> watcher: ActorRef = (home/<span class="string">"Downloads"</span>).newWatcher(recursive = <span class="keyword">true</span>)</div><div class="line"></div><div class="line"><span class="comment">// register partial function for an event</span></div><div class="line">watcher ! on(EventType.ENTRY_DELETE) {    </div><div class="line">  <span class="keyword">case</span> file <span class="keyword">if</span> file.isDirectory =&gt; println(s<span class="string">"$file got deleted"</span>) </div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// watch for multiple events</span></div><div class="line">watcher ! when(events = EventType.ENTRY_CREATE, EventType.ENTRY_MODIFY) {   </div><div class="line">  <span class="keyword">case</span> (EventType.ENTRY_CREATE, file) =&gt; println(s<span class="string">"$file got created"</span>)</div><div class="line">  <span class="keyword">case</span> (EventType.ENTRY_MODIFY, file) =&gt; println(s<span class="string">"$file got modified"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/05/11/better-files-Simple-safe-and-intuitive-Scala-I-O/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>对于使用Scala的程序员来说， I/O操作如文件的读写通常使用<a href="http://www.scala-lang.org/api/current/#scala.io.Source$" target="_blank" rel="external">scala.io.Source</a>来实现。但是这个类功能还是欠缺的，而且功能混乱，因此在Scala类库的增强提案(<a href="https://github.com/scala/slip/issues/19" target="_blank" rel="external">Scala IO fix-up/overhaul</a>)中如何改进它争论相当的大，甚至有些开发者提议将这个库废掉，让社区实现的第三方来完成这方面的工作，或者引导开发者使用<code>java.nio</code>来实现I/O操作。</p>
<p>当然，作为一个使用Scala的公司来说，可能会自己实现了辅助的I/O操作的方法， 比如类似FileUtils等名称的一些类。Java程序员可能已经熟悉了使用<a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html" target="_blank" rel="external">java.nio.file.Files</a>、<a href="http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/io/Files.html" target="_blank" rel="external">Guava</a>、<a href="https://commons.apache.org/proper/commons-io/" target="_blank" rel="external">Apache common-io</a>、<a href="http://jodd.org/api/jodd/io/FileUtil.html" target="_blank" rel="external">jodd FileUtil</a>等开源I/O库，但是如果使用Scala进行I/O操作时，虽然还是可以使用这些Java I/O库,但是毕竟还是不是那么纯粹，因此，我们可以关注一下Scala实现的I/O库，比如<a href="https://github.com/sbt/io" target="_blank" rel="external">sbt io</a>、<a href="http://www.lihaoyi.com/Ammonite/#Ammonite-Ops" target="_blank" rel="external">Ammonite-Ops</a>、<a href="https://github.com/pathikrit/better-files" target="_blank" rel="external">better-files</a>等。</p>
<p>本文为你推荐<a href="https://github.com/pathikrit/better-files" target="_blank" rel="external">better-files</a>。</p>
]]>
    
    </summary>
    
      <category term="Scala" scheme="http://colobu.com/tags/Scala/"/>
    
      <category term="Scala" scheme="http://colobu.com/categories/Scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用WinMerge作为git的Merge工具]]></title>
    <link href="http://colobu.com/2016/05/10/using-winmerge-with-tortoisegit/"/>
    <id>http://colobu.com/2016/05/10/using-winmerge-with-tortoisegit/</id>
    <published>2016-05-10T02:26:00.000Z</published>
    <updated>2016-05-10T02:58:41.197Z</updated>
    <content type="html"><![CDATA[<p>我比较喜欢使用免费的<a href="http://winmerge.org/" target="_blank" rel="external">WinMerge</a>作为diff和merge工具，虽然TortoiseGit也自己带了TortoiseGitMerge工具，但是使用起来总觉得不是那么方便。</p>
<p>虽然WinMerge项目看起来没人维护了，最后一个发布打分版本在2013-02-02，但是这个工具使用起来还是相当方便的。我在重装机器的时候，或者更新Windows的时候，如果需要配置TortoiseGit,总是需要到网上查找如何配置WinMerge,因为长长的命令参数总是记不起来。所以在本文中记录下来。</p>
<a id="more"></a>
<h3 id="作为Diff工具">作为Diff工具</h3>
<p>如果使用WinMerge作为diff工具，需要在TortoiseGit的设置(Setting)对话框中选择Diff Viewer:</p>
<p><img src="diff.png" alt=""></p>
<p>选择外部工具&quot;External&quot;,在输入框中输入：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\Program Files (x86)\WinMerge\WinMergeU.exe <span class="regexp">/s /</span>e <span class="regexp">/x /</span>ul <span class="regexp">/ur /</span>wl <span class="regexp">/dl %bname /</span>dr %yname %base %mine</div></pre></td></tr></table></figure>

<p>如果你已经把<code>C:\Program Files (x86)\WinMerge</code>加入到环境变量Path中了，你可以简写成：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WinMergeU <span class="regexp">/s /</span>e <span class="regexp">/x /</span>ul <span class="regexp">/ur /</span>wl <span class="regexp">/dl %bname /</span>dr %yname %base %mine</div></pre></td></tr></table></figure>

<p><code>/s</code>限制WinMerge窗口为单个实例，避免出现多个窗口。</p>
<p><code>/e</code>允许使用<code>ESC</code>作为退出键。</p>
<p><code>/x</code>如果文件没有变动则关闭WinMerge窗口。</p>
<p><code>/ul</code>和<code>/ur</code>不把左右窗口的文件加入到Most Recently Used (MRU)列表。</p>
<p><code>/wl</code>左边窗口的文件设为只读，这样我们只可以修改右边的文件。</p>
<p><code>/dl</code>为左边的文件指定描述符。</p>
<p><code>/dr</code>为右边的文件指定描述符。</p>
<p><code>%base</code>为左边窗口打开的文件。</p>
<p><code>%mine</code>为右边窗口打开的文件。</p>
<h3 id="作为Merge工具">作为Merge工具</h3>
<p>在TortoiseGit的设置(Setting)对话框中选择Merge Tool:<br><img src="merge.png" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:<span class="command">\Program</span> Files (x86)<span class="command">\WinMerge</span><span class="command">\WinMergeU</span>.exe <span class="comment">%theirs %mine %merged</span></div></pre></td></tr></table></figure>

<p>如果你已经把<code>C:\Program Files (x86)\WinMerge</code>加入到环境变量Path中了，你可以简写成：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WinMergeU <span class="variable">%theirs</span> <span class="variable">%mine</span> <span class="variable">%merged</span></div></pre></td></tr></table></figure>

<h3 id="参考资料">参考资料</h3>
<ol>
<li><a href="http://www.bricelam.net/2014/08/14/using-winmerge-with-tortoisegit.html" target="_blank" rel="external">http://www.bricelam.net/2014/08/14/using-winmerge-with-tortoisegit.html</a></li>
<li><a href="http://thoai-nguyen.blogspot.com/2012/03/setup-tortoise-git-and-winmerge.html" target="_blank" rel="external">http://thoai-nguyen.blogspot.com/2012/03/setup-tortoise-git-and-winmerge.html</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/05/10/using-winmerge-with-tortoisegit/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>我比较喜欢使用免费的<a href="http://winmerge.org/" target="_blank" rel="external">WinMerge</a>作为diff和merge工具，虽然TortoiseGit也自己带了TortoiseGitMerge工具，但是使用起来总觉得不是那么方便。</p>
<p>虽然WinMerge项目看起来没人维护了，最后一个发布打分版本在2013-02-02，但是这个工具使用起来还是相当方便的。我在重装机器的时候，或者更新Windows的时候，如果需要配置TortoiseGit,总是需要到网上查找如何配置WinMerge,因为长长的命令参数总是记不起来。所以在本文中记录下来。</p>
]]>
    
    </summary>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[更新Maven POM文件中依赖库的版本]]></title>
    <link href="http://colobu.com/2016/05/04/check-latest-dependencies-in-pom-xml/"/>
    <id>http://colobu.com/2016/05/04/check-latest-dependencies-in-pom-xml/</id>
    <published>2016-05-04T02:35:51.000Z</published>
    <updated>2016-05-04T03:08:32.592Z</updated>
    <content type="html"><![CDATA[<p>维护一个Maven管理的Java项目的时候，有的时候需要更新项目依赖的第三方的库，比如将Spring 3.2.16升级成Spring 4.2.5。我们可以通过<a href="http://www.mojohaus.org/versions-maven-plugin/" target="_blank" rel="external">Maven versions插件</a>自动化的实现。</p>
<p>这个插件定义了非常多的goal:</p>
<ul>
<li>versions:compare-dependencies compares the dependency versions of the current project to the dependency management section of a remote project.</li>
<li>versions:display-dependency-updates scans a project&#39;s dependencies and produces a report of those dependencies which have newer versions available.</li>
<li>versions:display-plugin-updates scans a project&#39;s plugins and produces a report of those plugins which have newer versions available.</li>
<li>versions:display-property-updates scans a projectand produces a report of those properties which are used to control artifact versions and which properies have newer versions available.</li>
<li>versions:update-parent updates the parent section of a project so that it references the newest available version. For example, if you use a corporate root POM, this goal can be helpful if you need to ensure you are using the latest version of the corporate root POM.</li>
<li>versions:update-properties updates properties defined in a project so that they correspond to the latest available version of specific dependencies. This can be useful if a suite of dependencies must all be locked to one version.</li>
<li>versions:update-property Sets a property to the latest version in a given range of associated artifacts.</li>
<li>versions:update-child-modules updates the parent section of the child modules of a project so the version matches the version of the current project. For example, if you have an aggregator pom that is also the parent for the projects that it aggregates and the children and parent versions get out of sync, this mojo can help fix the versions of the child modules. (Note you may need to invoke Maven with the -N option in order to run this goal if your project is broken so badly that it cannot build because of the version mis-match).</li>
<li>versions:lock-snapshots searches the pom for all -SNAPSHOT versions and replaces them with the current timestamp version of that -SNAPSHOT, e.g. -20090327.172306-4</li>
<li>versions:unlock-snapshots searches the pom for all timestamp locked snapshot versions and replaces them with -SNAPSHOT.</li>
<li>versions:resolve-ranges finds dependencies using version ranges and resolves the range to the specific version being used.</li>
<li>versions:set can be used to set the project version from the command line.</li>
<li>versions:use-releases searches the pom for all -SNAPSHOT versions which have been released and replaces them with the corresponding release version.</li>
<li>versions:use-next-releases searches the pom for all non-SNAPSHOT versions which have been a newer release and replaces them with the next release version.</li>
<li>versions:use-latest-releases searches the pom for all non-SNAPSHOT versions which have been a newer release and replaces them with the latest release version.</li>
<li>versions:use-next-snapshots searches the pom for all non-SNAPSHOT versions which have been a newer -SNAPSHOT version and replaces them with the next -SNAPSHOT version.</li>
<li>versions:use-latest-snapshots searches the pom for all non-SNAPSHOT versions which have been a newer -SNAPSHOT version and replaces them with the latest -SNAPSHOT version.</li>
<li>versions:use-next-versions searches the pom for all versions which have been a newer version and replaces them with the next version.</li>
<li>versions:use-latest-versions searches the pom for all versions which have been a newer version and replaces them with the latest version.</li>
<li>versions:commit removes the pom.xml.versionsBackup files. Forms one half of the built-in &quot;Poor Man&#39;s SCM&quot;.</li>
<li>versions:revert restores the pom.xml files from the pom.xml.versionsBackup files. Forms one half of the built-in &quot;Poor Man&#39;s SCM&quot;. </li>
</ul>
<p>也提供了三个reporting goal：</p>
<ul>
<li>versions:dependency-updates-report produces a report of those project dependencies which have newer versions available.</li>
<li>versions:plugin-updates-report produces a report of those plugins which have newer versions available.</li>
<li>versions:property-updates-report produces a report of those properties which are used to control artifact versions and which properies have newer versions available.</li>
</ul>
<p>如果你的项目中artifact的版本都是通过属性定义的，那么<code>mvn versions:display-property-updates</code>可以在命令行中显示可以更新的依赖的信息。</p>
<p>你可以手工更改这些依赖的版本，也可以通过<code>mvn versions:update-properties</code>自动更新定义版本的属性。</p>
<p>上面的命令会为你原始的pom.xml产生一个备份文件，如果没有更新问题，你可以通过 <code>mvn versions:commit</code>移除这个备份文件。</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/05/04/check-latest-dependencies-in-pom-xml/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>维护一个Maven管理的Java项目的时候，有的时候需要更新项目依赖的第三方的库，比如将Spring 3.2.16升级成Spring 4.2.5。我们可以通过<a href="http://www.mojohaus.org/versions-maven-plugin/" t]]>
    </summary>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Go web服务器中实现prefork和affinity]]></title>
    <link href="http://colobu.com/2016/05/03/use-prefork-and-affinity-in-Go/"/>
    <id>http://colobu.com/2016/05/03/use-prefork-and-affinity-in-Go/</id>
    <published>2016-05-03T08:14:38.000Z</published>
    <updated>2016-05-03T08:36:36.516Z</updated>
    <content type="html"><![CDATA[<p>Apache服务器可是使用prefork技术，启动多个独立的进程，每个进程独立的处理http请求，不需要担心线程安全的问题。</p>
<blockquote>
<p>This Multi-Processing Module (MPM) implements a non-threaded, pre-forking web server that handles requests in a manner similar to Apache 1.3. It is appropriate for sites that need to avoid threading for compatibility with non-thread-safe libraries. It is also the best MPM for isolating each request, so that a problem with a single request will not affect any other.</p>
</blockquote>
<p>尽管prefork在处理高并发的情况下并不高效，但是作为一个技术，倒是有启发我们的地方。我最近在调研Go服务器的性能看到一段代码，很优雅的实现了prefork和affinity的的功能，特地抄写在本文中，看看他是怎么实现的。</p>
<a id="more"></a>
<p>代码出处: <a href="https://github.com/nanoant/WebFrameworkBenchmark/blob/master/benchmarks/go-fasthttp/helloworldserver.go" target="_blank" rel="external">WebFrameworkBenchmark go-fasthttp</a>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"flag"</span></div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"io"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"os/exec"</span></div><div class="line">	<span class="string">"runtime"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/valyala/fasthttp"</span></div><div class="line">	<span class="string">"github.com/valyala/fasthttp/reuseport"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">	addr     = flag.String(<span class="string">"addr"</span>, <span class="string">":8080"</span>, <span class="string">"TCP address to listen to"</span>)</div><div class="line">	prefork  = flag.Bool(<span class="string">"prefork"</span>, <span class="constant">false</span>, <span class="string">"use prefork"</span>)</div><div class="line">	affinity = flag.Bool(<span class="string">"affinity"</span>, <span class="constant">false</span>, <span class="string">"use affinity for prefork"</span>)</div><div class="line">	child    = flag.Bool(<span class="string">"child"</span>, <span class="constant">false</span>, <span class="string">"is child proc"</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	flag.Parse()</div><div class="line"></div><div class="line">	ln := getListener()</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err := fasthttp.Serve(ln, requestHandler); err != <span class="constant">nil</span> {</div><div class="line">		log.Fatalf(<span class="string">"Error in ListenAndServe: %s"</span>, err)</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> requestHandler(ctx *fasthttp.RequestCtx) {</div><div class="line">	io.WriteString(ctx, <span class="string">"Hello World"</span>)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> getListener() net.Listener {</div><div class="line">	<span class="keyword">if</span> !*prefork {</div><div class="line">		ln, err := net.Listen(<span class="string">"tcp4"</span>, *addr)</div><div class="line">		<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">			log.Fatal(err)</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> ln</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">if</span> !*child {</div><div class="line">		children := <span class="built_in">make</span>([]*exec.Cmd, runtime.NumCPU())</div><div class="line">		<span class="keyword">for</span> i := <span class="keyword">range</span> children {</div><div class="line">			<span class="keyword">if</span> !*affinity {</div><div class="line">				children[i] = exec.Command(os.Args<span class="number">[0</span>], <span class="string">"-prefork"</span>, <span class="string">"-child"</span>)</div><div class="line">			} <span class="keyword">else</span> {</div><div class="line">				children[i] = exec.Command(<span class="string">"taskset"</span>, <span class="string">"-c"</span>, fmt.Sprintf(<span class="string">"%d"</span>, i), os.Args<span class="number">[0</span>], <span class="string">"-prefork"</span>, <span class="string">"-child"</span>)</div><div class="line">			}</div><div class="line">			children[i].Stdout = os.Stdout</div><div class="line">			children[i].Stderr = os.Stderr</div><div class="line">			<span class="keyword">if</span> err := children[i].Start(); err != <span class="constant">nil</span> {</div><div class="line">				log.Fatal(err)</div><div class="line">			}</div><div class="line">		}</div><div class="line">		<span class="keyword">for</span> _, ch := <span class="keyword">range</span> children {</div><div class="line">			<span class="keyword">if</span> err := ch.Wait(); err != <span class="constant">nil</span> {</div><div class="line">				log.Print(err)</div><div class="line">			}</div><div class="line">		}</div><div class="line">		os.Exit<span class="number">(0</span>)</div><div class="line">		<span class="built_in">panic</span>(<span class="string">"unreachable"</span>)</div><div class="line">	}</div><div class="line"></div><div class="line">	runtime.GOMAXPROCS<span class="number">(1</span>)</div><div class="line">	ln, err := reuseport.Listen(<span class="string">"tcp4"</span>, *addr)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		log.Fatal(err)</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> ln</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这个程序使用fast-http简单的实现了一个web服务器，简单的返回一个<code>hello world</code>。</p>
<p>如果程序启动的时候加上了<code>-prefork</code>参数，它会使用<code>exec.Command</code>启动多个子进程，子进程的数量和CPU的核数相同(第51行)。</p>
<p>如果程序启动的时候加上了<code>-prefork</code>参数和&quot;-affinity&quot;参数，它会将子进程绑定在其中的一个CPU核上，这样这个子进程只会被这个CPU执行。</p>
<p>子进程限定了使用的原生线程为1: <code>runtime.GOMAXPROCS(1)</code>。</p>
<p>因为程序使用了<code>reuseport</code>,所以不会导致多个IP地址和端口被占用的情况，多个子进程可以共用相同的IP地址+端口监听。</p>
<p>需要注意的事，<code>reuseport</code>并不是所有的操作系统都支持，比如目前windows就不支持，所以只可能在高版本的Linux中使用。</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/05/03/use-prefork-and-affinity-in-Go/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>Apache服务器可是使用prefork技术，启动多个独立的进程，每个进程独立的处理http请求，不需要担心线程安全的问题。</p>
<blockquote>
<p>This Multi-Processing Module (MPM) implements a non-threaded, pre-forking web server that handles requests in a manner similar to Apache 1.3. It is appropriate for sites that need to avoid threading for compatibility with non-thread-safe libraries. It is also the best MPM for isolating each request, so that a problem with a single request will not affect any other.</p>
</blockquote>
<p>尽管prefork在处理高并发的情况下并不高效，但是作为一个技术，倒是有启发我们的地方。我最近在调研Go服务器的性能看到一段代码，很优雅的实现了prefork和affinity的的功能，特地抄写在本文中，看看他是怎么实现的。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[巅峰对决 - 框架的性能比较]]></title>
    <link href="http://colobu.com/2016/04/25/performance-comparison-of-frameworks/"/>
    <id>http://colobu.com/2016/04/25/performance-comparison-of-frameworks/</id>
    <published>2016-04-25T07:10:38.000Z</published>
    <updated>2016-04-25T07:32:48.735Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>天下武功，无坚不摧，无快不破</p>
</blockquote>
<p>这句话也可以应用在软件开发上，&quot;无快不破&quot;强调的是软件的性能。我陆陆续续写了多篇各种框架的文章，也在github上开了多个性能比较的开源项目，本文做一个汇总，以备将来的查找。<br><a id="more"></a></p>
<ol>
<li><a href="http://colobu.com/2016/02/26/techempower-benchmarks-round12/" target="_blank" rel="external">最快的web服务器</a></li>
<li><a href="http://colobu.com/2016/02/23/1M-threads-microbenchmark/" target="_blank" rel="external">最快的并发框架</a></li>
<li><a href="http://colobu.com/2015/07/16/rpc-framework-performance-comparison/" target="_blank" rel="external">最快的RPC服务器</a></li>
<li><a href="http://colobu.com/2015/07/14/performance-comparison-of-7-websocket-frameworks/" target="_blank" rel="external">最快的websocket框架</a></li>
<li><a href="http://colobu.com/2015/11/17/Jax-RS-Performance-Comparison/" target="_blank" rel="external">最快的RESTful框架</a></li>
<li><a href="http://colobu.com/2016/03/16/why-is-go-gencode-so-fast/" target="_blank" rel="external">最快的Go序列化框架</a></li>
<li><a href="http://colobu.com/2016/04/06/the-fastest-golang-web-framework/" target="_blank" rel="external">最快的Go web框架</a></li>
<li><a href="http://colobu.com/2014/08/26/java-serializer-comparison/" target="_blank" rel="external">最快的Java序列化框架</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/25/performance-comparison-of-frameworks/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>天下武功，无坚不摧，无快不破</p>
</blockquote>
<p>这句话也可以应用在软件开发上，&quot;无快不破&quot;强调的是软件的性能。我陆陆续续写了多篇各种框架的文章，也在github上开了多个性能比较的开源项目，本文做一个汇总，以备将来的查找。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala native即将发布]]></title>
    <link href="http://colobu.com/2016/04/22/scala-native-is-coming/"/>
    <id>http://colobu.com/2016/04/22/scala-native-is-coming/</id>
    <published>2016-04-22T02:08:57.000Z</published>
    <updated>2016-04-22T06:03:21.059Z</updated>
    <content type="html"><![CDATA[<p>洛桑联邦理工学院(EPFL)发布了一个新的网站<a href="http://www.scala-native.org/" target="_blank" rel="external">http://www.scala-native.org/</a>，他们宣布了一个新的项目 Scala Native,但是没有公布具体的内容，只有&quot;coming soon&quot;的提示， 但是网站上唯一的提示 &quot;Your favourite language gets closer to bare metal.&quot; 隐约透漏它可能是可以使用Scala编程语言编译成本机代码的项目。</p>
<p>Scala除了纵向发展外(Scala本身语言的扩展)， 也在横向的发展， 比如Scala.js将Scala语言引入到Javascript中，它可以将Scala语言编译成javascript。因此有理由相信，这个即将发布的项目可以将Scala代码编译成本机代码，这样就可以脱离虚拟机直接运行了。</p>
<a id="more"></a>
<p>这个项目会在接下来的几个月发布，但是在即将举行的纽约 Scala Days会议上, Denys Shabalin会介绍一个主题 &quot;Scala Goes Native&quot;, 内容为:</p>
<blockquote>
<p>Scala has historically been a JVM-centric programming language. The situation has started to change with appearance of the Scala.js that opened a door of front-end development to Scala programmers. This talk will expand the horizons of Scala even more. We’re going to announce a new ahead-of-time compiler and lightweight managed runtime designed specifically for Scala.</p>
</blockquote>
<p>可以看到Scala native会提供一个编译器和一个轻量级的受管的运行时，看起来类似Golang，编译的程序会自带这个轻量级的运行时，负责垃圾回收。详细的内容在5月11号就可以知道了，估计到时Scala native网站也会进行更新。</p>
<p>如果这一切成真，这将会给Scala带来非同一般的功能，本地代码意味着我们不必依赖JVM,可以很容易地发布到docker中，更快更小，将会吸引更多的程序员的眼球。</p>
<p>但是，也有一些值得观察的因素， 如果脱离JVM,是否还能使用Java的丰富的类库，还是自己提供一个？编译的性能如何？JVM的垃圾回收器历经多年，进行了非常非常仔细的优化，如果Scala native自带运行时的化，能否做好垃圾回收功能？</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/22/scala-native-is-coming/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>洛桑联邦理工学院(EPFL)发布了一个新的网站<a href="http://www.scala-native.org/" target="_blank" rel="external">http://www.scala-native.org/</a>，他们宣布了一个新的项目 Scala Native,但是没有公布具体的内容，只有&quot;coming soon&quot;的提示， 但是网站上唯一的提示 &quot;Your favourite language gets closer to bare metal.&quot; 隐约透漏它可能是可以使用Scala编程语言编译成本机代码的项目。</p>
<p>Scala除了纵向发展外(Scala本身语言的扩展)， 也在横向的发展， 比如Scala.js将Scala语言引入到Javascript中，它可以将Scala语言编译成javascript。因此有理由相信，这个即将发布的项目可以将Scala代码编译成本机代码，这样就可以脱离虚拟机直接运行了。</p>
]]>
    
    </summary>
    
      <category term="Scala" scheme="http://colobu.com/categories/Scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用visual studio code开发Go程序]]></title>
    <link href="http://colobu.com/2016/04/21/use-vscode-to-develop-go-programs/"/>
    <id>http://colobu.com/2016/04/21/use-vscode-to-develop-go-programs/</id>
    <published>2016-04-21T01:25:34.000Z</published>
    <updated>2016-04-28T08:04:40.383Z</updated>
    <content type="html"><![CDATA[<p>在visual studio code 1.0发布之前我也曾多次尝试使用visual studio code开发Go程序，但是都放弃了，一是Go的插件还没发布或者不完善，而是vscode还不是那么方便，所以我一直使用atom + goplus + godebug编写Go的代码，而且用起来也非常的顺手方便。 现在vscode 1.0发布了，而且支持10种本地化语言，我尝试使用它编写Go程序，功能和性能都不错，所以目前atom和vscode都是我的菜。</p>
<p>本文简单介绍一下使用vscode开发Go的一些配置，速览vscode + Go 的功能。</p>
<a id="more"></a>
<h3 id="调整本地语言">调整本地语言</h3>
<p>vscode安装上后会根据你的操作系统的本地化设置来配置你的visual studio code采用的语言，所以很可能你安装上之后显示为简体中文。目前vscode 1.0支持下面<a href="https://code.visualstudio.com/docs/customization/locales" target="_blank" rel="external">10种语言</a>：</p>
<ul>
<li>English (US)     en-US</li>
<li>简体中文     zh-CN</li>
<li>繁体中文     zh-TW</li>
<li>法语     fr</li>
<li>德语     de</li>
<li>意大利语     it</li>
<li>日语     ja</li>
<li>韩语     ko</li>
<li>俄语     ru</li>
<li>西班牙语     es</li>
</ul>
<p>我还是习惯于英语环境，所以调整本地化语言为英语。如果想调整语言，使用 &quot;ctrl + shift + P&quot;打开命令面板，输入 &quot;Conf&quot; 就会显示出 “Configure Language”命令，点击这个命令就会新建或者打开locale.json文件，在这个文件中你就可以设置你的locale 语言了：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">	"<span class="attribute">locale</span>":<span class="value"><span class="string">"en-US"</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>我把它改成英文显示，重启vscode就显示英文了。</p>
<h3 id="安装Go插件">安装Go插件</h3>
<p>要开发Go程序，你需要安装Go的插件。 &quot;ctrl + shift + P&quot;打开命名面板，然后输入 &quot;ext install Go&quot;就会安装Go插件了，安装完后提示你重启vscode,就可以编写Go程序了。<br><img src="http://i.giphy.com/xTiTndDHV3GeIy6aNa.gif" alt=""></p>
<p>它支持以下功能：</p>
<ul>
<li>彩色高亮Colorization</li>
<li>自动完成列表 (using gocode)</li>
<li>方法和类的签名帮助信息 (using godoc)</li>
<li>代码片段</li>
<li>快速信息 (using godef)</li>
<li>查找定义 (using godef)</li>
<li>查找引用 (using guru)</li>
<li>文件大纲 (using go-outline)</li>
<li>工作区符号搜索 (using go-symbols)</li>
<li>重命名 (using gorename)</li>
<li>保存时编译 (using go build and go test)</li>
<li>格式化 (using goreturns or goimports or gofmt)</li>
<li>增加导入 (using gopkgs)</li>
<li>调试 [部分实现] (using delve)</li>
</ul>
<p>它的调试功能值得称赞，Go总算也有一个方便的调试功能呢，加上断点后可以断点所在的堆栈信息，变量以及监控自定义的表达式。(atom + godebug也可以实现这个功能，它也通过delve进行调试)</p>
<p>在vscode左边工具栏的第四个图标就可以打开调试窗口,点击某行可以方便的在代码中增加断点。<br><img src="vscode.png" alt=""></p>
<p>当然，在第一次编写Go代码的时候，可能需要安装所需的工具，如guru、go-symbols、goreturns等。如果设置好GOPATH环境变量，启动vscode,打开一个go代码文件，在右下角你会看到 &quot;Analysis Tools Missing&quot;的提示，点击它就会自动安装这些所需的工具。你也可以手工安装它们：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">go get -u -v github.com/nsf/gocode</div><div class="line">go get -u -v github.com/rogpeppe/godef</div><div class="line">go get -u -v github.com/golang/lint/golint</div><div class="line">go get -u -v github.com/lukehoban/go-outline</div><div class="line">go get -u -v sourcegraph.com/sqs/goreturns</div><div class="line">go get -u -v golang.org/x/tools/cmd/gorename</div><div class="line">go get -u -v github.com/tpng/gopkgs</div><div class="line">go get -u -v github.com/newhook/go-symbols</div><div class="line">go get -u -v golang.org/x/tools/cmd/guru</div></pre></td></tr></table></figure>

<h3 id="Go插件设置">Go插件设置</h3>
<p>vscode的Go插件有一些可以定制化的配置，你可以打开user preferences 或者 workspace settings来配置。如果想对所有的Go项目有效，就修改user preferences。</p>
<p>点击菜单 &quot;File -&gt; Preferences -&gt; User Settting&quot;打开窗口，左边的窗口是 vscode缺省配置，右边的窗口可以添加我们自己的设置。对于Go插件，可以添加如下的设置：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    "<span class="attribute">go.buildOnSave</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">go.lintOnSave</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">go.vetOnSave</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">go.buildFlags</span>": <span class="value">[]</span>,</div><div class="line">    "<span class="attribute">go.lintFlags</span>": <span class="value">[]</span>,</div><div class="line">    "<span class="attribute">go.vetFlags</span>": <span class="value">[]</span>,</div><div class="line">    "<span class="attribute">go.coverOnSave</span>": <span class="value"><span class="literal">false</span></span>,</div><div class="line">    "<span class="attribute">go.useCodeSnippetsOnFunctionSuggest</span>": <span class="value"><span class="literal">false</span></span>,</div><div class="line">    "<span class="attribute">go.formatOnSave</span>": <span class="value"><span class="literal">true</span></span>,</div><div class="line">    "<span class="attribute">go.formatTool</span>": <span class="value"><span class="string">"goreturns"</span></span>,</div><div class="line">    "<span class="attribute">go.goroot</span>": <span class="value"><span class="string">"C:/Go"</span></span>,</div><div class="line">    "<span class="attribute">go.gopath</span>": <span class="value"><span class="string">"C:/gopath"</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>它定制了Go插件的一些行为和变量。比如你可以改格式化工具为&quot;gofmt&quot;,如 &quot;go.formatTool&quot;: &quot;gofmt&quot;。</p>
<p>在写Go代码的时候，很多工具只有在编写的文件保存的时候才会执行，比如格式化，vet，lint、cover、test等，所以定时的保存文件可以触发这些动作,因此你可以在这个配置文件中加上下面的配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"files.autoSave"</span>: <span class="string">"afterDelay"</span></div></pre></td></tr></table></figure>

<p>它可以定时的保存文件。</p>
<h3 id="快捷键">快捷键</h3>
<p>你可以通过菜单 &quot;File -&gt; Preferences -&gt; Keyboard Shortcuts&quot;查看和定义快捷键。左边的窗口显示缺省的快捷键设置，但是不是很直观，建议看这个<a href="https://code.visualstudio.com/Docs/customization/keybindings" target="_blank" rel="external">链接</a>，它分门别类的介绍了每个快捷键的功能。</p>
<p>一般涉及到快捷键，我都会对其中的一个快捷键特别的关注，就是 &quot;ctrl + space&quot;，这个键一般用来设置触发提示的功能，但是和输入法切换的快捷键冲突，所以我会重新定义它。在刚才打开的右边窗口中增加定义：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    "<span class="attribute">key</span>": <span class="value"><span class="string">"ctrl+j"</span></span>,</div><div class="line">    "<span class="attribute">command</span>": <span class="value"><span class="string">"editor.action.triggerSuggest"</span></span>,</div><div class="line">    "<span class="attribute">when</span>": <span class="value"><span class="string">"editorTextFocus"</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>同时我还增加了一个自己习惯的快捷键，就是格式化代码的快捷点，默认设置为 &quot;shift+alt+f&quot;,我新增加了一个快捷键：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">       "<span class="attribute">key</span>": <span class="value"><span class="string">"ctrl+alt+f"</span></span>,</div><div class="line">       "<span class="attribute">command</span>": <span class="value"><span class="string">"editor.action.format"</span></span>,</div><div class="line">       "<span class="attribute">when</span>": <span class="value"><span class="string">"editorTextFocus"</span></span></div><div class="line">   }</div></pre></td></tr></table></figure>

<p>以及执行测试的快捷键</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">{</div><div class="line">    <span class="string">"key"</span>: <span class="string">"ctrl+alt+t"</span>,</div><div class="line">    <span class="string">"command"</span>: <span class="string">"go.test.cursor"</span>,</div><div class="line">    <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">},</div><div class="line"></div><div class="line">{</div><div class="line">    <span class="string">"key"</span>: <span class="string">"ctrl+alt+p"</span>,</div><div class="line">    <span class="string">"command"</span>: <span class="string">"go.test.package"</span>,</div><div class="line">    <span class="string">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>右边窗口的的右下角有对话框可以帮助你增加快捷键，当然你也可以想我这样一样手工添加。</p>
<h3 id="其它功能">其它功能</h3>
<p>Go插件和vscode工具配合的很好，比如调用格式化代码的快捷键就可以进行格式化，不必在保存的时候就可以执行。你也可以在命令面板中输入 &quot;!&quot;查看警告和错误信息。</p>
<p>类似Sublime text,命令面板非常的有用， &quot;ctrl + p&quot;打开它后输入 &quot;?&quot;可以查看它的不同的功能。<br><img src="command.png" alt=""></p>
<p>vscode的状态栏也非常的有用，插件信息、git信息，文档信息都会在这里显示。<br><img src="status.png" alt=""></p>
<p>你可以改变代码高亮的风格。&quot;ctrl + shift + P&quot;打开命令面板，输入 &quot;theme&quot;会显示 &quot;Preferences:Color Theme&quot;,点击它会显示可用的theme。 你还可以在<a href="https://marketplace.visualstudio.com/vscode" target="_blank" rel="external">visual studio marketplace</a>上你可以找到更多的theme，比如我使用的[Seti Modified]，和atom的保持一致。</p>
<p>相比atom,当然vscode还有不足的地方，比如打开多个文件，它们不会以tab的显示多窗口，你还需要&quot;ctrl + tab&quot;再选择其它的文件。没有安装Python但是还总提示Python插件需要升级等。但是也有比atom功能强大的地方，比如 &quot;ctrl&quot; +鼠标点击就可以查看方法的定义，性能可能比atom要好，尽管在我的机器上还没看出太大的性能区别。</p>
<p>本文只是粗略的展示了vscode和Go插件的功能，相信更强大的功能还有待在实践中发掘和学习。</p>
<p>另外，建议阅读github上的这篇文章<a href="https://github.com/Microsoft/vscode-tips-and-tricks/blob/master/README.md" target="_blank" rel="external">VS Code Tips and Tricks</a></p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/21/use-vscode-to-develop-go-programs/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>在visual studio code 1.0发布之前我也曾多次尝试使用visual studio code开发Go程序，但是都放弃了，一是Go的插件还没发布或者不完善，而是vscode还不是那么方便，所以我一直使用atom + goplus + godebug编写Go的代码，而且用起来也非常的顺手方便。 现在vscode 1.0发布了，而且支持10种本地化语言，我尝试使用它编写Go程序，功能和性能都不错，所以目前atom和vscode都是我的菜。</p>
<p>本文简单介绍一下使用vscode开发Go的一些配置，速览vscode + Go 的功能。</p>
]]>
    
    </summary>
    
      <category term="vscode" scheme="http://colobu.com/tags/vscode/"/>
    
      <category term="go" scheme="http://colobu.com/tags/go/"/>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go 调度器跟踪]]></title>
    <link href="http://colobu.com/2016/04/19/Scheduler-Tracing-In-Go/"/>
    <id>http://colobu.com/2016/04/19/Scheduler-Tracing-In-Go/</id>
    <published>2016-04-19T07:05:30.000Z</published>
    <updated>2016-04-19T08:41:37.558Z</updated>
    <content type="html"><![CDATA[<p>这是William Kennedy写的第二篇文章： <a href="https://www.goinggo.net/2015/02/scheduler-tracing-in-go.html" target="_blank" rel="external">Scheduler Tracing In Go</a>, 第一篇为 <a href="http://colobu.com/2016/04/19/Stack-Traces-In-Go/" target="_blank" rel="external">Stack Traces In Go</a>。</p>
<blockquote>
<p>本文主要介绍如何跟踪Go的调度器Scheduler的活动。</p>
</blockquote>
<a id="more"></a>
<h3 id="介绍">介绍</h3>
<p>我喜欢Go的原因之一就是能够产生概要(profiling)和调试信息。当你的程序运行时，<strong>GODEBUG</strong>环境变量可以产生运行时的调试信息。你可以请求垃圾回收器和调度器(scheduler)的摘要信息和细节。关键是你不需要额外创建单独的编译程序就可以实现。</p>
<p>在本文中，我将演示如何理解一个简单的并发Go程序的调度器跟踪信息。如果你已经有Go调度器的基本概念，对阅读本文会很有帮助， 在开始下面的介绍前我建议你阅读下面的两篇文章：</p>
<ol>
<li><a href="http://www.goinggo.net/2014/01/concurrency-goroutines-and-gomaxprocs.html" target="_blank" rel="external">Concurrency, Goroutines and GOMAXPROCS</a></li>
<li><a href="http://morsmachine.dk/go-scheduler" target="_blank" rel="external">Go Scheduler</a></li>
</ol>
<h3 id="代码">代码</h3>
<p>下面的代码就是用来演示用的例子。</p>
<figure class="highlight Go"><figcaption><span>列表1 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"sync"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	<span class="keyword">var</span> wg sync.WaitGroup</div><div class="line">	wg.Add<span class="number">(10</span>)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt;<span class="number"> 10</span>; i++ {</div><div class="line">		<span class="keyword">go</span> work(&amp;wg)</div><div class="line">	}</div><div class="line"></div><div class="line">	wg.Wait()</div><div class="line"></div><div class="line">	<span class="comment">// Wait to see the global run queue deplete.</span></div><div class="line">	time.Sleep<span class="number">(3</span> * time.Second)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> work(wg *sync.WaitGroup) {</div><div class="line">	time.Sleep(time.Second)</div><div class="line"></div><div class="line">	<span class="keyword">var</span> counter <span class="typename">int</span></div><div class="line">	<span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt;<span class="number"> 1e10</span>; i++ {</div><div class="line">		counter++</div><div class="line">	}</div><div class="line"></div><div class="line">	wg.Done()</div><div class="line">}</div></pre></td></tr></table></figure>

<p>列表1的第12行使用一个for循环创建10个goroutine，第16行main函数中等待所有的goroutine完成任务。第22行的work函数先sleep 1秒，然后计数 10亿次。一旦计数完成，调用waitGroup的Done方法然后返回。</p>
<p>首先<code>go build</code>程序，然后运行时设置GODEBUG环境变量。这个变量会被运行时读取，所以Go命令也会产生跟踪信息。如果在运行<code>go run</code>命令的时候设置了GODEBUG变量，在程序运行之前就会看到跟踪信息。</p>
<p>所以还是让我们先编译程序：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> build example.<span class="keyword">go</span></div></pre></td></tr></table></figure>

<h3 id="调度器摘要信息">调度器摘要信息</h3>
<p>schedtrace参数告诉运行时打印一行调度器的摘要信息到标准err输出中，时间间隔可以指定，单位毫秒，如下所示：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GOMAXPROCS=<span class="number">1</span> GODEBUG=schedtrace=<span class="number">1000</span> ./example</div></pre></td></tr></table></figure>

<blockquote>
<p>译者注： 如果在windows下可以运行 <code>set GOMAXPROCS=1 &amp;&amp; set GODEBUG=schedtrace=1000 &amp;&amp; example</code></p>
</blockquote>
<p>程序开始后每个一秒就会打印一行调度器的概要信息，程序本身没有任何输出，所以我们只关注输出的跟踪信息。让我们先看前两行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SCHED <span class="number">0</span>ms: <span class="variable">gomaxprocs=</span><span class="number">1</span> <span class="variable">idleprocs=</span><span class="number">0</span> <span class="variable">threads=</span><span class="number">2</span> <span class="variable">spinningthreads=</span><span class="number">0</span> <span class="variable">idlethreads=</span><span class="number">0</span></div><div class="line"><span class="variable">runqueue=</span><span class="number">0</span> [<span class="number">1</span>]</div><div class="line"></div><div class="line">SCHED <span class="number">1009</span>ms: <span class="variable">gomaxprocs=</span><span class="number">1</span> <span class="variable">idleprocs=</span><span class="number">0</span> <span class="variable">threads=</span><span class="number">3</span> <span class="variable">spinningthreads=</span><span class="number">0</span> <span class="variable">idlethreads=</span><span class="number">1</span></div><div class="line"><span class="variable">runqueue=</span><span class="number">0</span> [<span class="number">9</span>]</div></pre></td></tr></table></figure>

<p>让我们分解每一个项，看看它们分别代表什么含义。</p>
<table>
<thead>
<tr>
<th>输出项</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>1009ms</td>
<td>自从程序开始的毫秒数</td>
</tr>
<tr>
<td>gomaxprocs=1</td>
<td>配置的处理器数(逻辑的processor，也就是Go模型中的P,会通过操作系统的线程绑定到一个物理处理器上)</td>
</tr>
<tr>
<td>threads=3</td>
<td>运行期管理的线程数，目前三个线程</td>
</tr>
<tr>
<td>idlethreads=1</td>
<td>空闲的线程数,当前一个线程空闲，两个忙</td>
</tr>
<tr>
<td>idleprocs=0</td>
<td>空闲的处理器数,当前0个空闲</td>
</tr>
<tr>
<td>runqueue=0</td>
<td>在全局的run队列中的goroutine数，目前所有的goroutine都被移动到本地run队列</td>
</tr>
<tr>
<td>[9]</td>
<td>本地run队列中的goroutine数，目前9个goroutine在本地run队列中等待</td>
</tr>
</tbody>
</table>
<p>Go运行时给了我们很多有用的摘要信息。当我们看第一秒的跟踪数据时，我们看到一个goroutine正在运行，而其它9个都在等待：<br><img src="diagram1.png" alt="图1"></p>
<p>图1中处理器由字符P代表，线程由M代表，goroutine由G代表。我们看到全局run队列为空，处理器正在执行一个goroutine。其余9在本地队列中等待。</p>
<p>如果我们配置多个处理器会怎样呢？让我们增加GOMAXPROCS 看看输出结果:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="variable">GOMAXPROCS=</span><span class="number">2</span> <span class="variable">GODEBUG=</span><span class="variable">schedtrace=</span><span class="number">1000</span> ./example</div><div class="line"></div><div class="line">SCHED <span class="number">0</span>ms: <span class="variable">gomaxprocs=</span><span class="number">2</span> <span class="variable">idleprocs=</span><span class="number">1</span> <span class="variable">threads=</span><span class="number">2</span> <span class="variable">spinningthreads=</span><span class="number">0</span></div><div class="line"><span class="variable">idlethreads=</span><span class="number">0</span> <span class="variable">runqueue=</span><span class="number">0</span> [<span class="number">0</span> <span class="number">0</span>]</div><div class="line"></div><div class="line">SCHED <span class="number">1002</span>ms: <span class="variable">gomaxprocs=</span><span class="number">2</span> <span class="variable">idleprocs=</span><span class="number">0</span> <span class="variable">threads=</span><span class="number">4</span> <span class="variable">spinningthreads=</span><span class="number">1</span></div><div class="line"><span class="variable">idlethreads=</span><span class="number">1</span> <span class="variable">runqueue=</span><span class="number">0</span> [<span class="number">0</span> <span class="number">4</span>]</div><div class="line"></div><div class="line">SCHED <span class="number">2006</span>ms: <span class="variable">gomaxprocs=</span><span class="number">2</span> <span class="variable">idleprocs=</span><span class="number">0</span> <span class="variable">threads=</span><span class="number">4</span> <span class="variable">spinningthreads=</span><span class="number">0</span></div><div class="line"><span class="variable">idlethreads=</span><span class="number">1</span> <span class="variable">runqueue=</span><span class="number">0</span> [<span class="number">4</span> <span class="number">4</span>]</div><div class="line"></div><div class="line">…</div><div class="line"></div><div class="line">SCHED <span class="number">6024</span>ms: <span class="variable">gomaxprocs=</span><span class="number">2</span> <span class="variable">idleprocs=</span><span class="number">0</span> <span class="variable">threads=</span><span class="number">4</span> <span class="variable">spinningthreads=</span><span class="number">0</span></div><div class="line"><span class="variable">idlethreads=</span><span class="number">1</span> <span class="variable">runqueue=</span><span class="number">2</span> [<span class="number">3</span> <span class="number">3</span>]</div><div class="line"></div><div class="line">…</div><div class="line"></div><div class="line">SCHED <span class="number">10049</span>ms: <span class="variable">gomaxprocs=</span><span class="number">2</span> <span class="variable">idleprocs=</span><span class="number">0</span> <span class="variable">threads=</span><span class="number">4</span> <span class="variable">spinningthreads=</span><span class="number">0</span></div><div class="line"><span class="variable">idlethreads=</span><span class="number">1</span> <span class="variable">runqueue=</span><span class="number">4</span> [<span class="number">2</span> <span class="number">2</span>]</div><div class="line">…</div><div class="line"></div><div class="line">SCHED <span class="number">13067</span>ms: <span class="variable">gomaxprocs=</span><span class="number">2</span> <span class="variable">idleprocs=</span><span class="number">0</span> <span class="variable">threads=</span><span class="number">4</span> <span class="variable">spinningthreads=</span><span class="number">0</span></div><div class="line"><span class="variable">idlethreads=</span><span class="number">1</span> <span class="variable">runqueue=</span><span class="number">6</span> [<span class="number">1</span> <span class="number">1</span>]</div><div class="line"></div><div class="line">…</div><div class="line"></div><div class="line">SCHED <span class="number">17084</span>ms: <span class="variable">gomaxprocs=</span><span class="number">2</span> <span class="variable">idleprocs=</span><span class="number">0</span> <span class="variable">threads=</span><span class="number">4</span> <span class="variable">spinningthreads=</span><span class="number">0</span></div><div class="line"><span class="variable">idlethreads=</span><span class="number">1</span> <span class="variable">runqueue=</span><span class="number">8</span> [<span class="number">0</span> <span class="number">0</span>]</div><div class="line"></div><div class="line">…</div><div class="line"></div><div class="line">SCHED <span class="number">21100</span>ms: <span class="variable">gomaxprocs=</span><span class="number">2</span> <span class="variable">idleprocs=</span><span class="number">2</span> <span class="variable">threads=</span><span class="number">4</span> <span class="variable">spinningthreads=</span><span class="number">0</span></div><div class="line"><span class="variable">idlethreads=</span><span class="number">2</span> <span class="variable">runqueue=</span><span class="number">0</span> [<span class="number">0</span> <span class="number">0</span>]</div></pre></td></tr></table></figure>

<p>让我们将视线放在第二秒：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">SCHED <span class="number">2002</span>ms: gomaxprocs=<span class="number">2</span> idleprocs=<span class="number">0</span> threads=<span class="number">4</span> spinningthreads=<span class="number">0</span></div><div class="line">idlethreads=<span class="number">1</span> runqueue=<span class="number">0</span> [<span class="number">4</span> <span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="number">2002</span>ms        : This <span class="keyword">is</span> <span class="keyword">the</span> trace <span class="keyword">for</span> <span class="keyword">the</span> <span class="number">2</span> <span class="keyword">second</span> mark.</div><div class="line">gomaxprocs=<span class="number">2</span>  : <span class="number">2</span> processors are configured <span class="keyword">for</span> this program.</div><div class="line">threads=<span class="number">4</span>     : <span class="number">4</span> threads exist. <span class="number">2</span> <span class="keyword">for</span> processors <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">for</span> <span class="keyword">the</span> runtime.</div><div class="line">idlethreads=<span class="number">1</span> : <span class="number">1</span> idle thread (<span class="number">3</span> threads <span class="property">running</span>).</div><div class="line">idleprocs=<span class="number">0</span>   : <span class="number">0</span> processors are idle (<span class="number">2</span> processors busy).</div><div class="line">runqueue=<span class="number">0</span>    : All runnable goroutines have been moved <span class="keyword">to</span> a <span class="keyword">local</span> <span class="command">run</span> queue.</div><div class="line">[<span class="number">4</span> <span class="number">4</span>]         : <span class="number">4</span> goroutines are waiting inside each <span class="keyword">local</span> <span class="command">run</span> queue.</div></pre></td></tr></table></figure>

<p><img src="diagram2.png" alt="图2"></p>
<p>让我们看第二秒的信息，可以看到goroutine是如何被处理器运行的。我们也可以看到有8个goroutine在本地run队列中等待，每个本地run队列包含4个等待的goroutine。</p>
<p>让我们再来看第6秒的信息：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SCHED <span class="number">6024</span>ms: <span class="variable">gomaxprocs=</span><span class="number">2</span> <span class="variable">idleprocs=</span><span class="number">0</span> <span class="variable">threads=</span><span class="number">4</span> <span class="variable">spinningthreads=</span><span class="number">0</span></div><div class="line"><span class="variable">idlethreads=</span><span class="number">1</span> <span class="variable">runqueue=</span><span class="number">2</span> [<span class="number">3</span> <span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="variable">idleprocs=</span><span class="number">0</span> : <span class="number">0</span> processors are idle (<span class="number">2</span> processors busy).</div><div class="line"><span class="variable">runqueue=</span><span class="number">2</span>  : <span class="number">2</span> goroutines returned <span class="constant">and</span> are waiting to be terminated.</div><div class="line">[<span class="number">3</span> <span class="number">3</span>]       : <span class="number">3</span> goroutines are waiting inside each local run queue.</div></pre></td></tr></table></figure>

<p><img src="diagram3.png" alt="图3"></p>
<p>第6秒数据有些变化，如图3所示，两个goroutine完成了它们的任务，放回到全局run队列中。当然我们还是有两个goruntine在运行(G6,G7)，每个P运行一个。每个本地run队列中还有3个goroutine在等待。</p>
<p><strong>注意:</strong><br>在很多情况下goroutine在终止前并没有被放回到全局run队列。本文中的例子比较特殊，它的方法体是一个for循环，并没有调用其它函数，而且运行时间超过10ms。10毫秒是调度器的调度标杆，过了10毫秒的执行时间，调度器就会尝试占用(preempt)这个goroutine。本例中的goroutine没有被占用是因为它们没有调用其它函数。本例中一旦goroutine执行到wg.Done调用，它们立即被占用，然后移动到全局run队列等待终止。</p>
<p>在17秒我们看到只有两个goroutine还在运行:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SCHED <span class="number">17084</span>ms: <span class="variable">gomaxprocs=</span><span class="number">2</span> <span class="variable">idleprocs=</span><span class="number">0</span> <span class="variable">threads=</span><span class="number">4</span> <span class="variable">spinningthreads=</span><span class="number">0</span></div><div class="line"><span class="variable">idlethreads=</span><span class="number">1</span> <span class="variable">runqueue=</span><span class="number">8</span> [<span class="number">0</span> <span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="variable">idleprocs=</span><span class="number">0</span> : <span class="number">0</span> processors are idle (<span class="number">2</span> processors busy).</div><div class="line"><span class="variable">runqueue=</span><span class="number">8</span>  : <span class="number">8</span> goroutines returned <span class="constant">and</span> are waiting to be terminated.</div><div class="line">[<span class="number">0</span> <span class="number">0</span>]       : No goroutines are waiting inside any local run queue.</div></pre></td></tr></table></figure>

<p><img src="diagram4.png" alt="图4"></p>
<p>从图4可以看出，8个goroutine被移动到全局run队列等待终止。两个goroutine(G12和G13)还在运行，本地run队列都为空。</p>
<p>最后在第21秒：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SCHED <span class="number">21100</span>ms: <span class="variable">gomaxprocs=</span><span class="number">2</span> <span class="variable">idleprocs=</span><span class="number">2</span> <span class="variable">threads=</span><span class="number">4</span> <span class="variable">spinningthreads=</span><span class="number">0</span></div><div class="line"><span class="variable">idlethreads=</span><span class="number">2</span> <span class="variable">runqueue=</span><span class="number">0</span> [<span class="number">0</span> <span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="variable">idleprocs=</span><span class="number">2</span> : <span class="number">2</span> processors are idle (<span class="number">0</span> processors busy).</div><div class="line"><span class="variable">runqueue=</span><span class="number">0</span>  : All the goroutines that were <span class="keyword">in</span> the queue have been terminated.</div><div class="line">[<span class="number">0</span> <span class="number">0</span>]       : No goroutines are waiting inside any local run queue.</div></pre></td></tr></table></figure>

<p><img src="diagram5.png" alt="图5"><br>如图5所示，这时那10个goroutine都已经完成任务被终止。</p>
<h3 id="调度器跟踪信息的细节">调度器跟踪信息的细节</h3>
<p>调度器的摘要信息很有帮助，但是有时候你需要更深入的了解它的细节。在这种情况下，我们可以使用scheddetail 参数，可以提供处理器P,线程M和goroutine G的细节。让我们再运行一下程序，增加scheddetail 参数:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">GOMAXPROCS=</span><span class="number">2</span> <span class="variable">GODEBUG=</span><span class="variable">schedtrace=</span><span class="number">1000</span>,<span class="variable">scheddetail=</span><span class="number">1</span> ./example</div></pre></td></tr></table></figure>

<p>下面的日志是第4秒的输出：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">SCHED <span class="number">4028</span>ms: <span class="variable">gomaxprocs=</span><span class="number">2</span> <span class="variable">idleprocs=</span><span class="number">0</span> <span class="variable">threads=</span><span class="number">4</span> <span class="variable">spinningthreads=</span><span class="number">0</span></div><div class="line"><span class="variable">idlethreads=</span><span class="number">1</span> <span class="variable">runqueue=</span><span class="number">2</span> <span class="variable">gcwaiting=</span><span class="number">0</span> <span class="variable">nmidlelocked=</span><span class="number">0</span> <span class="variable">stopwait=</span><span class="number">0</span> <span class="variable">sysmonwait=</span><span class="number">0</span></div><div class="line">P0: <span class="variable">status=</span><span class="number">1</span> <span class="variable">schedtick=</span><span class="number">10</span> <span class="variable">syscalltick=</span><span class="number">0</span> <span class="variable">m=</span><span class="number">3</span> <span class="variable">runqsize=</span><span class="number">3</span> <span class="variable">gfreecnt=</span><span class="number">0</span></div><div class="line">P1: <span class="variable">status=</span><span class="number">1</span> <span class="variable">schedtick=</span><span class="number">10</span> <span class="variable">syscalltick=</span><span class="number">1</span> <span class="variable">m=</span><span class="number">2</span> <span class="variable">runqsize=</span><span class="number">3</span> <span class="variable">gfreecnt=</span><span class="number">0</span></div><div class="line">M3: <span class="variable">p=</span><span class="number">0</span> <span class="variable">curg=</span><span class="number">4</span> <span class="variable">mallocing=</span><span class="number">0</span> <span class="variable">throwing=</span><span class="number">0</span> <span class="variable">gcing=</span><span class="number">0</span> <span class="variable">locks=</span><span class="number">0</span> <span class="variable">dying=</span><span class="number">0</span> <span class="variable">helpgc=</span><span class="number">0</span> <span class="variable">spinning=</span><span class="number">0</span> <span class="variable">blocked=</span><span class="number">0</span> <span class="variable">lockedg=</span>-<span class="number">1</span></div><div class="line">M2: <span class="variable">p=</span><span class="number">1</span> <span class="variable">curg=</span><span class="number">10</span> <span class="variable">mallocing=</span><span class="number">0</span> <span class="variable">throwing=</span><span class="number">0</span> <span class="variable">gcing=</span><span class="number">0</span> <span class="variable">locks=</span><span class="number">0</span> <span class="variable">dying=</span><span class="number">0</span> <span class="variable">helpgc=</span><span class="number">0</span> <span class="variable">spinning=</span><span class="number">0</span> <span class="variable">blocked=</span><span class="number">0</span> <span class="variable">lockedg=</span>-<span class="number">1</span></div><div class="line">M1: <span class="variable">p=</span>-<span class="number">1</span> <span class="variable">curg=</span>-<span class="number">1</span> <span class="variable">mallocing=</span><span class="number">0</span> <span class="variable">throwing=</span><span class="number">0</span> <span class="variable">gcing=</span><span class="number">0</span> <span class="variable">locks=</span><span class="number">1</span> <span class="variable">dying=</span><span class="number">0</span> <span class="variable">helpgc=</span><span class="number">0</span> <span class="variable">spinning=</span><span class="number">0</span> <span class="variable">blocked=</span><span class="number">0</span> <span class="variable">lockedg=</span>-<span class="number">1</span></div><div class="line">M0: <span class="variable">p=</span>-<span class="number">1</span> <span class="variable">curg=</span>-<span class="number">1</span> <span class="variable">mallocing=</span><span class="number">0</span> <span class="variable">throwing=</span><span class="number">0</span> <span class="variable">gcing=</span><span class="number">0</span> <span class="variable">locks=</span><span class="number">0</span> <span class="variable">dying=</span><span class="number">0</span> <span class="variable">helpgc=</span><span class="number">0</span> <span class="variable">spinning=</span><span class="number">0</span> <span class="variable">blocked=</span><span class="number">0</span> <span class="variable">lockedg=</span>-<span class="number">1</span></div><div class="line">G1: <span class="variable">status=</span><span class="number">4</span>(semacquire) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G2: <span class="variable">status=</span><span class="number">4</span>(force gc (idle)) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G3: <span class="variable">status=</span><span class="number">4</span>(GC sweep wait) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G4: <span class="variable">status=</span><span class="number">2</span>(sleep) <span class="variable">m=</span><span class="number">3</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G5: <span class="variable">status=</span><span class="number">1</span>(sleep) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G6: <span class="variable">status=</span><span class="number">1</span>(stack growth) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G7: <span class="variable">status=</span><span class="number">1</span>(sleep) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G8: <span class="variable">status=</span><span class="number">1</span>(sleep) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G9: <span class="variable">status=</span><span class="number">1</span>(stack growth) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G10: <span class="variable">status=</span><span class="number">2</span>(sleep) <span class="variable">m=</span><span class="number">2</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G11: <span class="variable">status=</span><span class="number">1</span>(sleep) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G12: <span class="variable">status=</span><span class="number">1</span>(sleep) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G13: <span class="variable">status=</span><span class="number">1</span>(sleep) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G17: <span class="variable">status=</span><span class="number">4</span>(timer goroutine (idle)) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div></pre></td></tr></table></figure>

<p>摘要信息是类似的，但是包含了处理器、线程和goroutine的信息。首先看一下处理器P的信息：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">P0: <span class="variable">status=</span><span class="number">1</span> <span class="variable">schedtick=</span><span class="number">10</span> <span class="variable">syscalltick=</span><span class="number">0</span> <span class="variable">m=</span><span class="number">3</span> <span class="variable">runqsize=</span><span class="number">3</span> <span class="variable">gfreecnt=</span><span class="number">0</span></div><div class="line"></div><div class="line">P1: <span class="variable">status=</span><span class="number">1</span> <span class="variable">schedtick=</span><span class="number">10</span> <span class="variable">syscalltick=</span><span class="number">1</span> <span class="variable">m=</span><span class="number">2</span> <span class="variable">runqsize=</span><span class="number">3</span> <span class="variable">gfreecnt=</span><span class="number">0</span></div></pre></td></tr></table></figure>

<p>我们设置了两个处理器，因此有两行数据。下面是线程的信息：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">M3: <span class="variable">p=</span><span class="number">0</span> <span class="variable">curg=</span><span class="number">4</span> <span class="variable">mallocing=</span><span class="number">0</span> <span class="variable">throwing=</span><span class="number">0</span> <span class="variable">gcing=</span><span class="number">0</span> <span class="variable">locks=</span><span class="number">0</span> <span class="variable">dying=</span><span class="number">0</span> <span class="variable">helpgc=</span><span class="number">0</span></div><div class="line"><span class="variable">spinning=</span><span class="number">0</span> <span class="variable">blocked=</span><span class="number">0</span> <span class="variable">lockedg=</span>-<span class="number">1</span></div><div class="line"></div><div class="line">M2: <span class="variable">p=</span><span class="number">1</span> <span class="variable">curg=</span><span class="number">10</span> <span class="variable">mallocing=</span><span class="number">0</span> <span class="variable">throwing=</span><span class="number">0</span> <span class="variable">gcing=</span><span class="number">0</span> <span class="variable">locks=</span><span class="number">0</span> <span class="variable">dying=</span><span class="number">0</span> <span class="variable">helpgc=</span><span class="number">0</span></div><div class="line"><span class="variable">spinning=</span><span class="number">0</span> <span class="variable">blocked=</span><span class="number">0</span> <span class="variable">lockedg=</span>-<span class="number">1</span></div><div class="line"></div><div class="line">M1: <span class="variable">p=</span>-<span class="number">1</span> <span class="variable">curg=</span>-<span class="number">1</span> <span class="variable">mallocing=</span><span class="number">0</span> <span class="variable">throwing=</span><span class="number">0</span> <span class="variable">gcing=</span><span class="number">0</span> <span class="variable">locks=</span><span class="number">1</span> <span class="variable">dying=</span><span class="number">0</span> <span class="variable">helpgc=</span><span class="number">0</span></div><div class="line"><span class="variable">spinning=</span><span class="number">0</span> <span class="variable">blocked=</span><span class="number">0</span> <span class="variable">lockedg=</span>-<span class="number">1</span></div><div class="line"></div><div class="line">M0: <span class="variable">p=</span>-<span class="number">1</span> <span class="variable">curg=</span>-<span class="number">1</span> <span class="variable">mallocing=</span><span class="number">0</span> <span class="variable">throwing=</span><span class="number">0</span> <span class="variable">gcing=</span><span class="number">0</span> <span class="variable">locks=</span><span class="number">0</span> <span class="variable">dying=</span><span class="number">0</span> <span class="variable">helpgc=</span><span class="number">0</span></div><div class="line"><span class="variable">spinning=</span><span class="number">0</span> <span class="variable">blocked=</span><span class="number">0</span> <span class="variable">lockedg=</span>-<span class="number">1</span></div></pre></td></tr></table></figure>

<p>在摘要信息中我们看到线程设置为4(threads=4)，所以下面会有4行关于线程M的信息。而且日志细节显示了哪个线程隶属哪个处理器<strong>M3: p=0</strong>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">P0: <span class="variable">status=</span><span class="number">1</span> <span class="variable">schedtick=</span><span class="number">10</span> <span class="variable">syscalltick=</span><span class="number">0</span> <span class="variable">m=</span><span class="number">3</span> <span class="variable">runqsize=</span><span class="number">3</span> <span class="variable">gfreecnt=</span><span class="number">0</span></div><div class="line"></div><div class="line">M3: <span class="variable">p=</span><span class="number">0</span> <span class="variable">curg=</span><span class="number">4</span> <span class="variable">mallocing=</span><span class="number">0</span> <span class="variable">throwing=</span><span class="number">0</span> <span class="variable">gcing=</span><span class="number">0</span> <span class="variable">locks=</span><span class="number">0</span> <span class="variable">dying=</span><span class="number">0</span> <span class="variable">helpgc=</span><span class="number">0</span></div><div class="line"><span class="variable">spinning=</span><span class="number">0</span> <span class="variable">blocked=</span><span class="number">0</span> <span class="variable">lockedg=</span>-<span class="number">1</span></div></pre></td></tr></table></figure>

<p>我们看到线程M3隶属P0。</p>
<p>G代表goroutine。第4秒我们看到有14个goroutine, 但是自程序启动已经创建了17个线程。我们怎么知道的17个线程呢，这是从最后的goroutine的标志<strong>G17</strong>得到:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">G17: <span class="variable">status=</span><span class="number">4</span>(timer goroutine (idle)) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div></pre></td></tr></table></figure>

<p>如果程序持续创建goroutine，这个数会线性的增大。如果使用标准库net/http处理http请求，因为每个连接都会创建一个goroutine，我们可以根据这个数据得到多少request被处理，当然得在程序不会创建其它的goroutine情况下这个数才能作为预估的数量。</p>
<p>让我们看看运行main函数的goroutine：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">G1: <span class="variable">status=</span><span class="number">4</span>(semacquire) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div></pre></td></tr></table></figure>

<p>可以看到这个goroutine的status是4, 阻塞在semacquire上(WaitGroup的Wait方法)。</p>
<p>为了更好的理解其它goroutine的状态，我们需要了解每个status值代表的含义。下面是一个列表：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">status: http:<span class="comment">//golang.org/src/runtime/runtime.h</span></div><div class="line">Gidle,            <span class="comment">// 0</span></div><div class="line">Grunnable,        <span class="comment">// 1 runnable and on a run queue</span></div><div class="line">Grunning,         <span class="comment">// 2 running</span></div><div class="line">Gsyscall,         <span class="comment">// 3 performing a syscall</span></div><div class="line">Gwaiting,         <span class="comment">// 4 waiting for the runtime</span></div><div class="line">Gmoribund_unused, <span class="comment">// 5 currently unused, but hardcoded in gdb scripts</span></div><div class="line">Gdead,            <span class="comment">// 6 goroutine is dead</span></div><div class="line">Genqueue,         <span class="comment">// 7 only the Gscanenqueue is used</span></div><div class="line">Gcopystack,       <span class="comment">// 8 in this state when newstack is moving the stack</span></div></pre></td></tr></table></figure>

<p>看看我们创建的10个goroutine,现在我们能更好的理解它们的状态：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// Goroutines running <span class="keyword">in</span> a processor. (<span class="variable">idleprocs=</span><span class="number">0</span>)</div><div class="line">G4: <span class="variable">status=</span><span class="number">2</span>(sleep) <span class="variable">m=</span><span class="number">3</span> <span class="variable">lockedm=</span>-<span class="number">1</span>   – Thread M3 / Processor P0</div><div class="line">G10: <span class="variable">status=</span><span class="number">2</span>(sleep) <span class="variable">m=</span><span class="number">2</span> <span class="variable">lockedm=</span>-<span class="number">1</span>  – Thread M2 / Processor P1</div><div class="line"></div><div class="line">// Goroutines waiting to be run on a particular processor. (<span class="variable">runqsize=</span><span class="number">3</span>)</div><div class="line">G5: <span class="variable">status=</span><span class="number">1</span>(sleep) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G7: <span class="variable">status=</span><span class="number">1</span>(sleep) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G8: <span class="variable">status=</span><span class="number">1</span>(sleep) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line"></div><div class="line">// Goroutines waiting to be run on a particular processor. (<span class="variable">runqsize=</span><span class="number">3</span>)</div><div class="line">G11: <span class="variable">status=</span><span class="number">1</span>(sleep) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G12: <span class="variable">status=</span><span class="number">1</span>(sleep) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G13: <span class="variable">status=</span><span class="number">1</span>(sleep) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line"></div><div class="line">// Goroutines waiting on the global run queue. (<span class="variable">runqueue=</span><span class="number">2</span>)</div><div class="line">G6: <span class="variable">status=</span><span class="number">1</span>(stack growth) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div><div class="line">G9: <span class="variable">status=</span><span class="number">1</span>(stack growth) <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">lockedm=</span>-<span class="number">1</span></div></pre></td></tr></table></figure>

<p>了解了调度器的基本概念和我们的程序的行为，我们可以深入了解Go是如何进行调度的，每个P,M,G的状态。</p>
<h3 id="结论">结论</h3>
<p>GODEBUG变量非常好，可以深入了解调度器的行为。它也可以告诉你你的程序的行为。如果你想了解更多，动手写一些简单的程序，跟踪调度器的运行,然后就可以跟踪更复杂的程序了。</p>
<blockquote>
<p>译者注: GO的参数的介绍可以查看文档 <a href="https://golang.org/pkg/runtime/#hdr-Environment_Variables" target="_blank" rel="external">https://golang.org/pkg/runtime/#hdr-Environment_Variables</a></p>
</blockquote>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/19/Scheduler-Tracing-In-Go/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>这是William Kennedy写的第二篇文章： <a href="https://www.goinggo.net/2015/02/scheduler-tracing-in-go.html" target="_blank" rel="external">Scheduler Tracing In Go</a>, 第一篇为 <a href="http://colobu.com/2016/04/19/Stack-Traces-In-Go/" target="_blank" rel="external">Stack Traces In Go</a>。</p>
<blockquote>
<p>本文主要介绍如何跟踪Go的调度器Scheduler的活动。</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[译]Go Stack Trace]]></title>
    <link href="http://colobu.com/2016/04/19/Stack-Traces-In-Go/"/>
    <id>http://colobu.com/2016/04/19/Stack-Traces-In-Go/</id>
    <published>2016-04-19T01:51:14.000Z</published>
    <updated>2016-04-25T03:42:34.418Z</updated>
    <content type="html"><![CDATA[<p>William Kennedy写了两篇关于Go 调试的文章，非常不错，特意翻译了一下，加深记忆。本文是其中的一篇： <a href="https://www.goinggo.net/2015/01/stack-traces-in-go.html" target="_blank" rel="external">Stack Traces In Go</a>。 另一篇是 <a href="https://www.goinggo.net/2015/02/scheduler-tracing-in-go.html" target="_blank" rel="external">Scheduler Tracing In Go</a>。</p>
<blockquote>
<p>Stack Trace表示堆栈跟踪，这是一个或多个堆栈帧的有序的集合。在程序出现panic的时候你会看到控制台有Stack Trace信息打印出来。</p>
</blockquote>
<a id="more"></a>
<h3 id="介绍">介绍</h3>
<p>拥有基本的调试Go程序技能可以节省程序员很大的时间来发现问题。我当然相信你可以使用log信息来跟踪问题，但是有时候panic发生的时候log信息并没有提供充足的信息。如果你理解堆栈跟踪的信息，你可以即时的找出bug, 这和传统的利用日志追踪bug有很大的不同， 因为利用日志的话你需要增加更多的log然后再等待相同的错误发生。</p>
<p>自打我开始写Go程序的时候我就一直看堆栈跟踪信息。有些地方我们写了傻傻的代码导致运行时杀死了我们的程序并且抛出堆栈跟踪信息。我将演示堆栈跟踪信息能提供些什么信息，包括怎么找到我们传递给函数的参数的值。</p>
<h2 id="函数">函数</h2>
<figure class="highlight Go"><figcaption><span>列表1 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    slice := <span class="built_in">make</span>([]<span class="typename">string</span>,<span class="number"> 2</span>,<span class="number"> 4</span>)</div><div class="line">    Example(slice, “hello”,<span class="number"> 10</span>)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> Example(slice []<span class="typename">string</span>, str <span class="typename">string</span>, i <span class="typename">int</span>) {</div><div class="line">    <span class="built_in">panic</span>(“Want stack trace”)</div><div class="line">} </div></pre></td></tr></table></figure>

<p>列表1是一个简单的程序， main函数在第5行调用Example函数。Example函数在第8行声明，它有三个参数，一个字符串slice,一个字符串和一个整数。它的方法体也很简单，只有一行，抛出一个panic，这会立即产生一个堆栈跟踪信息:</p>
<figure class="highlight Go"><figcaption><span>列表2 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Panic: Want stack trace</div><div class="line"></div><div class="line">goroutine<span class="number"> 1</span> [running]:</div><div class="line">main.Example<span class="number">(0</span>x2080c3f50,<span class="number"> 0</span>x2,<span class="number"> 0</span>x4,<span class="number"> 0</span>x425c0,<span class="number"> 0</span>x5,<span class="number"> 0</span>xa)</div><div class="line">        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</div><div class="line">        temp/main.<span class="keyword">go</span><span class="number">:9</span><span class="number"> +0</span>x64</div><div class="line">main.main()</div><div class="line">        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</div><div class="line">        temp/main.<span class="keyword">go</span><span class="number">:5</span><span class="number"> +0</span>x85</div><div class="line"></div><div class="line">goroutine<span class="number"> 2</span> [runnable]:</div><div class="line">runtime.forcegchelper()</div><div class="line">        /Users/bill/<span class="keyword">go</span>/src/runtime/proc.<span class="keyword">go</span><span class="number">:90</span></div><div class="line">runtime.goexit()</div><div class="line">        /Users/bill/<span class="keyword">go</span>/src/runtime/asm_amd64.s<span class="number">:2232</span><span class="number"> +0</span>x1</div><div class="line"></div><div class="line">goroutine<span class="number"> 3</span> [runnable]:</div><div class="line">runtime.bgsweep()</div><div class="line">        /Users/bill/<span class="keyword">go</span>/src/runtime/mgc0.<span class="keyword">go</span><span class="number">:82</span></div><div class="line">runtime.goexit()</div><div class="line">        /Users/bill/<span class="keyword">go</span>/src/runtime/asm_amd64.s<span class="number">:2232</span><span class="number"> +0</span>x1</div></pre></td></tr></table></figure>

<p>列表2显示了panic发生时的所有的goroutine，每一个goroutine的状态，每一个goroutine的状态，以及相应的调用堆栈。导致panic的gotoutine在最上面，我们只看这它的堆栈信息。</p>
<figure class="highlight Go"><figcaption><span>列表3 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">goroutine<span class="number"> 1</span> [running]:</div><div class="line">main.Example<span class="number">(0</span>x2080c3f50,<span class="number"> 0</span>x2,<span class="number"> 0</span>x4,<span class="number"> 0</span>x425c0,<span class="number"> 0</span>x5,<span class="number"> 0</span>xa)</div><div class="line">        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</div><div class="line">        temp/main.<span class="keyword">go</span><span class="number">:9</span><span class="number"> +0</span>x64</div><div class="line">main.main()</div><div class="line">        /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</div><div class="line">        temp/main.<span class="keyword">go</span><span class="number">:5</span><span class="number"> +0</span>x85</div></pre></td></tr></table></figure>

<blockquote>
<p>我在Go 1.6版本下测试，堆栈跟踪信息只显示了当前panic的堆栈信息，没有显示其它的goroutine的信息。</p>
</blockquote>
<p>列表3的第一行显示panic发生前运行的goroutine是id为 1的goroutine。第二行是发生panic的代码位置，位于main package下的Example函数。它也显示了代码所在的文件和路径，以及panic发生的行数(第9行)。</p>
<p>Line 03也调用Example的函数的名字，它是main package的main函数。它也显示了文件名和路径，以及调用Example函数的行数。</p>
<p>堆栈跟踪信息显示了 panic发生时的这个goroutine的函数调用链。现在让我们看看传递给Example的参数的值。</p>
<figure class="highlight Go"><figcaption><span>列表4 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Declaration</span></div><div class="line">main.Example(slice []<span class="typename">string</span>, str <span class="typename">string</span>, i <span class="typename">int</span>)</div><div class="line"></div><div class="line"><span class="comment">// Call to Example by main.</span></div><div class="line">slice := <span class="built_in">make</span>([]<span class="typename">string</span>,<span class="number"> 2</span>,<span class="number"> 4</span>)</div><div class="line">Example(slice, “hello”,<span class="number"> 10</span>)</div><div class="line"></div><div class="line"><span class="comment">// Stack trace</span></div><div class="line">main.Example<span class="number">(0</span>x2080c3f50,<span class="number"> 0</span>x2,<span class="number"> 0</span>x4,<span class="number"> 0</span>x425c0,<span class="number"> 0</span>x5,<span class="number"> 0</span>xa)</div></pre></td></tr></table></figure>

<p>列表4列举了Example函数的声明，调用以及传递给它的值的信息。当你比较函数的声明以及传递的值时，发现它们并不一致。函数声明只接收三个参数，而堆栈中却显示6个16进制表示的值。理解这一点的关键是要知道每个参数类型的实现机制。</p>
<p>让我们看第一个[]string类型的参数。slice是引用类型，这意味着那个值是一个指针的头信息(header value)，它指向一个字符串。对于slice,它的头是三个word数，指向一个数组。因此前三个值代表这个slice。</p>
<figure class="highlight Go"><figcaption><span>列表5 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Slice parameter value</span></div><div class="line">slice := <span class="built_in">make</span>([]<span class="typename">string</span>,<span class="number"> 2</span>,<span class="number"> 4</span>)</div><div class="line"></div><div class="line"><span class="comment">// Slice header values</span></div><div class="line">Pointer: <span class="number"> 0</span>x2080c3f50</div><div class="line">Length:  <span class="number"> 0</span>x2</div><div class="line">Capacity:<span class="number"> 0</span>x4</div><div class="line"></div><div class="line"><span class="comment">// Declaration</span></div><div class="line">main.Example(slice []<span class="typename">string</span>, str <span class="typename">string</span>, i <span class="typename">int</span>)</div><div class="line"></div><div class="line"><span class="comment">// Stack trace</span></div><div class="line">main.Example<span class="number">(0</span>x2080c3f50,<span class="number"> 0</span>x2,<span class="number"> 0</span>x4,<span class="number"> 0</span>x425c0,<span class="number"> 0</span>x5,<span class="number"> 0</span>xa)</div></pre></td></tr></table></figure>

<p>列表5显示了<code>0x2080c3f50</code>代表第一个参数[]string的指针，<code>0x2</code>代表slice长度，<code>0x4</code>代表容量。这三个值代表第一个参数。<br><img src="image02.png" alt="Figure 1"></p>
<p>让我们看看第二个参数，它是字符串类型。字符串也是引用类型，但是它的头(header)是不可变的。这个头包含两个word类型，一个是指向底层字节数组的指针，一个是字符串的长度。</p>
<figure class="highlight Go"><figcaption><span>列表6 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String parameter value</span></div><div class="line">“hello”</div><div class="line"></div><div class="line"><span class="comment">// String header values</span></div><div class="line">Pointer:<span class="number"> 0</span>x425c0</div><div class="line">Length: <span class="number"> 0</span>x5</div><div class="line"></div><div class="line"><span class="comment">// Declaration</span></div><div class="line">main.Example(slice []<span class="typename">string</span>, str <span class="typename">string</span>, i <span class="typename">int</span>)</div><div class="line"></div><div class="line"><span class="comment">// Stack trace</span></div><div class="line">main.Example<span class="number">(0</span>x2080c3f50,<span class="number"> 0</span>x2,<span class="number"> 0</span>x4,<span class="number"> 0</span>x425c0,<span class="number"> 0</span>x5,<span class="number"> 0</span>xa) </div></pre></td></tr></table></figure>

<p>列表6显示堆栈跟踪信息中的第4个和第5个参数代表字符串的参数。<code>0x425c0</code>是指向这个字符串底层数组的指针，<code>0x5</code>是&quot;hello&quot;字符串的长度，他们俩作为第二个参数。<br><img src="image01.png" alt="Figure 2"></p>
<p>第三个参数是一个整数，它是一个简单的word值。</p>
<figure class="highlight Go"><figcaption><span>列表7 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Integer parameter value</span><span class="number"></span></div><div class="line">10</div><div class="line"></div><div class="line"><span class="comment">// Integer value</span></div><div class="line">Base<span class="number"> 16</span>:<span class="number"> 0</span>xa</div><div class="line"></div><div class="line"><span class="comment">// Declaration</span></div><div class="line">main.Example(slice []<span class="typename">string</span>, str <span class="typename">string</span>, i <span class="typename">int</span>)</div><div class="line"></div><div class="line"><span class="comment">// Stack trace</span></div><div class="line">main.Example<span class="number">(0</span>x2080c3f50,<span class="number"> 0</span>x2,<span class="number"> 0</span>x4,<span class="number"> 0</span>x425c0,<span class="number"> 0</span>x5,<span class="number"> 0</span>xa) </div></pre></td></tr></table></figure>

<p>列表7显示堆栈中的最后一个参数就是Example声明中的第三个参数，它的值是<code>0xa</code>，也就是整数10。<br><img src="image00.png" alt="Figure 3"></p>
<h3 id="方法">方法</h3>
<p>让我们稍微改动一下程序，让Example变成方法。</p>
<figure class="highlight Go"><figcaption><span>列表8 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> trace <span class="keyword">struct</span>{}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	slice := <span class="built_in">make</span>([]<span class="typename">string</span>,<span class="number"> 2</span>,<span class="number"> 4</span>)</div><div class="line"></div><div class="line">	<span class="keyword">var</span> t trace</div><div class="line">	t.Example(slice, <span class="string">"hello"</span>,<span class="number"> 10</span>)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (t *trace) Example(slice []<span class="typename">string</span>, str <span class="typename">string</span>, i <span class="typename">int</span>) {</div><div class="line">	fmt.Printf(<span class="string">"Receiver Address: %p\n"</span>, t)</div><div class="line">	<span class="built_in">panic</span>(<span class="string">"Want stack trace"</span>)</div><div class="line">}</div></pre></td></tr></table></figure><br>列表8在第5行新增加了一个类型trace，在第14将example改变为trace的pointer receiver的一个方法。第10行声明t的类型为trace，第11行调用它的方法。<br><br>因为这个方法声明为pointer receiver的方法，Go使用t的指针来支持receiver type，即使代码中使用值来调用这个方法。当程序运行时，堆栈跟踪信息如下：<br><figure class="highlight Go"><figcaption><span>列表9 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Receiver Address:<span class="number"> 0</span>x1553a8</div><div class="line"><span class="built_in">panic</span>: Want stack trace</div><div class="line"></div><div class="line">goroutine<span class="number"> 1</span> [running]:</div><div class="line">main.(*trace).Example<span class="number">(0</span>x1553a8,<span class="number"> 0</span>x2081b7f50,<span class="number"> 0</span>x2,<span class="number"> 0</span>x4,<span class="number"> 0</span>xdc1d0,<span class="number"> 0</span>x5,<span class="number"> 0</span>xa)</div><div class="line">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</div><div class="line">           temp/main.<span class="keyword">go</span><span class="number">:16</span><span class="number"> +0</span>x116</div><div class="line"></div><div class="line">main.main()</div><div class="line">           /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</div><div class="line">           temp/main.<span class="keyword">go</span><span class="number">:11</span><span class="number"> +0</span>xae </div></pre></td></tr></table></figure>

<p>列表9的第5行清晰的表明方法的receiver为pointer type。方法名和报包名中间有(*trace)。第二个值得注意的是堆栈信息中方法的第一个参数为receiver的值。方法调用总是转换成函数调用，并将receiver的值作为函数的第一个参数。我们可以总堆栈信息中看到实现的细节。</p>
<p>因为Example其它地方没有改变，其它的值保持一样。行号显示新的代码中的行号。</p>
<h3 id="Packing">Packing</h3>
<p>当函数的参数可以填充到一个单一的word类型中时，参数的值会被打包在一起。</p>
<figure class="highlight Go"><figcaption><span>列表10 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	Example(<span class="constant">true</span>, <span class="constant">false</span>, <span class="constant">true</span>,<span class="number"> 25</span>)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> Example(b1, b2, b3 <span class="typename">bool</span>, i <span class="typename">uint8</span>) {</div><div class="line">	<span class="built_in">panic</span>(<span class="string">"Want stack trace"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>列表10改变Example的方法，让它接收4个参数。前三个参数是布尔类型的，第四个参数是8bit无符号整数。布尔类型也是8bit表示的，所以这四个参数可以被打包成一个word，包括32位架构和64位架构。当程序运行的时候，会产生有趣的堆栈：</p>
<figure class="highlight Go"><figcaption><span>列表11 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">goroutine<span class="number"> 1</span> [running]:</div><div class="line">main.Example<span class="number">(0</span>x19010001)</div><div class="line">          /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</div><div class="line">          temp/main.<span class="keyword">go</span><span class="number">:8</span><span class="number"> +0</span>x64</div><div class="line">main.main()</div><div class="line">          /Users/bill/Spaces/Go/Projects/src/github.com/goinaction/code/</div><div class="line">          temp/main.<span class="keyword">go</span><span class="number">:4</span><span class="number"> +0</span>x32</div></pre></td></tr></table></figure>

<p>可以看到四个值被打包成一个单一的值了<code>0x19010001</code>。</p>
<figure class="highlight Go"><figcaption><span>列表12 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Parameter values</span></div><div class="line"><span class="constant">true</span>, <span class="constant">false</span>, <span class="constant">true</span>,<span class="number"> 25</span></div><div class="line"></div><div class="line"><span class="comment">// Word value</span></div><div class="line">Bits    Binary      Hex   Value<span class="number"></span></div><div class="line">00<span class="number">-07</span>  <span class="number"> 0000</span><span class="number"> 0001</span>  <span class="number"> 01</span>    <span class="constant">true</span><span class="number"></span></div><div class="line">08<span class="number">-15</span>  <span class="number"> 0000</span><span class="number"> 0000</span>  <span class="number"> 00</span>    <span class="constant">false</span><span class="number"></span></div><div class="line">16<span class="number">-23</span>  <span class="number"> 0000</span><span class="number"> 0001</span>  <span class="number"> 01</span>    <span class="constant">true</span><span class="number"></span></div><div class="line">24<span class="number">-31</span>  <span class="number"> 0001</span><span class="number"> 1001</span>  <span class="number"> 19</span>   <span class="number"> 25</span></div><div class="line"></div><div class="line"><span class="comment">// Declaration</span></div><div class="line">main.Example(b1, b2, b3 <span class="typename">bool</span>, i <span class="typename">uint8</span>)</div><div class="line"></div><div class="line"><span class="comment">// Stack trace</span></div><div class="line">main.Example<span class="number">(0</span>x19010001)</div></pre></td></tr></table></figure>

<p>列表12显示了堆栈的值如何和参数进行匹配的。true用1表示，占8bit, false用0表示，占8bit,uint8值25的16进制为x19,用8bit表示。我们课哟看到它们是如何表示成一个word值的。</p>
<h3 id="结论">结论</h3>
<p>Go运行时提供了详细的信息来帮助我们调试程序。本文我们关注堆栈跟踪信息stack trace。解码传递个堆栈中的方法的参数帮助巨大。它不止一次帮助我快速地定位bug。 现在你也知道了如何读取这些堆栈跟踪信息，希望你能在下一次的调试中应用这个方法。</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/19/Stack-Traces-In-Go/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>William Kennedy写了两篇关于Go 调试的文章，非常不错，特意翻译了一下，加深记忆。本文是其中的一篇： <a href="https://www.goinggo.net/2015/01/stack-traces-in-go.html" target="_blank" rel="external">Stack Traces In Go</a>。 另一篇是 <a href="https://www.goinggo.net/2015/02/scheduler-tracing-in-go.html" target="_blank" rel="external">Scheduler Tracing In Go</a>。</p>
<blockquote>
<p>Stack Trace表示堆栈跟踪，这是一个或多个堆栈帧的有序的集合。在程序出现panic的时候你会看到控制台有Stack Trace信息打印出来。</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go Channel 详解]]></title>
    <link href="http://colobu.com/2016/04/14/Golang-Channels/"/>
    <id>http://colobu.com/2016/04/14/Golang-Channels/</id>
    <published>2016-04-14T09:36:58.000Z</published>
    <updated>2016-04-15T06:55:45.865Z</updated>
    <content type="html"><![CDATA[<p>Channel是Go中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。</p>
<p>它的操作符是箭头 <strong>&lt;-</strong> 。 </p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ch &lt;- v    <span class="comment">// 发送值v到Channel ch中</span></div><div class="line">v := &lt;-ch  <span class="comment">// 从Channel ch中接收数据，并将数据赋值给v</span></div></pre></td></tr></table></figure>

<p>(箭头的指向就是数据的流向) </p>
<p>就像 map 和 slice 数据类型一样, channel必须先创建再使用:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)</div></pre></td></tr></table></figure>


<a id="more"></a>
<h2 id="Channel类型">Channel类型</h2>
<p>Channel类型的定义格式如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">ChannelType</span> = ( <span class="string">"chan"</span> | <span class="string">"chan"</span> <span class="string">"&lt;-"</span> | <span class="string">"&lt;-"</span> <span class="string">"chan"</span> ) <span class="variable">ElementType</span> .</div></pre></td></tr></table></figure>

<p>它包括三种类型的定义。可选的<code>&lt;-</code>代表channel的方向。如果没有指定方向，那么Channel就是双向的，既可以接收数据，也可以发送数据。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">chan</span> T          <span class="comment">// 可以接收和发送类型为 T 的数据</span></div><div class="line"><span class="keyword">chan</span>&lt;- <span class="typename">float64</span>  <span class="comment">// 只可以用来发送 float64 类型的数据</span></div><div class="line">&lt;-<span class="keyword">chan</span> <span class="typename">int</span>      <span class="comment">// 只可以用来接收 int 类型的数据</span></div></pre></td></tr></table></figure>

<p><code>&lt;-</code>总是优先和最左边的类型结合。(The &lt;- operator associates with the leftmost chan possible)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">chan</span>&lt;- <span class="keyword">chan</span> <span class="typename">int</span>    <span class="comment">// 等价 chan&lt;- (chan int)</span></div><div class="line"><span class="keyword">chan</span>&lt;- &lt;-<span class="keyword">chan</span> <span class="typename">int</span>  <span class="comment">// 等价 chan&lt;- (&lt;-chan int)</span></div><div class="line">&lt;-<span class="keyword">chan</span> &lt;-<span class="keyword">chan</span> <span class="typename">int</span>  <span class="comment">// 等价 &lt;-chan (&lt;-chan int)</span></div><div class="line"><span class="keyword">chan</span> (&lt;-<span class="keyword">chan</span> <span class="typename">int</span>)</div></pre></td></tr></table></figure>

<p>使用<code>make</code>初始化Channel,并且可以设置容量:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>,<span class="number"> 100</span>)</div></pre></td></tr></table></figure>

<p>容量(capacity)代表Channel容纳的最多的元素的数量，代表Channel的缓存的大小。<br>如果没有设置容量，或者容量设置为0, 说明Channel没有缓存，只有sender和receiver都准备好了后它们的通讯(communication)才会发生(Blocking)。如果设置了缓存，就有可能不发生阻塞， 只有buffer满了后 send才会阻塞， 而只有缓存空了后receive才会阻塞。一个nil channel不会通信。</p>
<p>可以通过内建的<code>close</code>方法可以关闭Channel。</p>
<p>你可以在多个goroutine从/往 一个channel 中 receive/send 数据, 不必考虑额外的同步措施。</p>
<p>Channel可以作为一个先入先出(FIFO)的队列，接收的数据和发送的数据的顺序是一致的。</p>
<p>channel的 receive支持 <em>multi-valued assignment</em>，如</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v, ok := &lt;-ch</div></pre></td></tr></table></figure>

<p>它可以用来检查Channel是否已经被关闭了。</p>
<ol>
<li><strong>send语句</strong><br>send语句用来往Channel中发送数据， 如<code>ch &lt;- 3</code>。<br>它的定义如下:</li>
</ol>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SendStmt = Channel <span class="string">"&lt;-"</span> Expression .</div><div class="line">Channel  = Expression .</div></pre></td></tr></table></figure>

<p>在通讯(communication)开始前channel和expression必选先求值出来(evaluated)，比如下面的(3+4)先计算出7然后再发送给channel。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)</div><div class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</div><div class="line"><span class="keyword">go</span> <span class="keyword">func</span>() { c &lt;-<span class="number"> 3</span> +<span class="number"> 4</span> }()</div><div class="line">i := &lt;-c</div><div class="line">fmt.Println(i)</div></pre></td></tr></table></figure>

<p>send被执行前(proceed)通讯(communication)一直被阻塞着。如前所言，无缓存的channel只有在receiver准备好后send才被执行。如果有缓存，并且缓存未满，则send会被执行。</p>
<p>往一个已经被close的channel中继续发送数据会导致<strong>run-time panic</strong>。</p>
<p>往nil channel中发送数据会一致被阻塞着。</p>
<ol>
<li>receive 操作符<br><code>&lt;-ch</code>用来从channel ch中接收数据，这个表达式会一直被block,直到有数据可以接收。</li>
</ol>
<p>从一个nil channel中接收数据会一直被block。</p>
<p>从一个被close的channel中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。</p>
<p>如前所述，你可以使用一个额外的返回参数来检查channel是否关闭。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">x, ok := &lt;-ch</div><div class="line">x, ok = &lt;-ch</div><div class="line"><span class="keyword">var</span> x, ok = &lt;-ch</div></pre></td></tr></table></figure>

<p>如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。</p>
<h2 id="blocking">blocking</h2>
<p>缺省情况下，发送和接收会一直阻塞着，知道另一方准备好。这种方式可以用来在gororutine中进行同步，而不必使用显示的锁或者条件变量。</p>
<p>如官方的例子中<code>x, y := &lt;-c, &lt;-c</code>这句会一直等待计算结果发送到channel中。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> sum(s []<span class="typename">int</span>, c <span class="keyword">chan</span> <span class="typename">int</span>) {</div><div class="line">	sum :=<span class="number"> 0</span></div><div class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> s {</div><div class="line">		sum += v</div><div class="line">	}</div><div class="line">	c &lt;- sum <span class="comment">// send sum to c</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	s := []<span class="typename">int</span><span class="number">{7</span>,<span class="number"> 2</span>,<span class="number"> 8</span>,<span class="number"> -9</span>,<span class="number"> 4</span>,<span class="number"> 0</span>}</div><div class="line"></div><div class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)</div><div class="line">	<span class="keyword">go</span> sum(s[:<span class="built_in">len</span>(s)<span class="number">/2</span>], c)</div><div class="line">	<span class="keyword">go</span> sum(s[<span class="built_in">len</span>(s)<span class="number">/2</span>:], c)</div><div class="line">	x, y := &lt;-c, &lt;-c <span class="comment">// receive from c</span></div><div class="line"></div><div class="line">	fmt.Println(x, y, x+y)</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="Buffered_Channels">Buffered Channels</h2>
<p>make的第二个参数指定缓存的大小：<code>ch := make(chan int, 100)</code>。</p>
<p>通过缓存的使用，可以尽量避免阻塞，提供应用的性能。</p>
<h2 id="Range">Range</h2>
<p><code>for …… range</code>语句可以处理Channel。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">		time.Sleep<span class="number">(1</span> * time.Hour)</div><div class="line">	}()</div><div class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)</div><div class="line">	<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">		<span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt;<span class="number"> 10</span>; i = i +<span class="number"> 1</span> {</div><div class="line">			c &lt;- i</div><div class="line">		}</div><div class="line">		<span class="built_in">close</span>(c)</div><div class="line">	}()</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> c {</div><div class="line">		fmt.Println(i)</div><div class="line">	}</div><div class="line"></div><div class="line">	fmt.Println(<span class="string">"Finished"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>range c</code>产生的迭代值为Channel中发送的值，它会一直迭代知道channel被关闭。上面的例子中如果把<code>close(c)</code>注释掉，程序会一直阻塞在<code>for …… range</code>那一行。</p>
<h2 id="select">select</h2>
<p><code>select</code>语句选择一组可能的send操作和receive操作去处理。它类似<code>switch</code>,但是只是用来处理通讯(communication)操作。<br>它的<code>case</code>可以是send语句，也可以是receive语句，亦或者<code>default</code>。</p>
<p><code>receive</code>语句可以将值赋值给一个或者两个变量。它必须是一个receive操作。</p>
<p>最多允许有一个<code>default case</code>,它可以放在case列表的任何位置，尽管我们大部分会将它放在最后。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> fibonacci(c, quit <span class="keyword">chan</span> <span class="typename">int</span>) {</div><div class="line">	x, y :=<span class="number"> 0</span>,<span class="number"> 1</span></div><div class="line">	<span class="keyword">for</span> {</div><div class="line">		<span class="keyword">select</span> {</div><div class="line">		<span class="keyword">case</span> c &lt;- x:</div><div class="line">			x, y = y, x+y</div><div class="line">		<span class="keyword">case</span> &lt;-quit:</div><div class="line">			fmt.Println(<span class="string">"quit"</span>)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)</div><div class="line">	quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)</div><div class="line">	<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">		<span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt;<span class="number"> 10</span>; i++ {</div><div class="line">			fmt.Println(&lt;-c)</div><div class="line">		}</div><div class="line">		quit &lt;-<span class="number"> 0</span></div><div class="line">	}()</div><div class="line">	fibonacci(c, quit)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果有同时多个case去处理,比如同时有多个channel可以接收数据，那么Go会伪随机的选择一个case处理(pseudo-random)。如果没有case需要处理，则会选择<code>default</code>去处理，如果<code>default case</code>存在的情况下。如果没有<code>default case</code>，则<code>select</code>语句会阻塞，直到某个case需要处理。</p>
<p>需要注意的是，nil channel上的操作会一直被阻塞，如果没有default case,只有nil channel的select会一直被阻塞。</p>
<p><code>select</code>语句和<code>switch</code>语句一样，它不是循环，它只会选择一个case来处理，如果想一直处理channel，你可以在外面加一个无限的for循环：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> {</div><div class="line">	<span class="keyword">select</span> {</div><div class="line">	<span class="keyword">case</span> c &lt;- x:</div><div class="line">		x, y = y, x+y</div><div class="line">	<span class="keyword">case</span> &lt;-quit:</div><div class="line">		fmt.Println(<span class="string">"quit"</span>)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="timeout">timeout</h3>
<p><code>select</code>有很重要的一个应用就是超时处理。 因为上面我们提到，如果没有case需要处理，select语句就会一直阻塞着。这时候我们可能就需要一个超时操作，用来处理超时的情况。<br>下面这个例子我们会在2秒后往channel c1中发送一个数据，但是<code>select</code>设置为1秒超时,因此我们会打印出<code>timeout 1</code>,而不是<code>result 1</code>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"time"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">string</span>,<span class="number"> 1</span>)</div><div class="line">    <span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">        time.Sleep(time.Second *<span class="number"> 2</span>)</div><div class="line">        c1 &lt;- <span class="string">"result 1"</span></div><div class="line">    }()</div><div class="line"></div><div class="line">    <span class="keyword">select</span> {</div><div class="line">    <span class="keyword">case</span> res := &lt;-c1:</div><div class="line">        fmt.Println(res)</div><div class="line">    <span class="keyword">case</span> &lt;-time.After(time.Second *<span class="number"> 1</span>):</div><div class="line">        fmt.Println(<span class="string">"timeout 1"</span>)</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>其实它利用的是<code>time.After</code>方法，它返回一个类型为<code>&lt;-chan Time</code>的单向的channel，在指定的时间发送一个当前时间给返回的channel中。</p>
<h2 id="Timer和Ticker">Timer和Ticker</h2>
<p>我们看一下关于时间的两个Channel。<br>timer是一个定时器，代表未来的一个单一事件，你可以告诉timer你要等待多长时间，它提供一个Channel，在将来的那个时间那个Channel提供了一个时间值。下面的例子中第二行会阻塞2秒钟左右的时间，直到时间到了才会继续执行。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">timer1 := time.NewTimer(time.Second *<span class="number"> 2</span>)</div><div class="line">&lt;-timer1.C</div><div class="line">fmt.Println(<span class="string">"Timer 1 expired"</span>)</div></pre></td></tr></table></figure>

<p>当然如果你只是想单纯的等待的话，可以使用<code>time.Sleep</code>来实现。</p>
<p>你还可以使用<code>timer.Stop</code>来停止计时器。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">timer2 := time.NewTimer(time.Second)</div><div class="line"><span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">	&lt;-timer2.C</div><div class="line">	fmt.Println(<span class="string">"Timer 2 expired"</span>)</div><div class="line">}()</div><div class="line">stop2 := timer2.Stop()</div><div class="line"><span class="keyword">if</span> stop2 {</div><div class="line">	fmt.Println(<span class="string">"Timer 2 stopped"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>ticker</code>是一个定时触发的计时器，它会以一个间隔(interval)往Channel发送一个事件(当前时间)，而Channel的接收者可以以固定的时间间隔从Channel中读取事件。下面的例子中ticker每500毫秒触发一次，你可以观察输出的时间。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ticker := time.NewTicker(time.Millisecond *<span class="number"> 500</span>)</div><div class="line"><span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">	<span class="keyword">for</span> t := <span class="keyword">range</span> ticker.C {</div><div class="line">		fmt.Println(<span class="string">"Tick at"</span>, t)</div><div class="line">	}</div><div class="line">}()</div></pre></td></tr></table></figure>

<p>类似timer, ticker也可以通过<code>Stop</code>方法来停止。一旦它停止，接收者不再会从channel中接收数据了。</p>
<h2 id="close">close</h2>
<p>内建的close方法可以用来关闭channel。</p>
<p>总结一下channel关闭后sender的receiver操作。<br>如果channel c已经被关闭,继续往它发送数据会导致<code>panic: send on closed channel</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"time"</span></div><div class="line"></div><div class="line"><span class="func"><span class="keyword">func</span></span> main() {</div><div class="line">	go <span class="func"><span class="keyword">func</span><span class="params">()</span></span> {</div><div class="line">		time.<span class="type">Sleep</span>(time.<span class="type">Hour</span>)</div><div class="line">	}()</div><div class="line">	<span class="built_in">c</span> := make(chan int, <span class="number">10</span>)</div><div class="line">	<span class="built_in">c</span> &lt;- <span class="number">1</span></div><div class="line">	<span class="built_in">c</span> &lt;- <span class="number">2</span></div><div class="line">	close(<span class="built_in">c</span>)</div><div class="line">	<span class="built_in">c</span> &lt;- <span class="number">3</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>但是从这个关闭的channel中不但可以读取出已发送的数据，还可以不断的读取零值:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>,<span class="number"> 10</span>)</div><div class="line">c &lt;-<span class="number"> 1</span></div><div class="line">c &lt;-<span class="number"> 2</span></div><div class="line"><span class="built_in">close</span>(c)</div><div class="line">fmt.Println(&lt;-c) <span class="comment">//1</span></div><div class="line">fmt.Println(&lt;-c) <span class="comment">//2</span></div><div class="line">fmt.Println(&lt;-c) <span class="comment">//0</span></div><div class="line">fmt.Println(&lt;-c) <span class="comment">//0</span></div></pre></td></tr></table></figure>

<p>但是如果通过<code>range</code>读取，channel关闭后for循环会跳出：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>,<span class="number"> 10</span>)</div><div class="line">c &lt;-<span class="number"> 1</span></div><div class="line">c &lt;-<span class="number"> 2</span></div><div class="line"><span class="built_in">close</span>(c)</div><div class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> c {</div><div class="line">	fmt.Println(i)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>通过<code>i, ok := &lt;-c</code>可以查看Channel的状态，判断值是零值还是正常读取的值。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>,<span class="number"> 10</span>)</div><div class="line"><span class="built_in">close</span>(c)</div><div class="line"></div><div class="line">i, ok := &lt;-c</div><div class="line">fmt.Printf(<span class="string">"%d, %t"</span>, i, ok) <span class="comment">//0, false</span></div></pre></td></tr></table></figure>

<h2 id="同步">同步</h2>
<p>channel可以用在goroutine之间的同步。<br>下面的例子中main goroutine通过done channel等待worker完成任务。 worker做完任务后只需往channel发送一个数据就可以通知main goroutine任务完成。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> worker(done <span class="keyword">chan</span> <span class="typename">bool</span>) {</div><div class="line">	time.Sleep(time.Second)</div><div class="line"></div><div class="line">	<span class="comment">// 通知任务已完成</span></div><div class="line">	done &lt;- <span class="constant">true</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">bool</span>,<span class="number"> 1</span>)</div><div class="line">	<span class="keyword">go</span> worker(done)</div><div class="line"></div><div class="line">	<span class="comment">// 等待任务完成</span></div><div class="line">	&lt;-done</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://gobyexample.com/channels" target="_blank" rel="external">https://gobyexample.com/channels</a></li>
<li><a href="https://tour.golang.org/concurrency/2" target="_blank" rel="external">https://tour.golang.org/concurrency/2</a></li>
<li><a href="https://golang.org/ref/spec#Select_statements" target="_blank" rel="external">https://golang.org/ref/spec#Select_statements</a></li>
<li><a href="https://github.com/a8m/go-lang-cheat-sheet" target="_blank" rel="external">https://github.com/a8m/go-lang-cheat-sheet</a></li>
<li><a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/" target="_blank" rel="external">http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/14/Golang-Channels/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>Channel是Go中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。</p>
<p>它的操作符是箭头 <strong>&lt;-</strong> 。 </p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ch &lt;- v    <span class="comment">// 发送值v到Channel ch中</span></div><div class="line">v := &lt;-ch  <span class="comment">// 从Channel ch中接收数据，并将数据赋值给v</span></div></pre></td></tr></table></figure>

<p>(箭头的指向就是数据的流向) </p>
<p>就像 map 和 slice 数据类型一样, channel必须先创建再使用:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)</div></pre></td></tr></table></figure>


]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go泛型提案]]></title>
    <link href="http://colobu.com/2016/04/14/Golang-Generics-Proposal/"/>
    <id>http://colobu.com/2016/04/14/Golang-Generics-Proposal/</id>
    <published>2016-04-14T09:00:31.000Z</published>
    <updated>2016-04-14T09:14:17.837Z</updated>
    <content type="html"><![CDATA[<p>Go泛型特性已经被讨论了多次了<sup>1</sup>, Andrew Gerrand现在把这个提案加入到了Go的issue列表中<sup>2</sup>，并标记为<code>Go2</code>标签。当然这不代表着要将泛型加入到Go中,而是演示一个完整的提案应该是什么样子。</p>
<a id="more"></a>
<h2 id="以下是提案的内容:">以下是提案的内容:</h2>
<h2 id="Proposal:_Go_should_have_generics">Proposal: Go should have generics</h2>
<p>Author: <a href="iant@golang.org">Ian Lance Taylor</a></p>
<p>Created: January 2011</p>
<p>Last updated: April 2016</p>
<p>Discussion at <a href="https://golang.org/issue/15292" target="_blank" rel="external">https://golang.org/issue/15292</a></p>
<h3 id="Abstract">Abstract</h3>
<p>Go should support some form of generic programming.<br>Generic programming enables the representation of algorithms and data<br>structures in a generic form, with concrete elements of the code<br>(such as types) factored out.<br>It means the ability to express algorithms with minimal assumptions<br>about data structures, and vice-versa<br>(paraphrasing <a href="http://www.dagstuhl.de/en/program/calendar/semhp/?semnr=98171" target="_blank" rel="external">Jazayeri, et al</a>).</p>
<h3 id="Background">Background</h3>
<h4 id="Generic_arguments_in_favor_of_generics">Generic arguments in favor of generics</h4>
<p>People can write code once, saving coding time.<br>People can fix a bug in one instance without having to remember to fix it<br>in others.<br>Generics avoid boilerplate: less coding by copying and editing.</p>
<p>Generics save time testing code: they increase the amount of code<br>that can be type checked at compile time rather than at run time.</p>
<p>Every statically typed language in current use has generics in one<br>form or another (even C has generics, where they are called preprocessor macros;<br><a href="https://gcc.gnu.org/viewcvs/gcc/trunk/gcc/vec.h?revision=165314&amp;view=markup&amp;pathrev=165314" target="_blank" rel="external">example</a>).</p>
<h4 id="Existing_support_for_generic_programming_in_Go">Existing support for generic programming in Go</h4>
<p>Go already supports a form of generic programming via interfaces.<br>People can write an abstract algorithm that works with any type that<br>implements the interface.<br>However, interfaces are limited because the methods must use specific types.<br>There is no way to write an interface with a method that takes an<br>argument of type T, for any T, and returns a value of the same type.<br>There is no way to write an interface with a method that compares two<br>values of the same type T, for any T.<br>The assumptions that interfaces require about the types that satisfy<br>them are not minimal.</p>
<p>Interfaces are not simply types; they are also values.<br>There is no way to use interface types without using interface values,<br>and interface values aren’t always efficient.<br>There is no way to create a slice of the dynamic type of an interface.<br>That is, there is no way to avoid boxing.</p>
<h4 id="Specific_arguments_in_favor_of_generics_in_Go">Specific arguments in favor of generics in Go</h4>
<p>Generics permit type-safe polymorphic containers.<br>Go currently has a very limited set of such containers: slices, and<br>maps of most but not all types.<br>Not every program can be written using a slice or map.</p>
<p>Look at the functions <code>SortInts</code>, <code>SortFloats</code>, <code>SortStrings</code> in the<br>sort package.<br>Or <code>SearchInts</code>, <code>SearchFloats</code>, <code>SearchStrings</code>.<br>Or the <code>Len</code>, <code>Less</code>, and <code>Swap</code> methods of <code>byName</code> in package io/ioutil.<br>Pure boilerplate copying.</p>
<p>The <code>copy</code> and <code>append</code> functions exist because they make slices much<br>more useful.<br>Generics would mean that these functions are unnecessary.<br>Generics would make it possible to write similar functions for maps<br>and channels, not to mention user created data types.<br>Granted, slices are the most important composite data type, and that’s why<br>these functions were needed, but other data types are still useful.</p>
<p>It would be nice to be able to make a copy of a map.<br>Right now that function can only be written for a specific map type,<br>but, except for types, the same code works for any map type.<br>Similarly, it would be nice to be able to multiplex one channel onto<br>two, without having to rewrite the function for each channel type.<br>One can imagine a range of simple channel manipulators, but they can<br>not be written because the type of the channel must be specified<br>explicitly.</p>
<p>Generics let people express the relationship between function parameters<br>and results.<br>Consider the simple Transform function that calls a function on every<br>element of a slice, returning a new slice.<br>We want to write something like</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="func"><span class="keyword">func</span></span> <span class="type">Transform</span>(s []<span class="type">T</span>, f <span class="func"><span class="keyword">func</span><span class="params">(T)</span></span> <span class="type">U</span>) []<span class="type">U</span></div></pre></td></tr></table></figure>

<p>but this can not be expressed in current Go.</p>
<p>In many Go programs, people only have to write explicit types in function<br>signatures.<br>Without generics, they also have to write them in another place: in the<br>type assertion needed to convert from an interface type back to the<br>real type.<br>The lack of static type checking provided by generics makes the code<br>heavier.</p>
<h4 id="What_we_want_from_generics_in_Go">What we want from generics in Go</h4>
<p>Any implementation of generics in Go should support the following.</p>
<ul>
<li>Define generic types based on types that are not known until they are instantiated.</li>
<li>Write algorithms to operate on values of these types.</li>
<li>Name generic types and name specific instantiations of generic types.</li>
<li>Use types derived from generic types, as in making a slice of a generic type,<br>or conversely, given a generic type known to be a slice, defining a variable<br>with the slice’s element type.</li>
<li>Restrict the set of types that may be used to instantiate a generic type, to<br>ensure that the generic type is only instantiated with types that support the</li>
<li>required operations.</li>
<li>Do not require an explicit relationship between the definition of a generic<br>type or function and its use.  That is, programs should not have to<br>explicitly say <em>type T implements generic G</em>.</li>
<li>Write interfaces that describe explicit relationships between generic types,<br>as in a method that takes two parameters that must both be the same unknown type.</li>
<li>Do not require explicit instantiation of generic types or functions; they<br>should be instantiated as needed.</li>
</ul>
<h4 id="The_downsides_of_generics">The downsides of generics</h4>
<p>Generics affect the whole language.<br>It is necessary to evaluate every single language construct to see how<br>it will work with generics.</p>
<p>Generics affect the whole standard library.<br>It is desirable to have the standard library make effective use of generics.<br>Every existing package should be reconsidered to see whether it would benefit<br>from using generics.</p>
<p>It becomes tempting to build generics into the standard library at a<br>very low level, as in C++ <code>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;</code>.<br>This has its benefits&mdash;otherwise nobody would do it&mdash;but it has<br>wide-ranging and sometimes surprising effects, as in incomprehensible<br>C++ error messages.</p>
<p>As <a href="http://research.swtch.com/generic" target="_blank" rel="external">Russ pointed out</a>, generics are<br>a trade off between programmer time, compilation time, and execution<br>time.</p>
<p>Go is currently optimizing compilation time and execution time at the<br>expense of programmer time.<br>Compilation time is a significant benefit of Go.<br>Can we retain compilation time benefits without sacrificing too much<br>execution time?</p>
<p>Unless we choose to optimize execution time, operations that appear<br>cheap may be more expensive if they use values of generic type.<br>This may be subtly confusing for programmers.<br>I think this is less important for Go than for some other languages,<br>as some operations in Go already have hidden costs such as array<br>bounds checks.<br>Still, it would be essential to ensure that the extra cost of using<br>values of generic type is tightly bounded.</p>
<p>Go has a lightweight type system.<br>Adding generic types inevitably makes the type system more complex.<br>It is essential that the result remain lightweight.</p>
<p>The upsides of the downsides are that Go is a relatively small<br>language, and it really is possible to consider every aspect of the<br>language when adding generics.<br>At least the following sections of the spec would need to be extended:<br>Types, Type Identity, Assignability, Type assertions, Calls, Type<br>switches, For statements with range clauses.</p>
<p>Only a relatively small number of packages will need to be<br>reconsidered in light of generics: container/*, sort, flag, perhaps<br>bytes.<br>Packages that currently work in terms of interfaces will generally be<br>able to continue doing so.</p>
<h4 id="Conclusion">Conclusion</h4>
<p>Generics will make the language safer, more efficient to use, and more<br>powerful.<br>These advantages are harder to quantify than the disadvantages, but<br>they are real.</p>
<h3 id="Examples_of_potential_uses_of_generics_in_Go">Examples of potential uses of generics in Go</h3>
<ul>
<li>Containers<ul>
<li>User-written hash tables that are compile-time type-safe, rather than<br>converting slice keys to string and using maps</li>
<li>Sorted maps (red-black tree or similar)</li>
<li>Double-ended queues, circular buffers</li>
<li>A simpler Heap</li>
<li><code>Keys(map[K]V) []K</code>, <code>Values(map[K]V) []V</code></li>
<li>Caches</li>
<li>Compile-time type-safe <code>sync.Pool</code></li>
</ul>
</li>
<li>Generic algorithms that work with these containers in a type-safe way.<ul>
<li>Union/Intersection</li>
<li>Sort, StableSort, Find</li>
<li>Copy (a generic container, and also copy a map)</li>
<li>Transform a container by applying a function--LISP <code>mapcar</code> and friends</li>
</ul>
</li>
<li>math and math/cmplx</li>
<li>testing/quick.{<code>Check</code>,<code>CheckEqual</code>}</li>
<li>Mixins<ul>
<li>like <code>ioutil.NopCloser</code>, but preserving other methods instead of<br>restricting to the passed-in interface (see the <code>ReadFoo</code> variants of<br><code>bytes.Buffer</code>)</li>
</ul>
</li>
<li>protobuf <code>proto.Clone</code></li>
<li>Eliminate boilerplate when calling sort function</li>
<li>Generic diff: <code>func [T] Diff(x, y []T) []range</code></li>
<li>Channel operations<ul>
<li>Merge N channels onto one</li>
<li>Multiplex one channel onto N</li>
<li>The <a href="http://play.golang.org/p/b5XRHnxzZF" target="_blank" rel="external">worker-pool pattern</a></li>
</ul>
</li>
<li>Graph algorithms, for example immediate dominator computation</li>
<li>Multi-dimensional arrays (not slices) of different lengths</li>
<li>Many of the packages in go.text could benefit from it to avoid duplicate<br>implementation or APIs for <code>string</code> and <code>[]byte</code> variants; many points that<br>could benefit need high performance, though, and generics should provide that<br>benefit</li>
</ul>
<h3 id="Proposal">Proposal</h3>
<p>I won’t discuss a specific implementation proposal here: my hope is<br>that this document helps show people that generics are worth having<br>provided the downsides can be kept under control.</p>
<p>The following documents are my previous generics proposals,<br>presented for historic reference. All are flawed in various ways.</p>
<ul>
<li><a href="NNNN/2010-06-type-functions.md">Type functions</a> (June 2010)</li>
<li><a href="NNNN/2011-03-gen.md">Generalized types</a> (March 2011)</li>
<li><a href="NNNN/2013-10-gen.md">Generalized types</a> (October 2013)</li>
<li><a href="NNNN/2013-12-type-params.md">Type parameters</a> (December 2013)</li>
</ul>
<hr>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://docs.google.com/document/d/1vrAy9gMpMoS3uaVphB32uVXX4pi-HnNjkMEgyAHX4N4/edit?pref=2&amp;pli=1#heading=h.vuko0u3txoew" target="_blank" rel="external">https://docs.google.com/document/d/1vrAy9gMpMoS3uaVphB32uVXX4pi-HnNjkMEgyAHX4N4/edit?pref=2&amp;pli=1#heading=h.vuko0u3txoew</a></li>
<li><a href="https://github.com/golang/go/issues/15292" target="_blank" rel="external">https://github.com/golang/go/issues/15292</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/14/Golang-Generics-Proposal/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>Go泛型特性已经被讨论了多次了<sup>1</sup>, Andrew Gerrand现在把这个提案加入到了Go的issue列表中<sup>2</sup>，并标记为<code>Go2</code>标签。当然这不代表着要将泛型加入到Go中,而是演示一个完整的提案应该是什么样子。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Golang实现Futures 和 Promises]]></title>
    <link href="http://colobu.com/2016/04/14/Futures-and-Promises-in-golang/"/>
    <id>http://colobu.com/2016/04/14/Futures-and-Promises-in-golang/</id>
    <published>2016-04-14T06:13:12.000Z</published>
    <updated>2016-04-14T06:57:33.539Z</updated>
    <content type="html"><![CDATA[<p>其它语言中Future和Promise的概念大量存在， 比如Node.js、Scala、Java、C#、C++ 11、Scheme、Swift等，可以方便的实现异步执行和回调。但是在Go语言的世界里，我们是通过goroutine/channel实现这种类似的功能呢，goroutine之间可以通过channel进行通讯， 但是，如果我们还是想使用Future/Promise的功能的话，该如何实现呢？</p>
<blockquote>
<p>Future，Promise或Delay是用于并发编程的一种设计模式。它们表示一个对象，这个对象用来作为一次计算结果的代理，而该结果开始的时候是未知的，因为计算还没有完成。Promise与Future的区别在于，Future是Promise的一个只读的视图，也就是说Future没有设置任务结果的方法，只能获取任务执行结果或者为Future添加回调函数。</p>
</blockquote>
<a id="more"></a>
<p>下面演示了实现一个Go Future的实现。因为Go目前还没有泛型的概念，所以为了使代码更通用，我会使用<code>interface{}</code>代表一个通用的对象。</p>
<p>首先定义一个<code>Future</code>结构,</p>
<p><code>go
type Future struct {
    result      interface{}     //计算结果
    err         error           //错误
    signal      chan struct{}   //等待完成的信号
    IsCompleted bool            //计算是否完成
}</code></p>
<p>这个Future可以执行下面的计算<code>func() (interface{}, error)</code>,所以计算方法应该实现为<code>FutureFunc</code>类型的函数，它会返回结果或者返回error：<br><code>go 
type FutureFunc func() (interface{}, error)</code></p>
<p>然后定义获取结果的<code>Get</code>和<code>GetOrTimeout</code>方法，它会阻塞直到获得结果或者超时(GetOrTimeout)。<br>`go<br>// GetOrTimeout is similar to Get(), but GetOrTimeout will not block after timeout.<br>func (f *Future) GetOrTimeout(d time.Duration) (result interface{}, err error, timeout bool) {<br>    select {<br>    case &lt;-time.After(d):<br>        return nil, nil, true<br>    case &lt;-f.signal:<br>        return f.result, f.err, false<br>    }<br>}</p>
<p>// Get is used to get future result<br>func (f *Future) Get() (result interface{}, err error) {<br>    &lt;-f.signal<br>    return f.result, f.err<br>}<br>`</p>
<p>然后定义<code>NewFuture</code>就可以了:<br>`go<br>func NewFuture(fun FutureFunc) *Future {<br>    f := new(Future)</p>
<pre><code>f.signal = make(chan struct{}, <span class="number">1</span>)

go func() {
    defer close(f.signal)
    <span class="literal">result</span>, err := fun()
    f.<span class="literal">result</span> = <span class="literal">result</span>
    f.err = err
    f.<span class="type">IsCompleted</span> = <span class="literal">true</span>
}()

<span class="keyword">return</span> f
</code></pre><p>}<br>`</p>
<p>一个使用的例子：<br>`go<br>func ExampleRequestFuture() {<br>    requestFunc := func() (body interface{}, err error) {<br>        url := &quot;<a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a>&quot;<br>        var resp *http.Response<br>        resp, err = http.Get(url)<br>        if err != nil {<br>            return<br>        }<br>        defer resp.Body.Close()<br>        bodyBytes, err := ioutil.ReadAll(resp.Body)<br>        return string(bodyBytes), err<br>    }</p>
<pre><code>requestFuture := NewFuture(FutureFunc(requestFunc))
body, <span class="built_in">err</span>, timeout := requestFuture.GetOrTimeout(<span class="number">10</span> * <span class="built_in">time</span>.<span class="built_in">Second</span>)
<span class="keyword">if</span> timeout {
    fmt.Println(<span class="string">"timeout"</span>)
} <span class="keyword">else</span> {
    <span class="keyword">if</span> <span class="built_in">err</span> != nil {
        fmt.Printf(<span class="string">"error: %v\n"</span>, <span class="built_in">err</span>)
    } <span class="keyword">else</span> {
        fmt.Printf(<span class="string">"body: %v\n"</span>, body)
    }
}
</code></pre><p>}<br>`</p>
<p>如果你是一个Java程序了，可以发现这个Future类似Java中的<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html" target="_blank" rel="external">Future接口</a>。</p>
<p>当然这个Future实现的还是非常的简陋，至少还应该实现回调接口比如<code>OnSuccess</code>、<code>OnFailure</code>、<code>OnComplete</code>等方法，另外一些方法如<code>Cancel</code>也应该加上。<br>为了组合多个Future，避免掉入&quot;回调陷阱&quot;,还应该实现Future的组合方法。</p>
<p>为了实现<code>SetResult</code>和<code>SetError</code>的功能，可以实现一个类似的<code>Promise</code>的功能。</p>
<p>但是，目前我不会去实现这个功能，一是目前我没有这方面的需求，而是 <a href="https://github.com/fanliao" target="_blank" rel="external">@fanliao</a>已经实现了这样的一个框架,名字叫<a href="https://github.com/fanliao/go-promise" target="_blank" rel="external">go-promise</a>,代码放在了github上,我们不必再重复造轮子了。</p>
<p>这个框架提供了丰富的功能：</p>
<ul>
<li><p>Future and Promise</p>
<ul>
<li><code>NewPromise()</code></li>
<li><code>promise.Future</code></li>
</ul>
</li>
<li><p>Promise and Future callbacks</p>
<ul>
<li><code>.OnSuccess(v interface{})</code></li>
<li><code>.OnFailure(v interface{})</code></li>
<li><code>.OnComplete(v interface{})</code></li>
<li><code>.OnCancel()</code></li>
</ul>
</li>
<li><p>Get the result of future</p>
<ul>
<li><code>.Get()</code></li>
<li><code>.GetOrTimeout()</code></li>
<li><code>.GetChan()</code></li>
</ul>
</li>
<li><p>Set timeout for future</p>
<ul>
<li><code>.SetTimeout(ms)</code></li>
</ul>
</li>
<li><p>Merge multiple promises</p>
<ul>
<li><code>WhenAll(func1, func2, func3, ...)</code></li>
<li><code>WhenAny(func1, func2, func3, ...)</code></li>
<li><code>WhenAnyMatched(func1, func2, func3, ...)</code></li>
</ul>
</li>
<li><p>Pipe</p>
<ul>
<li><code>.Pipe(funcWithDone, funcWithFail)</code></li>
</ul>
</li>
<li><p>Cancel the future</p>
<ul>
<li><code>.Cancel()</code></li>
<li><code>.IsCancelled()</code></li>
</ul>
</li>
<li><p>Create future by function</p>
<ul>
<li><code>Start(func() (r interface{}, e error))</code></li>
<li><code>Start(func())</code></li>
<li><code>Start(func(canceller Canceller) (r interface{}, e error))</code></li>
<li><code>Start(func(canceller Canceller))</code></li>
</ul>
</li>
<li><p>Immediate wrappers</p>
<ul>
<li><code>Wrap(interface{})</code></li>
</ul>
</li>
<li><p>Chain API</p>
<ul>
<li><code>Start(taskDone).Done(done1).Fail(fail1).Always(alwaysForDone1).Pipe(f1, f2).Done(done2)</code></li>
</ul>
</li>
</ul>
<p>使用例子可以看他的项目文档。</p>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Futures_and_promises" target="_blank" rel="external">https://en.wikipedia.org/wiki/Futures_and_promises</a></li>
<li><a href="http://labs.strava.com/blog/futures-in-golang/" target="_blank" rel="external">http://labs.strava.com/blog/futures-in-golang/</a></li>
<li><a href="https://github.com/fanliao/go-promise" target="_blank" rel="external">https://github.com/fanliao/go-promise</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/14/Futures-and-Promises-in-golang/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>其它语言中Future和Promise的概念大量存在， 比如Node.js、Scala、Java、C#、C++ 11、Scheme、Swift等，可以方便的实现异步执行和回调。但是在Go语言的世界里，我们是通过goroutine/channel实现这种类似的功能呢，goroutine之间可以通过channel进行通讯， 但是，如果我们还是想使用Future/Promise的功能的话，该如何实现呢？</p>
<blockquote>
<p>Future，Promise或Delay是用于并发编程的一种设计模式。它们表示一个对象，这个对象用来作为一次计算结果的代理，而该结果开始的时候是未知的，因为计算还没有完成。Promise与Future的区别在于，Future是Promise的一个只读的视图，也就是说Future没有设置任务结果的方法，只能获取任务执行结果或者为Future添加回调函数。</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[阿姆达尔定律]]></title>
    <link href="http://colobu.com/2016/04/14/Amdahl-s-Law/"/>
    <id>http://colobu.com/2016/04/14/Amdahl-s-Law/</id>
    <published>2016-04-14T01:43:09.000Z</published>
    <updated>2016-04-14T02:28:16.871Z</updated>
    <content type="html"><![CDATA[<p>阿姆达尔定律（英语：Amdahl&#39;s law，Amdahl&#39;s argument），一个计算机科学界的经验法则，因吉恩·阿姆达尔(Gene Amdahl)而得名。它代表了处理器平行运算之后效率提升的能力。</p>
<p>1967年计算机体系结构专家吉恩.阿姆达尔提出过一个定律阿姆达尔定律，说：在并行计算中用多处理器的应用加速受限于程序所需的串行时间百分比。譬如说，你的程序50%是串行的，其他一半可以并行，那么，最大的加速比就是2。不管你用多少处理器并行，这个加速比不可能提高。在这种情况下，改进串行算法可能比多核处理器并行更有效。<br><a id="more"></a></p>
<h2 id="公式">公式</h2>
<p>并行计算中的<strong>加速比</strong>是用<strong>并行前的执行速度</strong>和<strong>并行后的执行速度</strong>之比来表示的，它表示了在并行化之后的效率提升情况。</p>
<p>阿姆达尔定律是固定负载（计算总量不变时）时的量化标准。可用公式：$\frac{W_s + W_p}{W_s + \frac{W_p}{p}}$ 来表示。式中 $W_s$ , $W_p$ 分别表示问题规模的串行分量（问题中不能并行化的那一部分）和并行分量，p表示处理器数量。</p>
<p>只要注意到当 $p\to \infty$ 时，上式的极限是 $\frac{W}{W_s}$，其中，${W}={W_s}+{W_p}$。这意味着无论我们如何增大处理器数目，加速比是无法高于这个数的。</p>
<p>或者也可以用下面的公式表示:<br>$$<br>S_\text{latency}(s) = \frac{1}{1 - p + \frac{p}{s}}<br>$$</p>
<p>通用的：</p>
<ul>
<li>S<sub>latency</sub> is the theoretical speedup in latency of the execution of the whole task;</li>
<li>s is the speedup in latency of the execution of the part of the task that benefits from the improvement of the resources of the system;</li>
<li>p is the percentage of the execution time of the whole task concerning the part that benefits from the improvement of the resources of the system before the improvement.</li>
<li>1-p is the percentage of the execution time of the whole task concerning the part that <strong>doesn&#39;t</strong> benefit from the improvement of the resources of the system before the improvement.</li>
</ul>
<p>因此可以推断出:<br><img src="1.png" alt=""></p>
<p>如果我们针对并行计算，上面的公式代表：</p>
<ul>
<li>S<sub>latency</sub>代表理论上的加速比</li>
<li>s 为并行处理结点个数</li>
<li>p 为并行计算部分所占比例</li>
<li>1-p 为串行计算部分所占比例</li>
</ul>
<p>这样，当p=1时，最大加速比p=s；当p=0时，最小加速比S=1；当s→∞时，极限加速比S→ 1／(1-p)，这也就是加速比的上限。例如，若加速前并行代码执行时间占整个代码的执行时间的75％(p=0.75)，则加速后并行处理的总体性能的提升不可能超过原先的4倍。</p>
<p>Amdahl’s law表明在问题的可并行部分占比不大时，增加处理机的数量并不能显著地加快解决问题的时间。</p>
<p>阿姆达尔定律的结论让人沮丧，但到了20世纪80年代晚期，Sandia国家实验室的科学家们在对具有1024个处理器的超立方体结构上观察到了3个实际应用程序随着处理器的增加发生线性加速的现象，科学家John L. Gustafson基于此实验数据在1988年提出了一个新的计算加速系数的公式：<br>$$<br>S_\text{latency}(s) = 1 - p + sp<br>$$</p>
<p>其中，</p>
<ul>
<li>S<sub>latency</sub> is the theoretical speedup in latency of the execution of the whole task;</li>
<li>s is the speedup in latency of the execution of the part of the task that benefits from the improvement of the resources of the system;</li>
<li>p is the percentage of the execution workload of the whole task concerning the part that benefits from the improvement of the resources of the system before the improvement.</li>
</ul>
<p>Gustafson定律说明在许多实际的应用程序中得到接近线性的加速效果是可能的。</p>
<p>阿姆达尔定律的问题出在它的前提过于理想化。因为并行算法通常能处理比串行算法更大规模的问题，即使算法仍然存在着串行部分，但由于问题规模的不断扩大，往往会导致算法中串行部分所占比例的持续减少。</p>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Amdahl&#39;s_law" target="_blank" rel="external">https://en.wikipedia.org/wiki/Amdahl&#39;s_law</a></li>
<li><a href="http://www.manio.org/cn/progress-and-thoughts-of-amdahls-law/" target="_blank" rel="external">http://www.manio.org/cn/progress-and-thoughts-of-amdahls-law/</a></li>
<li><a href="http://tutorials.jenkov.com/java-concurrency/amdahls-law.html" target="_blank" rel="external">http://tutorials.jenkov.com/java-concurrency/amdahls-law.html</a></li>
<li><a href="http://djt.qq.com/article/view/121" target="_blank" rel="external">http://djt.qq.com/article/view/121</a></li>
<li><a href="https://en.wikipedia.org/wiki/Gustafson&#39;s_law" target="_blank" rel="external">https://en.wikipedia.org/wiki/Gustafson&#39;s_law</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/14/Amdahl-s-Law/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>阿姆达尔定律（英语：Amdahl&#39;s law，Amdahl&#39;s argument），一个计算机科学界的经验法则，因吉恩·阿姆达尔(Gene Amdahl)而得名。它代表了处理器平行运算之后效率提升的能力。</p>
<p>1967年计算机体系结构专家吉恩.阿姆达尔提出过一个定律阿姆达尔定律，说：在并行计算中用多处理器的应用加速受限于程序所需的串行时间百分比。譬如说，你的程序50%是串行的，其他一半可以并行，那么，最大的加速比就是2。不管你用多少处理器并行，这个加速比不可能提高。在这种情况下，改进串行算法可能比多核处理器并行更有效。<br>]]>
    
    </summary>
    
      <category term="高并发编程" scheme="http://colobu.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux上下文切换监控]]></title>
    <link href="http://colobu.com/2016/04/12/context-switching-monitor/"/>
    <id>http://colobu.com/2016/04/12/context-switching-monitor/</id>
    <published>2016-04-12T03:05:46.000Z</published>
    <updated>2016-04-13T04:35:54.985Z</updated>
    <content type="html"><![CDATA[<p>我们在监测Linux的应用的时候，当CPU的利用率非常高，但是系统的性能却上不去的时候，不妨监控一下线程/进程的切换，看看是不是context switching导致的overhead过高。</p>
<p>一般我使用<code>dstat</code>工具用来监控，比如<code>dstat -y</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---<span class="built_in">system</span>--</div><div class="line"> <span class="keyword">int</span>   csw </div><div class="line"> <span class="number">367</span>   <span class="number">561</span> </div><div class="line"> <span class="number">274</span>   <span class="number">439</span> </div><div class="line"> <span class="number">279</span>   <span class="number">363</span></div></pre></td></tr></table></figure>

<p>或者<code>vmstat 3</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">[</span><span class="comment">root@abc</span> <span class="comment">smallnest</span><span class="title">]</span><span class="comment">#</span> <span class="comment">vmstat</span> <span class="comment">3</span></div><div class="line"><span class="comment">procs</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">memory</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">swap</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">io</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">system</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">cpu</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></div><div class="line"> <span class="comment">r</span>  <span class="comment">b</span>   <span class="comment">swpd</span>   <span class="comment">free</span>   <span class="comment">buff</span>  <span class="comment">cache</span>   <span class="comment">si</span>   <span class="comment">so</span>    <span class="comment">bi</span>    <span class="comment">bo</span>   <span class="comment">in</span>   <span class="comment">cs</span> <span class="comment">us</span> <span class="comment">sy</span> <span class="comment">id</span> <span class="comment">wa</span> <span class="comment">st</span></div><div class="line"> <span class="comment">0</span>  <span class="comment">0</span>      <span class="comment">0</span> <span class="comment">3126192</span>  <span class="comment">31692</span> <span class="comment">1521612</span>  <span class="comment">0</span>    <span class="comment">0</span>   <span class="comment">176</span>   <span class="comment">325</span>  <span class="comment">166</span>  <span class="comment">258</span>  <span class="comment">1</span>  <span class="comment">1</span> <span class="comment">96</span>  <span class="comment">3</span>  <span class="comment">0</span></div></pre></td></tr></table></figure>

<p>但是如何知道那些进程/线程做切换能，淘宝褚霸有篇文章:<a href="http://blog.yufeng.info/archives/1239" target="_blank" rel="external">latencytop深度了解你的Linux系统的延迟</a>介绍了一种方法。事实上，有一个工具<code>pidstat</code>,可以用来监控上下文切换。 它是<a href="https://github.com/sysstat/sysstat" target="_blank" rel="external">sysstat</a>包其中的一个工具，sysstat包含好几个很棒的工具，比如sar、iostat等。</p>
<p>执行<code>pidstat -w</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">root<span class="variable">@abc</span> smallnest]<span class="comment"># pidstat -w</span></div><div class="line"><span class="constant">Linux</span> <span class="number">2.6</span>.<span class="number">32</span>-<span class="number">358</span>.el6.x86_64 (abc) 	<span class="number">04</span>/<span class="number">11</span>/<span class="number">2016</span> 	_x86_64<span class="number">_</span>	(<span class="number">2</span> <span class="constant">CPU</span>)</div><div class="line"></div><div class="line"><span class="number">11</span><span class="symbol">:</span><span class="number">25</span><span class="symbol">:</span><span class="number">00</span> <span class="constant">PM</span>       <span class="constant">PID</span>   cswch/s nvcswch/s  <span class="constant">Command</span></div><div class="line"><span class="number">11</span><span class="symbol">:</span><span class="number">25</span><span class="symbol">:</span><span class="number">00</span> <span class="constant">PM</span>         <span class="number">1</span>      <span class="number">0</span>.<span class="number">60</span>      <span class="number">0</span>.<span class="number">03</span>  init</div><div class="line"><span class="number">11</span><span class="symbol">:</span><span class="number">25</span><span class="symbol">:</span><span class="number">00</span> <span class="constant">PM</span>         <span class="number">2</span>      <span class="number">0</span>.<span class="number">04</span>      <span class="number">0</span>.<span class="number">00</span>  kthreadd</div><div class="line"><span class="number">11</span><span class="symbol">:</span><span class="number">25</span><span class="symbol">:</span><span class="number">00</span> <span class="constant">PM</span>         <span class="number">3</span>      <span class="number">0</span>.<span class="number">36</span>      <span class="number">0</span>.<span class="number">00</span>  migration/<span class="number">0</span></div><div class="line"><span class="number">11</span><span class="symbol">:</span><span class="number">25</span><span class="symbol">:</span><span class="number">00</span> <span class="constant">PM</span>         <span class="number">4</span>      <span class="number">0</span>.<span class="number">58</span>      <span class="number">0</span>.<span class="number">00</span>  ksoftirqd/<span class="number">0</span></div><div class="line"><span class="number">11</span><span class="symbol">:</span><span class="number">25</span><span class="symbol">:</span><span class="number">00</span> <span class="constant">PM</span>         <span class="number">5</span>      <span class="number">0</span>.<span class="number">01</span>      <span class="number">0</span>.<span class="number">00</span>  migration/<span class="number">0</span></div><div class="line"><span class="number">11</span><span class="symbol">:</span><span class="number">25</span><span class="symbol">:</span><span class="number">00</span> <span class="constant">PM</span>         <span class="number">6</span>      <span class="number">0</span>.08      <span class="number">0</span>.<span class="number">00</span>  watchdog/<span class="number">0</span></div><div class="line"><span class="number">11</span><span class="symbol">:</span><span class="number">25</span><span class="symbol">:</span><span class="number">00</span> <span class="constant">PM</span>         <span class="number">7</span>      <span class="number">0</span>.<span class="number">39</span>      <span class="number">0</span>.<span class="number">00</span>  migration/<span class="number">1</span></div><div class="line"><span class="number">11</span><span class="symbol">:</span><span class="number">25</span><span class="symbol">:</span><span class="number">00</span> <span class="constant">PM</span>         <span class="number">8</span>      <span class="number">0</span>.<span class="number">01</span>      <span class="number">0</span>.<span class="number">00</span>  migration/<span class="number">1</span></div><div class="line"><span class="number">11</span><span class="symbol">:</span><span class="number">25</span><span class="symbol">:</span><span class="number">00</span> <span class="constant">PM</span>         <span class="number">9</span>      <span class="number">0</span>.<span class="number">52</span>      <span class="number">0</span>.<span class="number">00</span>  ksoftirqd/<span class="number">1</span></div><div class="line">……</div></pre></td></tr></table></figure>

<p><code>cswch/s</code>是主动地上下文切换，<code>nvcswch/s</code>是被动执行上下文切换的次数。</p>
<p>如要要显示线程的上下文切换统计，可以执行``:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@abc smallnest]<span class="preprocessor"># pidstat -wt</span></div><div class="line">Linux <span class="number">2.6</span>.<span class="number">32</span>-<span class="number">358</span>.el6.x86_64 (abc) 	<span class="number">04</span>/<span class="number">11</span>/<span class="number">2016</span> 	_x86_64_	(<span class="number">2</span> CPU)</div><div class="line"></div><div class="line"><span class="number">11</span>:<span class="number">27</span>:<span class="number">57</span> PM      TGID       TID   cswch/s nvcswch/s  Command</div><div class="line"><span class="number">11</span>:<span class="number">27</span>:<span class="number">57</span> PM         <span class="number">1</span>         -      <span class="number">0.56</span>      <span class="number">0.03</span>  init</div><div class="line"><span class="number">11</span>:<span class="number">27</span>:<span class="number">57</span> PM         -         <span class="number">1</span>      <span class="number">0.56</span>      <span class="number">0.03</span>  <span class="string">|__init</span></div><div class="line"><span class="number">11</span>:<span class="number">27</span>:<span class="number">57</span> PM         <span class="number">2</span>         -      <span class="number">0.03</span>      <span class="number">0.00</span>  kthreadd</div><div class="line"><span class="number">11</span>:<span class="number">27</span>:<span class="number">57</span> PM         -         <span class="number">2</span>      <span class="number">0.03</span>      <span class="number">0.00</span>  <span class="string">|__kthreadd</span></div><div class="line"><span class="number">11</span>:<span class="number">27</span>:<span class="number">57</span> PM         <span class="number">3</span>         -      <span class="number">0.34</span>      <span class="number">0.00</span>  migration/<span class="number">0</span></div><div class="line"><span class="number">11</span>:<span class="number">27</span>:<span class="number">57</span> PM         -         <span class="number">3</span>      <span class="number">0.34</span>      <span class="number">0.00</span>  <span class="string">|__migration/0</span></div><div class="line"><span class="number">11</span>:<span class="number">27</span>:<span class="number">57</span> PM         <span class="number">4</span>         -      <span class="number">0.57</span>      <span class="number">0.00</span>  ksoftirqd/<span class="number">0</span></div><div class="line"><span class="number">11</span>:<span class="number">27</span>:<span class="number">57</span> PM         -         <span class="number">4</span>      <span class="number">0.57</span>      <span class="number">0.00</span>  <span class="string">|__ksoftirqd/0</span></div><div class="line"><span class="number">11</span>:<span class="number">27</span>:<span class="number">57</span> PM         <span class="number">5</span>         -      <span class="number">0.01</span>      <span class="number">0.00</span>  migration/<span class="number">0</span></div><div class="line">……</div></pre></td></tr></table></figure>

<p>更多的参数可以<code>man pidstat</code>获得。</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/12/context-switching-monitor/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>我们在监测Linux的应用的时候，当CPU的利用率非常高，但是系统的性能却上不去的时候，不妨监控一下线程/进程的切换，看看是不是context switching导致的overhead过高。</p>
<p>一般我使用<code>dstat</code>工具用来监控，比如<c]]>
    </summary>
    
      <category term="Linux" scheme="http://colobu.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[谁是最快的Go Web框架]]></title>
    <link href="http://colobu.com/2016/04/06/the-fastest-golang-web-framework/"/>
    <id>http://colobu.com/2016/04/06/the-fastest-golang-web-framework/</id>
    <published>2016-04-06T06:14:26.000Z</published>
    <updated>2016-04-19T04:44:24.914Z</updated>
    <content type="html"><![CDATA[<p>前几天我写了一篇文章: <a href="http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/" target="_blank" rel="external">超全的Go Http路由框架性能比较</a>，利用Julien Schmidt实现的<a href="https://github.com/julienschmidt/go-http-routing-benchmark" target="_blank" rel="external">benchmark测试框架</a>对几乎所有的go web框架的路由功能进行了比较。我本来以为对Go web框架的性能考察就告以段落了，直到我写了一段简单的代码测试Irsi，用来模拟实际产品中的处理，才发现了Julien Schmidt测试框架的问题。</p>
<p>这段代码是这样的：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">    <span class="string">"github.com/kataras/iris"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	api := iris.New()</div><div class="line">	api.Get(<span class="string">"/rest/hello"</span>, <span class="keyword">func</span>(c *iris.Context) {</div><div class="line">		sleepTime, _ := strconv.Atoi(os.Args<span class="number">[1</span>])</div><div class="line">		<span class="keyword">if</span> sleepTime &gt;<span class="number"> 0</span> {</div><div class="line">			time.Sleep(time.Duration(sleepTime) * time.Millisecond)</div><div class="line">		}</div><div class="line"></div><div class="line">		c.Text(<span class="string">"Hello world"</span>)</div><div class="line">	})</div><div class="line">	api.Listen(<span class="string">":8080"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>当我将实际业务的处理时间模拟为10毫秒的时候，使用100并发进行测试：<br><code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>，Iris吞吐率才达到97 requests/second。详细介绍可以看我的文章： <a href="http://colobu.com/2016/04/01/Is-iris-the-fastest-golang-router-library/" target="_blank" rel="external">iris 真的是最快的Golang 路由框架吗? </a>。</p>
<p>虽然Iris的作者很快做了修改，临时解决了这个问题，但是也促使我重新审视Julien Schmidt测试框架,也促使我实现了一个测试Go web framework benchmak的框架： <a href="https://github.com/smallnest/go-web-framework-benchmark" target="_blank" rel="external">Go web framework benchmark</a>。</p>
<p><strong>2016/04/12 updated:</strong> 现在Iris已经改成了fasthttp实现，性能超级好。</p>
<a id="more"></a>
<h2 id="重新审视Julien_Schmidt测试框架">重新审视Julien Schmidt测试框架</h2>
<p>如果查看Julien Schmidt测试框架的测试结果以及实现，可以看到他测试的只是web框架的<strong>路由功能</strong>，包括路径中参数的解析， 并不是测试一个完整的web框架的处理(接受连接、路由、Handler处理)。</p>
<p>他利用Go的benchmark测试框架的方法，实现了N多的Benchmark方法，通过手工创建一个http.Request,传递给router进行路由处理。</p>
<p>并且，他的Handler的业务非常的简单，有的handler里面没有任何业务逻辑，只是空的方法体，有的只是将参数写回到Response中。这并不能反映实际的产品的业务处理。</p>
<p>在实际的业务中，Handler必然要包含一定的业务处理，也出处理的时间可能从几毫秒到上百毫秒不等，一些业务逻辑处理起来还非常的慢，比如：</p>
<ul>
<li>从一个网络连接中读取数据</li>
<li>写数据到硬盘中</li>
<li>访问数据库</li>
<li>访问缓存服务器</li>
<li>调用其它服务，等待服务结果的返回</li>
<li>……</li>
</ul>
<p>如果加上这些业务逻辑的处理时间，各个web框架benchmark是否还如路由功能的benchmark一样呢？</p>
<p>因为路由的处理时间在整个web框架中的处理时间所占的比例比较小，所以实际的web框架的benchmark有可能和路由的benchmark关系不大。即使路由的性能最好，如果handler的处理没有很好的处理的化，也可能整体的性能也不会特别出色。</p>
<p>如果想实现一个高性能的路由器，一定要尽量避免在路由处理时分配新的对象，高性能的路由器都实现了零分配，如httprouter、Iris等。</p>
<p>很多web框架的Handler处理和Go的缺省实现一样，还是在连接所在的goroutine中执行，也有的框架实现了goroutine池，由一个goroutine池来处理连接和handler，避免太多的goroutine分配和回收，性能可能会好一些。</p>
<h2 id="实现一个Go_web_framework_benchmark库">实现一个Go web framework benchmark库</h2>
<p>所以，有必要实现一个新的测试框架(库),完整测试web框架的性能，包括连接、路由、handler处理等，基于此，我实现了<a href="https://github.com/smallnest/go-web-framework-benchmark" target="_blank" rel="external">Go web framework benchmark</a>。</p>
<p>它具有下面的功能：</p>
<ol>
<li>为每个web框架实现了/hello的Http Get服务,它返回<code>hello world</code>字符串。所有的web框架的实现都是一致的。</li>
<li>可以指定业务处理的时间，如10毫秒，100毫秒，500毫秒等</li>
<li>自动化测试</li>
</ol>
<p>这个框架并没有测试其它功能，如Post、Put，也没有测试路由的参数解析的功能，它的本意是期望通过Get方法的测试来比较各个框架对业务的处理的能力。</p>
<p>根据Julien Schmidt测试框架中测试到的go web框架，在加上lion，fasthttp,一共测试了下面的web框架。</p>
<ul>
<li><a href="https://golang.org/pkg/net/http/" target="_blank" rel="external">default http</a></li>
<li><a href="https://github.com/Unknwon/macaron" target="_blank" rel="external">macaron</a></li>
<li><a href="https://github.com/ant0ine/go-json-rest" target="_blank" rel="external">go-json-rest</a></li>
<li><a href="https://github.com/astaxie/beego" target="_blank" rel="external">beego</a></li>
<li><a href="https://github.com/bmizerany/pat" target="_blank" rel="external">pat</a></li>
<li><a href="https://github.com/buaazp/fasthttprouter" target="_blank" rel="external">fasthttprouter</a></li>
<li><a href="https://github.com/celrenheit/lion" target="_blank" rel="external">lion</a></li>
<li><a href="https://github.com/dimfeld/httptreemux" target="_blank" rel="external">httptreemux</a></li>
<li><a href="https://github.com/go-baa/baa" target="_blank" rel="external">baa</a></li>
<li><a href="https://github.com/emicklei/go-restful" target="_blank" rel="external">go-restful</a></li>
<li><a href="https://github.com/gin-gonic/gin" target="_blank" rel="external">gin</a></li>
<li><a href="https://github.com/go-martini/martini" target="_blank" rel="external">martini</a></li>
<li><a href="https://github.com/go-playground/lars" target="_blank" rel="external">lars</a></li>
<li><a href="https://github.com/go-zoo/bone" target="_blank" rel="external">bone</a></li>
<li><a href="https://github.com/gocraft/web" target="_blank" rel="external">gocraft</a></li>
<li><a href="https://github.com/gorilla/mux" target="_blank" rel="external">gorilla</a></li>
<li><a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="external">httprouter</a></li>
<li><a href="https://github.com/kataras/iris" target="_blank" rel="external">iris</a></li>
<li><a href="https://github.com/lunny/tango" target="_blank" rel="external">tango</a></li>
<li><a href="https://github.com/mailgun/route" target="_blank" rel="external">vulcan</a></li>
<li><a href="https://github.com/mikespook/possum" target="_blank" rel="external">possum</a></li>
<li><a href="https://github.com/naoina/denco" target="_blank" rel="external">denco</a></li>
<li><a href="https://github.com/pilu/traffic" target="_blank" rel="external">traffic</a></li>
<li><a href="https://github.com/plimble/ace" target="_blank" rel="external">ace</a></li>
<li><a href="https://github.com/qiangxue/fasthttp-routing" target="_blank" rel="external">fasthttp-routing</a></li>
<li><a href="https://github.com/rcrowley/go-tigertonic" target="_blank" rel="external">go-tigertonic</a></li>
<li><a href="https://github.com/valyala/fasthttp" target="_blank" rel="external">fasthttp</a></li>
<li><a href="https://github.com/vanng822/r2router" target="_blank" rel="external">r2router</a></li>
<li><a href="https://github.com/zenazn/goji/web" target="_blank" rel="external">goji</a></li>
<li><a href="http://goji.io" target="_blank" rel="external">gojiv2</a></li>
<li><a href="http://gopkg.in/labstack/echo.v1" target="_blank" rel="external">echo</a></li>
</ul>
<h2 id="基本测试">基本测试</h2>
<p>首先我们先看一些业务逻辑处理时间分别为0ms，10ms,100ms,500ms时的各web框架的表现。</p>
<p>测试的并发数为5000。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wrk -t16 -c5000 <span class="operator">-d</span>30s http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span>/hello</div></pre></td></tr></table></figure>

<p><img src="benchmark.png" alt="Benchmark"></p>
<p>平均处理时间(Latency)<br><img src="latency.png" alt="Latency"></p>
<p>内存占用<br><img src="alloc.png" alt="Allocs"></p>
<p>注解：</p>
<ol>
<li>possum在测试的时候出现N多的<code>http: multiple response.WriteHeader calls</code>错误，它的性能比较低下。以下的测试possum也有问题。</li>
<li>默认的go标准库的实现性能已经很高</li>
<li>处理时间10ms和100ms， 各框架的性能差别不是特别巨大，但是500ms吞吐率下降的很厉害。</li>
<li>基于fasthttp实现的路由器/web框架表现非常好,如iris, fasthttprouter、fasthttp-routing, echo-fasthttp，但是echo-fasthttp由于要与net/http兼容，性能稍差一点。</li>
</ol>
<p>如果开启http pipelining, fasthttp会远远好于net/http实现的框架。<br><img src="benchmark-pipelining.png" alt=""></p>
<h2 id="并发量测试">并发量测试</h2>
<p>我们以业务逻辑处理时间为30ms为基准，测试并发量为100，1000，5000的情况下web框架的性能。</p>
<p><img src="concurrency.png" alt=""></p>
<p>注解：</p>
<ol>
<li>大部分的框架的性能差不太多</li>
<li>fasthttp表现还是非常好，是性能最好的框架，尤其在并发量大的情况下</li>
<li>并发量在1000的时候大部分的框架的吞吐率能达到3万/秒，并发量在5000的时候大部分二代框架能达到4万/秒</li>
</ol>
<p>如果开启http pipelining, fasthttp会远远好于net/http实现的框架。<br><img src="concurrency-pipelining.png" alt=""></p>
<p>综上测试，大部分的go web框架性能表现还可以，加上处理时间的测试后性能差别不是很大，不像测试路由功能一样泾渭分明。<br>fasthttp表现非常的好，需要考虑的是如果选它做web框架，你的代码将难以迁移到别的框架上,因为它实现了和标准库net/http不一样的接口。</p>
<p><strong>2016/04/19 更新</strong>： 增加了延迟时间Latency和内存占用的测试数据。</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/06/the-fastest-golang-web-framework/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>前几天我写了一篇文章: <a href="http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/" target="_blank" rel="external">超全的Go Http路由框架性能比较</a>，利用Julien Schmidt实现的<a href="https://github.com/julienschmidt/go-http-routing-benchmark" target="_blank" rel="external">benchmark测试框架</a>对几乎所有的go web框架的路由功能进行了比较。我本来以为对Go web框架的性能考察就告以段落了，直到我写了一段简单的代码测试Irsi，用来模拟实际产品中的处理，才发现了Julien Schmidt测试框架的问题。</p>
<p>这段代码是这样的：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">    <span class="string">"github.com/kataras/iris"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	api := iris.New()</div><div class="line">	api.Get(<span class="string">"/rest/hello"</span>, <span class="keyword">func</span>(c *iris.Context) {</div><div class="line">		sleepTime, _ := strconv.Atoi(os.Args<span class="number">[1</span>])</div><div class="line">		<span class="keyword">if</span> sleepTime &gt;<span class="number"> 0</span> {</div><div class="line">			time.Sleep(time.Duration(sleepTime) * time.Millisecond)</div><div class="line">		}</div><div class="line"></div><div class="line">		c.Text(<span class="string">"Hello world"</span>)</div><div class="line">	})</div><div class="line">	api.Listen(<span class="string">":8080"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>当我将实际业务的处理时间模拟为10毫秒的时候，使用100并发进行测试：<br><code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>，Iris吞吐率才达到97 requests/second。详细介绍可以看我的文章： <a href="http://colobu.com/2016/04/01/Is-iris-the-fastest-golang-router-library/" target="_blank" rel="external">iris 真的是最快的Golang 路由框架吗? </a>。</p>
<p>虽然Iris的作者很快做了修改，临时解决了这个问题，但是也促使我重新审视Julien Schmidt测试框架,也促使我实现了一个测试Go web framework benchmak的框架： <a href="https://github.com/smallnest/go-web-framework-benchmark" target="_blank" rel="external">Go web framework benchmark</a>。</p>
<p><strong>2016/04/12 updated:</strong> 现在Iris已经改成了fasthttp实现，性能超级好。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[转]Golang自动生成版本信息]]></title>
    <link href="http://colobu.com/2016/04/06/golang-auto-build-versioning/"/>
    <id>http://colobu.com/2016/04/06/golang-auto-build-versioning/</id>
    <published>2016-04-06T01:34:26.000Z</published>
    <updated>2016-04-06T01:41:22.451Z</updated>
    <content type="html"><![CDATA[<p>原文： <a href="http://www.trueeyu.com/?p=1935" target="_blank" rel="external">Golang自动生成版本信息</a></p>
<p><strong>需求</strong></p>
<p>golang程序在build时自动生成版本信息，使用 ./helloworld –version可以查看版本和build时间</p>
<p><strong>实现原理</strong></p>
<p>使用链接选项<code>-X</code>设置一个二进制文件中可以访问的变量</p>
<a id="more"></a>
<ul>
<li>实例1：</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> Version = <span class="string">"No Version Provided"</span></div><div class="line"> </div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    fmt.Println(<span class="string">"HelloWorld Version is:"</span>, Version)</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">go run -ldflags <span class="string">"-X main.Version 1.5"</span> helloworld.go</div><div class="line"> </div><div class="line">HelloWorld Version is: <span class="number">1.5</span></div></pre></td></tr></table></figure>

<ul>
<li>实例2</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line">import \"fmt\"</div><div class="line"> </div><div class="line">var buildstamp = \"no timestamp set\"</div><div class="line">var githash = \"no githash set\"</div><div class="line"> </div><div class="line">func main() {</div><div class="line">    fmt.Println(\"HelloWorld buildstamp is:\", buildstamp)</div><div class="line">    fmt.Println(\"HelloWorld buildgithash is:\", githash)</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">go build -ldflags \<span class="string">"-X main.buildstamp `date \'+%Y-%m-%d_%I:%M:%S\'` -X main.githash `git rev-parse HEAD`\" helloworld.go</span></div><div class="line"> </div><div class="line">./helloworld</div><div class="line"> </div><div class="line">HelloWorld buildstamp is: 2015-09-08_05:58:49</div><div class="line">HelloWorld buildgithash is: 1adb00d88d832687eb4148a3871829fb73021c29</div></pre></td></tr></table></figure>

<p><strong>参考资料</strong><br><a href="http://www.atatus.com/blog/golang-auto-build-versioning/" target="_blank" rel="external">golang-auto-build-versioning</a></p>
<hr>
<p>其它一些相关的介绍:</p>
<ol>
<li><a href="http://mengqi.info/html/2015/201502171941-build-go-program-with-git-version.html" target="_blank" rel="external">编译时向 go 程序写入 git 版本信息</a></li>
<li><a href="https://golang.org/cmd/link/" target="_blank" rel="external">command/link</a></li>
<li><a href="https://blog.cloudflare.com/setting-go-variables-at-compile-time/" target="_blank" rel="external">Setting Go variables from the outside</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/06/golang-auto-build-versioning/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>原文： <a href="http://www.trueeyu.com/?p=1935" target="_blank" rel="external">Golang自动生成版本信息</a></p>
<p><strong>需求</strong></p>
<p>golang程序在build时自动生成版本信息，使用 ./helloworld –version可以查看版本和build时间</p>
<p><strong>实现原理</strong></p>
<p>使用链接选项<code>-X</code>设置一个二进制文件中可以访问的变量</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iris 真的是最快的Golang 路由框架吗?]]></title>
    <link href="http://colobu.com/2016/04/01/Is-iris-the-fastest-golang-router-library/"/>
    <id>http://colobu.com/2016/04/01/Is-iris-the-fastest-golang-router-library/</id>
    <published>2016-04-01T07:57:03.000Z</published>
    <updated>2016-04-06T01:18:32.667Z</updated>
    <content type="html"><![CDATA[<p>依照我的前一篇文章（<a href="http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/" target="_blank" rel="external">超全的Go Http路由框架性能比较</a>）对各种Go http路由框架的比较， Iris明显胜出，它的性能远远超过其它Golang http路由框架。</p>
<p>但是，在真实的环境中，Iris真的就是最快的Golang http路由框架吗？</p>
<blockquote>
<p><strong>2016-04-05 更新：</strong> 我已经提交了一个<a href="https://github.com/kataras/iris/issues/55" target="_blank" rel="external">Bug</a>, 作者Makis已经做了一个临时的解决方案，性能已经恢复，所以准备使用Iris的读者不必担心。<br>根据我的测试，最新的Iris的测试如下：</p>
<ol>
<li>在业务逻辑需要10毫秒时，吞吐率可以达到9281 request/s</li>
<li>在业务逻辑需要1000毫秒时，吞吐率可以达到95  request/s<br>性能已经很不错了。</li>
</ol>
<p>我会做一个其它路由框架的测试，看看其它的框架是否也有本文所说的问题。</p>
</blockquote>
<a id="more"></a>
<h3 id="Benchmark测试分析">Benchmark测试分析</h3>
<p>在那篇文章中我使用的是Julien Schmidt的<a href="https://github.com/julienschmidt/go-http-routing-benchmark" target="_blank" rel="external">测试代码</a>,他模拟了静态路由、Github API、Goolge+ API、Parse API的各种情况，因为这些API是知名网站的开放的API，看起来测试挺真实可靠的。</p>
<p>但是，这个测试存在着一个严重的问题，就是Handler的业务逻辑非常的简单，各个框架的handler类似，比如Iris的Handler的实现：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> irisHandler(_ *iris.Context) {}</div><div class="line"></div><div class="line"><span class="keyword">func</span> irisHandlerWrite(c *iris.Context) {</div><div class="line">	io.WriteString(c.ResponseWriter, c.Param(<span class="string">"name"</span>))</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> irisHandlerTest(c *iris.Context) {</div><div class="line">	io.WriteString(c.ResponseWriter, c.Request.RequestURI)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>几乎没有任何的业务逻辑，最多是往Response中写入一个字符串。</p>
<p><strong>这和生产环境中的情况严重不符!</strong></p>
<p>实际的产品肯定会有一些业务的处理，比如参数的校验，数据的计算，本地文件的读取、远程服务的调用、缓存的读取、数据库的读取和写入等，有些操作可能花费的时间很多，一两个毫秒就可以搞定，有的却很耗时，可能需要几十毫秒，比如：</p>
<ul>
<li>从一个网络连接中读取数据</li>
<li>写数据到硬盘中</li>
<li>调用其它服务，等待服务结果的返回</li>
<li>……</li>
</ul>
<p>这才是我们常用的case,而不是一个简单的写字符串。</p>
<p>因此那个测试框架的Handler还应该加入时间花费的情况。</p>
<h3 id="模拟真实的Handler的情况">模拟真实的Handler的情况</h3>
<p>我们模拟一下真实的情况，看看Iris框架和Golang内置的Http路由框架的性能如何。</p>
<p>首先使用Iris实现一个Http Server:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/kataras/iris"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	api := iris.New()</div><div class="line">	api.Get(<span class="string">"/rest/hello"</span>, <span class="keyword">func</span>(c *iris.Context) {</div><div class="line">		sleepTime, _ := strconv.Atoi(os.Args<span class="number">[1</span>])</div><div class="line">		<span class="keyword">if</span> sleepTime &gt;<span class="number"> 0</span> {</div><div class="line">			time.Sleep(time.Duration(sleepTime) * time.Millisecond)</div><div class="line">		}</div><div class="line"></div><div class="line">		c.Text(<span class="string">"Hello world"</span>)</div><div class="line">	})</div><div class="line">	api.Listen(<span class="string">":8080"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>我们可以传递给它一个时间花费的参数sleepTime，模拟这个Handler在处理业务时要花费的时间，它会让处理这个Handler的暂停sleepTime毫秒，如果为0,则不需要暂停，这种情况类似上面的测试。</p>
<p>然后我们使用Go内置的路由功能实现一个Http Server:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// There are some golang RESTful libraries and mux libraries but i use the simplest to test.</span></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	http.HandleFunc(<span class="string">"/rest/hello"</span>, <span class="keyword">func</span>(w http.ResponseWriter, r *http.Request) {</div><div class="line">		sleepTime, _ := strconv.Atoi(os.Args<span class="number">[1</span>])</div><div class="line">		<span class="keyword">if</span> sleepTime &gt;<span class="number"> 0</span> {</div><div class="line">			time.Sleep(time.Duration(sleepTime) * time.Millisecond)</div><div class="line">		}</div><div class="line"></div><div class="line">		w.Write([]<span class="typename">byte</span>(<span class="string">"Hello world"</span>))</div><div class="line">	})</div><div class="line"></div><div class="line">	err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="constant">nil</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		log.Fatal(<span class="string">"ListenAndServe: "</span>, err)</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>编译两个程序进行测试。<br><strong>1、首先进行业务逻辑时间花费为0的测试</strong><br>运行程序<code>iris 0</code>,然后执行<code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>进行并发100,持续30秒的测试。<br>iris的吞吐率为46155 requests/second。</p>
<p>运行程序<code>gomux 0</code>,然后执行<code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>进行并发100,持续30秒的测试。<br>Go内置的路由程序的吞吐率为55944 requests/second。</p>
<p><em>两者的吞吐量差别不大，iris略差一点</em></p>
<p><strong>2、然后进行业务逻辑时间花费为10的测试</strong><br>运行程序<code>iris 10</code>,然后执行<code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>进行并发100,持续30秒的测试。<br>iris的吞吐率为97 requests/second。</p>
<p>运行程序<code>gomux 10</code>,然后执行<code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>进行并发100,持续30秒的测试。<br>Go内置的路由程序的吞吐率为9294 requests/second。</p>
<p><strong>3、最后进行业务逻辑时间花费为1000的测试</strong><br>这次模拟一个极端的情况，业务处理很慢，处理一个业务需要1秒的时间。</p>
<p>运行程序<code>iris 1000</code>,然后执行<code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>进行并发100,持续30秒的测试。<br>iris的吞吐率为1 requests/second。</p>
<p>运行程序<code>gomux 1000</code>,然后执行<code>wrk -t16 -c100 -d30s http://127.0.0.1:8080/rest/hello</code>进行并发100,持续30秒的测试。<br>Go内置的路由程序的吞吐率为95 requests/second。</p>
<p>可以看到，如果加上业务逻辑的处理时间，Go内置的路由功能要远远好于Iris, 甚至可以说Iris的路由根本无法应用的有业务逻辑的产品中，随着业务逻辑的时间耗费加大，iris的吞吐量急剧下降。</p>
<p>而对于Go的内置路由来说，业务逻辑的时间耗费加大，单个client会等待更长的时间，但是并发量大的网站来说，吞吐率不会下降太多。<br>比如我们用1000的并发量测试<code>gomux 10</code>和<code>gomux 1000</code>。</p>
<ul>
<li><code>gomux 10</code>: 吞吐率为47664</li>
<li><code>gomux 1000</code>: 吞吐率为979</li>
</ul>
<p>这才是Http网站真实的情况，因为我们要应付的网站的并发量，网站应该支持同时有尽可能多的用户访问，即使单个用户得到返回页面需要上百毫秒也可以接受。</p>
<p>而Iris在业务逻辑的处理时间增大的情况下，无法支持大的吞吐率，即使在并发量很大的情况下(比如1000),吞吐率也很低。</p>
<h3 id="深入了解Go_http_server的实现">深入了解Go http server的实现</h3>
<p>Go http server实现的是每个request对应一个goroutine (goroutine per request), 考虑到Http Keep-Alive的情况，更准确的说是每个连接对应一个goroutine(goroutine per connection)。</p>
<p>因为goroutine是非常轻量级的，不会像Java那样 Thread per request会导致服务器资源不足，无法创建很多的Thread， Golang可以创建足够多的goroutine，所以goroutine per request的方式在Golang中没有问题。而且这还有一个好处，因为request是在一个goroutine中处理的，不必考虑对同一个Request/Response并发读写的问题。</p>
<p>如何查看Handler是在哪一个goroutine中执行的呢?我们需要实现一个函数来获取goroutine的Id:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> goID() <span class="typename">int</span> {</div><div class="line">	<span class="keyword">var</span> buf <span class="number">[64</span>]<span class="typename">byte</span></div><div class="line">	n := runtime.Stack(buf[:], <span class="constant">false</span>)</div><div class="line">	idField := strings.Fields(strings.TrimPrefix(<span class="typename">string</span>(buf[:n]), <span class="string">"goroutine "</span>))<span class="number">[0</span>]</div><div class="line">	id, err := strconv.Atoi(idField)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"cannot get goroutine id: %v"</span>, err))</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> id</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后在handler中打印出当前的goroutine id:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span>(c *iris.Context) {</div><div class="line">		fmt.Println(goID())</div><div class="line">		……</div><div class="line">}</div></pre></td></tr></table></figure>

<p>和</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span>(w http.ResponseWriter, r *http.Request) {</div><div class="line">		fmt.Println(goID())</div><div class="line">		……</div><div class="line">}</div></pre></td></tr></table></figure>

<p>启动<code>gomux 0</code>,然后运行<code>ab -c 5 -n 5 http://localhost:8080/rest/hello</code>测试一下，apache的ab命令使用5个并发并且每个并发两个请求访问服务器。<br>可以看到服务器的输出：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">21</div><div class="line">18</div><div class="line">17</div><div class="line">19</div><div class="line">20</div><div class="line">33</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">34</div></pre></td></tr></table></figure>

<p>因为没有指定<code>-k</code>参数，每个client发送两个请求会创建两个连接。</p>
<blockquote>
<p>你可以加上<code>-k</code>参数，可以看出会有重复的goroutine id出现，表明同一个持久连接会使用同一个goroutine处理。</p>
</blockquote>
<p>以上是通过实验验证我们的理论，下面是代码分析。</p>
<p><code>net/http/server.go</code>的<a href="https://github.com/golang/go/blob/master/src/net/http/server.go#L2146" target="_blank" rel="external">第2146行</a> <code>go c.serve()</code>表明，对于一个http连接，会启动一个goroutine:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (srv *Server) Serve(l net.Listener) error {</div><div class="line">	<span class="keyword">defer</span> l.Close()</div><div class="line">	<span class="keyword">if</span> fn := testHookServerServe; fn != <span class="constant">nil</span> {</div><div class="line">		fn(srv, l)</div><div class="line">	}</div><div class="line">	<span class="keyword">var</span> tempDelay time.Duration <span class="comment">// how long to sleep on accept failure</span></div><div class="line">	<span class="keyword">if</span> err := srv.setupHTTP2(); err != <span class="constant">nil</span> {</div><div class="line">		<span class="keyword">return</span> err</div><div class="line">	}</div><div class="line">	<span class="keyword">for</span> {</div><div class="line">		rw, e := l.Accept()</div><div class="line">		……</div><div class="line">		tempDelay =<span class="number"> 0</span></div><div class="line">		c := srv.newConn(rw)</div><div class="line">		c.setState(c.rwc, StateNew) <span class="comment">// before Serve can return</span></div><div class="line">		<span class="keyword">go</span> c.serve()</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>而这个<code>c.serve</code>方法会从连接中<a href="https://github.com/golang/go/blob/master/src/net/http/server.go#L2116" target="_blank" rel="external">读取request交由handler处理</a>:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (c *conn) serve() {</div><div class="line">	……</div><div class="line">	<span class="keyword">for</span> {</div><div class="line">		w, err := c.readRequest()</div><div class="line">		……</div><div class="line">		req := w.req</div><div class="line">		serverHandler{c.server}.ServeHTTP(w, w.req)</div><div class="line">		<span class="keyword">if</span> c.hijacked() {</div><div class="line">			<span class="keyword">return</span></div><div class="line">		}</div><div class="line">		w.finishRequest()</div><div class="line">		<span class="keyword">if</span> !w.shouldReuseConnection() {</div><div class="line">			<span class="keyword">if</span> w.requestBodyLimitHit || w.closedRequestBodyEarly() {</div><div class="line">				c.closeWriteAndWait()</div><div class="line">			}</div><div class="line">			<span class="keyword">return</span></div><div class="line">		}</div><div class="line">		c.setState(c.rwc, StateIdle)</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>而<code>ServeHTTP</code>的实现如下，如果没有配置handler或者路由器，则使用缺省的<strong>DefaultServeMux</strong>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request) {</div><div class="line">	handler := sh.srv.Handler</div><div class="line">	<span class="keyword">if</span> handler == <span class="constant">nil</span> {</div><div class="line">		handler = DefaultServeMux</div><div class="line">	}</div><div class="line">	<span class="keyword">if</span> req.RequestURI == <span class="string">"*"</span> && req.Method == <span class="string">"OPTIONS"</span> {</div><div class="line">		handler = globalOptionsHandler{}</div><div class="line">	}</div><div class="line">	handler.ServeHTTP(rw, req)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>可以看出这里并没有新开goroutine,而是在同一个connection对应的goroutine中执行的。如果试用Keep-Alive,还是在这个connection对应的goroutine中执行。</p>
<p>正如注释中所说的那样：</p>
<blockquote>
<pre><code>   <span class="comment">// HTTP cannot have multiple simultaneous active requests.[*]</span>
   <span class="comment">// Until the server replies to this request, it can't read another,</span>
   <span class="comment">// so we might as well run the handler in this goroutine.</span>
   <span class="comment">// [*] Not strictly true: HTTP pipelining.  We could let them all process</span>
   <span class="comment">// in parallel even if their responses need to be serialized.</span>
  serverHandler{<span class="built_in">c</span>.server}.<span class="type">ServeHTTP</span>(w, w.req)
</code></pre></blockquote>
<p>因此业务逻辑的时间花费会影响单个goroutine的执行时间，并且反映到客户的浏览器是是延迟时间latency增大了，如果并发量足够多，影响的是系统中的goroutine的数量以及它们的调度，吞吐率不会剧烈影响。</p>
<h3 id="Iris的分析">Iris的分析</h3>
<p>如果你使用Iris查看每个Handler是使用哪一个goroutine执行的，会发现每个连接也会用不同的goroutine执行，可是性能差在哪儿呢？<br><br>或者说,是什么原因导致Iris的性能急剧下降呢？</p>
<p>Iris服务器的监听和为连接启动一个goroutine没有什么明显不同，重要的不同在与Router处理Request的逻辑。</p>
<p>原因在于Iris为了提供性能，缓存了context,对于相同的请求url和method,它会从缓存中使用相同的context。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (r *MemoryRouter) ServeHTTP(res http.ResponseWriter, req *http.Request) {</div><div class="line">	<span class="keyword">if</span> ctx := r.cache.GetItem(req.Method, req.URL.Path); ctx != <span class="constant">nil</span> {</div><div class="line">		ctx.Redo(res, req)</div><div class="line">		<span class="keyword">return</span></div><div class="line">	}</div><div class="line"></div><div class="line">	ctx := r.getStation().pool.Get().(*Context)</div><div class="line">	ctx.Reset(res, req)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> r.processRequest(ctx) {</div><div class="line">		<span class="comment">//if something found and served then add it's clone to the cache</span></div><div class="line">		r.cache.AddItem(req.Method, req.URL.Path, ctx.Clone())</div><div class="line">	}</div><div class="line"></div><div class="line">	r.getStation().pool.Put(ctx)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>由于并发量较大的时候，多个client的请求都会进入到上面的<code>ServeHTTP</code>方法中，导致相同的请求会进入下面的逻辑：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ctx := r.cache.GetItem(req.Method, req.URL.Path); ctx != <span class="constant">nil</span> {</div><div class="line">	ctx.Redo(res, req)</div><div class="line">	<span class="keyword">return</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>ctx.Redo(res, req)</code>导致不断循环，直到每个请求处理完毕，将context放回到池子中。</p>
<p>所以对于Iris来说，并发量大的情况下,对于相同的请求(req.URL.Path和Method相同)会进入排队的状态，导致性能低下。</p>
<h3 id="参考资料">参考资料</h3>
<ol>
<li><a href="https://blog.golang.org/context" target="_blank" rel="external">https://blog.golang.org/context</a></li>
<li><a href="https://www.reddit.com/r/golang/comments/3xz1f3/go_http_server_and_go_routines/" target="_blank" rel="external">https://www.reddit.com/r/golang/comments/3xz1f3/go_http_server_and_go_routines/</a></li>
<li><a href="http://screamingatmyscreen.com/2013/6/http-request-and-goroutines/" target="_blank" rel="external">http://screamingatmyscreen.com/2013/6/http-request-and-goroutines/</a></li>
<li><a href="https://groups.google.com/forum/#!topic/golang-nuts/iwCz_pqu8R4" target="_blank" rel="external">https://groups.google.com/forum/#!topic/golang-nuts/iwCz_pqu8R4</a></li>
<li><a href="https://groups.google.com/forum/#!topic/golang-nuts/ic3FxWZRyHs" target="_blank" rel="external">https://groups.google.com/forum/#!topic/golang-nuts/ic3FxWZRyHs</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/01/Is-iris-the-fastest-golang-router-library/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>依照我的前一篇文章（<a href="http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/" target="_blank" rel="external">超全的Go Http路由框架性能比较</a>）对各种Go http路由框架的比较， Iris明显胜出，它的性能远远超过其它Golang http路由框架。</p>
<p>但是，在真实的环境中，Iris真的就是最快的Golang http路由框架吗？</p>
<blockquote>
<p><strong>2016-04-05 更新：</strong> 我已经提交了一个<a href="https://github.com/kataras/iris/issues/55" target="_blank" rel="external">Bug</a>, 作者Makis已经做了一个临时的解决方案，性能已经恢复，所以准备使用Iris的读者不必担心。<br>根据我的测试，最新的Iris的测试如下：</p>
<ol>
<li>在业务逻辑需要10毫秒时，吞吐率可以达到9281 request/s</li>
<li>在业务逻辑需要1000毫秒时，吞吐率可以达到95  request/s<br>性能已经很不错了。</li>
</ol>
<p>我会做一个其它路由框架的测试，看看其它的框架是否也有本文所说的问题。</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何得到goroutine 的 id?]]></title>
    <link href="http://colobu.com/2016/04/01/how-to-get-goroutine-id/"/>
    <id>http://colobu.com/2016/04/01/how-to-get-goroutine-id/</id>
    <published>2016-04-01T02:26:29.000Z</published>
    <updated>2016-04-01T06:56:02.171Z</updated>
    <content type="html"><![CDATA[<p>使用Java的时候很容易得到线程的名字， 比如&quot;Thread.currentThread().getName&quot;，这样就可以进行一些监控操作或者设置线程相关的一些数据。当转向Golang开发的时候，却发现Go语言并没有提供获取当前goroutine id的操作。这是Golang的开发者故意为之，避免开发者滥用goroutine id实现goroutine local storage (类似java的&quot;thread-local&quot; storage)， 因为goroutine local storage很难进行垃圾回收。因此尽管以前暴露出了相应的方法，现在已经把它隐藏了。</p>
<blockquote>
<p>Please don&#39;t use goroutine local storage. It&#39;s highly discouraged. In fact, IIRC, we used to expose Goid, but it is hidden since we don&#39;t want people to do this.</p>
<p>Potential problems include:</p>
<ol>
<li>when goroutine goes away, its goroutine local storage won&#39;t be GCed. (you can get goid for the current goroutine, but you can&#39;t get a list of all running goroutines)</li>
<li>what if handler spawns goroutine itself? the new goroutine suddenly loses access to your goroutine local storage. You can guarantee that your own code won&#39;t spawn other goroutines,<br>but in general you can&#39;t make sure the standard library or any 3rd party code won&#39;t do that.</li>
</ol>
<p>thread local storage is invented to help reuse bad/legacy code that assumes global state, Go doesn&#39;t have legacy code like that, and you really should design your code so that state is passed explicitly and not as global (e.g. resort to goroutine local storage)</p>
</blockquote>
<p>当然Go的这种隐藏的做法还是有争议的，有点因噎废食。在debug log的时候goroutine id是很好的一个监控信息。本文介绍了两种获取goroutine id的方法。</p>
<a id="more"></a>
<p><strong>1、C代码扩展</strong><br>先前的一种方式是使用C语言暴露出获取goroutine方法,如<a href="https://github.com/davecheney/junk/tree/master/id" target="_blank" rel="external"></a></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "runtime.h"</span></div><div class="line"></div><div class="line">int64 ·Id(<span class="keyword">void</span>) {</div><div class="line">	<span class="keyword">return</span> g-&gt;goid;</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> id</div><div class="line"></div><div class="line"><span class="comment">// Id returns the id of the current goroutine.</span></div><div class="line"><span class="comment">// If you call this function you will go straight to hell.</span></div><div class="line"><span class="keyword">func</span> Id() <span class="typename">int64</span></div></pre></td></tr></table></figure>

<p>但是Go 1.4已经不支持在包中包含C代码 (<a href="http://tip.golang.org/doc/go1.4#gocmd" target="_blank" rel="external">go1.4#gocmd</a>)。</p>
<p>滴滴打车的huandu贡献了一个开源的项目<a href="https://github.com/huandu/goroutine" target="_blank" rel="external">goroutine</a>,可以在新的Go版本下获取goroutine的id (至少go 1.5.1, go 1.6下可用):<br>首先获取这个项目的最新版本</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> github.<span class="keyword">com</span>/huandu/goroutine</div></pre></td></tr></table></figure>

<p>然后你就可以在代码中调用相应的方法了：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Get id of current goroutine.</span></div><div class="line"><span class="keyword">var</span> id <span class="typename">int64</span> = goroutine.GoroutineId()</div><div class="line"><span class="built_in">println</span>(id)</div></pre></td></tr></table></figure>

<blockquote>
<p>实际使用中 <code>goroutine.GoroutineId()</code>并不能正确的获得当前的goroutine id, 似乎有些问题</p>
</blockquote>
<p><strong>2、第二种方法</strong><br>还有一种花招，可以用纯Go语言获取当前的goroutine id。代码如下所示：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"runtime"</span></div><div class="line">	<span class="string">"strconv"</span></div><div class="line">	<span class="string">"strings"</span></div><div class="line">	<span class="string">"sync"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> GoID() <span class="typename">int</span> {</div><div class="line">	<span class="keyword">var</span> buf <span class="number">[64</span>]<span class="typename">byte</span></div><div class="line">	n := runtime.Stack(buf[:], <span class="constant">false</span>)</div><div class="line">	idField := strings.Fields(strings.TrimPrefix(<span class="typename">string</span>(buf[:n]), <span class="string">"goroutine "</span>))<span class="number">[0</span>]</div><div class="line">	id, err := strconv.Atoi(idField)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"cannot get goroutine id: %v"</span>, err))</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> id</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	fmt.Println(<span class="string">"main"</span>, GoID())</div><div class="line">	<span class="keyword">var</span> wg sync.WaitGroup</div><div class="line">	<span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt;<span class="number"> 10</span>; i++ {</div><div class="line">		i := i</div><div class="line">		wg.Add<span class="number">(1</span>)</div><div class="line">		<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">			<span class="keyword">defer</span> wg.Done()</div><div class="line">			fmt.Println(i, GoID())</div><div class="line">		}()</div><div class="line">	}</div><div class="line">	wg.Wait()</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>go run main.go</code>输出：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="title">main</span> <span class="number">1</span></div><div class="line"><span class="number">9</span> <span class="number">14</span></div><div class="line"><span class="number">0</span> <span class="number">5</span></div><div class="line"><span class="number">1</span> <span class="number">6</span></div><div class="line"><span class="number">2</span> <span class="number">7</span></div><div class="line"><span class="number">5</span> <span class="number">10</span></div><div class="line"><span class="number">6</span> <span class="number">11</span></div><div class="line"><span class="number">3</span> <span class="number">8</span></div><div class="line"><span class="number">7</span> <span class="number">12</span></div><div class="line"><span class="number">4</span> <span class="number">9</span></div><div class="line"><span class="number">8</span> <span class="number">13</span></div></pre></td></tr></table></figure>

<p>它利用<code>runtime.Stack</code>的堆栈信息。<a href="https://golang.org/pkg/runtime/#Stack" target="_blank" rel="external"><code>runtime.Stack(buf []byte, all bool) int</code></a>会将当前的堆栈信息写入到一个slice中，堆栈的第一行为<code>goroutine #### […</code>,其中<code>####</code>就是当前的gororutine id,通过这个花招就实现<code>GoID</code>方法了。</p>
<p>但是需要注意的是，获取堆栈信息会影响性能，所以建议你在debug的时候才用它。</p>
<h3 id="参考资料">参考资料</h3>
<ol>
<li><a href="https://groups.google.com/forum/#!topic/golang-nuts/Nt0hVV_nqHE" target="_blank" rel="external">https://groups.google.com/forum/#!topic/golang-nuts/Nt0hVV_nqHE</a></li>
<li><a href="http://wendal.net/2013/0205.html" target="_blank" rel="external">http://wendal.net/2013/0205.html</a></li>
<li><a href="http://blog.sgmansfield.com/2015/12/goroutine-ids/" target="_blank" rel="external">http://blog.sgmansfield.com/2015/12/goroutine-ids/</a></li>
<li><a href="http://dave.cheney.net/2013/09/07/how-to-include-c-code-in-your-go-package" target="_blank" rel="external">http://dave.cheney.net/2013/09/07/how-to-include-c-code-in-your-go-package</a></li>
<li><a href="http://golanghome.com/post/566" target="_blank" rel="external">http://golanghome.com/post/566</a></li>
<li><a href="https://github.com/t-yuki/goid" target="_blank" rel="external">https://github.com/t-yuki/goid</a></li>
<li><a href="https://github.com/petermattis/goid.git" target="_blank" rel="external">https://github.com/petermattis/goid.git</a></li>
<li><a href="https://github.com/huandu/goroutine" target="_blank" rel="external">https://github.com/huandu/goroutine</a></li>
</ol>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/04/01/how-to-get-goroutine-id/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>使用Java的时候很容易得到线程的名字， 比如&quot;Thread.currentThread().getName&quot;，这样就可以进行一些监控操作或者设置线程相关的一些数据。当转向Golang开发的时候，却发现Go语言并没有提供获取当前goroutine id的操作。这是Golang的开发者故意为之，避免开发者滥用goroutine id实现goroutine local storage (类似java的&quot;thread-local&quot; storage)， 因为goroutine local storage很难进行垃圾回收。因此尽管以前暴露出了相应的方法，现在已经把它隐藏了。</p>
<blockquote>
<p>Please don&#39;t use goroutine local storage. It&#39;s highly discouraged. In fact, IIRC, we used to expose Goid, but it is hidden since we don&#39;t want people to do this.</p>
<p>Potential problems include:</p>
<ol>
<li>when goroutine goes away, its goroutine local storage won&#39;t be GCed. (you can get goid for the current goroutine, but you can&#39;t get a list of all running goroutines)</li>
<li>what if handler spawns goroutine itself? the new goroutine suddenly loses access to your goroutine local storage. You can guarantee that your own code won&#39;t spawn other goroutines,<br>but in general you can&#39;t make sure the standard library or any 3rd party code won&#39;t do that.</li>
</ol>
<p>thread local storage is invented to help reuse bad/legacy code that assumes global state, Go doesn&#39;t have legacy code like that, and you really should design your code so that state is passed explicitly and not as global (e.g. resort to goroutine local storage)</p>
</blockquote>
<p>当然Go的这种隐藏的做法还是有争议的，有点因噎废食。在debug log的时候goroutine id是很好的一个监控信息。本文介绍了两种获取goroutine id的方法。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vert.x 线程模型揭秘]]></title>
    <link href="http://colobu.com/2016/03/31/vertx-thread-model/"/>
    <id>http://colobu.com/2016/03/31/vertx-thread-model/</id>
    <published>2016-03-31T04:27:04.000Z</published>
    <updated>2016-03-31T09:49:07.997Z</updated>
    <content type="html"><![CDATA[<p>Vert.x是一个在JVM开发reactive应用的框架，可用于开发异步、可伸缩、高并发的Web应用(虽然不限于web应用)。其目的在于为JVM提供一个Node.js的替代方案。开发者可以通过它使用JavaScript、Ruby、Groovy、Java，甚至是混合语言来编写应用。<br>使用Vertx.x框架，可以用JavaScript、CoffeeScript、Ruby、Python、Groovy或Java开发应用程序的组件，最终应用程序可以是混合语言构建的。</p>
<p>本文试图揭示Vert.x的线程模型的应用，通过源代码分析Vert.x如何使用线程池处理请求的，以及比较Netty和Vert.x使用线程池的异同。</p>
<p>也许你觉得奇怪，默认启动一个Vert.x Verticle实例，它只用一个线程处理事件，在多核的情况下你需要创建多个Verticle实例以充分利用多个CPU Core的性能。</p>
<a id="more"></a>
<h2 id="Vert-x_实例">Vert.x 实例</h2>
<p>首先先啰嗦地介绍一些Vert.x概念，熟悉Vert.x开发的朋友可以跳过这一节。</p>
<p>在Vert.x里，如果你不使用Vertx对象，你几乎是寸步难行。</p>
<p>Vertx对象扮演着Vert.x控制中心的角色，同时它也提供了大量的功能，例如：</p>
<ul>
<li>编写TCP客户端和服务器</li>
<li>编写HTTP客户端和服务器，包括websocket</li>
<li>Event bus</li>
<li>共享数据</li>
<li>定时器</li>
<li>发布和卸载Verticle</li>
<li>UDP</li>
<li>DNS client</li>
<li>文件系统访问</li>
<li>高可用</li>
<li>集群</li>
</ul>
<p>如果你将Vert.x嵌入到你的应用程序中，你可以向下面这样获得一个Vertx对象的引用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vertx vertx = Vertx.vertx();</div></pre></td></tr></table></figure>

<p>当你实例化Vertx对象时，如果你感觉默认的参数不符合你的需求，你可以指定实例化时的参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vertx vertx = Vertx.vertx(<span class="keyword">new</span> VertxOptions().setWorkerPoolSize(<span class="number">40</span>));</div></pre></td></tr></table></figure>

<p><a href="http://vertx.io/docs/apidocs/io/vertx/core/VertxOptions.html" target="_blank" rel="external">VertxOptions</a>对象拥有很多关于Vertx实例设置，例如配置集群，高可用设置，线程池大小以及等等其他参数。下面就介绍一下它的线程池。</p>
<h3 id="线程池">线程池</h3>
<p>1、eventLoopGroup<br>这个对象是<code>NioEventLoopGroup</code>的一个实例，它的线程池的大小由<code>options.getEventLoopPoolSize()</code>决定，如果没有设置，默认为CPU核数 * 2。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eventLoopThreadFactory = <span class="keyword">new</span> VertxThreadFactory(<span class="string">"vert.x-eventloop-thread-"</span>, checker, <span class="keyword">false</span>);</div><div class="line">   eventLoopGroup = <span class="keyword">new</span> NioEventLoopGroup(options.getEventLoopPoolSize(), eventLoopThreadFactory);</div><div class="line">   eventLoopGroup.setIoRatio(NETTY_IO_RATIO);</div></pre></td></tr></table></figure>

<p>它的<code>EventLoop</code>和一个Context对应：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="title">ContextImpl</span>(……) {</div><div class="line">	……</div><div class="line">	EventLoopGroup group = vertx.getEventLoopGroup();</div><div class="line">    <span class="keyword">if</span> (group != <span class="keyword">null</span>) {</div><div class="line">      <span class="keyword">this</span>.eventLoop = group.next();</div><div class="line">    } <span class="keyword">else</span> {</div><div class="line">      <span class="keyword">this</span>.eventLoop = <span class="keyword">null</span>;</div><div class="line">    }</div><div class="line">	……</div><div class="line">}</div></pre></td></tr></table></figure>

<p>它用来执行标准的Verticle。</p>
<p>2、WorkerPool<br>用来执行worker Verticle。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">workerPool = Executors.newFixedThreadPool(<span class="keyword">options</span>.getWorkerPoolSize(),</div><div class="line">                <span class="keyword">new</span> VertxThreadFactory(<span class="string">"vert.x-worker-thread-"</span>, checker, <span class="keyword">true</span>));</div></pre></td></tr></table></figure>



<p>3、Internal Blocking Pool<br>内部使用的线程池，可以用来将阻塞代码异步化。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">internalBlockingPool = Executors.newFixedThreadPool(<span class="keyword">options</span>.getInternalBlockingPoolSize(),</div><div class="line">                <span class="keyword">new</span> VertxThreadFactory(<span class="string">"vert.x-internal-blocking-"</span>, checker, <span class="keyword">true</span>));</div></pre></td></tr></table></figure>

<p>不要在event loop中执行阻塞操作， 比如访问数据库或者网络资源，这绝对会影响你的应用的性能。对于这些阻塞操作，你可以将它们异步化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">vertx.executeBlocking(future -&gt; {</div><div class="line">  <span class="comment">// 下面这行代码可能花费很长时间</span></div><div class="line">  String result = someAPI.blockingMethod(<span class="string">"hello"</span>);</div><div class="line">  future.complete(result);</div><div class="line">}, res -&gt; {</div><div class="line">  System.out.println(<span class="string">"The result is: "</span> + res.result());</div><div class="line">});</div></pre></td></tr></table></figure>

<p>默认情况下executeBlocking会在同一个context中执行(同一个verticle实例)，它们会串行化执行。如果不关心这个执行的顺序，可以将ordered参数设为false，它们会在worker pool线程池中并行的执行。</p>
<p>另外一种执行阻塞代码的方式就是使用worker verticle，worker verticle总是在worker pool线程池中执行。</p>
<h3 id="Verticle">Verticle</h3>
<p>Verticle有点类似Actor模型，也可以实现并发的，可扩展的，易于发布的模型。</p>
<p>一个vert.x应用可以包含多个verticle实例，实例之间可以通过event bus通讯。</p>
<h4 id="三种类型">三种类型</h4>
<p><a href="http://vertx.io/docs/vertx-core/java/#_verticle_types" target="_blank" rel="external">http://vertx.io/docs/vertx-core/java/#_verticle_types</a></p>
<p>1、Standard Verticle： 最通用的类型，总是在event loop中执行。<br>2、Worker Verticle：它们使用worker pool线程池运行。一个verticle实例绝对不会在两个或者更多线程中并发执行。<br>3、Multi-threaded worker verticle：它们使用worker pool线程池运行。 一个verticle实例可以在多个线程中并发执行。</p>
<p>实现一个Verticle很简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyVerticle</span> <span class="keyword">extends</span> <span class="title">AbstractVerticle</span> </span>{</div><div class="line"></div><div class="line">  <span class="comment">// 当发布verticle时调用</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span>() {</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="comment">// 可以不实现。当 verticle 卸载时调用</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span>() {</div><div class="line">  }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="发布方式">发布方式</h4>
<p>1、命令行方式<br><code>vertx run SomeJavaSourceFile.java</code><br>或者通过<code>maven-shade-plugin</code>打包成一个<code>fat</code>包:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">transformers</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">transformer</span> <span class="attribute">implementation</span>=<span class="value">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">manifestEntries</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">Main-Class</span>&gt;</span>io.vertx.core.Starter<span class="tag">&lt;/<span class="title">Main-Class</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">Main-Verticle</span>&gt;</span>com.colobu.vertx.Main<span class="tag">&lt;/<span class="title">Main-Verticle</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">manifestEntries</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">transformer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">transformer</span> <span class="attribute">implementation</span>=<span class="value">"org.apache.maven.plugins.shade.resource.AppendingTransformer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">resource</span>&gt;</span>META-INF/services/io.vertx.core.spi.VerticleFactory<span class="tag">&lt;/<span class="title">resource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">transformer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">transformers</span>&gt;</span></div></pre></td></tr></table></figure>

<p>然后运行 <code>java -jar xxx-fat.jar</code>,你还可以传递一些参数。</p>
<p>2、编程方式<br>你也可以编程的方式,通过<code>vertx.deployVerticle</code>发布：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span>  <span class="keyword">extends</span> <span class="title">AbstractVerticle</span> </span>{</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">        VertxOptions vo = <span class="keyword">new</span> VertxOptions();</div><div class="line">        vo.setEventLoopPoolSize(<span class="number">16</span>);</div><div class="line">        Vertx vertx = Vertx.vertx(vo);</div><div class="line"></div><div class="line">        DeploymentOptions options = <span class="keyword">new</span> DeploymentOptions();</div><div class="line">        options.setInstances(<span class="number">100</span>);</div><div class="line"></div><div class="line">        vertx.deployVerticle(Main.class.getName(), options, e -&gt; {</div><div class="line">            System.out.println(e.succeeded());</div><div class="line">            System.out.println(e.failed());</div><div class="line">            System.out.println(e.cause());</div><div class="line">            System.out.println(e.result());</div><div class="line">        });</div><div class="line">    }</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span>() {</div><div class="line">        Handler&lt;HttpServerRequest&gt; handler = e -&gt; {</div><div class="line">            HttpServerResponse response = e.response();</div><div class="line">            response.putHeader(<span class="string">"content-type"</span>, <span class="string">"application/json"</span>).end(<span class="string">"Hello world"</span>);</div><div class="line">        };</div><div class="line">        vertx.createHttpServer().requestHandler(handler).listen(<span class="number">8080</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="Verticle发布和Vert-x线程模型">Verticle发布和Vert.x线程模型</h2>
<p>以上比较啰嗦，主要介绍了一些Vert.x的一些概念。下面是我想重点介绍的内容。</p>
<p>本节以实现一个简单的http server为例(编程方式发布Verticle)，分析 vert.x 的线程和Verticle的关系。只分析标准的Verticle。代码如上。</p>
<h3 id="Verticle发布过程">Verticle发布过程</h3>
<p>首先先创建一个Vertx实例，可以你可以通过<code>VertxOptions</code>设置线程池的大小。上面的例子中设置Event Loop线程池的大小为16:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vo.setEventLoopPoolSize(<span class="number">16</span>);</div></pre></td></tr></table></figure>

<p>因此即使你创建几百个Verticle，也只会有16个Event Loop处理它们，你可以通过<code>jstack</code>查看这些线程。你会看到多个名为<code>vert.x-eventloop-thread-&lt;num&gt;</code>的线程，一个<code>vertx-blocked-thread-checker</code>线程，一个<code>vert.x-acceptor-thread-0</code>。</p>
<p>调用<code>void deployVerticle(String name, DeploymentOptions options, Handler&lt;AsyncResult&lt;String&gt;&gt; completionHandler)</code>方法发布<code>Verticle</code>。<br><code>DeploymentOptions</code>对象可以设置发布参数，比如是否是worker verticle,多线程worker verticle, ha, 隔离组等， 重要的是instances，它用来指定分布的Verticle实例的数量，默认是一个。</p>
<p>底层调用<code>DeploymentManager</code>的<code>doDeployVerticle</code>来实现，它会根据实例数创建相应多的<code>Verticle</code>,然后调用<code>doDeploy</code>发布这些<code>Verticle</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Verticle[] verticles = createVerticles(verticleFactory, identifier, <span class="keyword">options</span>.getInstances(), <span class="keyword">cl</span>);</div></pre></td></tr></table></figure>

<p>我将<code>doDeploy</code>方法简化，让我们看一下关键代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDeploy</span>(String identifier, String deploymentID, DeploymentOptions options,</div><div class="line">                          ContextImpl parentContext,</div><div class="line">                          ContextImpl callingContext,</div><div class="line">                          Handler&lt;AsyncResult&lt;String&gt;&gt; completionHandler,</div><div class="line">                          ClassLoader tccl, Verticle... verticles) {</div><div class="line">        <span class="comment">//准备工作</span></div><div class="line">        ……</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (Verticle verticle: verticles) {</div><div class="line">            <span class="comment">//创建上下文</span></div><div class="line">            ContextImpl context = options.isWorker() ? vertx.createWorkerContext(options.isMultiThreaded(), deploymentID, conf, tccl) :</div><div class="line">                    vertx.createEventLoopContext(deploymentID, conf, tccl);</div><div class="line">            </div><div class="line">            deployment.addVerticle(<span class="keyword">new</span> VerticleHolder(verticle, context));</div><div class="line">            context.runOnContext(v -&gt; {</div><div class="line">                <span class="keyword">try</span> {</div><div class="line">                    verticle.init(vertx, context);</div><div class="line">                    Future&lt;Void&gt; startFuture = Future.future();</div><div class="line">                    verticle.start(startFuture);</div><div class="line">                    startFuture.setHandler(……);</div><div class="line">                } <span class="keyword">catch</span> (Throwable t) {}</div><div class="line">            });</div><div class="line">        }</div><div class="line">    }</div></pre></td></tr></table></figure>

<p>可以看到#11 行创建了一个上下文ContextImpl, 因为本例中我们不用worker模式，所以这个上下文是通过<code>vertx.createEventLoopContext(deploymentID, conf, tccl)</code>创建的。每个verticle都会创建一个新的上下文，因此verticle和上下文是意义对应的。</p>
<p>#17 行初始化verticle，#19 行启动这个verticle。还记得我们的例子中实现的<code>start</code>方法吗，它会在这里被调用。</p>
<p>这样，多个verticle实例被发布了。</p>
<h3 id="线程模型">线程模型</h3>
<p>首先插播一下Netty的线程模型，不感兴趣的可以略过。</p>
<h4 id="Netty的线程模型">Netty的线程模型</h4>
<p>虽然Vert.x底层籍由Netty实现，但是它的处理方式与Netty NIO的线程模型是不同的。<br>(以下谈论的Netty线程模型是指NIO的情况)<br>比如下面的Netty代码片段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">EventLoopGroup parentGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</div><div class="line">EventLoopGroup childGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">50</span>);</div><div class="line"><span class="keyword">try</span> {</div><div class="line">           ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">           b.group(parentGroup, childGroup)</div><div class="line">                   .channel(NioServerSocketChannel.class)</div><div class="line">                   .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;(){……});</div><div class="line"></div><div class="line">           Channel ch = b.bind(<span class="string">"0.0.0.0"</span>,<span class="number">8080</span>).sync().channel();</div><div class="line">           ch.closeFuture().sync();</div><div class="line">       } <span class="keyword">finally</span> {</div><div class="line">           parentGroup.shutdownGracefully();</div><div class="line">           childGroup.shutdownGracefully();</div><div class="line">       }</div></pre></td></tr></table></figure>

<p><code>NioEventLoopGroup</code>代表一组<code>EventLoop</code>，每个<code>EventLoop</code>映射一个线程，每个<code>Channel</code>注册一个<code>EventLoop</code>,但是一个<code>EventLoop</code>可以关联多个<code>Channel</code>。<br><code>parentGroup</code>用来处理Accept事件，而<code>childGroup</code>用来处理其余的IO事件。当有并发连接的时候，<code>Handler</code>会在<code>childGroup</code>线程池中执行。你可以指定<code>childGroup</code>的线程数量，如果没有指定，则从系统属性中读取&quot;io.netty.eventLoopThreads&quot;，如果这个属性没有设置，则使用CPU核数 <em> 2 (Runtime.getRuntime().availableProcessors() </em> 2))。一般<code>parentGroup</code>设置为1，我们只需要一个Acceptor处理客户端的连接即可。</p>
<p>当有多个并发连接的时候，每个连接/Channel被分配到一个<code>EventLoop</code>上。<code>EventLoop</code>选择是均匀地 (如果线程数是2的n次方，可以用比较快的选择方法PowerOfTwoEventExecutorChooser):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PowerOfTwoEventExecutorChooser</span> <span class="keyword">implements</span> <span class="title">EventExecutorChooser</span> </span>{</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> EventExecutor <span class="title">next</span>() {</div><div class="line">        <span class="keyword">return</span> children[childIndex.getAndIncrement() & children.length - <span class="number">1</span>];</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEventExecutorChooser</span> <span class="keyword">implements</span> <span class="title">EventExecutorChooser</span> </span>{</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> EventExecutor <span class="title">next</span>() {</div><div class="line">        <span class="keyword">return</span> children[Math.abs(childIndex.getAndIncrement() % children.length)];</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>因此一旦如果某个<code>EventLoop</code>处理慢了，则这个线程上的event可能出现堆积。<br>比如下面的代码故意在某个线程上处理慢一些，导致这个<code>EventLoop</code>上出现堆积，Netty并没有根据压力将时间分配到其它处理快的<code>EventLoop</code>上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>{</div><div class="line">	……</div><div class="line">	</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span>(ChannelHandlerContext ctx, Object msg) {</div><div class="line">        String name = Thread.currentThread().getName();</div><div class="line">        System.out.println(name);</div><div class="line">        <span class="keyword">if</span> (name.endsWith(<span class="string">"-5"</span>)) {</div><div class="line">            <span class="keyword">try</span> {</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">                e.printStackTrace();</div><div class="line">            }</div><div class="line">        }</div><div class="line">		……</div><div class="line"></div><div class="line">｝</div></pre></td></tr></table></figure>

<p>输出结果可以看到<code>nioEventLoopGroup-3-5</code>处理了同样多的请求，而且都堆积在后面了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line">nioEventLoopGroup-3-19</div><div class="line">nioEventLoopGroup-3-18</div><div class="line">nioEventLoopGroup-3-19</div><div class="line">nioEventLoopGroup-3-18</div><div class="line">nioEventLoopGroup-3-20</div><div class="line">nioEventLoopGroup-3-20</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div><div class="line">nioEventLoopGroup-3-5</div></pre></td></tr></table></figure>

<p>因此，我们可以了解到，当启动一个NIO方式的Netty实例的时候，它会使用一个线程池来处理http请求。</p>
<p>Netty 4.0的线程模型被很好的重定义，一个<code>ChannelHandler</code>实例的方法不会被并发的调用，除非它被<code>@Sharable</code>标记，因此你不应该增加一个ChannelHandler 实例多次。当你增加一个handler到ChannelPipeline中时，你可以指定一个特定的<code>EventExecutorGroup</code>来执行这个handler。如果没有指定，则使用Channel注册的<code>EventLoop</code>来执行。如果两个Handler被指定不同的<code>EventExecutorGroup</code>，则它们会并发执行，因此如果它们会访问共享数据的化，你需要关注并发控制的问题。更多内容可以查看 <a href="http://netty.io/wiki/new-and-noteworthy-in-4.0.html#well-defined-thread-model" target="_blank" rel="external">Netty的文档</a>。</p>
<h4 id="Vert-x的线程模型">Vert.x的线程模型</h4>
<p>Vert.x如何在线程中处理事件的呢，还是以我们的例子分析。</p>
<p>回顾一下我们实现的Verticle的start方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span>() {</div><div class="line">        Handler&lt;HttpServerRequest&gt; handler = e -&gt; {</div><div class="line">            HttpServerResponse response = e.response();</div><div class="line">            response.putHeader(<span class="string">"content-type"</span>, <span class="string">"application/json"</span>).end(<span class="string">"Hello world"</span>);</div><div class="line">        };</div><div class="line">        vertx.createHttpServer().requestHandler(handler).listen(<span class="number">8080</span>);</div><div class="line">    }</div></pre></td></tr></table></figure>

<p>在这个start方法中，我们创建了一个http server，让它监听 8080端口， http request的处理交给handler执行。 那么监听线程是哪一个？handler又是在哪个线程池中执行的呢？调用多个Verticle实例的方法为什么没有出现&quot;地址/端口被占用&quot;的异常呢？</p>
<p>首先vertx.createHttpServer()会创建一个HttpServerImpl对象，可以通过HttpServerOptions配置更多的参数，每个Verticle实例都会创建一个HttpServerImpl对象。requestHandler(handler)方法设置处理器，你还可以使用Vert.x-Web设置路由的功能。</p>
<p><code>listen(8080)</code>启动http 服务器，它实际调用netty实现的。<br>我将<code>listen</code>方法简化，去除一些检查代码和回调处理，只保留关键代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> HttpServer <span class="title">listen</span>(<span class="keyword">int</span> port, String host, Handler&lt;AsyncResult&lt;HttpServer&gt;&gt; listenHandler) {        </div><div class="line">        listenContext = vertx.getOrCreateContext();</div><div class="line">        listening = <span class="keyword">true</span>;       </div><div class="line">        <span class="keyword">synchronized</span> (vertx.sharedHttpServers()) {</div><div class="line">            id = <span class="keyword">new</span> ServerID(port, host);</div><div class="line">            HttpServerImpl shared = vertx.sharedHttpServers().get(id);</div><div class="line">            <span class="keyword">if</span> (shared == <span class="keyword">null</span>) {</div><div class="line">                serverChannelGroup = <span class="keyword">new</span> DefaultChannelGroup(<span class="string">"vertx-acceptor-channels"</span>, GlobalEventExecutor.INSTANCE);</div><div class="line">                ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">                bootstrap.group(vertx.getAcceptorEventLoopGroup(), availableWorkers);</div><div class="line">                bootstrap.channelFactory(<span class="keyword">new</span> VertxNioServerChannelFactory());</div><div class="line">                </div><div class="line">                bootstrap.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;Channel&gt;() {</div><div class="line">                    <span class="annotation">@Override</span></div><div class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span>(Channel ch) <span class="keyword">throws</span> Exception {</div><div class="line">                        ……</div><div class="line">                        pipeline.addLast(<span class="string">"handler"</span>, <span class="keyword">new</span> ServerHandler());</div><div class="line">                    }</div><div class="line">                });</div><div class="line"></div><div class="line">                addHandlers(<span class="keyword">this</span>, listenContext);</div><div class="line">                </div><div class="line">                vertx.sharedHttpServers().put(id, <span class="keyword">this</span>);</div><div class="line">                actualServer = <span class="keyword">this</span>;</div><div class="line">            } <span class="keyword">else</span> {</div><div class="line">                <span class="comment">// Server already exists with that host/port - we will use that</span></div><div class="line">                actualServer = shared;</div><div class="line">                addHandlers(actualServer, listenContext);</div><div class="line">                metrics = vertx.metricsSPI().createMetrics(<span class="keyword">this</span>, <span class="keyword">new</span> SocketAddressImpl(port, host), options);</div><div class="line">            }</div><div class="line">            </div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    }</div></pre></td></tr></table></figure>

<p>#6 行可以看到它会检查使用这个IP地址和端口的http server是否存在，如果存在的化直接跳到# 27行。因此回答上面的问题，多个Verticle实例不会引起冲突，因为它们会共享同一个http server。</p>
<p>这个http server通过netty ServerBootstrap创建。#10 行可以看到acceptor是一个单线程执行的,acceptorEventLoopGroup在VertxImpl中定义。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">acceptorEventLoopGroup </span>=<span class="string"> new NioEventLoopGroup(1, acceptorEventLoopThreadFactory);</span></div></pre></td></tr></table></figure>

<p>#10 行还显示，netty的IO worker线程池由<code>availableWorkers</code>确定，它是一个VertxEventLoopGroup对象。VertxEventLoopGroup类扩展<code>AbstractEventExecutorGroup</code>,实现了<code>EventLoopGroup</code>接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">……</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> EventLoop <span class="title">next</span>() {</div><div class="line">  <span class="keyword">if</span> (workers.isEmpty()) {</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    EventLoop worker = workers.get(pos).worker;</div><div class="line">    pos++;</div><div class="line">    checkPos();</div><div class="line">    <span class="keyword">return</span> worker;</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addWorker</span>(EventLoop worker) {</div><div class="line">  EventLoopHolder holder = findHolder(worker);</div><div class="line">  <span class="keyword">if</span> (holder == <span class="keyword">null</span>) {</div><div class="line">    workers.add(<span class="keyword">new</span> EventLoopHolder(worker));</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    holder.count++;</div><div class="line">  }</div><div class="line">} </div><div class="line">……</div></pre></td></tr></table></figure>

<p>线程的数量由<code>worker</code>的数量决定，worker的类型是EventLoop,对应一个线程，有多少<code>worker</code>就会有多少线程。</p>
<p>通过<code>addWorker</code>可以增加线程的数量，worker不会重复。</p>
<p>回到刚才的<code>listen</code>方法， #21 行addHandlers方法会配置handler在哪一个event loop中执行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addHandlers</span>(HttpServerImpl server, ContextImpl context) {</div><div class="line">  <span class="keyword">if</span> (requestStream.handler() != <span class="keyword">null</span>) {</div><div class="line">    server.reqHandlerManager.addHandler(requestStream.handler(), context);</div><div class="line">  }</div><div class="line">  <span class="keyword">if</span> (wsStream.handler() != <span class="keyword">null</span>) {</div><div class="line">    server.wsHandlerManager.addHandler(wsStream.handler(), context);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>server.reqHandlerManager.addHandler</code>方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addHandler</span>(Handler&lt;T&gt; handler, ContextImpl context) {</div><div class="line">  EventLoop worker = context.nettyEventLoop();</div><div class="line">  availableWorkers.addWorker(worker);</div><div class="line">  Handlers&lt;T&gt; handlers = <span class="keyword">new</span> Handlers&lt;&gt;();</div><div class="line">  Handlers&lt;T&gt; prev = handlerMap.putIfAbsent(worker, handlers);</div><div class="line">  <span class="keyword">if</span> (prev != <span class="keyword">null</span>) {</div><div class="line">    handlers = prev;</div><div class="line">  }</div><div class="line">  handlers.addHandler(<span class="keyword">new</span> HandlerHolder&lt;&gt;(context, handler));</div><div class="line">  hasHandlers = <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>#2 行得到这个上下文的EventLoop。 还记得上下文的EventLoop怎么创建出来的吗？每个<code>Verticle</code>实例关联一个上下文，因此一个<code>Verticle</code>实例只会创建一个worker。<br>把这个worker加入到availableWorkers，这样就增加了一个事件处理线程。</p>
<p>因此我们可以看出正常情况下Vert.x的每个<code>Verticle</code>实例只会用一个线程处理请求，在多核情况下一定要配置instance的数量。</p>
<p>如果配置的instance的数量大于eventLoopPoolSize数量，那么就会有一个Event Loop处理多个instance的情况。 线程配置的过多有时不会带来性能的提升，由于线程也有context swicthing，反而会带来性能的降低。</p>
]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/03/31/vertx-thread-model/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>Vert.x是一个在JVM开发reactive应用的框架，可用于开发异步、可伸缩、高并发的Web应用(虽然不限于web应用)。其目的在于为JVM提供一个Node.js的替代方案。开发者可以通过它使用JavaScript、Ruby、Groovy、Java，甚至是混合语言来编写应用。<br>使用Vertx.x框架，可以用JavaScript、CoffeeScript、Ruby、Python、Groovy或Java开发应用程序的组件，最终应用程序可以是混合语言构建的。</p>
<p>本文试图揭示Vert.x的线程模型的应用，通过源代码分析Vert.x如何使用线程池处理请求的，以及比较Netty和Vert.x使用线程池的异同。</p>
<p>也许你觉得奇怪，默认启动一个Vert.x Verticle实例，它只用一个线程处理事件，在多核的情况下你需要创建多个Verticle实例以充分利用多个CPU Core的性能。</p>
]]>
    
    </summary>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[超全的Go Http路由框架性能比较]]></title>
    <link href="http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/"/>
    <id>http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/</id>
    <published>2016-03-23T06:02:57.000Z</published>
    <updated>2016-03-28T02:00:32.180Z</updated>
    <content type="html"><![CDATA[<p>使用Go开发Web应用非常方便，它自己的路由器<a href="http://golang.org/pkg/net/http/#ServeMux" target="_blank" rel="external">default request multiplexer</a>超级简单，但是功能也有限，所幸net/http库的设计非常好，很容易实现自己定义的路由器，所以你如果在github搜一下，会找到很多的第三方的路由库。</p>
<p>但是这些路由库良莠不齐，尤其是早期实现的路由器，有些实现了很差的路由算法，有些没有仔细考虑内存的分配，导致垃圾回收的问题。</p>
<p>Julien Schmidt在实现<a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="external">HttpRouter</a>库的时候将测试代码抽象出一个测试框架，用来测试Go的各种的路由器，测试的库相当的全。这个测试框架放在了<a href="https://github.com/julienschmidt/go-http-routing-benchmark" target="_blank" rel="external">github</a>上。</p>
<p>对于架构师和Go Web开发人员来说，这个测试确实是一份值得参考的资料，在选择一款路由框架的时候非常有帮助。</p>
<blockquote>
<p>路由是Go Web框架的一个功能，它可以将不同的URL映射到相应的处理方法上。一些库只实现了路由的功能，也有一些库实现了完整的Web框架的特性，如上下文管理，Session的维护，模版的处理，ORM等。本文只比较路由的性能。</p>
</blockquote>
<a id="more"></a>
<p>这个项目的README并没有列出一部分的测试结果，我在Amazon AWS C3.xlarge机器上做了测试，下面是测试的结果，并整理成图表，分享给大家。</p>
<blockquote>
<p>C3：<a href="https://aws.amazon.com/cn/ec2/instance-types/" target="_blank" rel="external">https://aws.amazon.com/cn/ec2/instance-types/</a></p>
<p>功能：<br>   高频 Intel Xeon E5-2680 v2 (Ivy Bridge) 处理器<br>   对 Enhanced Networking 的支持<br>   支持集群<br>   采用 SSD 的实例存储</p>
<p>型号     vCPU     内存 (GiB)     SSD 存储 (GB)<br>c3.large     2     3.75     2 x 16<br>c3.xlarge     4     7.5     2 x 40<br>c3.2xlarge     8     15     2 x 80<br>c3.4xlarge     16     30     2 x 160<br>c3.8xlarge     32     60     2 x 320</p>
</blockquote>
<h2 id="路由框架">路由框架</h2>
<p>测试的路由框架包括(此处排名不分先后)：</p>
<ul>
<li><a href="https://github.com/Unknwon/macaron" target="_blank" rel="external">macaron</a></li>
<li><a href="https://github.com/ant0ine/go-json-rest" target="_blank" rel="external">JsonRest</a></li>
<li><a href="https://github.com/astaxie/beego" target="_blank" rel="external">beego</a></li>
<li><a href="https://github.com/bmizerany/pat" target="_blank" rel="external">pat</a></li>
<li><a href="https://github.com/go-playground/lars" target="_blank" rel="external">lars</a></li>
<li><a href="https://github.com/dimfeld/httptreemux" target="_blank" rel="external">httptreemux</a></li>
<li><a href="https://github.com/gin-gonic/gin" target="_blank" rel="external">gin</a></li>
<li><a href="https://github.com/go-martini/martini" target="_blank" rel="external">martini</a></li>
<li><a href="https://github.com/go-zoo/bone" target="_blank" rel="external">bone</a></li>
<li><a href="https://github.com/gocraft/web" target="_blank" rel="external">gocraft</a></li>
<li><a href="github.com/gorilla/mux">gorilla</a></li>
<li><a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="external">httprouter</a></li>
<li><a href="https://github.com/lunny/tango" target="_blank" rel="external">tango</a></li>
<li><a href="https://github.com/mailgun/route" target="_blank" rel="external">vulcan</a></li>
<li><a href="https://github.com/mikespook/possum" target="_blank" rel="external">possum</a></li>
<li><a href="https://github.com/naoina/denco" target="_blank" rel="external">denco</a></li>
<li><a href="https://github.com/pilu/traffic" target="_blank" rel="external">traffic</a></li>
<li><a href="https://github.com/plimble/ace" target="_blank" rel="external">ace</a></li>
<li><a href="https://github.com/revel/revel" target="_blank" rel="external">revel</a></li>
<li><a href="https://github.com/typepress/rivet" target="_blank" rel="external">rivet</a></li>
<li><a href="github.com/ursiform/bear">bear</a></li>
<li><a href="github.com/vanng822/r2router">r2router</a></li>
<li><a href="https://github.com/zenazn/goji/web" target="_blank" rel="external">goji</a></li>
<li><a href="http://goji.io" target="_blank" rel="external">gojiv2</a></li>
<li><a href="http://goji.io/pat" target="_blank" rel="external">gojiv2pat</a></li>
<li><a href="https://github.com/labstack/echo" target="_blank" rel="external">echo</a></li>
<li><a href="https://github.com/kataras/iris" target="_blank" rel="external">iris</a></li>
</ul>
<h2 id="Benchmark">Benchmark</h2>
<p>测试代码包含了几种测试case,在不同的测试case中，各路由/Web框架的性能可能会有些不同。</p>
<h3 id="静态路由测试">静态路由测试</h3>
<p>静态路由使用一组定义好的路由测试web框架，不带参数， 一共157个路由。路由定义如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> staticRoutes = []route{</div><div class="line">	{<span class="string">"GET"</span>, <span class="string">"/"</span>},</div><div class="line">	{<span class="string">"GET"</span>, <span class="string">"/cmd.html"</span>},</div><div class="line">	{<span class="string">"GET"</span>, <span class="string">"/code.html"</span>},</div><div class="line">	{<span class="string">"GET"</span>, <span class="string">"/contrib.html"</span>},</div><div class="line">	{<span class="string">"GET"</span>, <span class="string">"/contribute.html"</span>},</div><div class="line">	{<span class="string">"GET"</span>, <span class="string">"/debugging_with_gdb.html"</span>},</div><div class="line">	……</div></pre></td></tr></table></figure>

<p>它用来和Go官方的<a href="http://golang.org/pkg/net/http/#ServeMux" target="_blank" rel="external">http.ServeMux</a>路由库进行比较。</p>
<p><img src="staticroute.png" alt="静态路由Benchmark"></p>
<blockquote>
<p>纵坐标轴是单次操作所耗费的时间(纳秒),越小越好</p>
</blockquote>
<p>可以看到， 即使是官方库 HttpServeMux,也有不错的性能，一些其它的路由框架如GoRestful等居然性能远远低于官方库。<br><br>而性能最好的Denco框架，时间花费只有官方库的0.02%。</p>
<p>通过性能的对比，即使是web框架中的路由功能，不同的框架实现性能差别也是天壤之别。选择一款合适的路由库/Web框架，的确是架构师慎重考虑的一件事情。</p>
<blockquote>
<p>笔者最初开发 <a href="http://uridb.com网站的时候，看到了go-zoo/bone的网站，它列出了几款路由器的比较，显示bone的性能最好，所以笔者就选择了这个框架，很遗憾官方介绍只列出对它有利的几个框架。如果可以重来，看到本文结果的情况下，我会调研更多的框架，选择性能更好的一款路由库。" target="_blank" rel="external">http://uridb.com网站的时候，看到了go-zoo/bone的网站，它列出了几款路由器的比较，显示bone的性能最好，所以笔者就选择了这个框架，很遗憾官方介绍只列出对它有利的几个框架。如果可以重来，看到本文结果的情况下，我会调研更多的框架，选择性能更好的一款路由库。</a></p>
</blockquote>
<h3 id="微测试">微测试</h3>
<p>这个测试case用来测试路径带有参数的情况，参数作为路径的一部分。<br>分别测试路径带有1个参数(Param),5个参数(Param5)，20个参数(Param20)的情况，并没有往Response写数据。<br><code>ParamWrite</code>测试URL中带有一个参数，并且把这个参数值写入到Response中。</p>
<p>各框架的测试代码类似下面的代码：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> BenchmarkAce_Param(b *testing.B) {</div><div class="line">	router := loadAceSingle(<span class="string">"GET"</span>, <span class="string">"/user/:name"</span>, aceHandle)</div><div class="line"></div><div class="line">	r, _ := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"/user/gordon"</span>, <span class="constant">nil</span>)</div><div class="line">	benchRequest(b, router, r)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>测试结果如下：<br><img src="micro.png" alt="基本测试"></p>
<h3 id="Github_API">Github API</h3>
<p>这个测试模仿Github API, Github API包含203个路由，每个框架都实现了这些API的路由，返回Response为URL。<br>这个测试用来比较在大量路由情况下框架的表现。 (它还包含一个静态路由测试和一个参数测试，性能和下图差不多，放在一张图中不方便查看，所以这里不列出来了)</p>
<p><img src="github.png" alt="Github API Route Benchmark"></p>
<h3 id="Google+_API">Google+ API</h3>
<p>这个测试case用来测试Google+的13个路由的情况，实际Google+包含的API不止这些。</p>
<p><img src="googleplus.png" alt="Google+ API Route Benchmark"></p>
<h3 id="Parse_API">Parse API</h3>
<p>这个测试case用来测试Parse的API, 包含26个路由的情况，比较各框架的在真实的路由下的性能的情况。</p>
<p><img src="parse.png" alt="Parse API Route Benchmark"></p>
<h3 id="内存占用">内存占用</h3>
<p>即使在同样的路由映射的情况下，各框架的内存占用也是云壤之别。</p>
<p>在各种测试case下，各框架配置好路由的情况下占用的内存情况如下：</p>
<p><img src="mem.png" alt="内存占用"></p>
<p>如果你查看文末完整的测试结果，还可以发现在处理每个请求时，不同的框架会分配不同数量的中间对象，性能好的框架可能是0分配，但是有的框架居然达到了几百次的分配，差距相当的明显。</p>
<h2 id="结论">结论</h2>
<p>选择一个框架有很多的理由，比如灵活性、扩展性、API友好程度、文档详细程度、项目活跃度、社区活跃度等，但是性能和内存占用绝对是必须考虑的一个重要方面，虽然我不想列出唯一的一个推荐的路由库，但是在还是建议你在benchmark结果比较好几款路由库中做选择。</p>
<p>其中我看到了几个来自中国的程序员贡献的框架，加油。</p>
<h2 id="完整的测试数据">完整的测试数据</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div></pre></td><td class="code"><pre><div class="line">BenchmarkAce_Param               	 <span class="number">5000000</span>	       <span class="number">376</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_Param              	 <span class="number">1000000</span>	      <span class="number">1464</span> ns/op	     <span class="number">456</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_Param             	 <span class="number">1000000</span>	      <span class="number">2214</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_Param              	 <span class="number">1000000</span>	      <span class="number">1440</span> ns/op	     <span class="number">384</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkDenco_Param             	 <span class="number">5000000</span>	       <span class="number">261</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_Param              	<span class="number">20000000</span>	       <span class="number">106</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_Param               	<span class="number">20000000</span>	        <span class="number">94.5</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_Param        	 <span class="number">1000000</span>	      <span class="number">2263</span> ns/op	     <span class="number">648</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkGoji_Param              	 <span class="number">1000000</span>	      <span class="number">1060</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_Param            	 <span class="number">2000000</span>	       <span class="number">952</span> ns/op	     <span class="number">176</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_Param        	 <span class="number">1000000</span>	      <span class="number">2446</span> ns/op	     <span class="number">649</span> B/op	      <span class="number">13</span> allocs/op</div><div class="line">BenchmarkGoRestful_Param         	  <span class="number">200000</span>	     <span class="number">11008</span> ns/op	    <span class="number">2696</span> B/op	      <span class="number">27</span> allocs/op</div><div class="line">BenchmarkGorillaMux_Param        	  <span class="number">500000</span>	      <span class="number">4672</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_Param        	<span class="number">10000000</span>	       <span class="number">179</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_Param       	 <span class="number">2000000</span>	       <span class="number">986</span> ns/op	     <span class="number">352</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkIris_Param                 <span class="number">30000000</span>           <span class="number">51.3</span> ns/op          <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_Param             	 <span class="number">3000000</span>	       <span class="number">453</span> ns/op	      <span class="number">56</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkLARS_Param              	<span class="number">20000000</span>	        <span class="number">98.2</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_Param           	 <span class="number">1000000</span>	      <span class="number">3713</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_Param           	  <span class="number">300000</span>	      <span class="number">6801</span> ns/op	    <span class="number">1104</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkPat_Param               	 <span class="number">1000000</span>	      <span class="number">2474</span> ns/op	     <span class="number">648</span> B/op	      <span class="number">12</span> allocs/op</div><div class="line">BenchmarkPossum_Param            	 <span class="number">1000000</span>	      <span class="number">2440</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_Param          	 <span class="number">1000000</span>	      <span class="number">1339</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_Param             	  <span class="number">200000</span>	      <span class="number">8200</span> ns/op	    <span class="number">1632</span> B/op	      <span class="number">26</span> allocs/op</div><div class="line">BenchmarkRivet_Param             	 <span class="number">5000000</span>	       <span class="number">289</span> ns/op	      <span class="number">48</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_Param             	 <span class="number">1000000</span>	      <span class="number">1681</span> ns/op	     <span class="number">256</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkTigerTonic_Param        	  <span class="number">500000</span>	      <span class="number">4260</span> ns/op	     <span class="number">976</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkTraffic_Param           	  <span class="number">300000</span>	      <span class="number">6945</span> ns/op	    <span class="number">1960</span> B/op	      <span class="number">21</span> allocs/op</div><div class="line">BenchmarkVulcan_Param            	 <span class="number">2000000</span>	       <span class="number">925</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_Param5              	 <span class="number">2000000</span>	       <span class="number">729</span> ns/op	     <span class="number">160</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_Param5             	 <span class="number">1000000</span>	      <span class="number">1968</span> ns/op	     <span class="number">501</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_Param5            	  <span class="number">500000</span>	      <span class="number">2463</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_Param5             	 <span class="number">1000000</span>	      <span class="number">1857</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkDenco_Param5            	 <span class="number">2000000</span>	       <span class="number">730</span> ns/op	     <span class="number">160</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_Param5             	<span class="number">10000000</span>	       <span class="number">194</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_Param5              	<span class="number">10000000</span>	       <span class="number">170</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_Param5       	 <span class="number">1000000</span>	      <span class="number">3500</span> ns/op	     <span class="number">920</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkGoji_Param5             	 <span class="number">1000000</span>	      <span class="number">1453</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_Param5           	 <span class="number">1000000</span>	      <span class="number">1345</span> ns/op	     <span class="number">240</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_Param5       	  <span class="number">500000</span>	      <span class="number">4460</span> ns/op	    <span class="number">1097</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkGoRestful_Param5        	  <span class="number">100000</span>	     <span class="number">12908</span> ns/op	    <span class="number">2872</span> B/op	      <span class="number">27</span> allocs/op</div><div class="line">BenchmarkGorillaMux_Param5       	  <span class="number">300000</span>	      <span class="number">6696</span> ns/op	     <span class="number">816</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_Param5       	 <span class="number">3000000</span>	       <span class="number">531</span> ns/op	     <span class="number">160</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_Param5      	 <span class="number">1000000</span>	      <span class="number">2194</span> ns/op	     <span class="number">576</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkIris_Param5                <span class="number">30000000</span>          <span class="number">51.3</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_Param5            	 <span class="number">1000000</span>	      <span class="number">2043</span> ns/op	     <span class="number">440</span> B/op	      <span class="number">10</span> allocs/op</div><div class="line">BenchmarkLARS_Param5             	<span class="number">10000000</span>	       <span class="number">167</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_Param5          	  <span class="number">500000</span>	      <span class="number">4150</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_Param5          	  <span class="number">200000</span>	      <span class="number">8193</span> ns/op	    <span class="number">1232</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkPat_Param5              	  <span class="number">300000</span>	      <span class="number">5593</span> ns/op	     <span class="number">964</span> B/op	      <span class="number">32</span> allocs/op</div><div class="line">BenchmarkPossum_Param5           	 <span class="number">1000000</span>	      <span class="number">2470</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_Param5         	 <span class="number">1000000</span>	      <span class="number">1700</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_Param5            	  <span class="number">200000</span>	      <span class="number">9906</span> ns/op	    <span class="number">1984</span> B/op	      <span class="number">33</span> allocs/op</div><div class="line">BenchmarkRivet_Param5            	 <span class="number">2000000</span>	       <span class="number">937</span> ns/op	     <span class="number">240</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_Param5            	  <span class="number">500000</span>	      <span class="number">4129</span> ns/op	     <span class="number">944</span> B/op	      <span class="number">17</span> allocs/op</div><div class="line">BenchmarkTigerTonic_Param5       	  <span class="number">200000</span>	     <span class="number">13169</span> ns/op	    <span class="number">2471</span> B/op	      <span class="number">38</span> allocs/op</div><div class="line">BenchmarkTraffic_Param5          	  <span class="number">200000</span>	     <span class="number">10445</span> ns/op	    <span class="number">2248</span> B/op	      <span class="number">25</span> allocs/op</div><div class="line">BenchmarkVulcan_Param5           	 <span class="number">1000000</span>	      <span class="number">1188</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_Param20             	 <span class="number">1000000</span>	      <span class="number">1808</span> ns/op	     <span class="number">640</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_Param20            	  <span class="number">300000</span>	      <span class="number">5793</span> ns/op	    <span class="number">1665</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_Param20           	  <span class="number">300000</span>	      <span class="number">4254</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_Param20            	  <span class="number">200000</span>	      <span class="number">8633</span> ns/op	    <span class="number">2540</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkDenco_Param20           	 <span class="number">1000000</span>	      <span class="number">2361</span> ns/op	     <span class="number">640</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_Param20            	 <span class="number">3000000</span>	       <span class="number">510</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_Param20             	 <span class="number">5000000</span>	       <span class="number">398</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_Param20      	  <span class="number">200000</span>	     <span class="number">11806</span> ns/op	    <span class="number">3796</span> B/op	      <span class="number">15</span> allocs/op</div><div class="line">BenchmarkGoji_Param20            	  <span class="number">500000</span>	      <span class="number">4591</span> ns/op	    <span class="number">1246</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_Param20          	 <span class="number">1000000</span>	      <span class="number">2245</span> ns/op	     <span class="number">480</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_Param20      	  <span class="number">100000</span>	     <span class="number">15243</span> ns/op	    <span class="number">4485</span> B/op	      <span class="number">20</span> allocs/op</div><div class="line">BenchmarkGoRestful_Param20       	  <span class="number">100000</span>	     <span class="number">22360</span> ns/op	    <span class="number">5444</span> B/op	      <span class="number">29</span> allocs/op</div><div class="line">BenchmarkGorillaMux_Param20      	  <span class="number">100000</span>	     <span class="number">14276</span> ns/op	    <span class="number">2923</span> B/op	      <span class="number">10</span> allocs/op</div><div class="line">BenchmarkHttpRouter_Param20      	 <span class="number">1000000</span>	      <span class="number">1597</span> ns/op	     <span class="number">640</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_Param20     	  <span class="number">200000</span>	     <span class="number">10298</span> ns/op	    <span class="number">3196</span> B/op	      <span class="number">10</span> allocs/op</div><div class="line">BenchmarkKocha_Param20           	  <span class="number">300000</span>	      <span class="number">6376</span> ns/op	    <span class="number">1808</span> B/op	      <span class="number">27</span> allocs/op</div><div class="line">BenchmarkLARS_Param20            	 <span class="number">5000000</span>	       <span class="number">376</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_Param20         	  <span class="number">200000</span>	     <span class="number">10811</span> ns/op	    <span class="number">2892</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkMartini_Param20         	  <span class="number">100000</span>	     <span class="number">16657</span> ns/op	    <span class="number">3596</span> B/op	      <span class="number">13</span> allocs/op</div><div class="line">BenchmarkPat_Param20             	   <span class="number">50000</span>	     <span class="number">26382</span> ns/op	    <span class="number">4687</span> B/op	     <span class="number">111</span> allocs/op</div><div class="line">BenchmarkPossum_Param20          	 <span class="number">1000000</span>	      <span class="number">2483</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_Param20        	  <span class="number">200000</span>	      <span class="number">7794</span> ns/op	    <span class="number">2284</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkRevel_Param20           	  <span class="number">100000</span>	     <span class="number">20359</span> ns/op	    <span class="number">5510</span> B/op	      <span class="number">52</span> allocs/op</div><div class="line">BenchmarkRivet_Param20           	 <span class="number">1000000</span>	      <span class="number">3210</span> ns/op	    <span class="number">1024</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_Param20           	  <span class="number">100000</span>	     <span class="number">22607</span> ns/op	    <span class="number">8224</span> B/op	      <span class="number">47</span> allocs/op</div><div class="line">BenchmarkTigerTonic_Param20      	   <span class="number">30000</span>	     <span class="number">50040</span> ns/op	   <span class="number">10344</span> B/op	     <span class="number">118</span> allocs/op</div><div class="line">BenchmarkTraffic_Param20         	   <span class="number">50000</span>	     <span class="number">32472</span> ns/op	    <span class="number">7944</span> B/op	      <span class="number">45</span> allocs/op</div><div class="line">BenchmarkVulcan_Param20          	 <span class="number">1000000</span>	      <span class="number">1957</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_ParamWrite          	 <span class="number">3000000</span>	       <span class="number">513</span> ns/op	      <span class="number">40</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkBear_ParamWrite         	 <span class="number">1000000</span>	      <span class="number">1490</span> ns/op	     <span class="number">456</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_ParamWrite        	 <span class="number">1000000</span>	      <span class="number">2352</span> ns/op	       <span class="number">8</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBone_ParamWrite         	 <span class="number">1000000</span>	      <span class="number">1547</span> ns/op	     <span class="number">384</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkDenco_ParamWrite        	 <span class="number">5000000</span>	       <span class="number">329</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_ParamWrite         	<span class="number">10000000</span>	       <span class="number">234</span> ns/op	       <span class="number">8</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_ParamWrite          	<span class="number">10000000</span>	       <span class="number">239</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_ParamWrite   	 <span class="number">1000000</span>	      <span class="number">2456</span> ns/op	     <span class="number">656</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkGoji_ParamWrite         	 <span class="number">1000000</span>	      <span class="number">1177</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_ParamWrite       	 <span class="number">1000000</span>	      <span class="number">1252</span> ns/op	     <span class="number">208</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_ParamWrite   	 <span class="number">1000000</span>	      <span class="number">4063</span> ns/op	    <span class="number">1128</span> B/op	      <span class="number">18</span> allocs/op</div><div class="line">BenchmarkGoRestful_ParamWrite    	  <span class="number">200000</span>	     <span class="number">11313</span> ns/op	    <span class="number">2704</span> B/op	      <span class="number">28</span> allocs/op</div><div class="line">BenchmarkGorillaMux_ParamWrite   	  <span class="number">500000</span>	      <span class="number">5033</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_ParamWrite   	<span class="number">10000000</span>	       <span class="number">242</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_ParamWrite  	 <span class="number">1000000</span>	      <span class="number">1025</span> ns/op	     <span class="number">352</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkIris_ParamWrite            <span class="number">10000000</span>           <span class="number">165</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_ParamWrite        	 <span class="number">3000000</span>	       <span class="number">519</span> ns/op	      <span class="number">56</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkLARS_ParamWrite         	<span class="number">10000000</span>	       <span class="number">224</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_ParamWrite      	  <span class="number">500000</span>	      <span class="number">4903</span> ns/op	    <span class="number">1144</span> B/op	      <span class="number">13</span> allocs/op</div><div class="line">BenchmarkMartini_ParamWrite      	  <span class="number">200000</span>	      <span class="number">8170</span> ns/op	    <span class="number">1208</span> B/op	      <span class="number">15</span> allocs/op</div><div class="line">BenchmarkPat_ParamWrite          	  <span class="number">500000</span>	      <span class="number">4148</span> ns/op	    <span class="number">1072</span> B/op	      <span class="number">17</span> allocs/op</div><div class="line">BenchmarkPossum_ParamWrite       	 <span class="number">1000000</span>	      <span class="number">2482</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_ParamWrite     	 <span class="number">1000000</span>	      <span class="number">1426</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_ParamWrite        	  <span class="number">200000</span>	      <span class="number">9772</span> ns/op	    <span class="number">2096</span> B/op	      <span class="number">31</span> allocs/op</div><div class="line">BenchmarkRivet_ParamWrite        	 <span class="number">3000000</span>	       <span class="number">595</span> ns/op	     <span class="number">144</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkTango_ParamWrite        	 <span class="number">2000000</span>	       <span class="number">871</span> ns/op	     <span class="number">136</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkTigerTonic_ParamWrite   	  <span class="number">200000</span>	      <span class="number">6642</span> ns/op	    <span class="number">1408</span> B/op	      <span class="number">22</span> allocs/op</div><div class="line">BenchmarkTraffic_ParamWrite      	  <span class="number">200000</span>	      <span class="number">8751</span> ns/op	    <span class="number">2384</span> B/op	      <span class="number">25</span> allocs/op</div><div class="line">BenchmarkVulcan_ParamWrite       	 <span class="number">2000000</span>	       <span class="number">928</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GithubStatic        	 <span class="number">5000000</span>	       <span class="number">242</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBear_GithubStatic       	 <span class="number">2000000</span>	       <span class="number">681</span> ns/op	     <span class="number">120</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkBeego_GithubStatic      	 <span class="number">1000000</span>	      <span class="number">2216</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GithubStatic       	  <span class="number">100000</span>	     <span class="number">16700</span> ns/op	    <span class="number">2880</span> B/op	      <span class="number">60</span> allocs/op</div><div class="line">BenchmarkDenco_GithubStatic      	<span class="number">30000000</span>	        <span class="number">52.3</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkEcho_GithubStatic       	<span class="number">10000000</span>	       <span class="number">126</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GithubStatic        	<span class="number">10000000</span>	       <span class="number">122</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GithubStatic 	 <span class="number">1000000</span>	      <span class="number">1295</span> ns/op	     <span class="number">296</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoji_GithubStatic       	 <span class="number">5000000</span>	       <span class="number">302</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGojiv2_GithubStatic     	 <span class="number">2000000</span>	       <span class="number">903</span> ns/op	     <span class="number">160</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkGoRestful_GithubStatic  	   <span class="number">30000</span>	     <span class="number">52595</span> ns/op	    <span class="number">3720</span> B/op	      <span class="number">32</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GithubStatic 	 <span class="number">1000000</span>	      <span class="number">1736</span> ns/op	     <span class="number">329</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GithubStatic 	  <span class="number">100000</span>	     <span class="number">23750</span> ns/op	     <span class="number">448</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GithubStatic 	<span class="number">20000000</span>	        <span class="number">65.1</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GithubStatic	<span class="number">20000000</span>	        <span class="number">77.8</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkIris_GithubStatic          <span class="number">30000000</span>            <span class="number">51.3</span> ns/op         <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GithubStatic      	<span class="number">20000000</span>	        <span class="number">94.0</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkLARS_GithubStatic       	<span class="number">10000000</span>	       <span class="number">122</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GithubStatic    	 <span class="number">1000000</span>	      <span class="number">3143</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkMartini_GithubStatic    	  <span class="number">100000</span>	     <span class="number">18552</span> ns/op	     <span class="number">784</span> B/op	      <span class="number">10</span> allocs/op</div><div class="line">BenchmarkPat_GithubStatic        	  <span class="number">100000</span>	     <span class="number">14052</span> ns/op	    <span class="number">3648</span> B/op	      <span class="number">76</span> allocs/op</div><div class="line">BenchmarkPossum_GithubStatic     	 <span class="number">1000000</span>	      <span class="number">1516</span> ns/op	     <span class="number">416</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkR2router_GithubStatic   	 <span class="number">2000000</span>	       <span class="number">748</span> ns/op	     <span class="number">144</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkRevel_GithubStatic      	  <span class="number">300000</span>	      <span class="number">7086</span> ns/op	    <span class="number">1248</span> B/op	      <span class="number">23</span> allocs/op</div><div class="line">BenchmarkRivet_GithubStatic      	<span class="number">10000000</span>	       <span class="number">140</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkTango_GithubStatic      	 <span class="number">1000000</span>	      <span class="number">1862</span> ns/op	     <span class="number">256</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GithubStatic 	 <span class="number">5000000</span>	       <span class="number">392</span> ns/op	      <span class="number">48</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTraffic_GithubStatic    	   <span class="number">30000</span>	     <span class="number">56251</span> ns/op	   <span class="number">18904</span> B/op	     <span class="number">148</span> allocs/op</div><div class="line">BenchmarkVulcan_GithubStatic     	 <span class="number">1000000</span>	      <span class="number">1281</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GithubParam         	 <span class="number">3000000</span>	       <span class="number">597</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_GithubParam        	 <span class="number">1000000</span>	      <span class="number">1768</span> ns/op	     <span class="number">496</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_GithubParam       	  <span class="number">500000</span>	      <span class="number">2485</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GithubParam        	  <span class="number">300000</span>	      <span class="number">7780</span> ns/op	    <span class="number">1456</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkDenco_GithubParam       	 <span class="number">3000000</span>	       <span class="number">601</span> ns/op	     <span class="number">128</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_GithubParam        	<span class="number">10000000</span>	       <span class="number">214</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GithubParam         	<span class="number">10000000</span>	       <span class="number">202</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GithubParam  	 <span class="number">1000000</span>	      <span class="number">2656</span> ns/op	     <span class="number">712</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkGoji_GithubParam        	 <span class="number">1000000</span>	      <span class="number">1555</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_GithubParam      	 <span class="number">1000000</span>	      <span class="number">1945</span> ns/op	     <span class="number">256</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GithubParam  	 <span class="number">1000000</span>	      <span class="number">3201</span> ns/op	     <span class="number">713</span> B/op	      <span class="number">14</span> allocs/op</div><div class="line">BenchmarkGoRestful_GithubParam   	   <span class="number">10000</span>	    <span class="number">158940</span> ns/op	    <span class="number">3016</span> B/op	      <span class="number">31</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GithubParam  	  <span class="number">100000</span>	     <span class="number">13605</span> ns/op	     <span class="number">768</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GithubParam  	 <span class="number">5000000</span>	       <span class="number">403</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GithubParam 	 <span class="number">1000000</span>	      <span class="number">1373</span> ns/op	     <span class="number">384</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkIris_GithubParam           <span class="number">30000000</span>          <span class="number">51.8</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GithubParam       	 <span class="number">2000000</span>	       <span class="number">968</span> ns/op	     <span class="number">128</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkLARS_GithubParam        	<span class="number">10000000</span>	       <span class="number">197</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GithubParam     	 <span class="number">1000000</span>	      <span class="number">3782</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_GithubParam     	  <span class="number">100000</span>	     <span class="number">15844</span> ns/op	    <span class="number">1136</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkPat_GithubParam         	  <span class="number">200000</span>	      <span class="number">9531</span> ns/op	    <span class="number">2464</span> B/op	      <span class="number">48</span> allocs/op</div><div class="line">BenchmarkPossum_GithubParam      	 <span class="number">1000000</span>	      <span class="number">2370</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_GithubParam    	 <span class="number">1000000</span>	      <span class="number">1469</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_GithubParam       	  <span class="number">200000</span>	      <span class="number">8602</span> ns/op	    <span class="number">1744</span> B/op	      <span class="number">28</span> allocs/op</div><div class="line">BenchmarkRivet_GithubParam       	 <span class="number">3000000</span>	       <span class="number">609</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_GithubParam       	 <span class="number">1000000</span>	      <span class="number">2710</span> ns/op	     <span class="number">480</span> B/op	      <span class="number">12</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GithubParam  	  <span class="number">300000</span>	      <span class="number">6767</span> ns/op	    <span class="number">1408</span> B/op	      <span class="number">22</span> allocs/op</div><div class="line">BenchmarkTraffic_GithubParam     	  <span class="number">100000</span>	     <span class="number">23116</span> ns/op	    <span class="number">5992</span> B/op	      <span class="number">52</span> allocs/op</div><div class="line">BenchmarkVulcan_GithubParam      	 <span class="number">1000000</span>	      <span class="number">1927</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GithubAll           	   <span class="number">10000</span>	    <span class="number">113025</span> ns/op	   <span class="number">13792</span> B/op	     <span class="number">167</span> allocs/op</div><div class="line">BenchmarkBear_GithubAll          	   <span class="number">10000</span>	    <span class="number">336857</span> ns/op	   <span class="number">86448</span> B/op	     <span class="number">943</span> allocs/op</div><div class="line">BenchmarkBeego_GithubAll         	    <span class="number">3000</span>	    <span class="number">501042</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GithubAll          	     <span class="number">500</span>	   <span class="number">2844328</span> ns/op	  <span class="number">548736</span> B/op	    <span class="number">7241</span> allocs/op</div><div class="line">BenchmarkDenco_GithubAll         	   <span class="number">10000</span>	    <span class="number">109515</span> ns/op	   <span class="number">20224</span> B/op	     <span class="number">167</span> allocs/op</div><div class="line">BenchmarkEcho_GithubAll          	   <span class="number">30000</span>	     <span class="number">49252</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GithubAll           	   <span class="number">30000</span>	     <span class="number">43531</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GithubAll    	    <span class="number">5000</span>	    <span class="number">517208</span> ns/op	  <span class="number">131656</span> B/op	    <span class="number">1686</span> allocs/op</div><div class="line">BenchmarkGoji_GithubAll          	    <span class="number">3000</span>	    <span class="number">641485</span> ns/op	   <span class="number">56112</span> B/op	     <span class="number">334</span> allocs/op</div><div class="line">BenchmarkGojiv2_GithubAll        	    <span class="number">2000</span>	    <span class="number">869630</span> ns/op	  <span class="number">118864</span> B/op	    <span class="number">3103</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GithubAll    	    <span class="number">3000</span>	    <span class="number">611777</span> ns/op	  <span class="number">134371</span> B/op	    <span class="number">2737</span> allocs/op</div><div class="line">BenchmarkGoRestful_GithubAll     	     <span class="number">100</span>	  <span class="number">17388700</span> ns/op	  <span class="number">837832</span> B/op	    <span class="number">6913</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GithubAll    	     <span class="number">200</span>	   <span class="number">7694609</span> ns/op	  <span class="number">144464</span> B/op	    <span class="number">1588</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GithubAll    	   <span class="number">20000</span>	     <span class="number">72241</span> ns/op	   <span class="number">13792</span> B/op	     <span class="number">167</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GithubAll   	   <span class="number">10000</span>	    <span class="number">240082</span> ns/op	   <span class="number">65856</span> B/op	     <span class="number">671</span> allocs/op</div><div class="line">BenchmarkIris_GithubAll               <span class="number">100000</span>         <span class="number">21199</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GithubAll         	   <span class="number">10000</span>	    <span class="number">183300</span> ns/op	   <span class="number">23304</span> B/op	     <span class="number">843</span> allocs/op</div><div class="line">BenchmarkLARS_GithubAll          	   <span class="number">30000</span>	     <span class="number">42847</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GithubAll       	    <span class="number">2000</span>	    <span class="number">773393</span> ns/op	  <span class="number">201138</span> B/op	    <span class="number">1803</span> allocs/op</div><div class="line">BenchmarkMartini_GithubAll       	     <span class="number">200</span>	   <span class="number">6520353</span> ns/op	  <span class="number">228214</span> B/op	    <span class="number">2483</span> allocs/op</div><div class="line">BenchmarkPat_GithubAll           	     <span class="number">300</span>	   <span class="number">4863404</span> ns/op	 <span class="number">1499569</span> B/op	   <span class="number">27435</span> allocs/op</div><div class="line">BenchmarkPossum_GithubAll        	   <span class="number">10000</span>	    <span class="number">292668</span> ns/op	   <span class="number">84448</span> B/op	     <span class="number">609</span> allocs/op</div><div class="line">BenchmarkR2router_GithubAll      	   <span class="number">10000</span>	    <span class="number">270070</span> ns/op	   <span class="number">77328</span> B/op	     <span class="number">979</span> allocs/op</div><div class="line">BenchmarkRevel_GithubAll         	    <span class="number">1000</span>	   <span class="number">1637315</span> ns/op	  <span class="number">337424</span> B/op	    <span class="number">5512</span> allocs/op</div><div class="line">BenchmarkRivet_GithubAll         	   <span class="number">10000</span>	    <span class="number">106604</span> ns/op	   <span class="number">16272</span> B/op	     <span class="number">167</span> allocs/op</div><div class="line">BenchmarkTango_GithubAll         	    <span class="number">5000</span>	    <span class="number">493225</span> ns/op	   <span class="number">87075</span> B/op	    <span class="number">2267</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GithubAll    	    <span class="number">2000</span>	   <span class="number">1179077</span> ns/op	  <span class="number">233680</span> B/op	    <span class="number">5035</span> allocs/op</div><div class="line">BenchmarkTraffic_GithubAll       	     <span class="number">200</span>	   <span class="number">9399517</span> ns/op	 <span class="number">2659331</span> B/op	   <span class="number">21848</span> allocs/op</div><div class="line">BenchmarkVulcan_GithubAll        	    <span class="number">5000</span>	    <span class="number">314788</span> ns/op	   <span class="number">19894</span> B/op	     <span class="number">609</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GPlusStatic         	<span class="number">10000000</span>	       <span class="number">209</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBear_GPlusStatic        	 <span class="number">3000000</span>	       <span class="number">480</span> ns/op	     <span class="number">104</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkBeego_GPlusStatic       	 <span class="number">1000000</span>	      <span class="number">2157</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GPlusStatic        	<span class="number">10000000</span>	       <span class="number">235</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkDenco_GPlusStatic       	<span class="number">50000000</span>	        <span class="number">34.5</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkEcho_GPlusStatic        	<span class="number">20000000</span>	        <span class="number">98.5</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GPlusStatic         	<span class="number">20000000</span>	        <span class="number">92.7</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GPlusStatic  	 <span class="number">1000000</span>	      <span class="number">1039</span> ns/op	     <span class="number">280</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoji_GPlusStatic        	<span class="number">10000000</span>	       <span class="number">220</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGojiv2_GPlusStatic      	 <span class="number">2000000</span>	       <span class="number">708</span> ns/op	     <span class="number">160</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GPlusStatic  	 <span class="number">1000000</span>	      <span class="number">1364</span> ns/op	     <span class="number">329</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkGoRestful_GPlusStatic   	  <span class="number">200000</span>	     <span class="number">10222</span> ns/op	    <span class="number">2360</span> B/op	      <span class="number">26</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GPlusStatic  	  <span class="number">500000</span>	      <span class="number">3222</span> ns/op	     <span class="number">448</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GPlusStatic  	<span class="number">50000000</span>	        <span class="number">37.3</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GPlusStatic 	<span class="number">30000000</span>	        <span class="number">46.4</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkIris_GPlusStatic           <span class="number">30000000</span>            <span class="number">51.1</span> ns/op         <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GPlusStatic       	<span class="number">20000000</span>	        <span class="number">61.3</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkLARS_GPlusStatic        	<span class="number">20000000</span>	        <span class="number">94.9</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GPlusStatic     	 <span class="number">1000000</span>	      <span class="number">2634</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkMartini_GPlusStatic     	  <span class="number">300000</span>	      <span class="number">5255</span> ns/op	     <span class="number">784</span> B/op	      <span class="number">10</span> allocs/op</div><div class="line">BenchmarkPat_GPlusStatic         	 <span class="number">5000000</span>	       <span class="number">397</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkPossum_GPlusStatic      	 <span class="number">1000000</span>	      <span class="number">1348</span> ns/op	     <span class="number">416</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkR2router_GPlusStatic    	 <span class="number">2000000</span>	       <span class="number">624</span> ns/op	     <span class="number">144</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkRevel_GPlusStatic       	  <span class="number">300000</span>	      <span class="number">6526</span> ns/op	    <span class="number">1232</span> B/op	      <span class="number">23</span> allocs/op</div><div class="line">BenchmarkRivet_GPlusStatic       	<span class="number">20000000</span>	        <span class="number">90.1</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkTango_GPlusStatic       	 <span class="number">1000000</span>	      <span class="number">1342</span> ns/op	     <span class="number">208</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GPlusStatic  	<span class="number">10000000</span>	       <span class="number">247</span> ns/op	      <span class="number">32</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTraffic_GPlusStatic     	 <span class="number">1000000</span>	      <span class="number">3308</span> ns/op	    <span class="number">1192</span> B/op	      <span class="number">15</span> allocs/op</div><div class="line">BenchmarkVulcan_GPlusStatic      	 <span class="number">2000000</span>	       <span class="number">817</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GPlusParam          	 <span class="number">3000000</span>	       <span class="number">452</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_GPlusParam         	 <span class="number">1000000</span>	      <span class="number">1277</span> ns/op	     <span class="number">480</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_GPlusParam        	 <span class="number">1000000</span>	      <span class="number">2283</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GPlusParam         	 <span class="number">1000000</span>	      <span class="number">1208</span> ns/op	     <span class="number">384</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkDenco_GPlusParam        	 <span class="number">5000000</span>	       <span class="number">354</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_GPlusParam         	<span class="number">10000000</span>	       <span class="number">137</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GPlusParam          	<span class="number">10000000</span>	       <span class="number">128</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GPlusParam   	 <span class="number">1000000</span>	      <span class="number">1972</span> ns/op	     <span class="number">648</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkGoji_GPlusParam         	 <span class="number">2000000</span>	       <span class="number">987</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_GPlusParam       	 <span class="number">1000000</span>	      <span class="number">1048</span> ns/op	     <span class="number">176</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GPlusParam   	 <span class="number">1000000</span>	      <span class="number">2299</span> ns/op	     <span class="number">649</span> B/op	      <span class="number">13</span> allocs/op</div><div class="line">BenchmarkGoRestful_GPlusParam    	  <span class="number">100000</span>	     <span class="number">18783</span> ns/op	    <span class="number">2760</span> B/op	      <span class="number">29</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GPlusParam   	  <span class="number">300000</span>	      <span class="number">5566</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GPlusParam   	 <span class="number">5000000</span>	       <span class="number">272</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GPlusParam  	 <span class="number">2000000</span>	       <span class="number">876</span> ns/op	     <span class="number">352</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkIris_GPlusParam            <span class="number">30000000</span>          <span class="number">53.7</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GPlusParam        	 <span class="number">3000000</span>	       <span class="number">482</span> ns/op	      <span class="number">56</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkLARS_GPlusParam         	<span class="number">10000000</span>	       <span class="number">131</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GPlusParam      	 <span class="number">1000000</span>	      <span class="number">3259</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_GPlusParam      	  <span class="number">300000</span>	      <span class="number">6824</span> ns/op	    <span class="number">1104</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkPat_GPlusParam          	 <span class="number">1000000</span>	      <span class="number">2326</span> ns/op	     <span class="number">688</span> B/op	      <span class="number">12</span> allocs/op</div><div class="line">BenchmarkPossum_GPlusParam       	 <span class="number">1000000</span>	      <span class="number">2152</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_GPlusParam     	 <span class="number">1000000</span>	      <span class="number">1170</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_GPlusParam        	  <span class="number">300000</span>	      <span class="number">7518</span> ns/op	    <span class="number">1664</span> B/op	      <span class="number">26</span> allocs/op</div><div class="line">BenchmarkRivet_GPlusParam        	 <span class="number">5000000</span>	       <span class="number">330</span> ns/op	      <span class="number">48</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_GPlusParam        	 <span class="number">1000000</span>	      <span class="number">1773</span> ns/op	     <span class="number">272</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GPlusParam   	  <span class="number">500000</span>	      <span class="number">4049</span> ns/op	    <span class="number">1040</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkTraffic_GPlusParam      	  <span class="number">300000</span>	      <span class="number">6846</span> ns/op	    <span class="number">1976</span> B/op	      <span class="number">21</span> allocs/op</div><div class="line">BenchmarkVulcan_GPlusParam       	 <span class="number">1000000</span>	      <span class="number">1119</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GPlus2Params        	 <span class="number">3000000</span>	       <span class="number">500</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_GPlus2Params       	 <span class="number">1000000</span>	      <span class="number">1580</span> ns/op	     <span class="number">496</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_GPlus2Params      	  <span class="number">500000</span>	      <span class="number">2492</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GPlus2Params       	  <span class="number">500000</span>	      <span class="number">3390</span> ns/op	     <span class="number">736</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkDenco_GPlus2Params      	 <span class="number">3000000</span>	       <span class="number">464</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_GPlus2Params       	<span class="number">10000000</span>	       <span class="number">191</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GPlus2Params        	<span class="number">10000000</span>	       <span class="number">168</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GPlus2Params 	 <span class="number">1000000</span>	      <span class="number">2444</span> ns/op	     <span class="number">712</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkGoji_GPlus2Params       	 <span class="number">1000000</span>	      <span class="number">1399</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_GPlus2Params     	 <span class="number">1000000</span>	      <span class="number">2045</span> ns/op	     <span class="number">256</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GPlus2Params 	 <span class="number">1000000</span>	      <span class="number">2958</span> ns/op	     <span class="number">713</span> B/op	      <span class="number">14</span> allocs/op</div><div class="line">BenchmarkGoRestful_GPlus2Params  	  <span class="number">100000</span>	     <span class="number">23056</span> ns/op	    <span class="number">2920</span> B/op	      <span class="number">31</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GPlus2Params 	  <span class="number">200000</span>	     <span class="number">10588</span> ns/op	     <span class="number">768</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GPlus2Params 	 <span class="number">5000000</span>	       <span class="number">315</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GPlus2Params	 <span class="number">1000000</span>	      <span class="number">1217</span> ns/op	     <span class="number">384</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkIris_GPlus2Params          <span class="number">30000000</span>          <span class="number">54.1</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GPlus2Params      	 <span class="number">2000000</span>	       <span class="number">928</span> ns/op	     <span class="number">128</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkLARS_GPlus2Params       	<span class="number">10000000</span>	       <span class="number">168</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GPlus2Params    	 <span class="number">1000000</span>	      <span class="number">3434</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_GPlus2Params    	  <span class="number">100000</span>	     <span class="number">15189</span> ns/op	    <span class="number">1232</span> B/op	      <span class="number">15</span> allocs/op</div><div class="line">BenchmarkPat_GPlus2Params        	  <span class="number">200000</span>	      <span class="number">7206</span> ns/op	    <span class="number">2256</span> B/op	      <span class="number">34</span> allocs/op</div><div class="line">BenchmarkPossum_GPlus2Params     	 <span class="number">1000000</span>	      <span class="number">2169</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_GPlus2Params   	 <span class="number">1000000</span>	      <span class="number">1302</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_GPlus2Params      	  <span class="number">200000</span>	      <span class="number">8042</span> ns/op	    <span class="number">1760</span> B/op	      <span class="number">28</span> allocs/op</div><div class="line">BenchmarkRivet_GPlus2Params      	 <span class="number">3000000</span>	       <span class="number">483</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_GPlus2Params      	 <span class="number">1000000</span>	      <span class="number">2251</span> ns/op	     <span class="number">448</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GPlus2Params 	  <span class="number">300000</span>	      <span class="number">6479</span> ns/op	    <span class="number">1456</span> B/op	      <span class="number">22</span> allocs/op</div><div class="line">BenchmarkTraffic_GPlus2Params    	  <span class="number">100000</span>	     <span class="number">14594</span> ns/op	    <span class="number">3272</span> B/op	      <span class="number">31</span> allocs/op</div><div class="line">BenchmarkVulcan_GPlus2Params     	 <span class="number">1000000</span>	      <span class="number">1588</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_GPlusAll            	  <span class="number">300000</span>	      <span class="number">6011</span> ns/op	     <span class="number">640</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkBear_GPlusAll           	  <span class="number">100000</span>	     <span class="number">17309</span> ns/op	    <span class="number">5488</span> B/op	      <span class="number">61</span> allocs/op</div><div class="line">BenchmarkBeego_GPlusAll          	   <span class="number">50000</span>	     <span class="number">30892</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_GPlusAll           	  <span class="number">100000</span>	     <span class="number">22674</span> ns/op	    <span class="number">4912</span> B/op	      <span class="number">61</span> allocs/op</div><div class="line">BenchmarkDenco_GPlusAll          	  <span class="number">300000</span>	      <span class="number">4953</span> ns/op	     <span class="number">672</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkEcho_GPlusAll           	  <span class="number">500000</span>	      <span class="number">2543</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_GPlusAll            	 <span class="number">1000000</span>	      <span class="number">2070</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_GPlusAll     	   <span class="number">50000</span>	     <span class="number">26694</span> ns/op	    <span class="number">8040</span> B/op	     <span class="number">103</span> allocs/op</div><div class="line">BenchmarkGoji_GPlusAll           	  <span class="number">200000</span>	     <span class="number">13666</span> ns/op	    <span class="number">3696</span> B/op	      <span class="number">22</span> allocs/op</div><div class="line">BenchmarkGojiv2_GPlusAll         	  <span class="number">100000</span>	     <span class="number">17038</span> ns/op	    <span class="number">2640</span> B/op	      <span class="number">76</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_GPlusAll     	   <span class="number">50000</span>	     <span class="number">31756</span> ns/op	    <span class="number">8117</span> B/op	     <span class="number">170</span> allocs/op</div><div class="line">BenchmarkGoRestful_GPlusAll      	   <span class="number">10000</span>	    <span class="number">207579</span> ns/op	   <span class="number">38664</span> B/op	     <span class="number">389</span> allocs/op</div><div class="line">BenchmarkGorillaMux_GPlusAll     	   <span class="number">20000</span>	     <span class="number">83537</span> ns/op	    <span class="number">9248</span> B/op	     <span class="number">102</span> allocs/op</div><div class="line">BenchmarkHttpRouter_GPlusAll     	  <span class="number">500000</span>	      <span class="number">3376</span> ns/op	     <span class="number">640</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_GPlusAll    	  <span class="number">200000</span>	     <span class="number">11639</span> ns/op	    <span class="number">4032</span> B/op	      <span class="number">38</span> allocs/op</div><div class="line">BenchmarkIris_GPlusAll               <span class="number">1000000</span>          <span class="number">1227</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_GPlusAll          	  <span class="number">200000</span>	      <span class="number">8193</span> ns/op	     <span class="number">976</span> B/op	      <span class="number">43</span> allocs/op</div><div class="line">BenchmarkLARS_GPlusAll           	 <span class="number">1000000</span>	      <span class="number">2086</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_GPlusAll        	   <span class="number">30000</span>	     <span class="number">42275</span> ns/op	   <span class="number">12944</span> B/op	     <span class="number">115</span> allocs/op</div><div class="line">BenchmarkMartini_GPlusAll        	   <span class="number">10000</span>	    <span class="number">113111</span> ns/op	   <span class="number">14448</span> B/op	     <span class="number">165</span> allocs/op</div><div class="line">BenchmarkPat_GPlusAll            	   <span class="number">30000</span>	     <span class="number">57505</span> ns/op	   <span class="number">16576</span> B/op	     <span class="number">298</span> allocs/op</div><div class="line">BenchmarkPossum_GPlusAll         	  <span class="number">100000</span>	     <span class="number">18661</span> ns/op	    <span class="number">5408</span> B/op	      <span class="number">39</span> allocs/op</div><div class="line">BenchmarkR2router_GPlusAll       	  <span class="number">100000</span>	     <span class="number">15602</span> ns/op	    <span class="number">5040</span> B/op	      <span class="number">63</span> allocs/op</div><div class="line">BenchmarkRevel_GPlusAll          	   <span class="number">20000</span>	     <span class="number">99153</span> ns/op	   <span class="number">21136</span> B/op	     <span class="number">342</span> allocs/op</div><div class="line">BenchmarkRivet_GPlusAll          	  <span class="number">300000</span>	      <span class="number">4892</span> ns/op	     <span class="number">768</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkTango_GPlusAll          	  <span class="number">100000</span>	     <span class="number">24402</span> ns/op	    <span class="number">4304</span> B/op	     <span class="number">129</span> allocs/op</div><div class="line">BenchmarkTigerTonic_GPlusAll     	   <span class="number">20000</span>	     <span class="number">63441</span> ns/op	   <span class="number">14256</span> B/op	     <span class="number">272</span> allocs/op</div><div class="line">BenchmarkTraffic_GPlusAll        	   <span class="number">10000</span>	    <span class="number">128642</span> ns/op	   <span class="number">37360</span> B/op	     <span class="number">392</span> allocs/op</div><div class="line">BenchmarkVulcan_GPlusAll         	  <span class="number">100000</span>	     <span class="number">16243</span> ns/op	    <span class="number">1274</span> B/op	      <span class="number">39</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_ParseStatic         	<span class="number">10000000</span>	       <span class="number">210</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBear_ParseStatic        	 <span class="number">3000000</span>	       <span class="number">561</span> ns/op	     <span class="number">120</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkBeego_ParseStatic       	 <span class="number">1000000</span>	      <span class="number">2178</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_ParseStatic        	 <span class="number">2000000</span>	       <span class="number">771</span> ns/op	     <span class="number">144</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkDenco_ParseStatic       	<span class="number">30000000</span>	        <span class="number">43.4</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkEcho_ParseStatic        	<span class="number">20000000</span>	       <span class="number">100</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_ParseStatic         	<span class="number">20000000</span>	        <span class="number">95.1</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_ParseStatic  	 <span class="number">1000000</span>	      <span class="number">1113</span> ns/op	     <span class="number">296</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoji_ParseStatic        	 <span class="number">5000000</span>	       <span class="number">282</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGojiv2_ParseStatic      	 <span class="number">2000000</span>	       <span class="number">726</span> ns/op	     <span class="number">160</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_ParseStatic  	 <span class="number">1000000</span>	      <span class="number">1407</span> ns/op	     <span class="number">329</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkGoRestful_ParseStatic   	  <span class="number">100000</span>	     <span class="number">14842</span> ns/op	    <span class="number">3656</span> B/op	      <span class="number">30</span> allocs/op</div><div class="line">BenchmarkGorillaMux_ParseStatic  	  <span class="number">500000</span>	      <span class="number">4249</span> ns/op	     <span class="number">448</span> B/op	       <span class="number">7</span> allocs/op</div><div class="line">BenchmarkHttpRouter_ParseStatic  	<span class="number">30000000</span>	        <span class="number">40.2</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_ParseStatic 	<span class="number">20000000</span>	        <span class="number">79.1</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_ParseStatic       	<span class="number">20000000</span>	        <span class="number">66.7</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkIris_ParseStatic           <span class="number">30000000</span>            <span class="number">51.5</span> ns/op         <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkLARS_ParseStatic        	<span class="number">20000000</span>	        <span class="number">95.0</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_ParseStatic     	 <span class="number">1000000</span>	      <span class="number">2703</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkMartini_ParseStatic     	  <span class="number">300000</span>	      <span class="number">5844</span> ns/op	     <span class="number">784</span> B/op	      <span class="number">10</span> allocs/op</div><div class="line">BenchmarkPat_ParseStatic         	 <span class="number">2000000</span>	       <span class="number">951</span> ns/op	     <span class="number">240</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkPossum_ParseStatic      	 <span class="number">1000000</span>	      <span class="number">1352</span> ns/op	     <span class="number">416</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkR2router_ParseStatic    	 <span class="number">2000000</span>	       <span class="number">677</span> ns/op	     <span class="number">144</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkRevel_ParseStatic       	  <span class="number">300000</span>	      <span class="number">6594</span> ns/op	    <span class="number">1248</span> B/op	      <span class="number">23</span> allocs/op</div><div class="line">BenchmarkRivet_ParseStatic       	<span class="number">20000000</span>	        <span class="number">96.7</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkTango_ParseStatic       	 <span class="number">1000000</span>	      <span class="number">1481</span> ns/op	     <span class="number">256</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkTigerTonic_ParseStatic  	 <span class="number">5000000</span>	       <span class="number">334</span> ns/op	      <span class="number">48</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTraffic_ParseStatic     	  <span class="number">500000</span>	      <span class="number">4885</span> ns/op	    <span class="number">1816</span> B/op	      <span class="number">20</span> allocs/op</div><div class="line">BenchmarkVulcan_ParseStatic      	 <span class="number">2000000</span>	       <span class="number">908</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_ParseParam          	 <span class="number">3000000</span>	       <span class="number">427</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_ParseParam         	 <span class="number">1000000</span>	      <span class="number">1248</span> ns/op	     <span class="number">467</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_ParseParam        	 <span class="number">1000000</span>	      <span class="number">2225</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_ParseParam         	 <span class="number">1000000</span>	      <span class="number">1510</span> ns/op	     <span class="number">464</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkDenco_ParseParam        	 <span class="number">5000000</span>	       <span class="number">346</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_ParseParam         	<span class="number">20000000</span>	       <span class="number">118</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_ParseParam          	<span class="number">20000000</span>	       <span class="number">100</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_ParseParam   	 <span class="number">1000000</span>	      <span class="number">1987</span> ns/op	     <span class="number">664</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkGoji_ParseParam         	 <span class="number">1000000</span>	      <span class="number">1060</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_ParseParam       	 <span class="number">1000000</span>	      <span class="number">1111</span> ns/op	     <span class="number">208</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_ParseParam   	 <span class="number">1000000</span>	      <span class="number">2142</span> ns/op	     <span class="number">649</span> B/op	      <span class="number">13</span> allocs/op</div><div class="line">BenchmarkGoRestful_ParseParam    	  <span class="number">100000</span>	     <span class="number">16895</span> ns/op	    <span class="number">4024</span> B/op	      <span class="number">31</span> allocs/op</div><div class="line">BenchmarkGorillaMux_ParseParam   	  <span class="number">500000</span>	      <span class="number">4709</span> ns/op	     <span class="number">752</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_ParseParam   	<span class="number">10000000</span>	       <span class="number">243</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_ParseParam  	 <span class="number">2000000</span>	       <span class="number">834</span> ns/op	     <span class="number">352</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkIris_ParseParam            <span class="number">30000000</span>          <span class="number">54.1</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_ParseParam        	 <span class="number">3000000</span>	       <span class="number">451</span> ns/op	      <span class="number">56</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkLARS_ParseParam         	<span class="number">20000000</span>	       <span class="number">104</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_ParseParam      	 <span class="number">1000000</span>	      <span class="number">3258</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_ParseParam      	  <span class="number">300000</span>	      <span class="number">6822</span> ns/op	    <span class="number">1104</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkPat_ParseParam          	 <span class="number">1000000</span>	      <span class="number">3342</span> ns/op	    <span class="number">1120</span> B/op	      <span class="number">17</span> allocs/op</div><div class="line">BenchmarkPossum_ParseParam       	 <span class="number">1000000</span>	      <span class="number">2132</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_ParseParam     	 <span class="number">1000000</span>	      <span class="number">1190</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_ParseParam        	  <span class="number">300000</span>	      <span class="number">7533</span> ns/op	    <span class="number">1664</span> B/op	      <span class="number">26</span> allocs/op</div><div class="line">BenchmarkRivet_ParseParam        	 <span class="number">5000000</span>	       <span class="number">285</span> ns/op	      <span class="number">48</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_ParseParam        	 <span class="number">1000000</span>	      <span class="number">1616</span> ns/op	     <span class="number">288</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkTigerTonic_ParseParam   	  <span class="number">500000</span>	      <span class="number">3820</span> ns/op	     <span class="number">992</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkTraffic_ParseParam      	  <span class="number">300000</span>	      <span class="number">6715</span> ns/op	    <span class="number">2248</span> B/op	      <span class="number">23</span> allocs/op</div><div class="line">BenchmarkVulcan_ParseParam       	 <span class="number">1000000</span>	      <span class="number">1008</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_Parse2Params        	 <span class="number">3000000</span>	       <span class="number">457</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkBear_Parse2Params       	 <span class="number">1000000</span>	      <span class="number">1441</span> ns/op	     <span class="number">496</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkBeego_Parse2Params      	 <span class="number">1000000</span>	      <span class="number">2340</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_Parse2Params       	 <span class="number">1000000</span>	      <span class="number">1359</span> ns/op	     <span class="number">416</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line">BenchmarkDenco_Parse2Params      	 <span class="number">5000000</span>	       <span class="number">410</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkEcho_Parse2Params       	<span class="number">10000000</span>	       <span class="number">145</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_Parse2Params        	<span class="number">10000000</span>	       <span class="number">124</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_Parse2Params 	 <span class="number">1000000</span>	      <span class="number">2290</span> ns/op	     <span class="number">712</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkGoji_Parse2Params       	 <span class="number">1000000</span>	      <span class="number">1062</span> ns/op	     <span class="number">336</span> B/op	       <span class="number">2</span> allocs/op</div><div class="line">BenchmarkGojiv2_Parse2Params     	 <span class="number">1000000</span>	      <span class="number">1060</span> ns/op	     <span class="number">192</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_Parse2Params 	 <span class="number">1000000</span>	      <span class="number">2609</span> ns/op	     <span class="number">713</span> B/op	      <span class="number">14</span> allocs/op</div><div class="line">BenchmarkGoRestful_Parse2Params  	   <span class="number">50000</span>	     <span class="number">25612</span> ns/op	    <span class="number">6856</span> B/op	      <span class="number">39</span> allocs/op</div><div class="line">BenchmarkGorillaMux_Parse2Params 	  <span class="number">300000</span>	      <span class="number">5184</span> ns/op	     <span class="number">768</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkHttpRouter_Parse2Params 	 <span class="number">5000000</span>	       <span class="number">267</span> ns/op	      <span class="number">64</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_Parse2Params	 <span class="number">1000000</span>	      <span class="number">1121</span> ns/op	     <span class="number">384</span> B/op	       <span class="number">4</span> allocs/op</div><div class="line">BenchmarkIris_Parse2Params          <span class="number">30000000</span>          <span class="number">56.2</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_Parse2Params      	 <span class="number">2000000</span>	       <span class="number">835</span> ns/op	     <span class="number">128</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkLARS_Parse2Params       	<span class="number">10000000</span>	       <span class="number">129</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_Parse2Params    	 <span class="number">1000000</span>	      <span class="number">3409</span> ns/op	    <span class="number">1040</span> B/op	       <span class="number">9</span> allocs/op</div><div class="line">BenchmarkMartini_Parse2Params    	  <span class="number">300000</span>	      <span class="number">6689</span> ns/op	    <span class="number">1136</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkPat_Parse2Params        	 <span class="number">1000000</span>	      <span class="number">3282</span> ns/op	     <span class="number">832</span> B/op	      <span class="number">17</span> allocs/op</div><div class="line">BenchmarkPossum_Parse2Params     	 <span class="number">1000000</span>	      <span class="number">2157</span> ns/op	     <span class="number">560</span> B/op	       <span class="number">6</span> allocs/op</div><div class="line">BenchmarkR2router_Parse2Params   	 <span class="number">1000000</span>	      <span class="number">1293</span> ns/op	     <span class="number">432</span> B/op	       <span class="number">5</span> allocs/op</div><div class="line">BenchmarkRevel_Parse2Params      	  <span class="number">200000</span>	      <span class="number">7881</span> ns/op	    <span class="number">1728</span> B/op	      <span class="number">28</span> allocs/op</div><div class="line">BenchmarkRivet_Parse2Params      	 <span class="number">3000000</span>	       <span class="number">433</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">1</span> allocs/op</div><div class="line">BenchmarkTango_Parse2Params      	 <span class="number">1000000</span>	      <span class="number">2111</span> ns/op	     <span class="number">416</span> B/op	      <span class="number">11</span> allocs/op</div><div class="line">BenchmarkTigerTonic_Parse2Params 	  <span class="number">300000</span>	      <span class="number">6109</span> ns/op	    <span class="number">1376</span> B/op	      <span class="number">22</span> allocs/op</div><div class="line">BenchmarkTraffic_Parse2Params    	  <span class="number">300000</span>	      <span class="number">6961</span> ns/op	    <span class="number">2040</span> B/op	      <span class="number">22</span> allocs/op</div><div class="line">BenchmarkVulcan_Parse2Params     	 <span class="number">1000000</span>	      <span class="number">1140</span> ns/op	      <span class="number">98</span> B/op	       <span class="number">3</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_ParseAll            	  <span class="number">200000</span>	      <span class="number">9773</span> ns/op	     <span class="number">640</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkBear_ParseAll           	   <span class="number">50000</span>	     <span class="number">29056</span> ns/op	    <span class="number">8928</span> B/op	     <span class="number">110</span> allocs/op</div><div class="line">BenchmarkBeego_ParseAll          	   <span class="number">30000</span>	     <span class="number">58810</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBone_ParseAll           	   <span class="number">50000</span>	     <span class="number">32671</span> ns/op	    <span class="number">8048</span> B/op	      <span class="number">90</span> allocs/op</div><div class="line">BenchmarkDenco_ParseAll          	  <span class="number">200000</span>	      <span class="number">7228</span> ns/op	     <span class="number">928</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkEcho_ParseAll           	  <span class="number">300000</span>	      <span class="number">4502</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_ParseAll            	  <span class="number">500000</span>	      <span class="number">3799</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_ParseAll     	   <span class="number">30000</span>	     <span class="number">46784</span> ns/op	   <span class="number">13728</span> B/op	     <span class="number">181</span> allocs/op</div><div class="line">BenchmarkGoji_ParseAll           	  <span class="number">100000</span>	     <span class="number">21732</span> ns/op	    <span class="number">5376</span> B/op	      <span class="number">32</span> allocs/op</div><div class="line">BenchmarkGojiv2_ParseAll         	  <span class="number">100000</span>	     <span class="number">25764</span> ns/op	    <span class="number">4496</span> B/op	     <span class="number">121</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_ParseAll     	   <span class="number">30000</span>	     <span class="number">54617</span> ns/op	   <span class="number">13866</span> B/op	     <span class="number">321</span> allocs/op</div><div class="line">BenchmarkGoRestful_ParseAll      	    <span class="number">5000</span>	    <span class="number">528057</span> ns/op	  <span class="number">125600</span> B/op	     <span class="number">868</span> allocs/op</div><div class="line">BenchmarkGorillaMux_ParseAll     	   <span class="number">10000</span>	    <span class="number">166329</span> ns/op	   <span class="number">16560</span> B/op	     <span class="number">198</span> allocs/op</div><div class="line">BenchmarkHttpRouter_ParseAll     	  <span class="number">300000</span>	      <span class="number">4783</span> ns/op	     <span class="number">640</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_ParseAll    	  <span class="number">100000</span>	     <span class="number">16820</span> ns/op	    <span class="number">5728</span> B/op	      <span class="number">51</span> allocs/op</div><div class="line">BenchmarkIris_ParseAll                <span class="number">500000</span>          <span class="number">2431</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_ParseAll          	  <span class="number">200000</span>	     <span class="number">11006</span> ns/op	    <span class="number">1112</span> B/op	      <span class="number">54</span> allocs/op</div><div class="line">BenchmarkLARS_ParseAll           	  <span class="number">500000</span>	      <span class="number">4001</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_ParseAll        	   <span class="number">20000</span>	     <span class="number">82102</span> ns/op	   <span class="number">24160</span> B/op	     <span class="number">224</span> allocs/op</div><div class="line">BenchmarkMartini_ParseAll        	   <span class="number">10000</span>	    <span class="number">181166</span> ns/op	   <span class="number">25600</span> B/op	     <span class="number">276</span> allocs/op</div><div class="line">BenchmarkPat_ParseAll            	   <span class="number">20000</span>	     <span class="number">63217</span> ns/op	   <span class="number">17264</span> B/op	     <span class="number">343</span> allocs/op</div><div class="line">BenchmarkPossum_ParseAll         	   <span class="number">50000</span>	     <span class="number">36679</span> ns/op	   <span class="number">10816</span> B/op	      <span class="number">78</span> allocs/op</div><div class="line">BenchmarkR2router_ParseAll       	   <span class="number">50000</span>	     <span class="number">27948</span> ns/op	    <span class="number">8352</span> B/op	     <span class="number">120</span> allocs/op</div><div class="line">BenchmarkRevel_ParseAll          	   <span class="number">10000</span>	    <span class="number">191336</span> ns/op	   <span class="number">39424</span> B/op	     <span class="number">652</span> allocs/op</div><div class="line">BenchmarkRivet_ParseAll          	  <span class="number">200000</span>	      <span class="number">7394</span> ns/op	     <span class="number">912</span> B/op	      <span class="number">16</span> allocs/op</div><div class="line">BenchmarkTango_ParseAll          	   <span class="number">30000</span>	     <span class="number">44328</span> ns/op	    <span class="number">7664</span> B/op	     <span class="number">240</span> allocs/op</div><div class="line">BenchmarkTigerTonic_ParseAll     	   <span class="number">20000</span>	     <span class="number">84400</span> ns/op	   <span class="number">19424</span> B/op	     <span class="number">360</span> allocs/op</div><div class="line">BenchmarkTraffic_ParseAll        	   <span class="number">10000</span>	    <span class="number">184485</span> ns/op	   <span class="number">57776</span> B/op	     <span class="number">642</span> allocs/op</div><div class="line">BenchmarkVulcan_ParseAll         	   <span class="number">50000</span>	     <span class="number">30571</span> ns/op	    <span class="number">2548</span> B/op	      <span class="number">78</span> allocs/op</div><div class="line"></div><div class="line">BenchmarkAce_StaticAll           	   <span class="number">30000</span>	     <span class="number">47957</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkHttpServeMux_StaticAll  	    <span class="number">2000</span>	    <span class="number">787046</span> ns/op	      <span class="number">96</span> B/op	       <span class="number">8</span> allocs/op</div><div class="line">BenchmarkBeego_StaticAll         	    <span class="number">5000</span>	    <span class="number">380445</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkBear_StaticAll          	   <span class="number">10000</span>	    <span class="number">112556</span> ns/op	   <span class="number">20336</span> B/op	     <span class="number">461</span> allocs/op</div><div class="line">BenchmarkBone_StaticAll          	   <span class="number">20000</span>	     <span class="number">94966</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkDenco_StaticAll         	  <span class="number">100000</span>	     <span class="number">13926</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkEcho_StaticAll          	   <span class="number">50000</span>	     <span class="number">32464</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkG<span class="keyword">in</span>_StaticAll           	   <span class="number">50000</span>	     <span class="number">29679</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGocraftWeb_StaticAll    	   <span class="number">10000</span>	    <span class="number">193033</span> ns/op	   <span class="number">46440</span> B/op	     <span class="number">785</span> allocs/op</div><div class="line">BenchmarkGoji_StaticAll          	   <span class="number">20000</span>	     <span class="number">67110</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkGojiv2_StaticAll        	   <span class="number">10000</span>	    <span class="number">171440</span> ns/op	   <span class="number">25120</span> B/op	     <span class="number">628</span> allocs/op</div><div class="line">BenchmarkGoJsonRest_StaticAll    	   <span class="number">10000</span>	    <span class="number">279781</span> ns/op	   <span class="number">51653</span> B/op	    <span class="number">1727</span> allocs/op</div><div class="line">BenchmarkGoRestful_StaticAll     	     <span class="number">300</span>	   <span class="number">5746021</span> ns/op	  <span class="number">392312</span> B/op	    <span class="number">4694</span> allocs/op</div><div class="line">BenchmarkGorillaMux_StaticAll    	    <span class="number">1000</span>	   <span class="number">2241602</span> ns/op	   <span class="number">70432</span> B/op	    <span class="number">1107</span> allocs/op</div><div class="line">BenchmarkHttpRouter_StaticAll    	  <span class="number">100000</span>	     <span class="number">17340</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkHttpTreeMux_StaticAll   	  <span class="number">100000</span>	     <span class="number">17313</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkIris_StaticAll               <span class="number">100000</span>         <span class="number">16659</span> ns/op           <span class="number">0</span> B/op          <span class="number">0</span> allocs/op</div><div class="line">BenchmarkKocha_StaticAll         	   <span class="number">50000</span>	     <span class="number">25972</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkLARS_StaticAll          	   <span class="number">50000</span>	     <span class="number">29267</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkMacaron_StaticAll       	    <span class="number">5000</span>	    <span class="number">444243</span> ns/op	  <span class="number">118065</span> B/op	    <span class="number">1256</span> allocs/op</div><div class="line">BenchmarkMartini_StaticAll       	     <span class="number">500</span>	   <span class="number">3105201</span> ns/op	  <span class="number">132818</span> B/op	    <span class="number">2178</span> allocs/op</div><div class="line">BenchmarkPat_StaticAll           	    <span class="number">1000</span>	   <span class="number">1758983</span> ns/op	  <span class="number">533904</span> B/op	   <span class="number">11123</span> allocs/op</div><div class="line">BenchmarkPossum_StaticAll        	   <span class="number">10000</span>	    <span class="number">211771</span> ns/op	   <span class="number">65312</span> B/op	     <span class="number">471</span> allocs/op</div><div class="line">BenchmarkR2router_StaticAll      	   <span class="number">10000</span>	    <span class="number">124813</span> ns/op	   <span class="number">22608</span> B/op	     <span class="number">628</span> allocs/op</div><div class="line">BenchmarkRevel_StaticAll         	    <span class="number">2000</span>	   <span class="number">1036863</span> ns/op	  <span class="number">198240</span> B/op	    <span class="number">3611</span> allocs/op</div><div class="line">BenchmarkRivet_StaticAll         	   <span class="number">50000</span>	     <span class="number">35304</span> ns/op	       <span class="number">0</span> B/op	       <span class="number">0</span> allocs/op</div><div class="line">BenchmarkTango_StaticAll         	    <span class="number">5000</span>	    <span class="number">303647</span> ns/op	   <span class="number">40481</span> B/op	    <span class="number">1413</span> allocs/op</div><div class="line">BenchmarkTigerTonic_StaticAll    	   <span class="number">20000</span>	     <span class="number">69463</span> ns/op	    <span class="number">7504</span> B/op	     <span class="number">157</span> allocs/op</div><div class="line">BenchmarkTraffic_StaticAll       	    <span class="number">1000</span>	   <span class="number">2288676</span> ns/op	  <span class="number">729736</span> B/op	   <span class="number">14287</span> allocs/op</div><div class="line">BenchmarkVulcan_StaticAll        	   <span class="number">10000</span>	    <span class="number">215491</span> ns/op	   <span class="number">15386</span> B/op	     <span class="number">471</span> allocs/op</div></pre></td></tr></table></figure>

<p>路由建立后的内存占用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="variable">#GithubAPI</span> Routes: <span class="number">203</span></div><div class="line">   Ace: <span class="number">48992</span> <span class="built_in">Bytes</span></div><div class="line">   Bear: <span class="number">161496</span> <span class="built_in">Bytes</span></div><div class="line">   Beego: <span class="number">144536</span> <span class="built_in">Bytes</span></div><div class="line">   Bone: <span class="number">97696</span> <span class="built_in">Bytes</span></div><div class="line">   Denco: <span class="number">36440</span> <span class="built_in">Bytes</span></div><div class="line">   Echo: <span class="number">76264</span> <span class="built_in">Bytes</span></div><div class="line">   Gin: <span class="number">52464</span> <span class="built_in">Bytes</span></div><div class="line">   GocraftWeb: <span class="number">95304</span> <span class="built_in">Bytes</span></div><div class="line">   Goji: <span class="number">86104</span> <span class="built_in">Bytes</span></div><div class="line">   Gojiv2: <span class="number">144408</span> <span class="built_in">Bytes</span></div><div class="line">   GoJsonRest: <span class="number">134376</span> <span class="built_in">Bytes</span></div><div class="line">   GoRestful: <span class="number">1395576</span> <span class="built_in">Bytes</span></div><div class="line">   GorillaMux: <span class="number">1494848</span> <span class="built_in">Bytes</span></div><div class="line">   HttpRouter: <span class="number">37464</span> <span class="built_in">Bytes</span></div><div class="line">   HttpTreeMux: <span class="number">78736</span> <span class="built_in">Bytes</span></div><div class="line">   Iris: <span class="number">61928</span> <span class="built_in">Bytes</span></div><div class="line">   Kocha: <span class="number">785408</span> <span class="built_in">Bytes</span></div><div class="line">   LARS: <span class="number">49016</span> <span class="built_in">Bytes</span></div><div class="line">   Macaron: <span class="number">128200</span> <span class="built_in">Bytes</span></div><div class="line">   Martini: <span class="number">556192</span> <span class="built_in">Bytes</span></div><div class="line">   Pat: <span class="number">21200</span> <span class="built_in">Bytes</span></div><div class="line">   Possum: <span class="number">84368</span> <span class="built_in">Bytes</span></div><div class="line">   R2router: <span class="number">47104</span> <span class="built_in">Bytes</span></div><div class="line">   Revel: <span class="number">141504</span> <span class="built_in">Bytes</span></div><div class="line">   Rivet: <span class="number">42840</span> <span class="built_in">Bytes</span></div><div class="line">   Tango: <span class="number">54584</span> <span class="built_in">Bytes</span></div><div class="line">   TigerTonic: <span class="number">95136</span> <span class="built_in">Bytes</span></div><div class="line">   Traffic: <span class="number">1053712</span> <span class="built_in">Bytes</span></div><div class="line">   Vulcan: <span class="number">465184</span> <span class="built_in">Bytes</span></div><div class="line"></div><div class="line"><span class="variable">#GPlusAPI</span> Routes: <span class="number">13</span></div><div class="line">   Ace: <span class="number">3600</span> <span class="built_in">Bytes</span></div><div class="line">   Bear: <span class="number">7112</span> <span class="built_in">Bytes</span></div><div class="line">   Beego: <span class="number">9712</span> <span class="built_in">Bytes</span></div><div class="line">   Bone: <span class="number">6448</span> <span class="built_in">Bytes</span></div><div class="line">   Denco: <span class="number">3256</span> <span class="built_in">Bytes</span></div><div class="line">   Echo: <span class="number">7064</span> <span class="built_in">Bytes</span></div><div class="line">   Gin: <span class="number">3856</span> <span class="built_in">Bytes</span></div><div class="line">   GocraftWeb: <span class="number">7496</span> <span class="built_in">Bytes</span></div><div class="line">   Goji: <span class="number">2912</span> <span class="built_in">Bytes</span></div><div class="line">   Gojiv2: <span class="number">7376</span> <span class="built_in">Bytes</span></div><div class="line">   GoJsonRest: <span class="number">11544</span> <span class="built_in">Bytes</span></div><div class="line">   GoRestful: <span class="number">87608</span> <span class="built_in">Bytes</span></div><div class="line">   GorillaMux: <span class="number">71072</span> <span class="built_in">Bytes</span></div><div class="line">   HttpRouter: <span class="number">2712</span> <span class="built_in">Bytes</span></div><div class="line">   HttpTreeMux: <span class="number">7376</span> <span class="built_in">Bytes</span></div><div class="line">   Iris: <span class="number">6480</span> <span class="built_in">Bytes</span></div><div class="line">   Kocha: <span class="number">128880</span> <span class="built_in">Bytes</span></div><div class="line">   LARS: <span class="number">3624</span> <span class="built_in">Bytes</span></div><div class="line">   Macaron: <span class="number">8448</span> <span class="built_in">Bytes</span></div><div class="line">   Martini: <span class="number">23936</span> <span class="built_in">Bytes</span></div><div class="line">   Pat: <span class="number">1856</span> <span class="built_in">Bytes</span></div><div class="line">   Possum: <span class="number">7728</span> <span class="built_in">Bytes</span></div><div class="line">   R2router: <span class="number">3928</span> <span class="built_in">Bytes</span></div><div class="line">   Revel: <span class="number">10768</span> <span class="built_in">Bytes</span></div><div class="line">   Rivet: <span class="number">3064</span> <span class="built_in">Bytes</span></div><div class="line">   Tango: <span class="number">4912</span> <span class="built_in">Bytes</span></div><div class="line">   TigerTonic: <span class="number">9408</span> <span class="built_in">Bytes</span></div><div class="line">   Traffic: <span class="number">49472</span> <span class="built_in">Bytes</span></div><div class="line">   Vulcan: <span class="number">25704</span> <span class="built_in">Bytes</span></div><div class="line"></div><div class="line"><span class="variable">#ParseAPI</span> Routes: <span class="number">26</span></div><div class="line">   Ace: <span class="number">6592</span> <span class="built_in">Bytes</span></div><div class="line">   Bear: <span class="number">12320</span> <span class="built_in">Bytes</span></div><div class="line">   Beego: <span class="number">18416</span> <span class="built_in">Bytes</span></div><div class="line">   Bone: <span class="number">10992</span> <span class="built_in">Bytes</span></div><div class="line">   Denco: <span class="number">4184</span> <span class="built_in">Bytes</span></div><div class="line">   Echo: <span class="number">7984</span> <span class="built_in">Bytes</span></div><div class="line">   Gin: <span class="number">6816</span> <span class="built_in">Bytes</span></div><div class="line">   GocraftWeb: <span class="number">12800</span> <span class="built_in">Bytes</span></div><div class="line">   Goji: <span class="number">5232</span> <span class="built_in">Bytes</span></div><div class="line">   Gojiv2: <span class="number">14464</span> <span class="built_in">Bytes</span></div><div class="line">   GoJsonRest: <span class="number">14088</span> <span class="built_in">Bytes</span></div><div class="line">   GoRestful: <span class="number">126216</span> <span class="built_in">Bytes</span></div><div class="line">   GorillaMux: <span class="number">122184</span> <span class="built_in">Bytes</span></div><div class="line">   HttpRouter: <span class="number">4976</span> <span class="built_in">Bytes</span></div><div class="line">   HttpTreeMux: <span class="number">7784</span> <span class="built_in">Bytes</span></div><div class="line">   Iris: <span class="number">9928</span> <span class="built_in">Bytes</span></div><div class="line">   Kocha: <span class="number">181712</span> <span class="built_in">Bytes</span></div><div class="line">   LARS: <span class="number">6616</span> <span class="built_in">Bytes</span></div><div class="line">   Macaron: <span class="number">13232</span> <span class="built_in">Bytes</span></div><div class="line">   Martini: <span class="number">45952</span> <span class="built_in">Bytes</span></div><div class="line">   Pat: <span class="number">2560</span> <span class="built_in">Bytes</span></div><div class="line">   Possum: <span class="number">9200</span> <span class="built_in">Bytes</span></div><div class="line">   R2router: <span class="number">7056</span> <span class="built_in">Bytes</span></div><div class="line">   Revel: <span class="number">15488</span> <span class="built_in">Bytes</span></div><div class="line">   Rivet: <span class="number">5680</span> <span class="built_in">Bytes</span></div><div class="line">   Tango: <span class="number">8664</span> <span class="built_in">Bytes</span></div><div class="line">   TigerTonic: <span class="number">9840</span> <span class="built_in">Bytes</span></div><div class="line">   Traffic: <span class="number">93480</span> <span class="built_in">Bytes</span></div><div class="line">   Vulcan: <span class="number">44504</span> <span class="built_in">Bytes</span></div><div class="line"></div><div class="line"><span class="variable">#Static</span> Routes: <span class="number">157</span></div><div class="line">   HttpServeMux: <span class="number">16864</span> <span class="built_in">Bytes</span></div><div class="line">   Ace: <span class="number">30080</span> <span class="built_in">Bytes</span></div><div class="line">   Bear: <span class="number">30216</span> <span class="built_in">Bytes</span></div><div class="line">   Beego: <span class="number">93768</span> <span class="built_in">Bytes</span></div><div class="line">   Bone: <span class="number">37872</span> <span class="built_in">Bytes</span></div><div class="line">   Denco: <span class="number">9984</span> <span class="built_in">Bytes</span></div><div class="line">   Echo: <span class="number">60960</span> <span class="built_in">Bytes</span></div><div class="line">   Gin: <span class="number">30400</span> <span class="built_in">Bytes</span></div><div class="line">   GocraftWeb: <span class="number">55256</span> <span class="built_in">Bytes</span></div><div class="line">   Goji: <span class="number">27200</span> <span class="built_in">Bytes</span></div><div class="line">   Gojiv2: <span class="number">104464</span> <span class="built_in">Bytes</span></div><div class="line">   GoJsonRest: <span class="number">135864</span> <span class="built_in">Bytes</span></div><div class="line">   GoRestful: <span class="number">908200</span> <span class="built_in">Bytes</span></div><div class="line">   GorillaMux: <span class="number">668496</span> <span class="built_in">Bytes</span></div><div class="line">   HttpRouter: <span class="number">21128</span> <span class="built_in">Bytes</span></div><div class="line">   HttpTreeMux: <span class="number">73384</span> <span class="built_in">Bytes</span></div><div class="line">   Iris: <span class="number">37264</span> <span class="built_in">Bytes</span></div><div class="line">   Kocha: <span class="number">114816</span> <span class="built_in">Bytes</span></div><div class="line">   LARS: <span class="number">30104</span> <span class="built_in">Bytes</span></div><div class="line">   Macaron: <span class="number">35136</span> <span class="built_in">Bytes</span></div><div class="line">   Martini: <span class="number">308784</span> <span class="built_in">Bytes</span></div><div class="line">   Pat: <span class="number">20464</span> <span class="built_in">Bytes</span></div><div class="line">   Possum: <span class="number">92288</span> <span class="built_in">Bytes</span></div><div class="line">   R2router: <span class="number">23712</span> <span class="built_in">Bytes</span></div><div class="line">   Revel: <span class="number">93392</span> <span class="built_in">Bytes</span></div><div class="line">   Rivet: <span class="number">23880</span> <span class="built_in">Bytes</span></div><div class="line">   Tango: <span class="number">28008</span> <span class="built_in">Bytes</span></div><div class="line">   TigerTonic: <span class="number">79696</span> <span class="built_in">Bytes</span></div><div class="line">   Traffic: <span class="number">624416</span> <span class="built_in">Bytes</span></div><div class="line">   Vulcan: <span class="number">368520</span> <span class="built_in">Bytes</span></div></pre></td></tr></table></figure>

]]> <br/>转载请注明文章来源：<a href="http://colobu.com/2016/03/23/Go-HTTP-request-router-and-web-framework-benchmark/" target="_blank"> colobu.com</a></content>
    <summary type="html">
    <![CDATA[<p>使用Go开发Web应用非常方便，它自己的路由器<a href="http://golang.org/pkg/net/http/#ServeMux" target="_blank" rel="external">default request multiplexer</a>超级简单，但是功能也有限，所幸net/http库的设计非常好，很容易实现自己定义的路由器，所以你如果在github搜一下，会找到很多的第三方的路由库。</p>
<p>但是这些路由库良莠不齐，尤其是早期实现的路由器，有些实现了很差的路由算法，有些没有仔细考虑内存的分配，导致垃圾回收的问题。</p>
<p>Julien Schmidt在实现<a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="external">HttpRouter</a>库的时候将测试代码抽象出一个测试框架，用来测试Go的各种的路由器，测试的库相当的全。这个测试框架放在了<a href="https://github.com/julienschmidt/go-http-routing-benchmark" target="_blank" rel="external">github</a>上。</p>
<p>对于架构师和Go Web开发人员来说，这个测试确实是一份值得参考的资料，在选择一款路由框架的时候非常有帮助。</p>
<blockquote>
<p>路由是Go Web框架的一个功能，它可以将不同的URL映射到相应的处理方法上。一些库只实现了路由的功能，也有一些库实现了完整的Web框架的特性，如上下文管理，Session的维护，模版的处理，ORM等。本文只比较路由的性能。</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
</feed>
