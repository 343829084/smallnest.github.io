<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[鸟窝]]></title>
  <subtitle><![CDATA[大道至简 衍化至繁]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://colobu.com/"/>
  <updated>2014-10-21T02:50:08.791Z</updated>
  <id>http://colobu.com/</id>
  
  <author>
    <name><![CDATA[smallnest]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Netty5用户指南]]></title>
    <link href="http://colobu.com/2014/10/21/netty-5-x-user-guide/"/>
    <id>http://colobu.com/2014/10/21/netty-5-x-user-guide/</id>
    <published>2014-10-21T00:35:17.000Z</published>
    <updated>2014-10-21T02:50:02.000Z</updated>
    <content type="html"><![CDATA[<p>Netty 是一个NIO client/server 网络编程框架， 可以快速且容易的开发基于协议(protocol)的网络客户端/服务器端的程序。 它极大的简化了TCP和UDP socket编程， 提供流水线化的操作。</p>
<p>‘快速且容易’并不会导致应用难以维护和性能低下。 Netty经过仔细设计， 基于许多协议实现的经验如FTP, SMTP, HTTP以及各种二进制的和基于本文的老的协议， Netty成功的找到一种保证开发，性能，稳定性，灵活性的方式， 毋须折衷.</p>
<p><img src="http://netty.io/images/components.png" alt=""></p>
<h2 id="特性">特性</h2>
<h3 id="设计">设计</h3>
<ul>
<li>为各种传输类型提供统一的API- 阻塞和非阻塞的socket</li>
<li>灵活和可扩展的事件模型， 将关注点分隔</li>
<li>高度可定制化的线程模型- 单线程， 一种或者多个线程池如<a href="http://en.wikipedia.org/wiki/Staged_event-driven_architecture" target="_blank" rel="external">SEDA</a></li>
<li>真正无连接的数据报socket支持(since 3.1)<h3 id="易用">易用</h3>
</li>
<li>提供Javadoc, 用户指南和例子</li>
<li>除了JDK 1.5 (或以上版本)毋须第三方库支持<h3 id="性能">性能</h3>
</li>
<li>更好的吞吐率，低延迟</li>
<li>较少的资源占用</li>
<li>最小化不必要的内存拷贝<h3 id="安全">安全</h3>
</li>
<li>完整的SSL/TLS， StartTLS支持<h3 id="社区">社区</h3>
</li>
<li>早期发布，发布频繁</li>
<li>作者自2003就开始写类似的框架(mina)， 一直收集用户的反馈。<br><a id="more"></a><br>官方的user guide: <a href="http://netty.io/wiki/user-guide-for-5.x.html" target="_blank" rel="external">英文</a><br>阿里的<a href="https://github.com/owenludong" target="_blank" rel="external">owenludong</a>的翻译： <a href="http://www.getsetter.cn/2014/07/15/netty5/" target="_blank" rel="external">中文版</a></li>
</ul>
<p>以下是转载。</p>
<hr>

<h2 id="前言">前言</h2>
<h3 id="问题">问题</h3>
<p>现如今我们使用通用的应用程序或者类库来实现系统之间地互相访问，比如我们经常使用一个HTTP客户端来从web服务器上获取信息，或者通过web service来执行一个远程的调用。<br>然而，一个通用的协议和他的实现有时候并没有覆盖一些场景。比如我们无法使用一个通用的http服务器来对庞大的文件和电子邮件进行交互，再比如也无法处理那种准实时消息比如财务信息和多人游戏数据。我们需要一个高效的协议实现用来处理一些特殊的场景。例如你可以实现一个高效的基于Ajax的聊天应用、媒体流传输或者是大文件传输的http服务器，你甚至可能想自己设计和实现一整个新的协议来准确地定制你自己的需求。</p>
<p>另外不可避免的事情是你不得不处理这些私有协议来确保和原有系统的互通。在这个例子中会告诉你实现一个对应该程序不损耗稳定性和性能的协议是多么的快。</p>
<h2 id="解决方案">解决方案</h2>
<p><a href="http://netty.io/" target="_blank" rel="external">Netty</a>是一个提供异步事件驱动的网络应用框架，可以为服务端和客户端提供一个快速迭代开发的高性能、高伸缩性的协议。</p>
<p>换句话说，Netty是一个能够快速简单地来开发网络应用程序的NIO框架比如客户端和服务端的协议，Netty大大简化了网络程序的开发过程比如TCP和UDP的 Socket的开发。</p>
<p>快速和简单并不等于一个应用会产生可维护性和性能的问题，Netty是一个被精心设计的框架，他从许多协议的实现中吸收了很多的经验比如FTP,SMTP,HTTP和许多二进制和基于文本的传统协议，Netty已经成功地找出了解决方案并且在不妥协开发效率、性能、稳定性、灵活性情况下。</p>
<p>有一些用户可能已经发现其他的一些网络框架声称自己也有同样的优势，所以你可能会问是Netty和他们有什么不一样。答案就是NETTY的哲学设计理念。Netty从第一天开始就把API和实现设计成为你提供最舒适的使用体验。NETTY的设计理念会使当你阅读本指南并且和Netty打交道的时候，让你的使用变得更加简单。<br>，可以为服务端和客户端提供一个快速迭代开发的高性能、高伸缩性的协议。</p>
<p>换句话说，Netty是一个能够快速简单地来开发网络应用程序的NIO框架比如客户端和服务端的协议，Netty大大简化了网络程序的开发过程比如TCP和UDP的 Socket的开发。</p>
<p>快速和简单并不等于一个应用会产生可维护性和性能的问题，Netty是一个被精心设计的框架，他从许多协议的实现中吸收了很多的经验比如FTP,SMTP,HTTP和许多二进制和基于文本的传统协议，Netty已经成功地找出了解决方案并且在不妥协开发效率、性能、稳定性、灵活性情况下。</p>
<p>有一些用户可能已经发现其他的一些网络框架声称自己也有同样的优势，所以你可能会问是Netty和他们有什么不一样。答案就是NETTY的哲学设计理念。Netty从第一天开始就把API和实现设计成为你提供最舒适的使用体验。NETTY的设计理念会使当你阅读本指南并且和Netty打交道的时候，让你的使用变得更加简单。<br>是一个提供异步事件驱动的网络应用框架，可以为服务端和客户端提供一个快速迭代开发的高性能、高伸缩性的协议。</p>
<p>换句话说，Netty是一个能够快速简单地来开发网络应用程序的NIO框架比如客户端和服务端的协议，Netty大大简化了网络程序的开发过程比如TCP和UDP的 Socket的开发。</p>
<p>快速和简单并不等于一个应用会产生可维护性和性能的问题，Netty是一个被精心设计的框架，他从许多协议的实现中吸收了很多的经验比如FTP,SMTP,HTTP和许多二进制和基于文本的传统协议，Netty已经成功地找出了解决方案并且在不妥协开发效率、性能、稳定性、灵活性情况下。</p>
<p>有一些用户可能已经发现其他的一些网络框架声称自己也有同样的优势，所以你可能会问是Netty和他们有什么不一样。答案就是NETTY的哲学设计理念。Netty从第一天开始就把API和实现设计成为你提供最舒适的使用体验。NETTY的设计理念会使当你阅读本指南并且和Netty打交道的时候，让你的使用变得更加简单。</p>
<h2 id="入门指南">入门指南</h2>
<p>这个章节会围绕NETTY核心的结构并附上一些简单的例子让你快速的入门。当你读完本章节你马上就可以用Netty写出一个客户端和一个服务端。<br>如果你在学习某些东西的时候喜欢自顶向下的方法，你可能想要从第二个章节架构概述开始，然后再回到这里。</p>
<h3 id="开始之前">开始之前</h3>
<p>如果要运行本章节中的2个例子最低要求是：NETTY的最新版本(Netty5)和JDK1.6及以上。最新的NETTY版本在项目下载页面。为了下载到正确的JDK版本，请到你偏爱的网站下载。<br>当你在读的过程中，你可能有很多关于本章节介绍的类相关的问题，每当你想知道他们的更多的信息那么请参考API说明文档。为了方便，所有文档中涉及到的类名字都会被关联到一个在线的API说明。当然如果有任何错误信息、语法错误或者你有任何好的建议来改进文档说明，那么请联系netty社区。</p>
<h3 id="实现Discard服务器">实现Discard服务器</h3>
<p>世界上最简单的协议不是”Hello,World!”，是<a href="http://tools.ietf.org/html/rfc863" target="_blank" rel="external">DISCARD</a>，他是一种丢弃了所有接受到的数据，并不做有任何的响应的协议。<br>为了实现DISCARD协议，你唯一需要做的就是忽略所有收到的数据。让我们从处理器的实现开始，处理器是由Netty生成用来处理I/O事件的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.example.discard;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> * Handles a server-side channel.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>{ <span class="comment">// (1)</span></div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span>(ChannelHandlerContext ctx, Object msg) { <span class="comment">// (2)</span></div><div class="line">        <span class="comment">// Discard the received data silently.</span></div><div class="line">        ((ByteBuf) msg).release(); <span class="comment">// (3)</span></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span>(ChannelHandlerContext ctx, Throwable cause) { <span class="comment">// (4)</span></div><div class="line">        <span class="comment">// Close the connection when an exception is raised.</span></div><div class="line">        cause.printStackTrace();</div><div class="line">        ctx.close();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ol>
<li>DisCardServerHandler 继承自 <a href="http://netty.io/5.0/api/io/netty/channel/ChannelHandlerAdapter.html" target="_blank" rel="external">ChannelHandlerAdapter</a>，这个类实现了<a href="http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html" target="_blank" rel="external">ChannelHandler</a>接口，<a href="http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html" target="_blank" rel="external">ChannelHandler</a>提供了许多事件处理的接口方法，然后你可以覆盖这些方法。现在仅仅只需要继承<a href="http://netty.io/5.0/api/io/netty/channel/ChannelHandlerAdapter.html" target="_blank" rel="external">ChannelHandlerAdapter</a>类而不是你自己去实现接口方法。</li>
<li>这里我们覆盖了<code>chanelRead()</code>事件处理方法。每当从客户端收到新的数据时，这个方法会在收到消息时被调用，这个例子中，收到的消息的类型是<a href="http://netty.io/5.0/api/io/netty/buffer/ByteBuf.html" target="_blank" rel="external">ByteBuf</a></li>
<li>为了实现DISCARD协议，处理器不得不忽略所有接受到的消息。<a href="http://netty.io/5.0/api/io/netty/buffer/ByteBuf.html" target="_blank" rel="external">ByteBuf</a>是一个引用计数对象，这个对象必须显示地调用<code>release()</code>方法来释放。请记住处理器的职责是释放所有传递到处理器的引用计数对象。通常，<code>channelRead()</code>方法的实现就像下面的这段代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span>(ChannelHandlerContext ctx, Object msg) {</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        <span class="comment">// Do something with msg</span></div><div class="line">    } <span class="keyword">finally</span> {</div><div class="line">        ReferenceCountUtil.release(msg);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ol>
<li><code>exceptionCaught()</code>事件处理方法是当出现Throwable对象才会被调用，即当Netty由于IO错误或者处理器在处理事件时抛出的异常时。在大部分情况下，捕获的异常应该被记录下来并且把关联的channel给关闭掉。然而这个方法的处理方式会在遇到不同异常的情况下有不同的实现，比如你可能想在关闭连接之前发送一个错误码的响应消息。</li>
</ol>
<p>到目前为止一切都还比较顺利，我们已经实现了DISCARD服务的一半功能，剩下的需要编写一个main()方法来启动服务端的DiscardServerHandler。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.example.discard;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</div><div class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</div><div class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</div><div class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</div><div class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</div><div class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> * Discards any incoming data.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardServer</span> </span>{</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">DiscardServer</span>(<span class="keyword">int</span> port) {</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() <span class="keyword">throws</span> Exception {</div><div class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">// (1)</span></div><div class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap(); <span class="comment">// (2)</span></div><div class="line">            b.group(bossGroup, workerGroup)</div><div class="line">             .channel(NioServerSocketChannel.class) <span class="comment">// (3)</span></div><div class="line">             .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() { <span class="comment">// (4)</span></div><div class="line">                 <span class="annotation">@Override</span></div><div class="line">                 <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span>(SocketChannel ch) <span class="keyword">throws</span> Exception {</div><div class="line">                     ch.pipeline().addLast(<span class="keyword">new</span> DiscardServerHandler());</div><div class="line">                 }</div><div class="line">             })</div><div class="line">             .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)          <span class="comment">// (5)</span></div><div class="line">             .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>); <span class="comment">// (6)</span></div><div class="line"></div><div class="line">            <span class="comment">// Bind and start to accept incoming connections.</span></div><div class="line">            ChannelFuture f = b.bind(port).sync(); <span class="comment">// (7)</span></div><div class="line"></div><div class="line">            <span class="comment">// Wait until the server socket is closed.</span></div><div class="line">            <span class="comment">// In this example, this does not happen, but you can do that to gracefully</span></div><div class="line">            <span class="comment">// shut down your server.</span></div><div class="line">            f.channel().closeFuture().sync();</div><div class="line">        } <span class="keyword">finally</span> {</div><div class="line">            workerGroup.shutdownGracefully();</div><div class="line">            bossGroup.shutdownGracefully();</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> Exception {</div><div class="line">        <span class="keyword">int</span> port;</div><div class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) {</div><div class="line">            port = Integer.parseInt(args[<span class="number">0</span>]);</div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">            port = <span class="number">8080</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">new</span> DiscardServer(port).run();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ol>
<li><a href="http://netty.io/5.0/api/io/netty/channel/nio/NioEventLoopGroup.html" target="_blank" rel="external">NioEventLoopGroup</a> 是用来处理I/O操作的多线程事件循环器，Netty提供了许多不同的<code>EventLoopGroup</code>的实现用来处理不同传输协议。在这个例子中我们实现了一个服务端的应用，因此会有2个<code>NioEventLoopGroup</code>会被使用。第一个经常被叫做‘boss’，用来接收进来的连接。第二个经常被叫做‘worker’，用来处理已经被接收的连接，一旦‘boss’接收到连接，就会把连接信息注册到‘worker’上。如何知道多少个线程已经被使用，如何映射到已经创建的<a href="http://netty.io/5.0/api/io/netty/channel/Channel.html" target="_blank" rel="external">Channels</a>上都需要依赖于<code>EventLoopGroup</code>的实现，并且可以通过构造函数来配置他们的关系。</li>
<li><a href="http://netty.io/5.0/api/io/netty/bootstrap/ServerBootstrap.html" target="_blank" rel="external">ServerBootstrap</a> 是一个启动NIO服务的辅助启动类。你可以在这个服务中直接使用Channel，但是这会是一个复杂的处理过程，在很多情况下你并不需要这样做。</li>
<li>这里我们指定使用<a href="http://netty.io/5.0/api/io/netty/channel/socket/nio/NioServerSocketChannel.html" target="_blank" rel="external">NioServerSocketChannel</a>类来举例说明一个新的Channel如何接收进来的连接。</li>
<li>这里的事件处理类经常会被用来处理一个最近的已经接收的<a href="http://netty.io/5.0/api/io/netty/channel/Channel.html" target="_blank" rel="external">Channel</a>。 <a href="http://netty.io/5.0/api/io/netty/channel/ChannelInitializer.html" target="_blank" rel="external">ChannelInitializer</a>是一个特殊的处理类，他的目的是帮助使用者配置一个新的Channel。也许你想通过增加一些处理类比如DiscardServerHandle来配置一个新的Channel或者其对应的<a href="http://netty.io/5.0/api/io/netty/channel/ChannelPipeline.html" target="_blank" rel="external">ChannelPipeline</a>来实现你的网络程序。当你的程序变的复杂时，可能你会增加更多的处理类到pipline上，然后提取这些匿名类到最顶层的类上。</li>
<li>你可以设置这里指定的通道实现的配置参数。我们正在写一个TCP/IP的服务端，因此我们被允许设置socket的参数选项比如tcpNoDelay和keepAlive。请参考<a href="http://netty.io/5.0/api/io/netty/channel/ChannelOption.html" target="_blank" rel="external">ChannelOption</a>和详细的<a href="http://netty.io/5.0/api/io/netty/channel/ChannelConfig.html" target="_blank" rel="external">ChannelConfig</a>实现的接口文档以此可以对ChannelOptions的有一个大概的认识。</li>
<li>你关注过option()和childOption()吗？option()是提供给<a href="http://netty.io/5.0/api/io/netty/channel/socket/nio/NioServerSocketChannel.html" target="_blank" rel="external">NioServerSocketChannel</a>用来接收进来的连接。childOption()是提供给由父管道<a href="http://netty.io/5.0/api/io/netty/channel/ServerChannel.html" target="_blank" rel="external">ServerChannel</a>接收到的连接，在这个例子中也是NioServerSocketChannel。</li>
<li>我们继续，剩下的就是绑定端口然后启动服务。这里我们在机器上绑定了机器所有网卡上的8080端口。当然现在你可以多次调用bind()方法(基于不同绑定地址)。</li>
</ol>
<p>恭喜！你已经完成熟练地完成了第一个基于NETTY的服务端程序。</p>
<h2 id="处理接收到的数据">处理接收到的数据</h2>
<p>现在我们已经编写出我们第一个服务端，我们需要测试一下他是否真的可以运行。最简单的测试方法是用telnet 命令。例如，你可以在命令行上输入telnet localhost 8080或者其他类型参数。<br>然而我们能说这个服务端是正常运行了吗？事实上我们也不知道因为他是一个discard服务，你根本不可能得到任何的响应。为了证明他仍然是在工作的，让我们修改服务端的程序来打印出他到底接收到了什么。<br>我们已经知道<code>channelRead()</code>方法是在数据被接收的时候调用。让我们放一些代码到<code>DiscardServerHandler</code>类的<code>channelRead()</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span>(ChannelHandlerContext ctx, Object msg) {</div><div class="line">    ByteBuf in = (ByteBuf) msg;</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        <span class="keyword">while</span> (in.isReadable()) { <span class="comment">// (1)</span></div><div class="line">            System.out.print((<span class="keyword">char</span>) in.readByte());</div><div class="line">            System.out.flush();</div><div class="line">        }</div><div class="line">    } <span class="keyword">finally</span> {</div><div class="line">        ReferenceCountUtil.release(msg); <span class="comment">// (2)</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ol>
<li>这个低效的循环事实上可以简化为:<code>System.out.println(in.toString(io.netty.util.CharsetUtil.US_ASCII))</code></li>
<li>或者，你可以在这里调用<code>in.release()</code>。</li>
</ol>
<p>如果你再次运行telnet命令，你将会看到服务端打印出了他所接收到的消息。<br>完整的discard server代码放在了<code>io.netty.example.discard</code>包下面。</p>
<h2 id="实现ECHO服务">实现ECHO服务</h2>
<p>到目前为止，我们虽然接收到了数据，但没有做任何的响应。然而一个服务端通常会对一个请求作出响应。让我们学习怎样在<a href="http://tools.ietf.org/html/rfc862" target="_blank" rel="external">ECHO协议</a>的实现下编写一个响应消息给客户端，这个协议针对任何接收的数据都会返回一个响应。<br>和discard server唯一不同的是把在此之前我们实现的channelRead()方法，返回所有的数据替代打印接收数据到控制台上的逻辑。因此，需要把channelRead()方法修改如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span>(ChannelHandlerContext ctx, Object msg) {</div><div class="line">    ctx.write(msg); <span class="comment">// (1)</span></div><div class="line">    ctx.flush(); <span class="comment">// (2)</span></div><div class="line">}</div></pre></td></tr></table></figure>

<ol>
<li><a href="http://netty.io/5.0/api/io/netty/channel/ChannelHandlerContext.html," target="_blank" rel="external">ChannelHandlerContext</a>对象提供了许多操作，使你能够触发各种各样的I/O事件和操作。这里我们调用了write(Object)方法来逐字地把接受到的消息写入。请注意不同于DISCARD的例子我们并没有释放接受到的消息，这是因为当写入的时候NETTY已经帮我们释放了。</li>
<li><code>ctx.write(Object)</code>方法不会使消息写入到通道上，他被缓冲在了内部，你需要调用ctx.flush()方法来把缓冲区中数据强行输出。或者你可以用更简洁的cxt.writeAndFlush(msg)以达到同样的目的。</li>
</ol>
<p>如果你再一次运行telnet命令，你会看到服务端会发回一个你已经发送的消息。<br>完整的echo服务的代码放在了<a href="http://netty.io/5.0/xref/io/netty/example/echo/package-summary.html" target="_blank" rel="external">io.netty.example.echo</a>包下面。</p>
<h2 id="实现TIME服务器">实现TIME服务器</h2>
<p>在这个部分被实现的协议是<a href="http://tools.ietf.org/html/rfc868" target="_blank" rel="external">TIME协议</a>。和之前的例子不同的是在不接受任何请求时他会发送一个含32位的整数的消息，并且一旦消息发送就会立即关闭连接。在这个例子中，你会学习到如何构建和发送一个消息，然后在完成时主动关闭连接。</p>
<p>因为我们将会忽略任何接收到的数据，而只是在连接被创建发送一个消息，所以这次我们不能使用channelRead()方法了，代替他的是，我们需要覆盖channelActive()方法，下面的就是实现的内容：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.example.time;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>{</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span>(<span class="keyword">final</span> ChannelHandlerContext ctx) { <span class="comment">// (1)</span></div><div class="line">        <span class="keyword">final</span> ByteBuf time = ctx.alloc().buffer(<span class="number">4</span>); <span class="comment">// (2)</span></div><div class="line">        time.writeInt((<span class="keyword">int</span>) (System.currentTimeMillis() / <span class="number">1000</span>L + <span class="number">2208988800</span>L));</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ChannelFuture f = ctx.writeAndFlush(time); <span class="comment">// (3)</span></div><div class="line">        f.addListener(<span class="keyword">new</span> ChannelFutureListener() {</div><div class="line">            <span class="annotation">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span>(ChannelFuture future) {</div><div class="line">                <span class="keyword">assert</span> f == future;</div><div class="line">                ctx.close();</div><div class="line">            }</div><div class="line">        }); <span class="comment">// (4)</span></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span>(ChannelHandlerContext ctx, Throwable cause) {</div><div class="line">        cause.printStackTrace();</div><div class="line">        ctx.close();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ol>
<li>channelActive()方法将会在连接被建立并且准备进行通信时被调用。因此让我们在这个方法里完成一个代表当前时间的32位整数消息的构建工作。</li>
<li>为了发送一个新的消息，我们需要分配一个包含这个消息的新的缓冲。因为我们需要写入一个32位的整数，因此我们需要一个至少有4个字节的<a href="http://netty.io/5.0/api/io/netty/buffer/ByteBuf.html" target="_blank" rel="external">ByteBuf</a>。通过ChannelHandlerContext.alloc()得到一个当前的ByteBufAllocator，然后分配一个新的缓冲。</li>
<li>和往常一样我们需要编写一个构建好的消息。但是等一等，flip在哪？难道我们使用NIO发送消息时不是调用java.nio.ByteBuffer.flip()吗？ByteBuf之所以没有这个方法因为有两个指针，一个对应读操作一个对应写操作。当你向ByteBuf里写入数据的时候写指针的索引就会增加，同时读指针的索引没有变化。读指针索引和写指针索引分别代表了消息的开始和结束。<br>比较起来，NIO缓冲并没有提供一种简洁的方式来计算出消息内容的开始和结尾，除非你调用flip方法。当你忘记调用flip方法而引起没有数据或者错误数据被发送时，你会陷入困境。这样的一个错误不会发生在Netty上，因为我们对于不同的操作类型有不同的指针。你会发现这样的使用方法会让你过程变得更加的容易，因为你已经习惯一种没有使用flip的方式。<br>另外一个点需要注意的是ChannelHandlerContext.write()(和writeAndFlush())方法会返回一个<a href="http://netty.io/5.0/api/io/netty/channel/ChannelFuture.html" target="_blank" rel="external">ChannelFuture</a>对象，一个<code>ChannelFuture</code>代表了一个还没有发生的I/O操作。这意味着任何一个请求操作都不会马上被执行，因为在Netty里所有的操作都是异步的。举个例子下面的代码中在消息被发送之前可能会先关闭连接。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Channel ch = ...;</div><div class="line">ch.writeAndFlush(message);</div><div class="line">ch.close();</div></pre></td></tr></table></figure>

<p>因此你需要在write()方法返回的ChannelFuture完成后调用close()方法，然后当他的写操作已经完成他会通知他的监听者。请注意,close()方法也可能不会立马关闭，他也会返回一个<code>ChannelFuture</code>。</p>
<ol>
<li>当一个写请求已经完成是如何通知到我们？这个只需要简单地在返回的ChannelFuture上增加一个<a href="http://netty.io/5.0/api/io/netty/channel/ChannelFutureListener.html" target="_blank" rel="external">ChannelFutureListener</a>。这里我们构建了一个匿名的ChannelFutureListener类用来在操作完成时关闭Channel。<br>或者，你可以使用简单的预定义监听器代码:</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f.addListener(ChannelFutureListener.CLOSE);</div></pre></td></tr></table></figure>

<p>为了测试我们的time服务如我们期望的一样工作，你可以使用UNIX的rdate命令</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rdate -o &lt;port&gt; -p &lt;host&gt;</div></pre></td></tr></table></figure>

<p>Port是你在main()函数中指定的端口，host使用locahost就可以了。</p>
<h2 id="实现TIME客户端">实现TIME客户端</h2>
<p>不像DISCARD和ECHO的服务端，对于TIME协议我们需要一个客户端因为人们不能把一个32位的二进制数据翻译成一个日期或者日历。在这一部分，我们将会讨论如何确保服务端是正常工作的，并且学习怎样用NETTY编写一个客户端。<br>在Netty中,编写服务端和客户端最大的并且唯一不同的使用了不同的BootStrap和Channel的实现。请看一下下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.example.time;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClient</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> Exception {</div><div class="line">        String host = args[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> port = Integer.parseInt(args[<span class="number">1</span>]);</div><div class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            Bootstrap b = <span class="keyword">new</span> Bootstrap(); <span class="comment">// (1)</span></div><div class="line">            b.group(workerGroup); <span class="comment">// (2)</span></div><div class="line">            b.channel(NioSocketChannel.class); <span class="comment">// (3)</span></div><div class="line">            b.option(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>); <span class="comment">// (4)</span></div><div class="line">            b.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() {</div><div class="line">                <span class="annotation">@Override</span></div><div class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span>(SocketChannel ch) <span class="keyword">throws</span> Exception {</div><div class="line">                    ch.pipeline().addLast(<span class="keyword">new</span> TimeClientHandler());</div><div class="line">                }</div><div class="line">            });</div><div class="line"></div><div class="line">            <span class="comment">// Start the client.</span></div><div class="line">            ChannelFuture f = b.connect(host, port).sync(); <span class="comment">// (5)</span></div><div class="line"></div><div class="line">            <span class="comment">// Wait until the connection is closed.</span></div><div class="line">            f.channel().closeFuture().sync();</div><div class="line">        } <span class="keyword">finally</span> {</div><div class="line">            workerGroup.shutdownGracefully();</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ol>
<li><a href="http://netty.io/5.0/api/io/netty/bootstrap/Bootstrap.html" target="_blank" rel="external">BootStrap</a>和<a href="http://netty.io/5.0/api/io/netty/bootstrap/ServerBootstrap.html" target="_blank" rel="external">ServerBootstrap</a>类似,不过他是对非服务端的channel而言，比如客户端或者无连接传输模式的channel。</li>
<li>如果你只指定了一个<a href="http://netty.io/5.0/api/io/netty/channel/EventLoopGroup.html" target="_blank" rel="external">EventLoopGroup</a>，那他就会即作为一个‘boss’线程，也会作为一个‘workder’线程，尽管客户端不需要使用到‘boss’线程。</li>
<li>代替<a href="http://netty.io/5.0/api/io/netty/channel/socket/nio/NioServerSocketChannel.html" target="_blank" rel="external">NioServerSocketChannel</a>的是<a href="http://netty.io/5.0/api/io/netty/channel/socket/nio/NioSocketChannel.html" target="_blank" rel="external">NioSocketChannel</a>,这个类在客户端channel被创建时使用。</li>
<li>不像在使用ServerBootstrap时需要用childOption()方法，因为客户端的<a href="http://netty.io/5.0/api/io/netty/channel/socket/SocketChannel.html" target="_blank" rel="external">SocketChannel</a>没有父channel的概念。</li>
<li>我们用<code>connect()</code>方法代替了<code>bind()</code>方法。</li>
</ol>
<p>正如你看到的，他和服务端的代码是不一样的。<a href="http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html" target="_blank" rel="external">ChannelHandler</a>是如何实现的?他应该从服务端接受一个32位的整数消息，把他翻译成人们能读懂的格式，并打印翻译好的时间，最后关闭连接:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.example.time;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>{</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span>(ChannelHandlerContext ctx, Object msg) {</div><div class="line">        ByteBuf m = (ByteBuf) msg; <span class="comment">// (1)</span></div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            <span class="keyword">long</span> currentTimeMillis = (m.readUnsignedInt() - <span class="number">2208988800</span>L) * <span class="number">1000</span>L;</div><div class="line">            System.out.println(<span class="keyword">new</span> Date(currentTimeMillis));</div><div class="line">            ctx.close();</div><div class="line">        } <span class="keyword">finally</span> {</div><div class="line">            m.release();</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span>(ChannelHandlerContext ctx, Throwable cause) {</div><div class="line">        cause.printStackTrace();</div><div class="line">        ctx.close();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ol>
<li>在TCP/IP中，Netty会把读到的数据放到ByteBuf的数据结构中。<br>这样看起来非常简单，并且和服务端的那个例子的代码也相差不多。然而，处理器有时候会因为抛出IndexOutOfBoundsException而拒绝工作。在下个部分我们会讨论为什么会发生这种情况。</li>
</ol>
<h2 id="流数据的传输处理">流数据的传输处理</h2>
<h3 id="一个小的Socket_Buffer问题">一个小的Socket Buffer问题</h3>
<p>在基于流的传输里比如TCP/IP，接收到的数据会先被存储到一个socket接收缓冲里。不幸的是，基于流的传输并不是一个数据包队列，而是一个字节队列。即使你发送了2个独立的数据包，操作系统也不会作为2个消息处理而仅仅是作为一连串的字节而言。因此这是不能保证你远程写入的数据就会准确地读取。举个例子，让我们假设操作系统的TCP/TP协议栈已经接收了3个数据包：<br><img src="https://camo.githubusercontent.com/9b6aadee43a4fa15d603a2c4a7695359dad7fdfe/687474703a2f2f696d672e6d6f74642e6b722f756d6c2f676973742f3063643963633636373461366238393561306365" alt=""><br>由于基于流传输的协议的这种普通的性质，在你的应用程序里读取数据的时候会有很高的可能性被分成下面的片段。<br><img src="https://camo.githubusercontent.com/7b68f601941f48944e51524ed2ba16dcd4608667/687474703a2f2f696d672e6d6f74642e6b722f756d6c2f676973742f6233316330626437626266633639666438326436" alt=""><br>因此，一个接收方不管他是客户端还是服务端，都应该把接收到的数据整理成一个或者多个更有意思并且能够让程序的业务逻辑更好理解的数据。在上面的例子中，接收到的数据应该被构造成下面的格式：<br><img src="https://camo.githubusercontent.com/9b6aadee43a4fa15d603a2c4a7695359dad7fdfe/687474703a2f2f696d672e6d6f74642e6b722f756d6c2f676973742f3063643963633636373461366238393561306365" alt=""></p>
<h3 id="第一种解决方案">第一种解决方案</h3>
<p>现在让我们回到TIME客户端的例子上。这里我们遇到了同样的问题，一个32字节数据是非常小的数据量，他并不见得会被经常拆分到到不同的数据段内。然而，问题是他确实可能会被拆分到不同的数据段内，并且拆分的可能性会随着通信量的增加而增加。<br>最简单的方案是构造一个内部的可积累的缓冲，直到4个字节全部接收到了内部缓冲。下面的代码修改了TimeClientHandler的实现类修复了这个问题</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.example.time;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>{</div><div class="line">    <span class="keyword">private</span> ByteBuf buf;</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span>(ChannelHandlerContext ctx) {</div><div class="line">        buf = ctx.alloc().buffer(<span class="number">4</span>); <span class="comment">// (1)</span></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span>(ChannelHandlerContext ctx) {</div><div class="line">        buf.release(); <span class="comment">// (1)</span></div><div class="line">        buf = <span class="keyword">null</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span>(ChannelHandlerContext ctx, Object msg) {</div><div class="line">        ByteBuf m = (ByteBuf) msg;</div><div class="line">        buf.writeBytes(m); <span class="comment">// (2)</span></div><div class="line">        m.release();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (buf.readableBytes() &gt;= <span class="number">4</span>) { <span class="comment">// (3)</span></div><div class="line">            <span class="keyword">long</span> currentTimeMillis = (buf.readInt() - <span class="number">2208988800</span>L) * <span class="number">1000</span>L;</div><div class="line">            System.out.println(<span class="keyword">new</span> Date(currentTimeMillis));</div><div class="line">            ctx.close();</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span>(ChannelHandlerContext ctx, Throwable cause) {</div><div class="line">        cause.printStackTrace();</div><div class="line">        ctx.close();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ol>
<li><a href="http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html" target="_blank" rel="external">ChannelHandler</a>有2个生命周期的监听方法：handlerAdded()和handlerRemoved()。你可以完成任意初始化任务只要他不会被阻塞很长的时间。</li>
<li>首先，所有接收的数据都应该被累积在buf变量里。</li>
<li>然后，处理器必须检查buf变量是否有足够的数据，在这个例子中是4个字节，然后处理实际的业务逻辑。否则，Netty会重复调用channelRead()当有更多数据到达直到4个字节的数据被积累。</li>
</ol>
<h3 id="第二种解决方案">第二种解决方案</h3>
<p>尽管第一个解决方案已经解决了Time客户端的问题了，但是修改后的处理器看起来不那么的简洁，想象一下如果由多个字段比如可变长度的字段组成的更为复杂的协议时，你的<a href="http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html" target="_blank" rel="external">ChannelHandler</a>的实现将很快地变得难以维护。</p>
<p>正如你所知的，你可以增加多个<code>ChannelHandler</code>到<a href="http://netty.io/5.0/api/io/netty/channel/ChannelPipeline.html" target="_blank" rel="external">ChannelPipeline</a> ,因此你可以把一整个<code>ChannelHandler</code>拆分成多个模块以减少应用的复杂程度，比如你可以把<code>TimeClientHandler</code>拆分成2个处理器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.example.time;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeDecoder</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>{ <span class="comment">// (1)</span></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span>(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) { <span class="comment">// (2)</span></div><div class="line">        <span class="keyword">if</span> (in.readableBytes() &lt; <span class="number">4</span>) {</div><div class="line">            <span class="keyword">return</span>; <span class="comment">// (3)</span></div><div class="line">        }</div><div class="line"></div><div class="line">        out.add(in.readBytes(<span class="number">4</span>)); <span class="comment">// (4)</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ol>
<li><a href="http://netty.io/5.0/api/io/netty/handler/codec/ByteToMessageDecoder.html" target="_blank" rel="external">ByteToMessageDecoder</a>是<a href="http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html" target="_blank" rel="external">ChannelHandler</a>的一个实现类，他可以在处理数据拆分的问题上变得很简单。</li>
<li>每当有新数据接收的时候，<code>ByteToMessageDecoder</code>都会调用<code>decode()</code>方法来处理内部的那个累积缓冲。</li>
<li><code>decode()</code>方法可以决定当累积缓冲里没有足够数据时可以往out对象里放任意数据。当有更多的数据被接收了<code>ByteToMessageDecoder</code>会再一次调用decode()方法。</li>
<li>如果在<code>decode()</code>方法里增加了一个对象到out对象里，这意味着解码器解码消息成功。ByteToMessageDecoder将会丢弃在累积缓冲里已经被读过的数据。请记得你不需要对多条消息调用<code>decode()</code>，<code>ByteToMessageDecoder</code>会持续调用<code>decode()</code>直到不放任何数据到out里。</li>
</ol>
<p>现在我们有另外一个处理器插入到<code>ChannelPipeline</code>里，我们应该在TimeClient里修改<a href="http://netty.io/5.0/api/io/netty/channel/ChannelInitializer.html" target="_blank" rel="external">ChannelInitializer</a> 的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">b.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() {</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span>(SocketChannel ch) <span class="keyword">throws</span> Exception {</div><div class="line">        ch.pipeline().addLast(<span class="keyword">new</span> TimeDecoder(), <span class="keyword">new</span> TimeClientHandler());</div><div class="line">    }</div><div class="line">});</div></pre></td></tr></table></figure>

<p>如果你是一个大胆的人，你可能会尝试使用更简单的解码类<a href="http://netty.io/5.0/api/io/netty/handler/codec/ReplayingDecoder.html" target="_blank" rel="external">ReplayingDecoder</a>。不过你还是需要参考一下API文档来获取更多的信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeDecoder</span> <span class="keyword">extends</span> <span class="title">ReplayingDecoder</span>&lt;<span class="title">Void</span>&gt; </span>{</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span>(</div><div class="line">            ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) {</div><div class="line">        out.add(in.readBytes(<span class="number">4</span>));</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>此外，Netty还提供了更多可以直接拿来用的解码器使你可以更简单地实现更多的协议，帮助你避免开发一个难以维护的处理器实现。请参考下面的包以获取更多更详细的例子：</p>
<ul>
<li>对于二进制协议请看io.netty.example.factorial</li>
<li>对于基于文本协议请看io.netty.example.telnet</li>
</ul>
<h2 id="用POJO代替ByteBuf">用POJO代替ByteBuf</h2>
<p>我们已经讨论了所有的例子，到目前为止一个消息的消息都是使用<code>ByteBuf</code>作为一个基本的数据结构。在这一部分，我们会改进TIME协议的客户端和服务端的例子，用POJO替代<code>ByteBuf</code>。<br>在你的<a href="http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html" target="_blank" rel="external">ChannelHandler</a>中使用POJO优势是比较明显的。通过从<code>ChannelHandler</code>中提取出<code>ByteBuf</code>的代码，将会使<code>ChannelHandler</code>的实现变得更加可维护和可重用。在TIME客户端和服务端的例子中，我们读取的仅仅是一个32位的整形数据，直接使用<code>ByteBuf</code>不会是一个主要的问题。然后，你会发现当你需要实现一个真实的协议，分离代码变得非常的必要。<br>首先，让我们定义一个新的类型叫做UnixTime。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.example.time;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnixTime</span> </span>{</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> value;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">UnixTime</span>() {</div><div class="line">        <span class="keyword">this</span>(System.currentTimeMillis() / <span class="number">1000</span>L + <span class="number">2208988800</span>L);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">UnixTime</span>(<span class="keyword">long</span> value) {</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">long</span> <span class="title">value</span>() {</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> String <span class="title">toString</span>() {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date((value() - <span class="number">2208988800</span>L) * <span class="number">1000</span>L).toString();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在我们可以修改下TimeDecoder类，返回一个UnixTime，以替代ByteBuf.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span>(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) {</div><div class="line">    <span class="keyword">if</span> (in.readableBytes() &lt; <span class="number">4</span>) {</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    out.add(<span class="keyword">new</span> UnixTime(in.readInt()));</div><div class="line">}</div></pre></td></tr></table></figure>

<p>下面是修改后的解码器，TimeClientHandler不再有任何的ByteBuf代码了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span>(ChannelHandlerContext ctx, Object msg) {</div><div class="line">    UnixTime m = (UnixTime) msg;</div><div class="line">    System.out.println(m);</div><div class="line">    ctx.close();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>是不是变得更加简单和优雅了？相同的技术可以被运用到服务端。让我们修改一下TimeServerHandler的代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span>(ChannelHandlerContext ctx) {</div><div class="line">    ChannelFuture f = ctx.writeAndFlush(<span class="keyword">new</span> UnixTime());</div><div class="line">    f.addListener(ChannelFutureListener.CLOSE);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在，仅仅需要修改的是ChannelHandler的实现，这里需要把UnixTime对象重新转化为一个ByteBuf。不过这已经是非常简单了，因为当你对一个消息编码的时候，你不需要再处理拆包和组装的过程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.netty.example.time;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeEncoder</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>{</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span>(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {</div><div class="line">        UnixTime m = (UnixTime) msg;</div><div class="line">        ByteBuf encoded = ctx.alloc().buffer(<span class="number">4</span>);</div><div class="line">        encoded.writeInt(m.value());</div><div class="line">        ctx.write(encoded, promise); <span class="comment">// (1)</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ol>
<li>在这几行代码里还有几个重要的事情。<br>第一， 通过<a href="http://netty.io/5.0/api/io/netty/channel/ChannelPromise.html" target="_blank" rel="external">ChannelPromise</a>，当编码后的数据被写到了通道上Netty可以通过这个对象标记是成功还是失败。<br>第二， 我们不需要调用cxt.flush()。因为处理器已经单独分离出了一个方法void flush(ChannelHandlerContext cxt),如果像自己实现flush方法内容可以自行覆盖这个方法。</li>
</ol>
<p>进一步简化操作，你可以使用<a href="http://netty.io/5.0/api/io/netty/handler/codec/MessageToByteEncoder.html" target="_blank" rel="external">MessageToByteEncode</a>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeEncoder</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">UnixTime</span>&gt; </span>{</div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span>(ChannelHandlerContext ctx, UnixTime msg, ByteBuf out) {</div><div class="line">        out.writeInt(msg.value());</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>最后的任务就是在TimeServerHandler之前把TimeEncoder插入到<a href="http://netty.io/5.0/api/io/netty/channel/ChannelPipeline.html" target="_blank" rel="external">ChannelPipeline</a>。但这是不那么重要的工作。</p>
<h2 id="关闭你的应用">关闭你的应用</h2>
<p>关闭一个Netty应用往往只需要简单地通过<code>shutdownGracefully()</code>方法来关闭你构建的所有的<a href="http://netty.io/5.0/api/io/netty/channel/EventLoopGroup.html" target="_blank" rel="external">NioEventLoopGroup</a>.当EventLoopGroup被完全地终止,并且对应的所有<a href="http://netty.io/5.0/api/io/netty/channel/Channel.html" target="_blank" rel="external">channel</a>都已经被关闭时，Netty会返回一个<code>Future</code>对象。</p>
<h2 id="总结">总结</h2>
<p>在这一章节中，我们会快速地回顾下如果在熟练掌握Netty的情况下编写出一个健壮能运行的网络应用程序。<br>在Netty接下去的章节中还会有更多更相信的信息。我们也鼓励你去重新复习下在<a href="https://github.com/netty/netty/tree/master/example/src/main/java/io/netty/example" target="_blank" rel="external">io.netty.example</a>包下的例子。<br>请注意<a href="http://netty.io/community.html" target="_blank" rel="external">社区</a>一直在等待你的问题和想法以帮助Netty的持续改进，Netty的文档也是基于你们的快速反馈上。</p>
]]></content>
    <summary type="html"><![CDATA[<p>Netty 是一个NIO client/server 网络编程框架， 可以快速且容易的开发基于协议(protocol)的网络客户端/服务器端的程序。 它极大的简化了TCP和UDP socket编程， 提供流水线化的操作。</p>
<p>‘快速且容易’并不会导致应用难以维护和性能低下。 Netty经过仔细设计， 基于许多协议实现的经验如FTP, SMTP, HTTP以及各种二进制的和基于本文的老的协议， Netty成功的找到一种保证开发，性能，稳定性，灵活性的方式， 毋须折衷.</p>
<p><img src="http://netty.io/images/components.png" alt=""></p>
<h2 id="特性">特性</h2>
<h3 id="设计">设计</h3>
<ul>
<li>为各种传输类型提供统一的API- 阻塞和非阻塞的socket</li>
<li>灵活和可扩展的事件模型， 将关注点分隔</li>
<li>高度可定制化的线程模型- 单线程， 一种或者多个线程池如<a href="http://en.wikipedia.org/wiki/Staged_event-driven_architecture" target="_blank" rel="external">SEDA</a></li>
<li>真正无连接的数据报socket支持(since 3.1)<h3 id="易用">易用</h3>
</li>
<li>提供Javadoc, 用户指南和例子</li>
<li>除了JDK 1.5 (或以上版本)毋须第三方库支持<h3 id="性能">性能</h3>
</li>
<li>更好的吞吐率，低延迟</li>
<li>较少的资源占用</li>
<li>最小化不必要的内存拷贝<h3 id="安全">安全</h3>
</li>
<li>完整的SSL/TLS， StartTLS支持<h3 id="社区">社区</h3>
</li>
<li>早期发布，发布频繁</li>
<li>作者自2003就开始写类似的框架(mina)， 一直收集用户的反馈。<br>]]></summary>
    
      <category term="netty" scheme="http://colobu.com/tags/netty/"/>
    
      <category term="网络编程" scheme="http://colobu.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java位操作指南]]></title>
    <link href="http://colobu.com/2014/10/20/java-bitwise-bitshift-operation/"/>
    <id>http://colobu.com/2014/10/20/java-bitwise-bitshift-operation/</id>
    <published>2014-10-20T08:16:36.000Z</published>
    <updated>2014-10-20T09:15:11.000Z</updated>
    <content type="html"><![CDATA[<a id="more"></a>

<h1 id="原码，反码和补码">原码，反码和补码</h1>
<p>这个是计算机的基础知识了。</p>
<p><code>+3</code>的原码为<code>00000011</code>，<br><code>-3</code>的原码为<code>10000011</code>，<br>第一位是符号位。</p>
<p><code>+3</code>的反码为<code>00000011</code>，<br><code>-3</code>的反码为<code>11111100</code>，<br>正数的反码是其本身，负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.</p>
<p><code>+3</code>的补码为<code>00000011</code>，<br><code>-3</code>的补码为<code>11111101</code>，<br>正数的补码就是其本身<br>负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)</p>
<p>使用补码可以将减法变为加法，而且<code>0</code>的问题也会解决。</p>
<p>Java中使用补码的格式保存byte,short,int,long类型的数据。 （ two’s complement integer.）</p>
<h1 id="位操作符">位操作符</h1>
<ul>
<li><code>&amp;</code> 与。 按补码的每一位进行与操作。</li>
<li><code>|</code> 或。 按补码的每一位进行与操作。</li>
<li><code>^</code> 异或。 按补码的每一位进行与操作。</li>
<li><code>~</code> 取反。 按补码的每一位进行与操作。</li>
<li><code>&gt;&gt;</code>  带符号右移，高位补符号位。 正数右移一位相当于除以2。</li>
<li><code>&gt;&gt;&gt;</code> 无符号右移。高位补<code>0</code>。 正数右移一位相当于除以2。</li>
<li><code>&lt;&lt;</code>  左移,低位补<code>0</code>。 正数左移一位相当于乘以2。</li>
</ul>
<p>除了<code>~</code>是一元操作符外其它都是二元操作符号。</p>
<h1 id="byte类型转int类型">byte类型转int类型</h1>
<p>Java在将byte类型的数值转为int的过程中，会将符号位扩充， <code>10000000</code> -&gt; <code>11111111111111111111111110000000</code>。 这样数值会保持不变， 如下面的例子中字节类型的-128还是整型的-128。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span> b = -<span class="number">128</span>;</div><div class="line"><span class="keyword">int</span> i1 = b & <span class="number">0xff</span>;</div><div class="line"><span class="keyword">int</span> i2 = b;</div><div class="line">System.out.println(i1); <span class="comment">//128</span></div><div class="line">System.out.println(i2); <span class="comment">//-128</span></div><div class="line">System.out.println(Integer.toBinaryString(i1)); <span class="comment">//10000000</span></div><div class="line">System.out.println(Integer.toBinaryString(i2)); <span class="comment">//11111111111111111111111110000000</span></div></pre></td></tr></table></figure>

<p>但是， 如果你只是需要字节中的bit， 你就要考虑使用<code>0xff</code>进行与操作。这样得到的结果还是原来的bit， 如<code>1000 0000</code>。 比如上面的例子要输出字节表示的16进制字符， 必须和0xff 与操作。</p>
<p><code>0xff</code>的补码为<code>11111111</code>， 意味着和它与操作将只保留后8位。</p>
<h1 id="参考">参考</h1>
<ol>
<li><a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html" target="_blank" rel="external">http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html</a></li>
<li><a href="http://en.wikipedia.org/wiki/Bitwise_operation#Shifts_in_Java" target="_blank" rel="external">http://en.wikipedia.org/wiki/Bitwise_operation#Shifts_in_Java</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html" target="_blank" rel="external">http://docs.oracle.com/javase/tutorial/java/nutsandbolts/op3.html</a></li>
</ol>
]]></content>
    
    
      <category term="Java" scheme="http://colobu.com/tags/Java/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java Buffer编程基础]]></title>
    <link href="http://colobu.com/2014/10/20/java-buffer-basic/"/>
    <id>http://colobu.com/2014/10/20/java-buffer-basic/</id>
    <published>2014-10-20T00:39:20.000Z</published>
    <updated>2014-10-20T07:08:49.000Z</updated>
    <content type="html"><![CDATA[<p>Java 1.4中在java.nio包中增加了Buffer类以及一些处理基本数据类型的子类(除了boolean型) ，用来提供为基本数据类型(primitive) 的数据提供一个容器。<br>何谓Buffer? <code>Buffer</code> 是一个线性的有限长度的特定基本数据的序列。 除了基础数据外，它还包括一些基础操作和属性， 比如<code>capacity</code>, <code>limit</code> 和 <code>position</code>。</p>
<p>实际使用中使用特定的子类来处理数据。每个子类都定义了两套get/put的操作。 </p>
<ul>
<li><strong>相对位置操作 （Relative ）</strong>。 从当前位置<code>position</code>读写一个或者多个元素， 并<code>position</code>增加相应的数值。 如果一个get请求的数据超过了<code>limit</code>的位置，会抛出<code>BufferUnderflowException</code>异常。 如果一个put操作超过了<code>limit</code>的限制， 会抛出<code>BufferOverflowException</code>异常。不管上面哪种情况，没有数据被传输。</li>
<li><strong>绝对位置操作 （Absolute ）</strong>。 显示的提供index， 不会影响<code>position</code>的值。 如果索引超过<code>limit</code>会抛出<code>IndexOutOfBoundsException</code>异常。</li>
</ul>
<p>数据也可以通过<code>Channel</code>的I/O操作如<code>write</code>,<code>read</code> 写入或者读出。<br>显然， Buffer只有写入了数据才可能有意义的数据读出。</p>
<p>Buffer类并不是线程安全的， 使用时要特别小心， 避免多线程同时读写同一个Buffer。 万不得已， 需要为读写操作加锁。</p>
<p><a id="more"></a></p>
<blockquote>
<p><strong>cache和buffer的区别</strong><br>从应用场景上看：<code>Buffer</code> 更多的(场景)是减小写操作的冲击，而 <code>Cache</code> 主要用于减小读 I/O 的重复开销。</p>
</blockquote>
<h1 id="Buffer抽象类的成员">Buffer抽象类的成员</h1>
<p>Buffer提供了一系列的操作缓冲区的方法以及属性。 但是属性(property)不是以字段<code>field</code>的方式提供，而是以方法<code>method</code>的方式提供。 </p>
<h2 id="属性properties">属性properties</h2>
<ul>
<li><code>capacity()</code> ： 上面提到， Buffer里的元素是有限的。 这个值代表Buffer的元素的最大数量。 这个值不会为负数， 也不会被改变。</li>
<li><code>limit()</code> ： 很多情况下， 缓冲区不是填满的。 <code>limit</code>是第一不应该被读/写的数据的索引位置。 显然这个值不能为负数，也不会超过<code>capacity</code>的值。</li>
<li><code>position()</code> ： 下一个要被读/写的数据的索引。 不能为负值也不会超过<code>limit</code>的值。</li>
<li><code>mark</code> ： 被标记的索引。 调用<code>reset</code>方法会将<code>position</code>的值设为<code>mark</code>的值。 这样可以重新读/写Buffer的数据。 当<code>position</code>或者<code>limit</code>的值小于它的值时，它的值会被丢弃。 它的值不能为负数，也不会超过<code>position</code>的值， 也可能没有设置， 如果没有设置的话调用<code>reset</code>方法会抛出<code>InvalidMarkException</code>异常。 没有直接读取的方法。</li>
<li><code>remaining()</code> ： 返回<code>position</code>和<code>limit</code>之差， 也就是未读/写的数据的数量.</li>
</ul>
<h2 id="操作方法">操作方法</h2>
<ul>
<li><code>reset</code> 重置。 将<code>position</code>的值重置为<code>mark</code>的值。 这个方法不会更改<code>mark</code>的值，也不会将<code>mark</code>的值丢掉。</li>
<li><code>clear</code> 清空。 清空缓冲区。 <code>position</code>的值设为<code>0</code>， <code>limit</code>的值设为<code>capacity</code>，<code>mark</code>的值被丢弃。 在填充Buffer之前一般会调用此方法:<code>buf.clear(); in.read(buf);</code>。 这个方法不会擦除以前填充的数据，但是在实际使用中的情况下功能一样。</li>
<li><code>flip</code> 反转。 反转缓冲区会将<code>limit</code>的值设为<code>position</code>的值， 然后<code>position</code>的值设为<code>0</code>。 如果设置了<code>mark</code>, 则会被丢弃。 一般在填充完缓冲区后读写数据时调用此方法：<code>buf.put(magic);in.read(buf);buf.flip();out.write(buf);</code> </li>
<li><code>rewind</code> 回退。 <code>position</code>设为<code>0</code>, <code>mark</code>值被丢弃, <code>limit</code>的值不变。 和上面的<code>flip</code>类似，但是<code>flip</code>会改变<code>limit</code>的值，但是<code>remind</code>不会。 应用场景: <code>out.write(buf);buf.rewind();  buf.get(array);</code></li>
<li><code>mark()</code> 标记当前位置。 用<code>position</code>的值设置<code>mark</code>。</li>
</ul>
<p><code>clear</code>,<code>flip</code>,<code>limit(newLimit)</code>,<code>mark</code>,<code>position(newPosition)</code>, <code>reset()</code>和<code>rewind</code>返回本身的Buffer， 这意味着你可以使用流式风格， 如<br><code>buffer.flip().position(23).limit(42);</code></p>
<p>请记住以下公式， 下面的不等式在任何时候都成立：<br><em>0 &lt;= mark &lt;= position &lt;= limit &lt;= capacity</em><br>一个新创建的Buffer的<code>position</code>总是<code>0</code>, mark未定义。 初始的<code>limit</code>可能为<code>0</code>,或者其它正值， 这依赖于buffer的类型以及它是如何创建的。 初始化的Buffer包含零个元素。</p>
<p>另外， Buffer还提供其它的一些成员：</p>
<ul>
<li><code>array</code>： 返回底层的数组实现。 如果底层不是使用数组实现，或者是只读的， 可能会抛出异常<code>ReadOnlyBufferException</code>, <code>UnsupportedOperationException</code>。 一般使用前会调用<code>hasArray</code>判断是否支持数组。 Buffer内容的修改会影响数组的值，反之亦然。</li>
<li><code>arrayOffset</code>： Buffer的<code>position</code>的值<code>p</code>对应 数组的<code>p + arrayOffset()</code>， 也就是Buffer的第一个元素在数组中的偏移值。</li>
<li><code>hasArray</code>： 判断Buffer是否有底层的数组实现。</li>
<li><code>hasRemaining</code>： <code>position</code>和<code>limit</code>之前是否还有元素。</li>
<li><code>isReadOnly</code>： 是否只读。</li>
<li><code>isDirect</code>： buffer是否是直接缓冲区。</li>
</ul>
<p><strong>equals()</strong><br>当满足下列条件时，表示两个Buffer相等：</p>
<ul>
<li>有相同的类型（byte、char、int等）。</li>
<li>Buffer中<em>剩余的</em>byte、char等的个数相等。</li>
<li>Buffer中所有<em>剩余的</em>byte、char等都相同。<br>注意它只比较剩余的部分。</li>
</ul>
<p><strong>compareTo()</strong><br>compareTo()方法比较两个Buffer的<em>剩余</em>元素(byte、char等)， 如果满足下列条件，则认为一个Buffer“小于”另一个Buffer：</p>
<ul>
<li>第一个不相等的元素小于另一个Buffer中对应的元素 。</li>
<li>前面的元素都相等，但第一个Buffer剩余的元素比另一个少。</li>
</ul>
<h1 id="Buffer的子类">Buffer的子类</h1>
<p><code>Buffer</code>是一个抽象类。 实际我们使用的是它的子类， 主要是针对基本数据类型做的优化。</p>
<h2 id="ByteBuffer：_最通用的子类，_处理字节数据类型。"><code>ByteBuffer</code>： 最通用的子类， 处理字节数据类型。</h2>
<p>提供了get/put 单个字节或者字节数组的方法， 还是分相对和绝对操作。<br>字节是其它基本数据类型的基础。 比如int类型是32位也就是4个字节。 </p>
<table>
<thead>
<tr>
<th>Data Type</th>
<th>size (byte)</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>1</td>
</tr>
<tr>
<td>short</td>
<td>2</td>
</tr>
<tr>
<td>int</td>
<td>4</td>
</tr>
<tr>
<td>long</td>
<td>8</td>
</tr>
<tr>
<td>float</td>
<td>4</td>
</tr>
<tr>
<td>double</td>
<td>8</td>
</tr>
<tr>
<td>char</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>所以可以将这些基本数据类型的数据写入到字节缓冲区中或者从中读出。<br>ByteBuffer针对基本数据类型定义了便利的方法， 如<code>getChar()</code>,<code>getInt()</code>,<code>putFloat</code>,<code>putShort</code> …等方法。<br>注意<code>putXXX</code>可能会抛出<code>BufferOverflowException</code>和<code>ReadOnlyBufferException</code>异常， <code>getXXX</code>可能会抛出<code>BufferUnderflowException</code>异常。</p>
<p>同时ByteBuffer还提供了创建视图<code>view</code>的方法。 可以基于ByteBuffer创建其它基本类型的buffer，它们的底层数据指向都一个对象，但是相应的<code>position</code>, <code>limit</code>,  <code>mark</code>都是独立的。例如<code>asIntBuffer()</code>返回一个<code>IntBuffer</code>对象， 返回的<code>IntBuffer</code>对象的第一个元素对应于此<code>ByteBuffer</code>的<code>position</code>的位置的元素。 <code>IntBuffer</code>的<code>position</code>的值为<code>0</code>,<code>capacity</code> 和<code>limit</code>是此<code>ByteBuffer</code>的剩余的字节的数量/4 (int是四个字节)， mark未定义。 当且仅当<code>ByteBuffer</code>是直接缓冲区时此<code>IntBuffer</code>才是直接缓冲区， 当且仅当<code>ByteBuffer</code>是只读的 <code>IntBuffer</code>才是只读的。</p>
<p>注意<code>ByteBuffer</code>依然是抽象类， <code>allocate</code>方法和<code>allocateDirect</code>方法创建缓冲区时实际是创建<code>HeapByteBuffer</code>或者<code>DirectByteBuffer</code>类。</p>
<p>仍然支持流式风格。 <code>bb.putInt(0xCAFEBABE).putShort(3).putShort(45);</code></p>
<p><code>asReadOnlyBuffer()</code>转换成只读缓冲区。新缓冲区的position, limit, 和 mark是独立的。 初始值和原缓冲区相同。<br><code>duplicate</code>复制当前的<code>ByteBuffer</code>,底层的数据是公用的，但是<code>position</code>,<code>capacity</code>,<code>limit</code> ,<code>mark</code>是独立的， 方法返回的<code>ByteBuffer</code>初始拥有和原<code>ByteBuffer</code>相同的<code>position</code>,<code>capacity</code>,<code>limit</code> ,<code>mark</code>。<br><code>slice()</code>也是一个新的byte buffer，和原bye buffer的数据共享。 但是新的byte buffer将自原byte buffer的<code>position</code>的位置开始。 这也就是slice的含义。</p>
<p>提供了<code>allocate(int capacity)</code>和<code>allocateDirect(int capacity)</code>两种方法。<br><code>wrap(byte[] array)</code>, <code>wrap(byte[] array, int offset, int length)</code>将字节数组包装成<code>ByteBuffer</code>。</p>
<p><code>order()</code>和<code>order(ByteOrder bo)</code>用来返回和设置<a href="http://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F" target="_blank" rel="external">字节序</a>： 大端模式（BIG_ENDIAN）和小端模式（LITTLE_ENDIAN）。 默认总是大端模式(BIG_ENDIAN)。</p>
<p><code>compact</code>: 压缩ByteBuffer。 将<code>position</code>和<code>limit</code>的之间的数据复制到缓冲区的开始部分。 比如另p = <code>position</code>,则将 <code>p + 1</code>处的数据复制到<code>index 1</code>， …… <code>limit -1</code>处的数据复制到<code>n = limit -1 -p</code>。 缓冲区的<code>position</code>设置为<code>n+1</code>， limit设置为<code>capacity</code>， mark丢弃. </p>
<p>以下的子类类似ByteBuffer，但是没有转换成其它Buffer的方法和视图。这是容易理解的，因为Byte才是其它基本数据类型的基础单位。<br><code>wrap</code>包装相应基本数据类型的数组。依然有<code>compact</code>, <code>duplicate</code>, <code>slice</code>方法. 流式风格， get/put 单数据操作和批操作， 相对位置操作和绝对位置操作。</p>
<h2 id="CharBuffer"><code>CharBuffer</code></h2>
<p>提供了<code>append</code>方法，等同于put方法。<br><code>charAt(int index)</code>返回指定位置的字符。<br><code>subSequence(int start, int end)</code>返回指定位置的缓冲区。 与原缓冲区共享数据。 <code>capacity</code>相同。 新缓冲区的<code>position</code>为原缓冲区<code>position</code> + start, <code>limit</code>为原缓冲区的<code>position</code> + end。 <code>direct</code>, <code>readonly</code>和原缓冲区相同。</p>
<h2 id="DoubleBuffer"><code>DoubleBuffer</code></h2>
<p>处理double类型数据。</p>
<h2 id="FloatBuffer"><code>FloatBuffer</code></h2>
<p>处理float类型数据。</p>
<h2 id="IntBuffer"><code>IntBuffer</code></h2>
<p>处理<code>int</code>类型数据。</p>
<h2 id="LongBuffer"><code>LongBuffer</code></h2>
<p>处理<code>long</code>类型数据。</p>
<h2 id="ShortBuffer"><code>ShortBuffer</code></h2>
<p>处理<code>short</code>类型数据。</p>
<h2 id="MappedByteBuffer"><code>MappedByteBuffer</code></h2>
<p>继承于<code>ByteBuffer</code>。 它是以内存镜像文件为基础的直接字节缓冲区。 可以通过<code>FileChannel.map</code>创建。<br><code>force()</code>强制对数据的改变写入到存储设备。<br><code>isLoaded()</code> : 缓冲区的数据是否都全部加载到物理内存中。<br><code>load()</code> : 加载缓冲区的数据到物理内存中。</p>
<blockquote>
<p>内存映射文件是一种允许Java程序直接从内存访问的特殊文件。通过将整个文件或者文件的一部分映射到内存中、操作系统负责获取页面请求和写入文件，应用程序就只需要处理内存数据，这样可以实现非常快速的IO操作。用于内存映射文件的内存在Java的堆空间以外。</p>
</blockquote>
<h1 id="Buffer的创建">Buffer的创建</h1>
<ul>
<li>allocate()或者allocateDirect()</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="constant">CharBuffer cb</span> = CharBuffer.allocate(<span class="number">1024</span>);</div><div class="line"><span class="constant">ByteBuffer bb</span> = ByteBuffer.allocateDirect(<span class="number">1024</span>*<span class="number">1024</span>);</div></pre></td></tr></table></figure>

<ul>
<li>包装一个数组</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] bytes = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1024</span>];</div><div class="line">IntBuffer ib = IntBuffer.wrap(bytes);</div></pre></td></tr></table></figure>

<ul>
<li>内存映射，即调用FileChannel的map()方法</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FileChannel <span class="variable">fc =</span> new RandomAccessFile(<span class="string">"test.data"</span>, <span class="string">"rw"</span>).getChannel();   </div><div class="line">MappedByteBuffer <span class="variable">out =</span> fc.<span class="built_in">map</span>(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, length);</div></pre></td></tr></table></figure>

<h2 id="直接缓冲区和间接缓冲区">直接缓冲区和间接缓冲区</h2>
<p>byte buffer既可以是直接缓冲区可以是非直接缓冲区。 对于直接缓冲区， Java虚拟机极可能的直接执行native I/O操作，避免在操作系统的native I/O操作时还要复制内容到一个中间缓冲区。<br>它使用Native函数库直接分配堆外内存，然后通过一个存储在JAVA堆里面的<code>DirectByteBuffer</code>对象作为这块内存的引用进行操作。</p>
<p>可以通过<code>allocateDirect</code>工厂方法直接创建直接缓冲区， 内部会创建<code>DirectByteBuffer</code>对象， 通过<code>unsafe.allocateMemory</code>分配内存。 相对而言， 这个方法返回的缓冲区要比非直接缓冲区多少有点更高的分配/销毁的花费 (时间和空间)。 直接缓冲区在垃圾回收堆的外部， 所以建议主要用于大的长时间活动的缓冲区，确实能提高性能的环境中。</p>
<p>也可以通过内存镜像文件的方式使用直接缓冲区 <code>FileChannel.map</code>。 Java平台可选择使用JNI来创建直接缓冲区。 如果Buffer指向一个不能访问的内存区域时， 缓冲区的内容不会被更改， 访问操作可能会导致一个不确定的异常。 </p>
<p>可以通过<code>isDirect</code>方法判断一个缓冲区是否是直接缓冲区。</p>
<p>虽然直接缓冲区是堆外内存，但是由于<code>DirectByteBuffer</code>引用了它，当<code>DirectByteBuffer</code>被垃圾回收时，此堆外内存会被释放掉，不会出现内存泄漏的问题。</p>
<h1 id="参考">参考</h1>
<ol>
<li><a href="http://docs.oracle.com/javase/7/docs/api/java/nio/package-summary.html" target="_blank" rel="external">JavaDOC</a></li>
<li><a href="http://tutorials.jenkov.com/java-nio/buffers.html#basicusage" target="_blank" rel="external">Java NIO Buffer</a></li>
<li><a href="http://stackoverflow.com/questions/590069/how-would-you-code-an-efficient-circular-buffer-in-java-or-c-sharp?lq=1" target="_blank" rel="external">How would you code an efficient Circular Buffer in Java or C#</a></li>
<li><a href="http://ostermiller.org/utils/CircularBuffer.html" target="_blank" rel="external"> Ostermiller Java Utilities</a></li>
</ol>
]]></content>
    <summary type="html"><![CDATA[<p>Java 1.4中在java.nio包中增加了Buffer类以及一些处理基本数据类型的子类(除了boolean型) ，用来提供为基本数据类型(primitive) 的数据提供一个容器。<br>何谓Buffer? <code>Buffer</code> 是一个线性的有限长度的特定基本数据的序列。 除了基础数据外，它还包括一些基础操作和属性， 比如<code>capacity</code>, <code>limit</code> 和 <code>position</code>。</p>
<p>实际使用中使用特定的子类来处理数据。每个子类都定义了两套get/put的操作。 </p>
<ul>
<li><strong>相对位置操作 （Relative ）</strong>。 从当前位置<code>position</code>读写一个或者多个元素， 并<code>position</code>增加相应的数值。 如果一个get请求的数据超过了<code>limit</code>的位置，会抛出<code>BufferUnderflowException</code>异常。 如果一个put操作超过了<code>limit</code>的限制， 会抛出<code>BufferOverflowException</code>异常。不管上面哪种情况，没有数据被传输。</li>
<li><strong>绝对位置操作 （Absolute ）</strong>。 显示的提供index， 不会影响<code>position</code>的值。 如果索引超过<code>limit</code>会抛出<code>IndexOutOfBoundsException</code>异常。</li>
</ul>
<p>数据也可以通过<code>Channel</code>的I/O操作如<code>write</code>,<code>read</code> 写入或者读出。<br>显然， Buffer只有写入了数据才可能有意义的数据读出。</p>
<p>Buffer类并不是线程安全的， 使用时要特别小心， 避免多线程同时读写同一个Buffer。 万不得已， 需要为读写操作加锁。</p>
<p>]]></summary>
    
      <category term="buffer" scheme="http://colobu.com/tags/buffer/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[分布式系统原理--日志技术Redo Log]]></title>
    <link href="http://colobu.com/2014/10/16/redo-log-in-distribution-systems/"/>
    <id>http://colobu.com/2014/10/16/redo-log-in-distribution-systems/</id>
    <published>2014-10-16T00:56:10.000Z</published>
    <updated>2014-10-16T01:07:31.000Z</updated>
    <content type="html"><![CDATA[<h1 id="问题概述">问题概述</h1>
<p>在分布式系统中，宕机是需要考虑的重要组成部分。日志技术是宕机恢复的重要技术之一。日志技术应用广泛，早些更是广泛应用在数据库设计实现中。本文先介绍基本原理概念，最后通过redis介绍生产环境中的实现方法。</p>
<p><a id="more"></a><br>转载: <a href="http://studentdeng.github.io/blog/2014/10/13/log-system/" target="_blank" rel="external">分布式系统原理—日志技术Redo Log</a></p>
<h1 id="Redo_Log">Redo Log</h1>
<p>数据库设计中，需要满足ACID，尤其是在支持事务的系统中。当系统遇到未知错误时，可以恢复到一个稳定可靠的状态。有一个很简单的思路，就是记录所有对数据库的写操作日志。那么一旦发生故障，即使丢失掉内存中所有数据，当下一次启动时，通过复现已经记录的数据库写操作日志，依然可以回到故障之前的状态（如果在写操作作日志的时候发生故障，那么这次数据库操作失败）。</p>
<p>操作流程简单如下（假设每次数据变化，都提交）：</p>
<ol>
<li>更新的操作方式依次记录到磁盘日志文件。</li>
<li>更新内存中的数据。</li>
<li>返回更新成功结果。</li>
</ol>
<p>恢复流程：</p>
<ol>
<li>读取日志文件，依次修改内存中的数据。</li>
</ol>
<p>优点：</p>
<ol>
<li>日志文件有序，可以通过append的方式写入磁盘，性能很高。</li>
<li>简单可靠，应用广泛。可以把内存中的数据，做备份在磁盘中。</li>
</ol>
<p>缺点：</p>
<ol>
<li>使用时间一长，恢复宕机的时间很慢。</li>
</ol>
<h1 id="解决办法">解决办法</h1>
<p>先具体化下，如果我们内存中保留一个a的值，记录了写操作比如 a = 4; a++; a—; 当这些操作上千万、亿之后，恢复非常慢。甚至可能最后一条就是a=0，按照之前的算法，我们却跑了很长时间。<br>那么根据这个场景，很容易想到一个解决方案。</p>
<p>操作流程：</p>
<ol>
<li>日志文件记录<code>begin check point</code></li>
<li>在某个时刻，把内存中的数值，直接snapshot或dump到磁盘上。（比如直接记录a=4）</li>
<li>日志文件记录<code>end check point</code></li>
</ol>
<p>恢复流程：</p>
<ol>
<li>扫描日志文件，找到最后的<code>end check point</code>中配对的<code>begin check point</code>。</li>
<li>读入dump文件。</li>
<li>依次回放记录的日志操作。</li>
</ol>
<p>优点：</p>
<ol>
<li>应用广泛，包括 mysql，oracle。</li>
</ol>
<p>一些棘手的问题：</p>
<ol>
<li>在做snapshot的时候，往往不能停止数据库的服务，那么很可能记录了<code>begin check point</code>之后的日志。那么在重新<code>load begin check</code> point之后的日志时，最后恢复的数据很有可能不对。比如我们记录的是a++这样的日志, 那么重复一条日志，就会让a的值加1。反之如果我们记录是幂等的，比如一直是 a=5 这种操作，那么就对最后结果没有影响。很显然，设计幂等操作系统很麻烦。</li>
<li>设计一个支持snapshot的内存数据结构，也比较麻烦。</li>
</ol>
<p>典型的是通过<code>copy-on-write</code>机制。和操作系统中的概念一样。当这个数据结构被修改，就创建一份真正的copy。老数据增加一份dirty flag。如果没有修改就继续使用之前的内存。这样在做snapshot的时候，保证我们的dump数据是<code>begin check point</code>这个时刻的数据。显然这个也比较麻烦。</p>
<p>还有一种支持snapshot的思路是begin check point后，不动老的数据。内存中的数据在新的地方，日志也写在新的地方。最后在<code>end check point</code>做一次merge。这个实现起来简单，但是内存消耗不小。</p>
<h1 id="Redis是如何解决日志问题的">Redis是如何解决日志问题的</h1>
<p>Redis 是一个基于内存的database，不同于memcached，他支持持久化。另外由于redis处理client request 和 response 都是在一个thread里面，也没有抢占式的调度系统，核心业务都是按照event loop顺序执行，而磁盘写日志又开销很大，所以redis实现日志功能做了很多优化。并且提供2种持久化方案。我们需要在不同的场景下，采用不同的方式配置。</p>
<p><strong>snapshotting</strong><br>某个时刻，redis会把内存中的所有数据snapshot到磁盘文件。更通俗的说法是fork一个child process，把内存中的数据序列化到临时文件，然后在main event loop 中原子的更换文件名。redis，利用了操作系统VM的copy-on-write机制，在不阻塞主线程的情况下，利用子进程和父进程共享的data segment实现snapshot。具体是代码实现在<code>rdb.c</code>, <code>function at rdbSaveBackground</code></p>
<p>优点：</p>
<ol>
<li>简单可靠，如果database 不大，执行的效果非常好。</li>
</ol>
<p>缺点：</p>
<ol>
<li>如果database size 很大，每一次snapshot时间非常长。不得不配置大的间隔，提高了宕机时数据丢失的风险。</li>
</ol>
<p>为了解决上面的问题，redis增加了AOF。</p>
<h1 id="Append_Only_File（AOF）">Append Only File（AOF）</h1>
<p>在database术语中，也被叫做WAL。如果开启的AOF的配置，redis会记录所有写操作到日志文件中。那么redis同样会遇到之前我们提到过的问题。</p>
<ol>
<li>即便是追加写，磁盘的操作依然比内存慢好几个数量级，频繁的操作容易产生瓶颈。</li>
<li>如果数据量操作频繁，会产生大量的重复日志数据，导致恢复时间太长。比如记录一条微博的浏览量，会记录大量重复的<code>+1</code>日志。</li>
</ol>
<p>那么redis是如何解决的呢？</p>
<ol>
<li>文件写操作消耗的时间很长，redis会先把记录日志写在内存buffer中，在每一次event loop 结束之后，根据配置判断是否做写操作。每个buffer的大小有限制，这样每次写操作时间不会太长。</li>
<li>即便是调用write操作，OS并没有立即写入磁盘，redis 同样提供了一些方案决定刷新OS IO buffer的时机（1秒、从不、每次）。</li>
<li>redis 提供一种AOF重写的方式<code>rewriteAppendOnlyFile</code>来处理AOF文件过大情况。</li>
</ol>
<p>前面我们知道了，这种<code>check point</code>的机制还是比较麻烦的。那么redis是这么设计的。</p>
<p><img src="http://i.gyazo.com/314a668a8443b0de126685cfb4197fbc.png" alt=""></p>
<ol>
<li>为了避免加锁，redis 依然创建了一个child process，利用VM的copy-on-write，共享数据。同时保证主线程依然可以处理client请求。</li>
<li>根据KV的类型，先从内存读取数据，然后再写数据到磁盘，和之前的AOF文件无关。</li>
<li>那么当子进程rewrite AOF的过程中，main thread依然可以处理新的client request。新增的数据会被放在rewrite buffer中，而且写到原有的AOF文件中。</li>
<li>child process完成后会通知主线程。主线程有一个定时任务，也就是会不断轮询child process是否已经完成（通过信号量）。</li>
<li>主线程会merge 变化的数据到temp file。</li>
<li>主线程原子的rename到一个新的AOF文件，之前的AOF就不起作用了。</li>
</ol>
<p>优点：</p>
<ol>
<li>除了merge 和 rename需要阻塞主线程，rewrite不会阻塞主线程。（前提是使用bgrewrite command）。</li>
</ol>
<h1 id="最后">最后</h1>
<p>这些都是性能和稳定性之间做的权衡，根据不同场景需要调整。</p>
<h1 id="参考">参考</h1>
<ul>
<li><a href="http://redis.io/topics/latency" target="_blank" rel="external">Redis latency problems troubleshooting</a></li>
<li><a href="http://wenku.baidu.com/view/53b7505777232f60ddcca1e0.html" target="_blank" rel="external">分布式系统原理介绍</a></li>
<li><a href="http://blog.kennejima.com/post/1226487020/thoughts-on-redis#" target="_blank" rel="external">Thoughts on Redis</a></li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h1 id="问题概述">问题概述</h1>
<p>在分布式系统中，宕机是需要考虑的重要组成部分。日志技术是宕机恢复的重要技术之一。日志技术应用广泛，早些更是广泛应用在数据库设计实现中。本文先介绍基本原理概念，最后通过redis介绍生产环境中的实现方法。</p>
<p>]]></summary>
    
      <category term="高并发编程" scheme="http://colobu.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo 同时支持Github和Gitcafe]]></title>
    <link href="http://colobu.com/2014/10/13/hexo-supports-both-github-and-gitcafe/"/>
    <id>http://colobu.com/2014/10/13/hexo-supports-both-github-and-gitcafe/</id>
    <published>2014-10-13T07:16:23.000Z</published>
    <updated>2014-10-13T07:44:06.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo支持同时发布到多个git仓库中。需要修改<code>_config.yml</code>。<br>原来的配置:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="label">deploy:</span></div><div class="line"><span class="label">type:</span> github</div><div class="line"><span class="label">repo:</span> github: https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</div><div class="line"><span class="label">branch:</span> master</div></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">   type: git</div><div class="line">   repo: </div><div class="line">      github: https:<span class="comment">//github.com/&lt;username&gt;/&lt;username&gt;.github.io.git,master</span></div><div class="line">      gitcafe: https:<span class="comment">//gitcafe.com/&lt;username&gt;/&lt;username&gt;.git,gitcafe-pages</span></div></pre></td></tr></table></figure>

<p>首先需要你在gitcafe创建一个和用户名相同的项目，并为此项目创建一个<code>gitcafe-pages</code>。 静态站点发布到这个分支上。 同时需要绑定你的域名在此项目上。<br>这和<code>github</code>有点不同。 <code>github</code>要求创建一个<code>&lt;username&gt;.github.io</code>的项目，站点发布到master分支即可。</p>
<p><strong>dnspod</strong><br>之所以发布到两个站点， 主要是想让国内的用户直接访问g<code>gircafe</code>上的站点，这样速度快一点。<br>你可以在dnspod上针对不同的线路配置不同的A记录。</p>
<p>参考文档：</p>
<ul>
<li><a href="http://blog.billryan.me/posts/2014/05/multi-deployment-with-hexo.html" target="_blank" rel="external">Hexo多Repo部署——使用Github和GitCafe同时托管博客</a></li>
<li><a href="http://www.autonavi.me/2014/09/09/Hexo%E5%8A%A0%E8%BD%BD%E8%BF%87%E6%85%A2.html" target="_blank" rel="external">HEXO个人博客速度优化</a></li>
<li><a href="http://blog.magiclin.com/2013/12/20/hexo-gitcafe/" target="_blank" rel="external">部署Hexo静态blog到gitcafe</a></li>
</ul>
]]></content>
    
    
      <category term="前端开发" scheme="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript 函数前面的一元操作符]]></title>
    <link href="http://colobu.com/2014/10/13/javascript-function-and-unary-operators/"/>
    <id>http://colobu.com/2014/10/13/javascript-function-and-unary-operators/</id>
    <published>2014-10-13T05:58:05.000Z</published>
    <updated>2014-10-13T06:16:27.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://segmentfault.com/q/1010000000117476" target="_blank" rel="external">segmentfault</a>上的一个问题：</p>
<p>一般看JQuery插件里的写法是这样的:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">($)</span> </span>{         </div><div class="line">  <span class="comment">//...  </span></div><div class="line">})(jQuery);</div></pre></td></tr></table></figure>

<p>今天看到bootstrap的javascript组件是这样写的:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span><span class="params">( $ )</span></span>{</div><div class="line">  <span class="comment">//...</span></div><div class="line">}( <span class="built_in">window</span>.jQuery );</div></pre></td></tr></table></figure>

<p>为什么要在前面加一个 “ ! “ 呢？<br>原来，使用括号包裹定义函数体，解析器将会以函数表达式的方式去调用定义函数。也就是说，任何能将函数变成一个函数表达式的作法，都可以使解析器正确的调用定义函数。而 ! 就是其中一个，而 + - || 都有这样的功能。<br>另外，用 ! 可能更多的是一个习惯问题，不同的运算符，性能是不同的。<br><a id="more"></a></p>
<p>有一篇非常详细的文章，特意转载： <a href="http://swordair.com/function-and-exclamation-mark/" target="_blank" rel="external">http://swordair.com/function-and-exclamation-mark/</a></p>
<p>最近有空可以让我静下心来看看各种代码，function与感叹号的频繁出现，让我回想起2个月前我回杭州最后参加团队会议的时候，@西子剑影抛出的一样的问题：如果在function之前加上感叹号 (!) 会怎么样？比如下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)}()        <span class="comment">// true</span></div></pre></td></tr></table></figure>

<p>在控制台运行后得到的值时true，为什么是true这很容易理解，因为这个匿名函数没有返回值，默认返回的就是undefined，求反的结果很自然的就是true。所以问题并不在于结果值，而是在于，为什么求反操作能够让一个匿名函数的自调变的合法？</p>
<p>平时我们可能对添加括号来调用匿名函数的方式更为习惯：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)})()        <span class="comment">// true</span></div></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)}())        <span class="comment">// true</span></div></pre></td></tr></table></figure>

<p>虽然上述两者括号的位置不同，不过效果完全一样。</p>
<p>那么，是什么好处使得为数不少的人对这种叹号的方式情有独钟？如果只是为了节约一个字符未免太没有必要了，这样算来即使一个100K的库恐怕也节省不了多少空间。既然不是空间，那么就是说也许还有时间上的考量，事实很难说清，文章的最后有提到性能。</p>
<p>回到核心问题，为什么能这么做？甚至更为核心的问题是，为什么必须这么做？</p>
<p>其实无论是括号，还是感叹号，让整个语句合法做的事情只有一件，就是让一个函数声明语句变成了一个表达式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)}        <span class="comment">// undefined</span></div></pre></td></tr></table></figure>

<p>这是一个函数声明，如果在这么一个声明后直接加上括号调用，解析器自然不会理解而报错：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)}()        <span class="comment">// SyntaxError: unexpected_token</span></div></pre></td></tr></table></figure>

<p>因为这样的代码混淆了函数声明和函数调用，以这种方式声明的函数 a，就应该以 a(); 的方式调用。</p>
<p>但是括号则不同，它将一个函数声明转化成了一个表达式，解析器不再以函数声明的方式处理函数a，而是作为一个函数表达式处理，也因此只有在程序执行到函数a时它才能被访问。</p>
<p>所以，任何消除函数声明和函数表达式间歧义的方法，都可以被解析器正确识别。比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{<span class="keyword">return</span> <span class="number">10</span>}();        <span class="comment">// undefined  </span></div><div class="line"><span class="number">1</span> && <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{<span class="keyword">return</span> <span class="literal">true</span>}();        <span class="comment">// true  </span></div><div class="line"><span class="number">1</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)}();        <span class="comment">// undefined</span></div></pre></td></tr></table></figure>

<p>赋值，逻辑，甚至是逗号，各种操作符都可以告诉解析器，这个不是函数声明，它是个函数表达式。并且，对函数一元运算可以算的上是消除歧义最快的方式，感叹号只是其中之一，如果不在乎返回值，这些一元运算都是有效的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)}()        <span class="comment">// true</span></div><div class="line">+<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)}()        <span class="comment">// NaN</span></div><div class="line">-<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)}()        <span class="comment">// NaN</span></div><div class="line">~<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)}()        <span class="comment">// -1</span></div></pre></td></tr></table></figure>

<p>甚至下面这些关键字，都能很好的工作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)}()        <span class="comment">// undefined  </span></div><div class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)}()        <span class="comment">// Object  </span></div><div class="line"><span class="keyword">delete</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)}()        <span class="comment">// true</span></div></pre></td></tr></table></figure>

<p>最后，括号做的事情也是一样的，消除歧义才是它真正的工作，而不是把函数作为一个整体，所以无论括号括在声明上还是把整个函数都括在里面，都是合法的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)})()        <span class="comment">// undefined</span></div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{alert(<span class="string">'iifksp'</span>)}())        <span class="comment">// undefined</span></div></pre></td></tr></table></figure>

<p>说了这么多，实则在说的一些都是最为基础的概念——语句，表达式，表达式语句，这些概念如同指针与指针变量一样容易产生混淆。虽然这种混淆对编程无表征影响，但却是一块绊脚石随时可能因为它而头破血流。</p>
<p>最后讨论下性能。我在jsperf上简单建立了一个测试：<a href="http://jsperf.com/js-funcion-expression-speed" target="_blank" rel="external">http://jsperf.com/js-funcion-expression-speed</a> ，可以用不同浏览器访问，运行测试查看结果。我也同时将结果罗列如下表所示（由于我比较穷，测试配置有点丢人不过那也没办法：奔腾双核1.4G，2G内存，win7企业版）：</p>
<table><tbody><tr><th rowspan="2">Option</th><th rowspan="2">Code</th><th colspan="4">Ops/sec</th></tr><tr><th>Chrome 13</th><th>Firefox 6</th><th>IE9</th><th>Safari 5</th></tr><tr><th>!</th><td>!function(){;}()</td><td style="text-align:right;">3,773,196</td><td style="text-align:right;">10,975,198</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;">2,810,197</td></tr><tr><th>+</th><td>+function(){;}()</td><td style="text-align:right;background:#9cee82;">21,553,847</td><td style="text-align:right;background:#9cee82;">12,135,960</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;">1,812,238</td></tr><tr><th>-</th><td>-function(){;}()</td><td style="text-align:right;background:#9cee82;">21,553,847</td><td style="text-align:right;background:#9cee82;">12,135,960</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;">1,864,155</td></tr><tr><th>~</th><td>~function(){;}()</td><td style="text-align:right;">3,551,136</td><td style="text-align:right;">3,651,652</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;">1,876,002</td></tr><tr><th>(1)</th><td>(function(){;})()</td><td style="text-align:right;">3,914,953</td><td style="text-align:right;background:#9cee82;">12,135,960</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;background:#9cee82;">3,025,608</td></tr><tr><th>(2)</th><td>(function(){;}())</td><td style="text-align:right;">4,075,201</td><td style="text-align:right;background:#9cee82;">12,135,960</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;background:#9cee82;">3,025,608</td></tr><tr><th>void</th><td>void function(){;}()</td><td style="text-align:right;">4,030,756</td><td style="text-align:right;background:#9cee82;">12,135,960</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;background:#9cee82;">3,025,608</td></tr><tr><th>new</th><td>new function(){;}()</td><td style="text-align:right;background:#ffc0cb;">619,606</td><td style="text-align:right;background:#ffc0cb;">299,100</td><td style="text-align:right;background:#ffc0cb;">407,104</td><td style="text-align:right;background:#ffc0cb;">816,903</td></tr><tr><th>delete</th><td>delete function(){;}()</td><td style="text-align:right;">4,816,225</td><td style="text-align:right;background:#9cee82;">12,135,960</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;">2,693,524</td></tr><tr><th>=</th><td>var i = function(){;}()</td><td style="text-align:right;">4,984,774</td><td style="text-align:right;background:#9cee82;">12,135,960</td><td style="text-align:right;">565,982</td><td style="text-align:right;">2,602,630</td></tr><tr><th>&amp;&amp;</th><td>1 &amp;&amp; function(){;}()</td><td style="text-align:right;">5,307,200</td><td style="text-align:right;">4,393,486</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;">2,565,645</td></tr><tr><th>||</th><td>0 || function(){;}()</td><td style="text-align:right;">5,000,000</td><td style="text-align:right;">4,406,035</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;">2,490,128</td></tr><tr><th>&amp;</th><td>1 &amp; function(){;}()</td><td style="text-align:right;">4,918,209</td><td style="text-align:right;background:#9cee82;">12,135,960</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;">1,705,551</td></tr><tr><th>|</th><td>1 | function(){;}()</td><td style="text-align:right;">4,859,802</td><td style="text-align:right;background:#9cee82;">12,135,960</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;">1,612,372</td></tr><tr><th>^</th><td>1 ^ function(){;}()</td><td style="text-align:right;">4,654,916</td><td style="text-align:right;background:#9cee82;">12,135,960</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;">1,579,778</td></tr><tr><th>,</th><td>1, function(){;}()</td><td style="text-align:right;">4,878,193</td><td style="text-align:right;background:#9cee82;">12,135,960</td><td style="text-align:right;background:#9cee82;">572,694</td><td style="text-align:right;">2,281,186</td></tr></tbody></table>

<p>可见不同的方式产生的结果并不相同，而且，差别很大，因浏览器而异。</p>
<p>但我们还是可以从中找出很多共性：new方法永远最慢——这也是理所当然的。其它方面很多差距其实不大，但有一点可以肯定的是，感叹号并非最为理想的选择。反观传统的括号，在测试里表现始终很快，在大多数情况下比感叹号更快——所以平时我们常用的方式毫无问题，甚至可以说是最优的。加减号在chrome表现惊人，而且在其他浏览器下也普遍很快，相比感叹号效果更好。</p>
<p>当然这只是个简单测试，不能说明问题。但有些结论是有意义的：括号和加减号最优。</p>
<p>但是为什么这么多开发者钟情于感叹号？我觉得这只是一个习惯问题，它们之间的优劣完全可以忽略。一旦习惯了一种代码风格，那么这种约定会使得程序从混乱变得可读。如果习惯了感叹号，我不得不承认，它比括号有更好的可读性。我不用在阅读时留意括号的匹配，也不用在编写时粗心遗忘——</p>
<p>当我也这么干然后嚷嚷着这居然又节省了一个字符而沾沾自喜的时候，却忘了自己仓皇翻出一本卷边的C语言教科书的窘迫和荒唐……任何人都有忘记的时候，当再捡起来的时候，捡起的就已经不单单是忘掉的东西了。</p>
<p>2011-10-31更新：如果你使用aptana，那么在使用（!+-）时要注意一点，它们会让aptana的解析失效，导致Outline窗口没有任何显示。但是就代码本身而言，其运行没有任何问题。</p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="http://segmentfault.com/q/1010000000117476" target="_blank" rel="external">segmentfault</a>上的一个问题：</p>
<p>一般看JQuery插件里的写法是这样的:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">($)</span> </span>{         </div><div class="line">  <span class="comment">//...  </span></div><div class="line">})(jQuery);</div></pre></td></tr></table></figure>

<p>今天看到bootstrap的javascript组件是这样写的:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span><span class="params">( $ )</span></span>{</div><div class="line">  <span class="comment">//...</span></div><div class="line">}( <span class="built_in">window</span>.jQuery );</div></pre></td></tr></table></figure>

<p>为什么要在前面加一个 “ ! “ 呢？<br>原来，使用括号包裹定义函数体，解析器将会以函数表达式的方式去调用定义函数。也就是说，任何能将函数变成一个函数表达式的作法，都可以使解析器正确的调用定义函数。而 ! 就是其中一个，而 + - || 都有这样的功能。<br>另外，用 ! 可能更多的是一个习惯问题，不同的运算符，性能是不同的。<br>]]></summary>
    
      <category term="javascript" scheme="http://colobu.com/tags/javascript/"/>
    
      <category term="前端开发" scheme="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gitbook简明教程]]></title>
    <link href="http://colobu.com/2014/10/09/gitbook-quickstart/"/>
    <id>http://colobu.com/2014/10/09/gitbook-quickstart/</id>
    <published>2014-10-09T07:12:20.000Z</published>
    <updated>2014-10-09T08:24:44.000Z</updated>
    <content type="html"><![CDATA[<p>Gitbook是一个命令行工具(node.js库)， 使用Github/Git创建漂亮的图书。 你可以看一些用它编写的图书的例子： <a href="https://www.gitbook.io/book/GitBookIO/javascript" target="_blank" rel="external">学习Javascript</a>. 你也可以很容易的通过<a href="https://www.gitbook.io" target="_blank" rel="external">gitbook.io</a>网站发布在线图书。 <a href="https://github.com/GitbookIO/editor" target="_blank" rel="external">editor</a> 是一个图形化的编辑工具， 提供Windows, Mac 和Linux的版本. 关注Twitter帐号 <a href="https://twitter.com/GitBookIO" target="_blank" rel="external">@GitBookIO</a>. 这篇文章只是一个起步教程， 完整的文档可以在<a href="http://help.gitbook.io/" target="_blank" rel="external">help.gitbook.io</a>网站找到.<br><a id="more"></a><br><img src="https://raw.github.com/GitbookIO/gitbook/master/preview.png" alt="Image"></p>
<h2 id="怎么用:">怎么用:</h2>
<p>GitBook 可以通过 <strong>NPM</strong> 安装:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install gitbook -g</div></pre></td></tr></table></figure>

<p>你可以将一个<code>repository</code>作为一本书:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>gitbook serve ./repository</div></pre></td></tr></table></figure>

<p>或者简单的生成静态网站:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">$ gitbook build ./repository --output</span>=<span class="string">./outputFolder</span></div></pre></td></tr></table></figure>

<p>命令 <code>build</code> 和 <code>serve</code> 的参数为:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"><span class="input"><span class="prompt">o, --output &lt;directory&gt;</span>  输出文件件, 默认为 ./_book</span></span></div><div class="line">-<span class="ruby"><span class="input"><span class="prompt">f, --format &lt;name&gt;</span>       产生的书籍的类型, 默认为静态站点, 可用的格式为<span class="symbol">:</span> site, page, ebook, json</span></span></div><div class="line">-<span class="ruby"><span class="input"><span class="prompt">-config &lt;config file&gt;</span>    配置文件, 默认为 book.js 或 book.json</span></span></div></pre></td></tr></table></figure>

<p>GitBook 会从仓库中的<code>book.json</code>文件加载默认的配置，前提是此文件存在.</p>
<p>下面是此文件的一些配置项:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">    <span class="comment">// 输出文件夹</span></div><div class="line">    <span class="comment">// 注意: 它会覆盖命令行传入的参数</span></div><div class="line">    <span class="comment">// 不建议在此文件中配置</span></div><div class="line">    <span class="string">"output"</span>: <span class="literal">null</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 产生的书籍的类型</span></div><div class="line">    <span class="comment">// 注意: 它会覆盖命令行传入的参数</span></div><div class="line">    <span class="comment">// 不建议在此文件中配置</span></div><div class="line">    <span class="string">"generator"</span>: <span class="string">"site"</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 图书标题和描述 (默认从README抽取)</span></div><div class="line">    <span class="string">"title"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="string">"description"</span>: <span class="literal">null</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 对于ebook格式, 扩展名the extension to use for generation (default is detected from output extension)</span></div><div class="line">    <span class="comment">// "epub", "pdf", "mobi"</span></div><div class="line">    <span class="comment">// 注意: 它会覆盖命令行传入的参数</span></div><div class="line">    <span class="comment">// 不建议在此文件中配置</span></div><div class="line">    <span class="string">"extension"</span>: <span class="literal">null</span>,</div><div class="line"></div><div class="line">    <span class="comment">// GitHub 信息(defaults are extracted using git)</span></div><div class="line">    <span class="string">"github"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="string">"githubHost"</span>: <span class="string">"https://github.com/"</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 插件列表, can contain "-name" for removing default plugins</span></div><div class="line">    <span class="string">"plugins"</span>: [],</div><div class="line"></div><div class="line">    <span class="comment">// 插件通用配置</span></div><div class="line">    <span class="string">"pluginsConfig"</span>: {</div><div class="line">        <span class="string">"fontSettings"</span>: {</div><div class="line">            <span class="string">"theme"</span>: <span class="string">"sepia"</span>, <span class="string">"night"</span> or <span class="string">"white"</span>,</div><div class="line">            <span class="string">"family"</span>: <span class="string">"serif"</span> or <span class="string">"sans"</span>,</div><div class="line">            <span class="string">"size"</span>: <span class="number">1</span> to <span class="number">4</span></div><div class="line">        }</div><div class="line">    },</div><div class="line"></div><div class="line">    <span class="comment">// 模版中的链接 (null: default, false: remove, string: new value)</span></div><div class="line">    <span class="string">"links"</span>: {</div><div class="line">    	<span class="comment">// Custom links at top of sidebar</span></div><div class="line">    	<span class="string">"sidebar"</span>: {</div><div class="line">    	    <span class="string">"Custom link name"</span>: <span class="string">"https://customlink.com"</span></div><div class="line">    	},</div><div class="line"></div><div class="line">        <span class="comment">// Sharing links</span></div><div class="line">        <span class="string">"sharing"</span>: {</div><div class="line">            <span class="string">"google"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="string">"facebook"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="string">"twitter"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="string">"weibo"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="string">"all"</span>: <span class="literal">null</span></div><div class="line">        }</div><div class="line">    },</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// PDF 参数</span></div><div class="line">    <span class="string">"pdf"</span>: {</div><div class="line">        <span class="comment">// Add toc at the end of the file</span></div><div class="line">        <span class="string">"toc"</span>: <span class="literal">true</span>,</div><div class="line"></div><div class="line">        <span class="comment">// Add page numbers to the bottom of every page</span></div><div class="line">        <span class="string">"pageNumbers"</span>: <span class="literal">false</span>,</div><div class="line"></div><div class="line">        <span class="comment">// Font size for the fiel content</span></div><div class="line">        <span class="string">"fontSize"</span>: <span class="number">12</span>,</div><div class="line"></div><div class="line">        <span class="comment">// Paper size for the pdf</span></div><div class="line">        <span class="comment">// Choices are [u’a0’, u’a1’, u’a2’, u’a3’, u’a4’, u’a5’, u’a6’, u’b0’, u’b1’, u’b2’, u’b3’, u’b4’, u’b5’, u’b6’, u’legal’, u’letter’]</span></div><div class="line">        <span class="string">"paperSize"</span>: <span class="string">"a4"</span>,</div><div class="line"></div><div class="line">        <span class="comment">// Margin (in pts)</span></div><div class="line">        <span class="comment">// Note: 72 pts equals 1 inch</span></div><div class="line">        <span class="string">"margin"</span>: {</div><div class="line">            <span class="string">"right"</span>: <span class="number">62</span>,</div><div class="line">            <span class="string">"left"</span>: <span class="number">62</span>,</div><div class="line">            <span class="string">"top"</span>: <span class="number">36</span>,</div><div class="line">            <span class="string">"bottom"</span>: <span class="number">36</span></div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="输出格式">输出格式</h2>
<p>GitBook可以产生下列类型的图书:</p>
<ul>
<li><strong>静态站点</strong>: 默认格式. 创建一个完全交互式的静态网站，可以发布到GitHub Pages等网站.</li>
<li><strong>eBook</strong>: 图书完成后可以使用它创建电子书. 创建命令: <code>gitbook ebook ./myrepo</code>. 你需要安装 <a href="http://manual.calibre-ebook.com/cli/ebook-convert.html" target="_blank" rel="external">ebook-convert</a>. 输出格式可以是 <strong>PDF</strong>, <strong>ePub</strong> 或 <strong>MOBI</strong>.</li>
<li><strong>单页网页</strong>: 可以生成一个单页的HTML网页。这个格式可以用来转换PDF或者eBook. 创建命令: <code>gitbook build ./myrepo -f page</code>.</li>
<li><strong>JSON</strong>: 此格式用来调试或者抽取图书的元数据. 创建命令: <code>gitbook build ./myrepo -f json</code>.</li>
</ul>
<h2 id="图书格式">图书格式</h2>
<p>一本图书就是一个Git repository， 至少包含两个文件: <code>README.md</code> 和 <code>SUMMARY.md</code>.</p>
<h4 id="README-md">README.md</h4>
<p>典型的, 它应该是你的图书的介绍. 它可以自动的被加到最终的summary中.</p>
<h4 id="SUMMARY-md">SUMMARY.md</h4>
<p><code>SUMMARY.md</code> 定义了你的图书的结构. 它应该包含章节的列表,以及它们的链接.</p>
<p>例如:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="header"># Summary</span></div><div class="line"></div><div class="line">This is the summary of my book.</div><div class="line"></div><div class="line"><span class="bullet">* </span>[<span class="link_label">section 1</span>](<span class="link_url">section1/README.md</span>)</div><div class="line"><span class="code">    * [example 1](section1/example1.md)</span></div><div class="line"><span class="code">    * [example 2](section1/example2.md)</span></div><div class="line"><span class="bullet">* </span>[<span class="link_label">section 2</span>](<span class="link_url">section2/README.md</span>)</div><div class="line"><span class="code">    * [example 1](section2/example1.md)</span></div></pre></td></tr></table></figure>

<p>不被<code>SUMMARY.md</code>包含的文件不会被<code>gitbook</code>处理.</p>
<h4 id="多语言">多语言</h4>
<p>GitBook 支持使用多种语言编写图书. 每种语言应该是一个子目录， 遵循正常gitbook格式, <code>LANGS.md</code>文件应该被放到repository的根文件夹， 格式如下:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>[<span class="link_label">English</span>](<span class="link_url">en/</span>)</div><div class="line"><span class="bullet">* </span>[<span class="link_label">French</span>](<span class="link_url">fr/</span>)</div><div class="line"><span class="bullet">* </span>[<span class="link_label">Español</span>](<span class="link_url">es/</span>)</div></pre></td></tr></table></figure>

<p>看个例子 <a href="https://github.com/GitbookIO/git" target="_blank" rel="external">学习 Git</a>.</p>
<h4 id="词汇表">词汇表</h4>
<p>允许你列出条目以及它们的定义. 基于这些条目 <code>gitbook</code>会自动创建一个索引，并在页面中加亮这些条目.</p>
<p><code>GLOSSARY.md</code> 格式很简单 :</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="header"># term</span></div><div class="line">Definition for this term</div><div class="line"></div><div class="line"><span class="header"># Another term</span></div><div class="line">With it's definition, this can contain bold text and all other kinds of inline markup ...</div></pre></td></tr></table></figure>

<h4 id="忽略文件和文件夹">忽略文件和文件夹</h4>
<p>GitBook 读取<code>.gitignore</code>, <code>.bookignore</code> 和 <code>.ignore</code> 得到需要忽略的文件/文件夹的列表. (文件的格式和 <code>.gitignore</code>一样).</p>
<p> <code>.gitignore</code>最佳实践是忽略build文件，这些文件来自 <a href="https://github.com/github/gitignore/blob/master/Node.gitignore" target="_blank" rel="external"><strong>node.js</strong></a> (<code>node_modules</code>, …) 和GitBook的build文件: <code>_book</code>, <code>*.epub</code>, <code>*.mobi</code> and <code>*.pdf</code>.</p>
<h4 id="封面">封面</h4>
<p>封面文件为: <strong>/cover.jpg</strong>.<br>尺寸为 <strong>1800x2360</strong>. 插件 <a href="https://github.com/GitbookIO/plugin-autocover" target="_blank" rel="external">autocover</a>可以自动创建一个文件.</p>
<p>封面的小尺寸图形为: <strong>/cover_small.jpg</strong>.</p>
<h4 id="发布图书">发布图书</h4>
<p>平台 <a href="https://www.gitbook.io/" target="_blank" rel="external">GitBook.io</a>就像”Heroku for books”: 你可以在它上面创建图书 (公开的, 付费的, 或者私有的)， 并且使用 <strong>git push</strong> 就可以更新.</p>
<h4 id="插件">插件</h4>
<p>P插件可以扩展图书的功能. 查看插件介绍 <a href="https://github.com/GitbookIO/plugin" target="_blank" rel="external">GitbookIO/plugin</a>来了解如何创建一个插件.</p>
<h5 id="官方插件:">官方插件:</h5>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/GitbookIO/plugin-exercises" target="_blank" rel="external">exercises</a></td>
<td>Add interactive exercises to your book.</td>
</tr>
<tr>
<td><a href="https://github.com/GitbookIO/plugin-quizzes" target="_blank" rel="external">quizzes</a></td>
<td>Add interactive quizzes to your book.</td>
</tr>
<tr>
<td><a href="https://github.com/GitbookIO/plugin-mathjax" target="_blank" rel="external">mathjax</a></td>
<td>Displays mathematical notation in the book.</td>
</tr>
<tr>
<td><a href="https://github.com/GitbookIO/plugin-mixpanel" target="_blank" rel="external">mixpanel</a></td>
<td>Mixpanel tracking for your book</td>
</tr>
</tbody>
</table>
<h5 id="其它插件:">其它插件:</h5>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/GitbookIO/plugin-ga" target="_blank" rel="external">Google Analytics</a></td>
<td>Google Analytics tracking for your book</td>
</tr>
<tr>
<td><a href="https://github.com/GitbookIO/plugin-disqus" target="_blank" rel="external">Disqus</a></td>
<td>Disqus comments integration in your book</td>
</tr>
<tr>
<td><a href="https://github.com/GitbookIO/plugin-autocover" target="_blank" rel="external">Autocover</a></td>
<td>Generate a cover for your book</td>
</tr>
<tr>
<td><a href="https://github.com/erixtekila/gitbook-plugin-richquotes" target="_blank" rel="external">Transform annoted quotes to notes</a></td>
<td>Allow extra markdown markup to render blockquotes as nice notes</td>
</tr>
<tr>
<td><a href="https://github.com/erixtekila/gitbook-plugin-toconsole" target="_blank" rel="external">Send code to console</a></td>
<td>Evaluate javascript block in the browser inspector’s console</td>
</tr>
<tr>
<td><a href="https://github.com/mrpotes/gitbook-plugin-reveal" target="_blank" rel="external">Revealable sections</a></td>
<td>Reveal sections of the page using buttons made from the first title in each section</td>
</tr>
<tr>
<td><a href="https://github.com/mrpotes/gitbook-plugin-nestedmd" target="_blank" rel="external">Markdown within HTML</a></td>
<td>Process markdown within HTML blocks - allows custom layout options for individual pages</td>
</tr>
<tr>
<td><a href="https://github.com/mrpotes/gitbook-plugin-bootstrapjs" target="_blank" rel="external">Bootstrap JavaScript plugins</a></td>
<td>Use the <a href="http://getbootstrap.com/javascript" target="_blank" rel="external">Bootstrap JavaScript plugins</a> in your online GitBook</td>
</tr>
<tr>
<td><a href="https://github.com/emmanuel-keller/gitbook-plugin-piwik" target="_blank" rel="external">Piwik Open Analytics</a></td>
<td>Piwik Open Analytics tracking for your book</td>
</tr>
<tr>
<td><a href="https://github.com/rlmv/gitbook-plugin-anchors" target="_blank" rel="external">Heading Anchors</a></td>
<td>Add linkable Github-style anchors to headings</td>
</tr>
<tr>
<td><a href="https://github.com/jcouyang/gitbook-plugin-jsbin" target="_blank" rel="external">JSBin</a></td>
<td>Embedded jsbin frame into your book</td>
</tr>
</tbody>
</table>
<h4 id="调试">调试</h4>
<p>增加环境变量 <code>DEBUG=true</code> 来得到更好的错误信息(包含错误堆栈). 例如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>export <span class="constant">DEBUG</span>=<span class="keyword">true</span></div><div class="line"><span class="variable">$ </span>gitbook build ./</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p>Gitbook是一个命令行工具(node.js库)， 使用Github/Git创建漂亮的图书。 你可以看一些用它编写的图书的例子： <a href="https://www.gitbook.io/book/GitBookIO/javascript" target="_blank" rel="external">学习Javascript</a>. 你也可以很容易的通过<a href="https://www.gitbook.io" target="_blank" rel="external">gitbook.io</a>网站发布在线图书。 <a href="https://github.com/GitbookIO/editor" target="_blank" rel="external">editor</a> 是一个图形化的编辑工具， 提供Windows, Mac 和Linux的版本. 关注Twitter帐号 <a href="https://twitter.com/GitBookIO" target="_blank" rel="external">@GitBookIO</a>. 这篇文章只是一个起步教程， 完整的文档可以在<a href="http://help.gitbook.io/" target="_blank" rel="external">help.gitbook.io</a>网站找到.<br>]]></summary>
    
      <category term="gitbook" scheme="http://colobu.com/tags/gitbook/"/>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用FastJson作为JAX-RS的序列化/反序列化框架]]></title>
    <link href="http://colobu.com/2014/09/30/using-fastjson-as-JAX-RS-data-binding/"/>
    <id>http://colobu.com/2014/09/30/using-fastjson-as-JAX-RS-data-binding/</id>
    <published>2014-09-30T05:37:30.000Z</published>
    <updated>2014-09-30T23:12:37.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/alibaba/fastjson" target="_blank" rel="external">FastJson</a>是阿里巴巴的<a href="https://github.com/wenshao" target="_blank" rel="external">温少</a>开发的一个JSON的序列化和反序列化的框架。 我前面的文章: <a href="http://colobu.com/2014/08/26/java-serializer-comparison/" target="_blank" rel="external">Java序列化框架性能比较</a>中也提到， 我使用第三方的序列化测试框架<a href="https://github.com/eishay/jvm-serializers" target="_blank" rel="external">jvm-serializers</a>表明， FastJson是最快的JSON序列化框架之一， 优于Jackson。</p>
<p><a href="https://jax-rs-spec.java.net/" target="_blank" rel="external">JAX-RS</a>是一个Java编程语言的应用程序接口,支持按照 表象化状态转变 (REST)架构风格创建Web服务Web服务. JAX-RS使用了Java SE 5引入的Java 标注来简化Web服务客户端和服务端的开发和部署。<br>JAX-RS的实现包括：</p>
<ul>
<li>Apache CXF，开源的Web服务框架。</li>
<li>Jersey， 由Sun提供的JAX-RS的参考实现。</li>
<li>RESTEasy，JBoss的实现。</li>
<li>Restlet，由Jerome Louvel和Dave Pawson开发，是最早的REST框架，先于JAX-RS出现。</li>
<li>Apache Wink，一个Apache软件基金会孵化器中的项目，其服务模块实现JAX-RS规范</li>
</ul>
<p>如果项目中使用JAX-RS传递JSON格式的数据， 可以利用FastJson提高序列化的性能。 但是FastJson并没有提供JAX-RS的集成（ <a href="https://github.com/alibaba/fastjson/issues/65" target="_blank" rel="external">Issue #65</a>, <a href="https://github.com/alibaba/fastjson/issues/138" target="_blank" rel="external">Issue #138</a> ）。</p>
<p>我实现了一个FastJson的JAX-RS集成框架： <a href="https://github.com/smallnest/fastjson-jaxrs-json-provider" target="_blank" rel="external">fastjson-jaxrs-json-provider
</a>,可以方便在在JAX-RS项目中使用。<br><a id="more"></a></p>
<h3 id="前言">前言</h3>
<p><code>FastJsonProvider</code> is a standard entity provider that follows JAX-RS 2.0 spec.<br>According to different JAX-RS implementations such as CXF, Jersey, maybe you use <code>FastJsonProvider</code> in appropriate styles.<br><code>FastJsonProvider</code> can serialize/deserialize specific types including:</p>
<ul>
<li>all types: <code>public FastJsonProvider()</code> (default constructor)</li>
<li>all type annotated with <code>FastJsonType</code>: <code>public FastJsonProvider(boolean annotated)</code></li>
<li>all type annotated in specific packages : <code>public FastJsonProvider(String[] scanpackages)</code></li>
<li>all type annotated in specific packages with <code>FastJsonType</code>: <code>public FastJsonProvider(String[] scanpackages, boolean annotated)</code></li>
<li>all type  in specific classes: <code>public FastJsonProvider(Class&lt;?&gt;[] clazzes)</code></li>
</ul>
<p>You can <code>init</code> this provider instance with a FastJsonConfig object which is used to configure FastJson features, SerializeConfig, ParserConfig and SerializeFilter. Any parameters can be null and will be default.</p>
<h4 id="Maven">Maven</h4>
<p><em>stable version: 0.1.0</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.colobu<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>fastjson-jaxrs-json-provider<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></div></pre></td></tr></table></figure>

<p><em>snapshot version: 0.2.0-0.2.0-SNAPSHOT</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.colobu<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>fastjson-jaxrs-json-provider<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>0.2.0-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></div></pre></td></tr></table></figure>

<h3 id="Jersey_configuration">Jersey configuration</h3>
<p>Please check the test and maybe you need to create a FastJsonFeature to override MessageBodyReader and MessageBodyWriter.</p>
<h3 id="CXF_confguration">CXF confguration</h3>
<p>You can use JAXRSServerFactoryBean.setProviders to add a <code>FastJsonProvider</code> instance.</p>
]]></content>
    <summary type="html"><![CDATA[<p><a href="https://github.com/alibaba/fastjson" target="_blank" rel="external">FastJson</a>是阿里巴巴的<a href="https://github.com/wenshao" target="_blank" rel="external">温少</a>开发的一个JSON的序列化和反序列化的框架。 我前面的文章: <a href="http://colobu.com/2014/08/26/java-serializer-comparison/" target="_blank" rel="external">Java序列化框架性能比较</a>中也提到， 我使用第三方的序列化测试框架<a href="https://github.com/eishay/jvm-serializers" target="_blank" rel="external">jvm-serializers</a>表明， FastJson是最快的JSON序列化框架之一， 优于Jackson。</p>
<p><a href="https://jax-rs-spec.java.net/" target="_blank" rel="external">JAX-RS</a>是一个Java编程语言的应用程序接口,支持按照 表象化状态转变 (REST)架构风格创建Web服务Web服务. JAX-RS使用了Java SE 5引入的Java 标注来简化Web服务客户端和服务端的开发和部署。<br>JAX-RS的实现包括：</p>
<ul>
<li>Apache CXF，开源的Web服务框架。</li>
<li>Jersey， 由Sun提供的JAX-RS的参考实现。</li>
<li>RESTEasy，JBoss的实现。</li>
<li>Restlet，由Jerome Louvel和Dave Pawson开发，是最早的REST框架，先于JAX-RS出现。</li>
<li>Apache Wink，一个Apache软件基金会孵化器中的项目，其服务模块实现JAX-RS规范</li>
</ul>
<p>如果项目中使用JAX-RS传递JSON格式的数据， 可以利用FastJson提高序列化的性能。 但是FastJson并没有提供JAX-RS的集成（ <a href="https://github.com/alibaba/fastjson/issues/65" target="_blank" rel="external">Issue #65</a>, <a href="https://github.com/alibaba/fastjson/issues/138" target="_blank" rel="external">Issue #138</a> ）。</p>
<p>我实现了一个FastJson的JAX-RS集成框架： <a href="https://github.com/smallnest/fastjson-jaxrs-json-provider" target="_blank" rel="external">fastjson-jaxrs-json-provider
</a>,可以方便在在JAX-RS项目中使用。<br>]]></summary>
    
      <category term="FastJson" scheme="http://colobu.com/tags/FastJson/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[发布开源项目到Maven Central]]></title>
    <link href="http://colobu.com/2014/09/30/deploy-a-project-to-maven-central/"/>
    <id>http://colobu.com/2014/09/30/deploy-a-project-to-maven-central/</id>
    <published>2014-09-30T05:20:31.000Z</published>
    <updated>2014-10-01T22:56:49.000Z</updated>
    <content type="html"><![CDATA[<p>最近准备将新开发的一个项目<a href="https://github.com/smallnest/fastjson-jaxrs-json-provider/blob/master/LICENSE" target="_blank" rel="external">fastjson-jaxrs-json-provider</a>发布的Maven central repository中（sonatype respository）, 这样其它人可以方便的下载编译好的库使用。 具体步骤可以参考<a href="http://central.sonatype.org/pages/ossrh-guide.html" target="_blank" rel="external">官方文档</a>。</p>
<p>搜索了一下，发现阿里的王福强的一篇文档介绍的很详细，特此转载记录以下。<br><a id="more"></a><br>原文地址： <a href="http://afoo.me/posts/2013-07-18-publishing-oss-release-to-maven-central-repo.html" target="_blank" rel="external">发布开源项目到Maven Central</a></p>
<p>过程比较繁琐曲折，其实按照官方文档一步一步做，大部分情况下是可以搞定的， 不过，为了方便后面查阅，简单整理为此文档。</p>
<h1 id="总体路线概述">总体路线概述</h1>
<p>直接发布到central repo其实是不行的，所以，其实我们是发布到sonatype的repository， 然后sonatype的repository会定期把我们的artifacts同步到maven的central repo中。</p>
<p>基本上，如果我们的项目是第一次发布到sonatype，那么需要申请一个账号，并提交New Project的Ticket等待审批，审批之后，就可以开始准备发布项目所需的各项要求了。当然，因为Ticket审批需要2个工作日，那么，其实可以在这段时间就把准备工作做掉。</p>
<p>初次发布，POM文件需要规范为sonatype要求的格式，该添加的element还是要添加一下，另外， 因为需要对要发布的artifacts做签名，也需要安装一下GnuPGP，并将public key上传到指定的key server上去(hkp://pool.sks-keyservers.net)， 并在.m2/settings.xml中添加相应的passphrase配置。</p>
<p>所有这些事儿搞定之后，就可以执行命令开始发布， 总体流程大体如此。</p>
<h1 id="申请账号并提交Ticket">申请账号并提交Ticket</h1>
<p>这一步没啥难度，参考官方文档的说明即可：</p>
<ol>
<li>到<a href="https://issues.sonatype.org/申请账号" target="_blank" rel="external">https://issues.sonatype.org/申请账号</a></li>
<li>到通过’+Create Issue’创建新的Ticket， 类型为New Project, 其它信息按照人家要求填写就行了<br>Ticket提交完了就等着就好了，人家说了要2个工作日才能审批完成，运气好估计会快点儿吧， 偶第一次因为SB网速，提交了2个相同的Ticket…</li>
</ol>
<h1 id="规范POM">规范POM</h1>
<p>这些element人家说了，必须要：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">modelVersion</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">packaging</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">licenses</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">scm</span>&gt;</span><span class="tag">&lt;<span class="title">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">scm</span>&gt;</span><span class="tag">&lt;<span class="title">connection</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">developers</span>&gt;</span></div></pre></td></tr></table></figure>

<p>另外， 除了二进制jar包，相对应的-sources.jar和-javadoc.jar也是必须的，所有这些jar以及pom.xml都需要通过PGP签名，所以，我们需要在pom.xml里添加相应的maven插件来帮助我们搞定这些：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="title">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="title">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="title">goal</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="title">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">execution</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">charset</span>&gt;</span>${file_encoding}<span class="tag">&lt;/<span class="title">charset</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">encoding</span>&gt;</span>${file_encoding}<span class="tag">&lt;/<span class="title">encoding</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="title">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="title">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="title">goal</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="title">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">execution</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></div></pre></td></tr></table></figure>

<p>我们不想任何时候都做pgp签名，这样会比较耗费时间，一般只是在发布的时候才执行pgp前面，所以，我们将maven的pgp插件放入pom.xml里单独的一个profile中：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">profiles</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">profile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">id</span>&gt;</span>release-sign-artifacts<span class="tag">&lt;/<span class="title">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">activation</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">property</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="title">name</span>&gt;</span>performRelease<span class="tag">&lt;/<span class="title">name</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="title">value</span>&gt;</span>true<span class="tag">&lt;/<span class="title">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">activation</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">build</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">plugins</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="title">plugin</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="title">executions</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="title">execution</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="title">id</span>&gt;</span>sign-artifacts<span class="tag">&lt;/<span class="title">id</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="title">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="title">phase</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="title">goals</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="title">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="title">goal</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="title">goals</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="title">execution</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="title">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="title">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">profile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">profiles</span>&gt;</span></div></pre></td></tr></table></figure>

<p>除此之外， 我们的pom应该继承自sonatype oss:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">parent</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.sonatype.oss<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>oss-parent<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">version</span>&gt;</span>7<span class="tag">&lt;/<span class="title">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">parent</span>&gt;</span></div></pre></td></tr></table></figure>

<p>并且，有关SCM的信息需要严格填写， maven将在发布的时候自动checkout并打标发布。</p>
<h1 id="配置PGP">配置PGP</h1>
<p>如果发布机上没有安装，需要安装一下， 俺本地因为是mac，所以直接下了pgptools，一键安装， very easy～</p>
<p>安装后，创建一个pgp key，并发布到指定的key server - <code>hkp://pool.sks-keyservers.net</code>， 因为pgptools默认是发布到gnu的key server，所以，需要在PGP Keychain Access.app的Preferences里将key server选择为hkp://pool.sks-keyservers.net</p>
<p>所有这些搞定之后，在~/.m2/settings.xml中添加：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">settings</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="title">servers</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">server</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">id</span>&gt;</span>sonatype-nexus-snapshots<span class="tag">&lt;/<span class="title">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">username</span>&gt;</span>your-jira-id<span class="tag">&lt;/<span class="title">username</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">password</span>&gt;</span>your-jira-pwd<span class="tag">&lt;/<span class="title">password</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">server</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">server</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">id</span>&gt;</span>sonatype-nexus-staging<span class="tag">&lt;/<span class="title">id</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">username</span>&gt;</span>your-jira-id<span class="tag">&lt;/<span class="title">username</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">password</span>&gt;</span>your-jira-pwd<span class="tag">&lt;/<span class="title">password</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">server</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">servers</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="title">settings</span>&gt;</span></div></pre></td></tr></table></figure>

<p>用户名和密码在一开始已经申请过了，填上即可。</p>
<p>更详细步骤参看 <a href="https://docs.sonatype.org/display/Repository/How+To+Generate+PGP+Signatures+With+Maven" target="_blank" rel="external">https://docs.sonatype.org/display/Repository/How+To+Generate+PGP+Signatures+With+Maven</a></p>
<h1 id="发布SNAPSHOT版本">发布SNAPSHOT版本</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>mvn clean deploy</div></pre></td></tr></table></figure>

<h1 id="发布Staging版本">发布Staging版本</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mvn <span class="operator"><span class="keyword">release</span>:clean</span></div><div class="line">$ mvn <span class="keyword">release</span>:<span class="keyword">prepare</span></div><div class="line">$ mvn <span class="keyword">release</span>:perform</div></pre></td></tr></table></figure>

<p>期间会提示需要输入pgp key的passphrase，照办就是了。<br>哥的Ticket当天没批下来，所以，运行会告诉我没有权限上传artifacts: </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[ERROR] Failed to <span class="operator"><span class="keyword">execute</span> goal org.apache.maven.plugins:maven-deploy-<span class="keyword">plugin</span>:<span class="number">2.5</span>:deploy (<span class="keyword">default</span>-deploy) <span class="keyword">on</span> project cobar-client: </span></div><div class="line">Failed <span class="keyword">to</span> deploy artifacts: Could <span class="keyword">not</span> transfer artifact com.alibaba.cobar:cobar-client:jar:<span class="number">1.0</span><span class="number">.5</span> <span class="keyword">from</span>/<span class="keyword">to</span> </div><div class="line">sonatype-nexus-staging (https://oss.sonatype.org/service/<span class="keyword">local</span>/staging/deploy/maven2/): </div><div class="line">Access denied <span class="keyword">to</span>: https://oss.sonatype.org/service/<span class="keyword">local</span>/staging/deploy/maven2/com/alibaba/cobar/cobar-client/<span class="number">1.0</span><span class="number">.5</span>/cobar-client-<span class="number">1.0</span><span class="number">.5</span>.jar -&gt; [<span class="keyword">Help</span> <span class="number">1</span>]</div></pre></td></tr></table></figure>

<p>没办法，等吧～</p>
<h1 id="正式发布">正式发布</h1>
<p>访问web地址： <a href="https://oss.sonatype.org/" target="_blank" rel="external">https://oss.sonatype.org/</a></p>
<p>登陆， 选择左边栏里的”Staging Repositories”, 然后点Close按钮，sonatype会做响应的validation，通过的话，就可以点Release发布啦，如果不通过，或者人工检查有问题，就先Drop，并重新做Staging发布， 知道搞定之后，再行发布。 没Release之前随便搞， Release之后就板上钉钉了。</p>
<h1 id="总结">总结</h1>
<p>第一次搞需要拢的东西比较多，而且很久没搞Maven了(俺现在搞SBT比较多，u know的)， 所以，搞的期间偶尔出点儿小问题刺挠刺挠我，都是小事儿，总体上来讲， 官方文档还是比较靠谱的。</p>
<h1 id="参考资料">参考资料</h1>
<ol>
<li><a href="http://central.sonatype.org/pages/ossrh-guide.html" target="_blank" rel="external">官方文档</a></li>
<li><a href="http://datumedge.blogspot.com/2012/05/publishing-from-github-to-maven-central.html" target="_blank" rel="external">http://datumedge.blogspot.com/2012/05/publishing-from-github-to-maven-central.html</a></li>
<li><a href="https://docs.sonatype.org/display/Repository/How+To+Generate+PGP+Signatures+With+Maven" target="_blank" rel="external">https://docs.sonatype.org/display/Repository/How+To+Generate+PGP+Signatures+With+Maven</a></li>
</ol>
<hr>
<p>第一次发布有些周折， 请参看另外一篇文章: <a href="http://www.trinea.cn/dev-tools/upload-java-jar-or-android-aar-to-maven-center-repository/" target="_blank" rel="external">上传Android或Java库到Maven central repository</a>:</p>
<p>前面的步骤都一样， 下面转载后面几个章节。</p>
<h1 id="编译上传">编译上传</h1>
<h2 id="(1)_发布一个snapshot版本发布一个snapshot版本">(1) 发布一个snapshot版本发布一个snapshot版本</h2>
<p><code>mvn clean deploy</code><br>发布完成后登陆<a href="https://oss.sonatype.org" target="_blank" rel="external">https://oss.sonatype.org</a> (<a href="https://issues.sonatype.org/" target="_blank" rel="external">https://issues.sonatype.org/</a> 上的用户名和密码)，通过下图步骤找到自己的Artifact(上传的jar或aar或pom等)</p>
<p><img src="https://farm8.staticflickr.com/7326/13974246558_7738361c05_o.jpg" alt=""></p>
<h2 id="(2)_发布一个release版本">(2) 发布一个release版本</h2>
<p><code>mvn release:clean release:prepare release:perform</code></p>
<p>过程中需要通过GPG签名，需要输入上面的passphase。发布完成后我们依然可以通过类似上图步骤找到我们的Artifact</p>
<p>其他上传方式见<a href="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-7a.3.StageaRelease" target="_blank" rel="external">Stage a Release</a></p>
<h1 id="正式发布-1">正式发布</h1>
<p>这里的正式发布是指同步到Maven主仓库使得其他人可以使用。主要包括Close和Release两步，先Close后Release，分别如下图<br><img src="https://docs.sonatype.org/download/attachments/6619276/staging_close.png?version=1&amp;modificationDate=1279720013166" alt=""><br><img src="https://docs.sonatype.org/download/attachments/6619284/staging_release.png?version=1&amp;modificationDate=1279720544670" alt=""></p>
<p>其他不明白可以查看：<a href="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8a.ReleaseIt" target="_blank" rel="external">Release</a></p>
<p>需要注意</p>
<p><strong>(1) 在release时可能会出现</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Release failed</div><div class="line">Nexus returned an <span class="keyword">error</span>: <span class="keyword">ERROR</span> <span class="number">403</span>: Forbidden</div></pre></td></tr></table></figure>

<p>的403弹窗，这可能是因为在2中创建的JIRA ticket，状态还没有变为 <code>resolved</code>，等待可用即可。如果上面截图中你的Repository列表中Profile列的值不是你在创建JIRA ticket时的Group Id需要重新提交。</p>
<p>(2) 如果是第一次release，需要到之前你的JIRA ticket下，评论下告诉他们，你已经release了，需要同步下，我的JIRA ticket: OSSRH-9800.  如下图：<br><img src="https://farm8.staticflickr.com/7453/14197792294_0afd471357_o.jpg" alt=""></p>
]]></content>
    <summary type="html"><![CDATA[<p>最近准备将新开发的一个项目<a href="https://github.com/smallnest/fastjson-jaxrs-json-provider/blob/master/LICENSE" target="_blank" rel="external">fastjson-jaxrs-json-provider</a>发布的Maven central repository中（sonatype respository）, 这样其它人可以方便的下载编译好的库使用。 具体步骤可以参考<a href="http://central.sonatype.org/pages/ossrh-guide.html" target="_blank" rel="external">官方文档</a>。</p>
<p>搜索了一下，发现阿里的王福强的一篇文档介绍的很详细，特此转载记录以下。<br>]]></summary>
    
      <category term="Maven" scheme="http://colobu.com/tags/Maven/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ZooKeeper程序员指南]]></title>
    <link href="http://colobu.com/2014/09/28/ZooKeeper-Programmers-Guide/"/>
    <id>http://colobu.com/2014/09/28/ZooKeeper-Programmers-Guide/</id>
    <published>2014-09-28T02:06:08.000Z</published>
    <updated>2014-09-28T04:21:55.000Z</updated>
    <content type="html"><![CDATA[<p>翻译于最新的<a href="http://zookeeper.apache.org/doc/trunk/zookeeperProgrammers.html" target="_blank" rel="external">ZooKeeper 3.4 文档</a>。</p>
<h1 id="前言">前言</h1>
<p>本文档是为那些希望利用ZooKeeper的协调服务建立分布式应用程序的开发人员而写的指南。它包含了Zookeeper的概念和实践内容。<br>指南的前四节介绍了ZooKeeper各种概念的高层次的讨论。 对于理解ZooKeeper如何工作和如何使用它这些概念都是必须了解的。尽管不包含代码，但还是假定你熟悉分布式计算相关的问题。<br>第一组的章节包括：</p>
<ul>
<li>ZooKeeper数据模型： The ZooKeeper Data Model</li>
<li>ZooKeeper的会话： ZooKeeper Sessions</li>
<li>ZooKeeper的监视： ZooKeeper Watches</li>
<li>一致性保证：Consistency Guarantees<br><em>(下面的翻译中概念尽量不翻译成中文，因为英文更能直观的反映其概念)</em></li>
</ul>
<p>接下来的四个章节提供了编程实践信息，它们是:</p>
<ul>
<li>Building Blocks: A Guide to ZooKeeper Operations</li>
<li>Bindings</li>
<li>Program Structure, with Simple Example [tbd]</li>
<li>Gotchas: Common Problems and Troubleshooting</li>
</ul>
<p>附录中的链接是其它的有用的,和ZooKeeper相关的信息.<br>书中的章节都可以独立阅读，然而在开发你的第一个ZooKeeper程序之前， 你最好先阅读一下ZooKeeper数据模型和ZooKeeper基本操作。Simple Programmming Example对于理解ZooKeeper客户端程序的基本结构也很有帮助.<br><a id="more"></a></p>
<h1 id="ZooKeeper数据模型：_The_ZooKeeper_Data_Model">ZooKeeper数据模型： The ZooKeeper Data Model</h1>
<p>ZooKeeper包含一个分层次的命名空间，很像分布式的文件系统. 唯一的不同是除了包含子节点外命名空间的每个节点还可以关联数据. 就像一个扩展的文件系统一样， 文件也可以是目录. 节点的路径(path)总是规范的斜线分隔的绝对路径;绝没有相对路径. 任意的unicode字符都可以做路径名， 除了以下的限制：:</p>
<ul>
<li>空字符(\u0000)不能做路径名的一部分. (主要考虑C语言)</li>
<li>以下字符不能使用。 因为它们不能显示或不易显示: \u0001 - \u001F and \u007F - \u009F.</li>
<li>以下字符也不可以: \ud800 - uF8FF, \uFFF0 - uFFFF.</li>
<li>“.” 字符可以作为路径名的一部分，但是 “.” 和 “..” 不能单独做路径名， 因为ZooKeeper不使用相对路径。 后面这几个路径都是非法的: “/a/b/./c” or “/a/b/../c”.</li>
<li>“zookeeper” 是保留关键字.</li>
</ul>
<h2 id="ZNode节点">ZNode节点</h2>
<p>ZooKeeper树中的每一个节点都被成<code>znode</code>. Znode维护一个stat数据结构， 包含数据变动的版本值， acl变动等(version numbers for data changes, acl changes)。 stat数据结构还包含时间戳(timestamp)。 版本和时间戳可以允许ZooKeeper校验缓存和协同更新。每次znode的数据改变，版本号都会增加。例如，无论何时一个节点获取数据时， 它都会得到数据的版本。 当节点执行更新或者删除操作时， 它必须提供它要改变的znode数据的版本。假如它提供的版本和数据的实际版本不一致，更新失败。 (这个行为可以被覆盖overriden,更多的信息请参考 [tbd…])</p>
<blockquote>
<p><strong>Note</strong>: 在分布式应用工程学上，单词<code>node</code> 可以指一个通用的主机，服务器， 集群中的一员， 一个客户端进程等。 而在ZooKeeper文档中，<code>znode</code>指数据节点，<code>Server</code>指提供ZooKeeper服务器的机器; <code>quorum peers</code> 指ZooKeeper集群中的服务器; <code>client</code> 指任何使用ZooKeeper的主机或者进程.</p>
</blockquote>
<p>Znode是程序访问的主要对象. 它们有以下几个特征值得一说.</p>
<h3 id="监视Watches">监视Watches</h3>
<p>Clients can set watches on znodes. Changes to that znode trigger the watch and then clear the<br>watch. When a watch triggers, ZooKeeper sends the client a notification. More information<br>about watches can be found in the section ZooKeeper Watches.</p>
<h3 id="数据访问Data_Access">数据访问Data Access</h3>
<p>The data stored at each znode in a namespace is read and written atomically. Reads get all the<br>data bytes associated with a znode and a write replaces all the data. Each node has an Access<br>Control List (ACL) that restricts who can do what.<br>ZooKeeper was not designed to be a general database or large object store. Instead,<br>it manages coordination data. This data can come in the form of configuration, status<br>information, rendezvous, etc. A common property of the various forms of coordination data<br>is that they are relatively small: measured in kilobytes. The ZooKeeper client and the server<br>implementations have sanity checks to ensure that znodes have less than 1M of data, but the<br>data should be much less than that on average. Operating on relatively large data sizes will<br>cause some operations to take much more time than others and will affect the latencies of<br>some operations because of the extra time needed to move more data over the network and<br>onto storage media. If large data storage is needed, the usually pattern of dealing with such<br>data is to store it on a bulk storage system, such as NFS or HDFS, and store pointers to the<br>storage locations in ZooKeeper.</p>
<h3 id="临时节点Ephemeral_Nodes">临时节点Ephemeral Nodes</h3>
<p>ZooKeeper also has the notion of ephemeral nodes. These znodes exists as long as the<br>session that created the znode is active. When the session ends the znode is deleted. Because<br>of this behavior ephemeral znodes are not allowed to have children.</p>
<h3 id="顺序节点Sequence_Nodes_—_Unique_Naming">顺序节点Sequence Nodes — Unique Naming</h3>
<p>When creating a znode you can also request that ZooKeeper append a monotonically<br>increasing counter to the end of path. This counter is unique to the parent znode. The counter<br>has a format of %010d — that is 10 digits with 0 (zero) padding (the counter is formatted in<br>this way to simplify sorting), i.e. “<path>0000000001”. See Queue Recipefor an example<br>use of this feature. Note: the counter used to store the next sequence number is a signed int<br>(4bytes) maintained by the parent node, the counter will overflow when incremented beyond<br>2147483647 (resulting in a name “<path>-2147483647”).</p>
<h2 id="ZooKeeper中的时间">ZooKeeper中的时间</h2>
<p>ZooKeeper tracks time multiple ways:</p>
<ul>
<li><strong>Zxid</strong><br>Every change to the ZooKeeper state receives a stamp in the form of a zxid(ZooKeeper<br>Transaction Id). This exposes the total ordering of all changes to ZooKeeper. Each<br>change will have a unique zxid and if zxid1 is smaller than zxid2 then zxid1 happened<br>before zxid2.</li>
<li><strong>Version numbers</strong><br>Every change to a node will cause an increase to one of the version numbers of that<br>node. The three version numbers are version (number of changes to the data of a znode),<br>cversion (number of changes to the children of a znode), and aversion (number of<br>changes to the ACL of a znode).</li>
<li><strong>Ticks</strong><br>When using multi-server ZooKeeper, servers use ticks to define timing of events such as<br>status uploads, session timeouts, connection timeouts between peers, etc. The tick time is<br>only indirectly exposed through the minimum session timeout (2 times the tick time); if a client requests a session timeout less than the minimum session timeout, the server will<br>tell the client that the session timeout is actually the minimum session timeout.</li>
<li><strong>Real time</strong><br>ZooKeeper doesn’t use real time, or clock time, at all except to put timestamps into the<br>stat structure on znode creation and znode modification.</li>
</ul>
<h2 id="ZooKeeper_Stat数据结构">ZooKeeper Stat数据结构</h2>
<p>The Stat structure for each znode in ZooKeeper is made up of the following fields:</p>
<ul>
<li><strong>czxid</strong><br>The zxid of the change that caused this znode to be created.</li>
<li><strong>mzxid</strong><br>The zxid of the change that last modified this znode.</li>
<li><strong>ctime</strong><br>The time in milliseconds from epoch when this znode was created.</li>
<li><strong>mtime</strong><br>The time in milliseconds from epoch when this znode was last modified.</li>
<li><strong>version</strong><br>The number of changes to the data of this znode.</li>
<li><strong>cversion</strong><br>The number of changes to the children of this znode.</li>
<li><strong>aversion</strong><br>The number of changes to the ACL of this znode.</li>
<li><strong>ephemeralOwner</strong><br>The session id of the owner of this znode if the znode is an ephemeral node. If it is not an<br>ephemeral node, it will be zero.</li>
<li><strong>dataLength</strong><br>The length of the data field of this znode.</li>
<li><strong>numChildren</strong><br>The number of children of this znode.</li>
</ul>
<h1 id="ZooKeeper会话">ZooKeeper会话</h1>
<p>A ZooKeeper client establishes a session with the ZooKeeper service by creating a<br>handle to the service using a language binding. Once created, the handle starts of in the<br>CONNECTING state and the client library tries to connect to one of the servers that make<br>up the ZooKeeper service at which point it switches to the CONNECTED state. During normal operation will be in one of these two states. If an unrecoverable error occurs, such as<br>session expiration or authentication failure, or if the application explicitly closes the handle,<br>the handle will move to the CLOSED state. The following figure shows the possible state<br>transitions of a ZooKeeper client:<br><img src="http://zookeeper.apache.org/doc/trunk/images/state_dia.jpg" alt=""></p>
<p>To create a client session the application code must provide a connection string containing<br>a comma separated list of host:port pairs, each corresponding to a ZooKeeper server (e.g.<br>“127.0.0.1:4545” or “127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002”). The ZooKeeper client<br>library will pick an arbitrary server and try to connect to it. If this connection fails, or if the<br>client becomes disconnected from the server for any reason, the client will automatically try<br>the next server in the list, until a connection is (re-)established.<br>Added in 3.2.0: An optional “chroot” suffix may also be appended to the connection string.<br>This will run the client commands while interpreting all paths relative to this root (similar to<br>the unix chroot command). If used the example would look like: “127.0.0.1:4545/app/a” or<br>“127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002/app/a” where the client would be rooted at “/<br>app/a” and all paths would be relative to this root - ie getting/setting/etc… “/foo/bar” would<br>result in operations being run on “/app/a/foo/bar” (from the server perspective). This feature<br>is particularly useful in multi-tenant environments where each user of a particular ZooKeeper<br>service could be rooted differently. This makes re-use much simpler as each user can code<br>his/her application as if it were rooted at “/“, while actual location (say /app/a) could be<br>determined at deployment time.<br>When a client gets a handle to the ZooKeeper service, ZooKeeper creates a ZooKeeper session, represented as a 64-bit number, that it assigns to the client. If the client connects to a different ZooKeeper server, it will send the session id as a part of the connection handshake. As a security measure, the server creates a password for the session id that any ZooKeeper server can validate.The password is sent to the client with the session id when the client establishes the session. The client sends this password with the session id whenever it reestablishes the session with a new server.</p>
<p>One of the parameters to the ZooKeeper client library call to create a ZooKeeper session is the session timeout in milliseconds. The client sends a requested timeout, the server responds with the timeout that it can give the client. The current implementation requires that the timeout be a minimum of 2 times the tickTime (as set in the server configuration) and a maximum of 20 times the tickTime. The ZooKeeper client API allows access to the negotiated timeout.</p>
<p>When a client (session) becomes partitioned from the ZK serving cluster it will begin searching the list of servers that were specified during session creation. Eventually, when connectivity between the client and at least one of the servers is re-established, the session will either again transition to the “connected” state (if reconnected within the session timeout value) or it will transition to the “expired” state (if reconnected after the session timeout). It is not advisable to create a new session object (a new ZooKeeper.class or zookeeper handle in the c binding) for disconnection. The ZK client library will handle reconnect for you. In particular we have heuristics built into the client library to handle things like “herd effect”, etc… Only create a new session when you are notified of session expiration (mandatory).</p>
<p>Session expiration is managed by the ZooKeeper cluster itself, not by the client. When the ZK client establishes a session with the cluster it provides a “timeout” value detailed above. This value is used by the cluster to determine when the client’s session expires. Expirations happens when the cluster does not hear from the client within the specified session timeout period (i.e. no heartbeat). At session expiration the cluster will delete any/all ephemeral nodes owned by that session and immediately notify any/all connected clients of the change (anyone watching those znodes). At this point the client of the expired session is still disconnected from the cluster, it will not be notified of the session expiration until/unless it is able to re-establish a connection to the cluster. The client will stay in disconnected state until the TCP connection is re-established with the cluster, at which point the watcher of the expired session will receive the “session expired” notification.</p>
<p>Example state transitions for an expired session as seen by the expired session’s watcher:</p>
<ol>
<li>‘connected’ : session is established and client is communicating with cluster (client/server communication is operating properly)</li>
<li>…. client is partitioned from the cluster</li>
<li>‘disconnected’ : client has lost connectivity with the cluster</li>
<li>…. time elapses, after ‘timeout’ period the cluster expires the session, nothing is seen by client as it is disconnected from cluster</li>
<li>…. time elapses, the client regains network level connectivity with the cluster</li>
<li>‘expired’ : eventually the client reconnects to the cluster, it is then notified of the expiration</li>
</ol>
<p>Another parameter to the ZooKeeper session establishment call is the default watcher. Watchers are notified when any state change occurs in the client. For example if the client loses connectivity to the server the client will be notified, or if the client’s session expires, etc… This watcher should consider the initial state to be disconnected (i.e. before any state changes events are sent to the watcher by the client lib). In the case of a new connection, the first event sent to the watcher is typically the session connection event.</p>
<p>The session is kept alive by requests sent by the client. If the session is idle for a period of time that would timeout the session, the client will send a PING request to keep the session alive. This PING request not only allows the ZooKeeper server to know that the client is still active, but it also allows the client to verify that its connection to the ZooKeeper server is still active. The timing of the PING is conservative enough to ensure reasonable time to detect a dead connection and reconnect to a new server.</p>
<p>Once a connection to the server is successfully established (connected) there are basically two cases where the client lib generates connectionloss (the result code in c binding, exception in Java — see the API documentation for binding specific details) when either a synchronous or asynchronous operation is performed and one of the following holds:</p>
<ol>
<li>The application calls an operation on a session that is no longer alive/valid</li>
<li>The ZooKeeper client disconnects from a server when there are pending operations to that server, i.e., there is a pending asynchronous call.</li>
</ol>
<p><strong>Added in 3.2.0 — SessionMovedException.</strong> There is an internal exception that is generally not seen by clients called the SessionMovedException. This exception occurs because a request was received on a connection for a session which has been reestablished on a different server. The normal cause of this error is a client that sends a request to a server, but the network packet gets delayed, so the client times out and connects to a new server. When the delayed packet arrives at the first server, the old server detects that the session has moved, and closes the client connection. Clients normally do not see this error since they do not read from those old connections. (Old connections are usually closed.) One situation in which this condition can be seen is when two clients try to reestablish the same connection using a saved session id and password. One of the clients will reestablish the connection and the second client will be disconnected (causing the pair to attempt to re-establish its connection/session indefinitely).</p>
<p><strong>Updating the list of servers.</strong> We allow a client to update the connection string by providing a new comma separated list of host:port pairs, each corresponding to a ZooKeeper server. The function invokes a probabilistic load-balancing algorithm which may cause the client to disconnect from its current host with the goal to achieve expected uniform number of connections per server in the new list. In case the current host to which the client is connected is not in the new list this call will always cause the connection to be dropped. Otherwise, the decision is based on whether the number of servers has increased or decreased and by how much.</p>
<p>For example, if the previous connection string contained 3 hosts and now the list contains these 3 hosts and 2 more hosts, 40% of clients connected to each of the 3 hosts will move to one of the new hosts in order to balance the load. The algorithm will cause the client to drop its connection to the current host to which it is connected with probability 0.4 and in this case cause the client to connect to one of the 2 new hosts, chosen at random.</p>
<p>Another example — suppose we have 5 hosts and now update the list to remove 2 of the hosts, the clients connected to the 3 remaining hosts will stay connected, whereas all clients connected to the 2 removed hosts will need to move to one of the 3 hosts, chosen at random. If the connection is dropped, the client moves to a special mode where he chooses a new server to connect to using the probabilistic algorithm, and not just round robin.</p>
<p>In the first example, each client decides to disconnect with probability 0.4 but once the decision is made, it will try to connect to a random new server and only if it cannot connect to any of the new servers will it try to connect to the old ones. After finding a server, or trying all servers in the new list and failing to connect, the client moves back to the normal mode of operation where it picks an arbitrary server from the connectString and attempt to connect to it. If that fails, is will continue trying different random servers in round robin. (see above the algorithm used to initially choose a server)</p>
<h1 id="ZooKeeper_Watches">ZooKeeper Watches</h1>
<p>All of the read operations in ZooKeeper - getData(), getChildren(), and exists() - have the option of setting a watch as a side effect. Here is ZooKeeper’s definition of a watch: a watch event is one-time trigger, sent to the client that set the watch, which occurs when the data for which the watch was set changes. There are three key points to consider in this definition of a watch:</p>
<ul>
<li><strong>One-time trigger</strong><br>One watch event will be sent to the client when the data has changed. For example, if a client does a getData(“/znode1”, true) and later the data for /znode1 is changed or deleted, the client will get a watch event for /znode1. If /znode1 changes again, no watch event will be sent unless the client has done another read that sets a new watch.</li>
<li><strong>Sent to the client</strong><br>This implies that an event is on the way to the client, but may not reach the client before the successful return code to the change operation reaches the client that initiated the change. Watches are sent asynchronously to watchers. ZooKeeper provides an ordering guarantee: a client will never see a change for which it has set a watch until it first sees the watch event. Network delays or other factors may cause different clients to see watches and return codes from updates at different times. The key point is that everything seen by the different clients will have a consistent order.</li>
<li><strong>The data for which the watch was set</strong><br>This refers to the different ways a node can change. It helps to think of ZooKeeper as maintaining two lists of watches: data watches and child watches. getData() and exists() set data watches. getChildren() sets child watches. Alternatively, it may help to think of watches being set according to the kind of data returned. getData() and exists() return information about the data of the node, whereas getChildren() returns a list of children. Thus, setData() will trigger data watches for the znode being set (assuming the set is successful). A successful create() will trigger a data watch for the znode being created and a child watch for the parent znode. A successful delete() will trigger both a data watch and a child watch (since there can be no more children) for a znode being deleted as well as a child watch for the parent znode.</li>
</ul>
<p>Watches are maintained locally at the ZooKeeper server to which the client is connected. This allows watches to be lightweight to set, maintain, and dispatch. When a client connects to a new server, the watch will be triggered for any session events. Watches will not be received while disconnected from a server. When a client reconnects, any previously registered watches will be reregistered and triggered if needed. In general this all occurs transparently. There is one case where a watch may be missed: a watch for the existence of a znode not yet created will be missed if the znode is created and deleted while disconnected.</p>
<h2 id="Semantics_of_Watches">Semantics of Watches</h2>
<p>We can set watches with the three calls that read the state of ZooKeeper: exists, getData, and getChildren. The following list details the events that a watch can trigger and the calls that enable them:</p>
<ul>
<li><strong>Created event</strong>:<br>Enabled with a call to exists.</li>
<li><strong>Deleted event</strong>:<br>Enabled with a call to exists, getData, and getChildren.</li>
<li><strong>Changed event</strong>:<br>Enabled with a call to exists and getData.</li>
<li><strong>Child event</strong>:<br>Enabled with a call to getChildren.</li>
</ul>
<h2 id="Remove_Watches">Remove Watches</h2>
<p>We can remove the watches registered on a znode with a call to removeWatches. Also, a ZooKeeper client can remove watches locally even if there is no server connection by setting the local flag to true. The following list details the events which will be triggered after the successful watch removal.</p>
<ul>
<li><strong>Child Remove event</strong>:<br>Watcher which was added with a call to getChildren.<br><strong>Data Remove event</strong>:<br>Watcher which was added with a call to exists or getData.</li>
</ul>
<h2 id="What_ZooKeeper_Guarantees_about_Watches">What ZooKeeper Guarantees about Watches</h2>
<p>With regard to watches, ZooKeeper maintains these guarantees:</p>
<ul>
<li>Watches are ordered with respect to other events, other watches, and asynchronous replies. The ZooKeeper client libraries ensures that everything is dispatched in order.</li>
<li>A client will see a watch event for a znode it is watching before seeing the new data that corresponds to that znode.</li>
<li>The order of watch events from ZooKeeper corresponds to the order of the updates as seen by the ZooKeeper service.</li>
</ul>
<h2 id="Things_to_Remember_about_Watches">Things to Remember about Watches</h2>
<ul>
<li>Watches are one time triggers; if you get a watch event and you want to get notified of future changes, you must set another watch.</li>
<li>Because watches are one time triggers and there is latency between getting the event and sending a new request to get a watch you cannot reliably see every change that happens to a node in ZooKeeper. Be prepared to handle the case where the znode changes multiple times between getting the event and setting the watch again. (You may not care, but at least realize it may happen.)</li>
<li>A watch object, or function/context pair, will only be triggered once for a given notification. For example, if the same watch object is registered for an exists and a getData call for the same file and that file is then deleted, the watch object would only be invoked once with the deletion notification for the file.</li>
<li>When you disconnect from a server (for example, when the server fails), you will not get any watches until the connection is reestablished. For this reason session events are sent to all outstanding watch handlers. Use session events to go into a safe mode: you will not be receiving events while disconnected, so your process should act conservatively in that mode.</li>
</ul>
<h1 id="ZooKeeper_access_control_using_ACLs">ZooKeeper access control using ACLs</h1>
<p>ZooKeeper uses ACLs to control access to its znodes (the data nodes of a ZooKeeper data tree). The ACL implementation is quite similar to UNIX file access permissions: it employs permission bits to allow/disallow various operations against a node and the scope to which the bits apply. Unlike standard UNIX permissions, a ZooKeeper node is not limited by the three standard scopes for user (owner of the file), group, and world (other). ZooKeeper does not have a notion of an owner of a znode. Instead, an ACL specifies sets of ids and permissions that are associated with those ids.</p>
<p>Note also that an ACL pertains only to a specific znode. In particular it does not apply to children. For example, if /app is only readable by ip:172.16.16.1 and /app/status is world readable, anyone will be able to read /app/status; ACLs are not recursive.</p>
<p>ZooKeeper supports pluggable authentication schemes. Ids are specified using the form scheme:id, where scheme is a the authentication scheme that the id corresponds to. For example, ip:172.16.16.1 is an id for a host with the address 172.16.16.1.</p>
<p>When a client connects to ZooKeeper and authenticates itself, ZooKeeper associates all the ids that correspond to a client with the clients connection. These ids are checked against the ACLs of znodes when a clients tries to access a node. ACLs are made up of pairs of (scheme:expression, perms). The format of the expression is specific to the scheme. For example, the pair (ip:19.22.0.0/16, READ) gives the READ permission to any clients with an IP address that starts with 19.22.</p>
<h2 id="ACL_Permissions">ACL Permissions</h2>
<p>ZooKeeper supports the following permissions:</p>
<ul>
<li><strong>CREATE</strong>: you can create a child node</li>
<li><strong>READ</strong>: you can get data from a node and list its children.</li>
<li><strong>WRITE</strong>: you can set data for a node</li>
<li><strong>DELETE</strong>: you can delete a child node</li>
<li><strong>ADMIN</strong>: you can set permissions</li>
</ul>
<p>The CREATE and DELETE permissions have been broken out of the WRITE permission for finer grained access controls. The cases for CREATE and DELETE are the following:</p>
<p>You want A to be able to do a set on a ZooKeeper node, but not be able to CREATE or DELETE children.</p>
<p>CREATE without DELETE: clients create requests by creating ZooKeeper nodes in a parent directory. You want all clients to be able to add, but only request processor can delete. (This is kind of like the APPEND permission for files.)</p>
<p>Also, the ADMIN permission is there since ZooKeeper doesn’t have a notion of file owner. In some sense the ADMIN permission designates the entity as the owner. ZooKeeper doesn’t support the LOOKUP permission (execute permission bit on directories to allow you to LOOKUP even though you can’t list the directory). Everyone implicitly has LOOKUP permission. This allows you to stat a node, but nothing more. (The problem is, if you want to call zoo_exists() on a node that doesn’t exist, there is no permission to check.)</p>
<h3 id="Builtin_ACL_Schemes">Builtin ACL Schemes</h3>
<p>ZooKeeeper has the following built in schemes:</p>
<ul>
<li><strong>world</strong> has a single id, anyone, that represents anyone.</li>
<li><strong>auth</strong> doesn’t use any id, represents any authenticated user.</li>
<li><strong>digest</strong> uses a username:password string to generate MD5 hash which is then used as an ACL ID identity. Authentication is done by sending the username:password in clear text. When used in the ACL the expression will be the username:base64 encoded SHA1 password digest.</li>
<li><strong>ip</strong> uses the client host IP as an ACL ID identity. The ACL expression is of the form addr/bits where the most significant bits of addr are matched against the most significant bits of the client host IP.</li>
</ul>
<h3 id="ZooKeeper_C_client_API">ZooKeeper C client API</h3>
<p>The following constants are provided by the ZooKeeper C library:</p>
<ul>
<li>const int ZOO_PERM_READ; //can read node’s value and list its children</li>
<li>const int ZOO_PERM_WRITE;// can set the node’s value</li>
<li>const int ZOO_PERM_CREATE; //can create children</li>
<li>const int ZOO_PERM_DELETE;// can delete children</li>
<li>const int ZOO_PERM_ADMIN; //can execute set_acl()</li>
<li>const int ZOO_PERM_ALL;// all of the above flags OR’d together</li>
</ul>
<p>The following are the standard ACL IDs:</p>
<ul>
<li>struct Id ZOO_ANYONE_ID_UNSAFE; //(‘world’,’anyone’)</li>
<li>struct Id ZOO_AUTH_IDS;// (‘auth’,’’)</li>
</ul>
<p>ZOO_AUTH_IDS empty identity string should be interpreted as “the identity of the creator”.</p>
<p>ZooKeeper client comes with three standard ACLs:</p>
<ul>
<li>struct ACL_vector ZOO_OPEN_ACL_UNSAFE; //(ZOO_PERM_ALL,ZOO_ANYONE_ID_UNSAFE)</li>
<li>struct ACL_vector ZOO_READ_ACL_UNSAFE;// (ZOO_PERM_READ, ZOO_ANYONE_ID_UNSAFE)</li>
<li>struct ACL_vector ZOO_CREATOR_ALL_ACL; //(ZOO_PERM_ALL,ZOO_AUTH_IDS)</li>
</ul>
<p>The ZOO_OPEN_ACL_UNSAFE is completely open free for all ACL: any application can execute any operation on the node and can create, list and delete its children. The ZOO_READ_ACL_UNSAFE is read-only access for any application. CREATE_ALL_ACL grants all permissions to the creator of the node. The creator must have been authenticated by the server (for example, using “digest” scheme) before it can create nodes with this ACL.</p>
<p>The following ZooKeeper operations deal with ACLs:</p>
<ul>
<li>int zoo_add_auth (zhandle_t <em>zh,const char</em> scheme,const char<em> cert, int certLen, void_completion_t completion, const void </em>data);</li>
</ul>
<p>The application uses the zoo_add_auth function to authenticate itself to the server. The function can be called multiple times if the application wants to authenticate using different schemes and/or identities.</p>
<ul>
<li>int zoo_create (zhandle_t <em>zh, const char </em>path, const char <em>value,int valuelen, const struct ACL_vector </em>acl, int flags,char *realpath, int max_realpath_len);</li>
</ul>
<p>zoo_create(…) operation creates a new node. The acl parameter is a list of ACLs associated with the node. The parent node must have the CREATE permission bit set.</p>
<ul>
<li>int zoo_get_acl (zhandle_t <em>zh, const char </em>path,struct ACL_vector <em>acl, struct Stat </em>stat);</li>
</ul>
<p>This operation returns a node’s ACL info.</p>
<ul>
<li>int zoo_set_acl (zhandle_t <em>zh, const char </em>path, int version,const struct ACL_vector *acl);</li>
</ul>
<p>This function replaces node’s ACL list with a new one. The node must have the ADMIN permission set.</p>
<p>Here is a sample code that makes use of the above APIs to authenticate itself using the “foo” scheme and create an ephemeral node “/xyz” with create-only permissions.</p>
<blockquote>
<p><strong>Note:</strong> This is a very simple example which is intended to show how to interact with ZooKeeper ACLs specifically. See …/trunk/src/c/src/cli.c for an example of a proper C client implementation</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;errno.h&gt;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "zookeeper.h"</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> zhandle_t *zh;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * In this example this method gets the cert for your</div><div class="line"> *   environment -- you must provide</div><div class="line"> */</div><div class="line"><span class="keyword">char</span> *foo_get_cert_once(<span class="keyword">char</span>* id) { <span class="keyword">return</span> <span class="number">0</span>; }</div><div class="line"></div><div class="line"><span class="comment">/** Watcher function -- empty for this example, not something you should</span></div><div class="line"> * do in real code */</div><div class="line"><span class="keyword">void</span> watcher(zhandle_t *zzh, <span class="keyword">int</span> type, <span class="keyword">int</span> state, <span class="keyword">const</span> <span class="keyword">char</span> *path,</div><div class="line">             <span class="keyword">void</span> *watcherCtx) {}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> argv) {</div><div class="line">  <span class="keyword">char</span> buffer[<span class="number">512</span>];</div><div class="line">  <span class="keyword">char</span> p[<span class="number">2048</span>];</div><div class="line">  <span class="keyword">char</span> *cert=<span class="number">0</span>;</div><div class="line">  <span class="keyword">char</span> appId[<span class="number">64</span>];</div><div class="line"></div><div class="line">  <span class="built_in">strcpy</span>(appId, <span class="string">"example.foo_test"</span>);</div><div class="line">  cert = foo_get_cert_once(appId);</div><div class="line">  <span class="keyword">if</span>(cert!=<span class="number">0</span>) {</div><div class="line">    <span class="built_in">fprintf</span>(stderr,</div><div class="line">            <span class="string">"Certificate for appid [%s] is [%s]\n"</span>,appId,cert);</div><div class="line">    <span class="built_in">strncpy</span>(p,cert, <span class="keyword">sizeof</span>(p)-<span class="number">1</span>);</div><div class="line">    <span class="built_in">free</span>(cert);</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">"Certificate for appid [%s] not found\n"</span>,appId);</div><div class="line">    <span class="built_in">strcpy</span>(p, <span class="string">"dummy"</span>);</div><div class="line">  }</div><div class="line"></div><div class="line">  zoo_set_debug_level(ZOO_LOG_LEVEL_DEBUG);</div><div class="line"></div><div class="line">  zh = zookeeper_init(<span class="string">"localhost:3181"</span>, watcher, <span class="number">10000</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">  <span class="keyword">if</span> (!zh) {</div><div class="line">    <span class="keyword">return</span> errno;</div><div class="line">  }</div><div class="line">  <span class="keyword">if</span>(zoo_add_auth(zh,<span class="string">"foo"</span>,p,<span class="built_in">strlen</span>(p),<span class="number">0</span>,<span class="number">0</span>)!=ZOK)</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line"></div><div class="line">  <span class="keyword">struct</span> ACL CREATE_ONLY_ACL[] = {{ZOO_PERM_CREATE, ZOO_AUTH_IDS}};</div><div class="line">  <span class="keyword">struct</span> ACL_vector CREATE_ONLY = {<span class="number">1</span>, CREATE_ONLY_ACL};</div><div class="line">  <span class="keyword">int</span> rc = zoo_create(zh,<span class="string">"/xyz"</span>,<span class="string">"value"</span>, <span class="number">5</span>, &CREATE_ONLY, ZOO_EPHEMERAL,</div><div class="line">                      buffer, <span class="keyword">sizeof</span>(buffer)-<span class="number">1</span>);</div><div class="line"></div><div class="line">  <span class="comment">/** this operation will fail with a ZNOAUTH error */</span></div><div class="line">  <span class="keyword">int</span> buflen= <span class="keyword">sizeof</span>(buffer);</div><div class="line">  <span class="keyword">struct</span> Stat stat;</div><div class="line">  rc = zoo_get(zh, <span class="string">"/xyz"</span>, <span class="number">0</span>, buffer, &buflen, &stat);</div><div class="line">  <span class="keyword">if</span> (rc) {</div><div class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">"Error %d for %s\n"</span>, rc, __LINE__);</div><div class="line">  }</div><div class="line"></div><div class="line">  zookeeper_close(zh);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h1 id="可插拔的ZooKeeper身份验证">可插拔的ZooKeeper身份验证</h1>
<p>ZooKeeper runs in a variety of different environments with various different authentication schemes, so it has a completely pluggable authentication framework. Even the builtin authentication schemes use the pluggable authentication framework.</p>
<p>To understand how the authentication framework works, first you must understand the two main authentication operations. The framework first must authenticate the client. This is usually done as soon as the client connects to a server and consists of validating information sent from or gathered about a client and associating it with the connection. The second operation handled by the framework is finding the entries in an ACL that correspond to client. ACL entries are <idspec, permissions=""> pairs. The idspec may be a simple string match against the authentication information associated with the connection or it may be a expression that is evaluated against that information. It is up to the implementation of the authentication plugin to do the match. Here is the interface that an authentication plugin must implement:</idspec,></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthenticationProvider</span> </span>{</div><div class="line">    String getScheme();</div><div class="line">    KeeperException.Code handleAuthentication(ServerCnxn cnxn, <span class="keyword">byte</span> authData[]);</div><div class="line">    <span class="keyword">boolean</span> isValid(String id);</div><div class="line">    <span class="keyword">boolean</span> matches(String id, String aclExpr);</div><div class="line">    <span class="keyword">boolean</span> isAuthenticated();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>The first method getScheme returns the string that identifies the plugin. Because we support multiple methods of authentication, an authentication credential or an idspec will always be prefixed with scheme:. The ZooKeeper server uses the scheme returned by the authentication plugin to determine which ids the scheme applies to.</p>
<p>handleAuthentication is called when a client sends authentication information to be associated with a connection. The client specifies the scheme to which the information corresponds. The ZooKeeper server passes the information to the authentication plugin whose getScheme matches the scheme passed by the client. The implementor of handleAuthentication will usually return an error if it determines that the information is bad, or it will associate information with the connection using cnxn.getAuthInfo().add(new Id(getScheme(), data)).</p>
<p>The authentication plugin is involved in both setting and using ACLs. When an ACL is set for a znode, the ZooKeeper server will pass the id part of the entry to the isValid(String id) method. It is up to the plugin to verify that the id has a correct form. For example, ip:172.16.0.0/16 is a valid id, but ip:host.com is not. If the new ACL includes an “auth” entry, isAuthenticated is used to see if the authentication information for this scheme that is assocatied with the connection should be added to the ACL. Some schemes should not be included in auth. For example, the IP address of the client is not considered as an id that should be added to the ACL if auth is specified.</p>
<p>ZooKeeper invokes matches(String id, String aclExpr) when checking an ACL. It needs to match authentication information of the client against the relevant ACL entries. To find the entries which apply to the client, the ZooKeeper server will find the scheme of each entry and if there is authentication information from that client for that scheme, matches(String id, String aclExpr) will be called with id set to the authentication information that was previously added to the connection by handleAuthentication and aclExpr set to the id of the ACL entry. The authentication plugin uses its own logic and matching scheme to determine if id is included in aclExpr.</p>
<p>There are two built in authentication plugins: ip and digest. Additional plugins can adding using system properties. At startup the ZooKeeper server will look for system properties that start with “zookeeper.authProvider.” and interpret the value of those properties as the class name of an authentication plugin. These properties can be set using the -Dzookeeeper.authProvider.X=com.f.MyAuth or adding entries such as the following in the server configuration file:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">authProvider<span class="number">.1</span>=com.f.MyAuth</div><div class="line">authProvider<span class="number">.2</span>=com.f.MyAuth2</div></pre></td></tr></table></figure>

<p>Care should be taking to ensure that the suffix on the property is unique. If there are duplicates such as <code>-Dzookeeeper.authProvider.X=com.f.MyAuth -Dzookeeper.authProvider.X=com.f.MyAuth2</code>, only one will be used. Also all servers must have the same plugins defined, otherwise clients using the authentication schemes provided by the plugins will have problems connecting to some servers. </p>
<h1 id="一致性保证_Consistency_Guarantees">一致性保证 Consistency Guarantees</h1>
<p>ZooKeeper is a high performance, scalable service. Both reads and write operations are designed to be fast, though reads are faster than writes. The reason for this is that in the case of reads, ZooKeeper can serve older data, which in turn is due to ZooKeeper’s consistency guarantees:</p>
<p><strong>Sequential Consistency</strong><br>  Updates from a client will be applied in the order that they were sent.</p>
<p><strong>Atomicity</strong><br>  Updates either succeed or fail — there are no partial results.</p>
<p><strong>Single System Image</strong><br>  A client will see the same view of the service regardless of the server that it connects to.</p>
<p><strong>Reliability</strong><br>  Once an update has been applied, it will persist from that time forward until a client overwrites the update. This guarantee has two corollaries:</p>
<ol>
<li>If a client gets a successful return code, the update will have been applied. On some failures (communication errors, timeouts, etc) the client will not know if the update has applied or not. We take steps to minimize the failures, but the guarantee is only present with successful return codes. (This is called the monotonicity condition in Paxos.)</li>
<li>Any updates that are seen by the client, through a read request or successful update, will never be rolled back when recovering from server failures.</li>
</ol>
<p><strong>Timeliness</strong><br>  The clients view of the system is guaranteed to be up-to-date within a certain time bound (on the order of tens of seconds). Either system changes will be seen by a client within this bound, or the client will detect a service outage.</p>
<p>Using these consistency guarantees it is easy to build higher level functions such as leader election, barriers, queues, and read/write revocable locks solely at the ZooKeeper client (no additions needed to ZooKeeper). See Recipes and Solutions for more details.</p>
<blockquote>
<p><strong>Note:</strong> Sometimes developers mistakenly assume one other guarantee that ZooKeeper does not in fact make. This is:<br>Simultaneously Consistent Cross-Client Views<br> ZooKeeper does not guarantee that at every instance in time, two different clients will have identical views of ZooKeeper data. Due to factors like network delays, one client may perform an update before another client gets notified of the change. Consider the scenario of two clients, A and B. If client A sets the value of a znode /a from 0 to 1, then tells client B to read /a, client B may read the old value of 0, depending on which server it is connected to. If it is important that Client A and Client B read the same value, Client B should should call the sync() method from the ZooKeeper API method before it performs its read.<br> So, ZooKeeper by itself doesn’t guarantee that changes occur synchronously across all servers, but ZooKeeper primitives can be used to construct higher level functions that provide useful client synchronization. (For more information, see the ZooKeeper Recipes. [tbd:..]).</p>
</blockquote>
<h1 id="绑定Binding">绑定Binding</h1>
<p>The ZooKeeper client libraries come in two languages: Java and C. The following sections describe these.</p>
<h2 id="Java_Binding">Java Binding</h2>
<p>here are two packages that make up the ZooKeeper Java binding: <strong>org.apache.zookeeper and org.apache.zookeeper.data</strong>. The rest of the packages that make up ZooKeeper are used internally or are part of the server implementation. The <strong>org.apache.zookeeper.data</strong> package is made up of generated classes that are used simply as containers.</p>
<p>The main class used by a ZooKeeper Java client is the ZooKeeper class. Its two constructors differ only by an optional session id and password. ZooKeeper supports session recovery accross instances of a process. A Java program may save its session id and password to stable storage, restart, and recover the session that was used by the earlier instance of the program.</p>
<p>When a ZooKeeper object is created, two threads are created as well: an IO thread and an event thread. All IO happens on the IO thread (using Java NIO). All event callbacks happen on the event thread. Session maintenance such as reconnecting to ZooKeeper servers and maintaining heartbeat is done on the IO thread. Responses for synchronous methods are also processed in the IO thread. All responses to asynchronous methods and watch events are processed on the event thread. There are a few things to notice that result from this design:</p>
<ul>
<li>All completions for asynchronous calls and watcher callbacks will be made in order, one at a time. The caller can do any processing they wish, but no other callbacks will be processed during that time.</li>
<li>Callbacks do not block the processing of the IO thread or the processing of the synchronous calls.</li>
<li>Synchronous calls may not return in the correct order. For example, assume a client does the following processing: issues an asynchronous read of node /a with watch set to true, and then in the completion callback of the read it does a synchronous read of /a. (Maybe not good practice, but not illegal either, and it makes for a simple example.)<br>Note that if there is a change to /a between the asynchronous read and the synchronous read, the client library will receive the watch event saying /a changed before the response for the synchronous read, but because the completion callback is blocking the event queue, the synchronous read will return with the new value of /a before the watch event is processed.</li>
</ul>
<p>Finally, the rules associated with shutdown are straightforward: once a ZooKeeper object is closed or receives a fatal event (SESSION_EXPIRED and AUTH_FAILED), the ZooKeeper object becomes invalid. On a close, the two threads shut down and any further access on zookeeper handle is undefined behavior and should be avoided. </p>
<h2 id="C_Binding">C Binding</h2>
<p>The C binding has a single-threaded and multi-threaded library. The multi-threaded library is easiest to use and is most similar to the Java API. This library will create an IO thread and an event dispatch thread for handling connection maintenance and callbacks. The single-threaded library allows ZooKeeper to be used in event driven applications by exposing the event loop used in the multi-threaded library.</p>
<p>The package includes two shared libraries: zookeeper_st and zookeeper_mt. The former only provides the asynchronous APIs and callbacks for integrating into the application’s event loop. The only reason this library exists is to support the platforms were a pthread library is not available or is unstable (i.e. FreeBSD 4.x). In all other cases, application developers should link with zookeeper_mt, as it includes support for both Sync and Async API.</p>
<h3 id="Installation">Installation</h3>
<p>If you’re building the client from a check-out from the Apache repository, follow the steps outlined below. If you’re building from a project source package downloaded from apache, skip to step <strong>3</strong>.</p>
<ol>
<li>Run ant compile_jute from the ZooKeeper top level directory (…/trunk). This will create a directory named “generated” under …/trunk/src/c.</li>
<li>Change directory to the…/trunk/src/c and run <code>autoreconf</code> -if to bootstrap <code>autoconf</code>, <code>automake</code> and <code>libtool</code>. Make sure you have autoconf version 2.59 or greater installed. Skip to step <strong>4</strong>.</li>
<li>If you are building from a project source package, unzip/untar the source tarball and cd to the zookeeper-x.x.x/src/c directory.</li>
<li>Run ./configure <your-options> to generate the makefile. Here are some of options the configure utility supports that can be useful in this step:<ul>
<li>—enable-debug<br>Enables optimization and enables debug info compiler options. (Disabled by default.)</li>
<li>—without-syncapi<br>Disables Sync API support; zookeeper_mt library won’t be built. (Enabled by default.)</li>
<li>—disable-static<br>Do not build static libraries. (Enabled by default.)</li>
<li>—disable-shared<br>Do not build shared libraries. (Enabled by default.)<blockquote>
<p><strong>Note:</strong> See INSTALL for general information about running configure.</p>
</blockquote>
</li>
</ul>
</your-options></li>
<li>Run make or make install to build the libraries and install them.</li>
<li>To generate doxygen documentation for the ZooKeeper API, run make doxygen-doc. All documentation will be placed in a new subfolder named docs. By default, this command only generates HTML. For information on other document formats, run ./configure —help</li>
</ol>
<h3 id="Using_the_C_Client">Using the C Client</h3>
<p>You can test your client by running a ZooKeeper server (see instructions on the project wiki page on how to run it) and connecting to it using one of the cli applications that were built as part of the installation procedure. cli_mt (multithreaded, built against zookeeper_mt library) is shown in this example, but you could also use cli_st (singlethreaded, built against zookeeper_st library):</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cli_mt zookeeper_hos<span class="variable">t:9876</span></div></pre></td></tr></table></figure>

<p>This is a client application that gives you a shell for executing simple ZooKeeper commands. Once successfully started and connected to the server it displays a shell prompt. You can now enter ZooKeeper commands. For example, to create a node:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="blockquote">&gt; create /my_new_node</span></div></pre></td></tr></table></figure>

<p>To verify that the node’s been created:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">ls</span> /</div></pre></td></tr></table></figure>

<p>You should see a list of node who are children of the root node “/“.</p>
<p>In order to be able to use the ZooKeeper API in your application you have to remember to</p>
<ol>
<li>Include ZooKeeper header: #include <zookeeper zookeeper.h=""></zookeeper></li>
<li>If you are building a multithreaded client, compile with -DTHREADED compiler flag to enable the multi-threaded version of the library, and then link against against the zookeeper_mt library. If you are building a single-threaded client, do not compile with -DTHREADED, and be sure to link against the zookeeper_st library.</li>
</ol>
<p>Refer to Program Structure, with Simple Example for examples of usage in Java and C. [tbd] </p>
<h1 id="Building_Blocks:_A_Guide_to_ZooKeeper_Operations">Building Blocks: A Guide to ZooKeeper Operations</h1>
<p>This section surveys all the operations a developer can perform against a ZooKeeper server. It is lower level information than the earlier concepts chapters in this manual, but higher level than the ZooKeeper API Reference. It covers these topics:</p>
<ul>
<li><a href="http://zookeeper.apache.org/doc/trunk/zookeeperProgrammers.html#sc_connectingToZk" target="_blank" rel="external">Connecting to ZooKeeper</a></li>
</ul>
<h2 id="Handling_Errors">Handling Errors</h2>
<p>Both the Java and C client bindings may report errors. The Java client binding does so by throwing KeeperException, calling code() on the exception will return the specific error code. The C client binding returns an error code as defined in the enum ZOO_ERRORS. API callbacks indicate result code for both language bindings. See the API documentation (javadoc for Java, doxygen for C) for full details on the possible errors and their meaning.</p>
<h2 id="Connecting_to_ZooKeeper">Connecting to ZooKeeper</h2>
<h2 id="Read_Operations">Read Operations</h2>
<h2 id="Write_Operations">Write Operations</h2>
<h2 id="Handling_Watches">Handling Watches</h2>
<h2 id="Miscelleaneous_ZooKeeper_Operations">Miscelleaneous ZooKeeper Operations</h2>
<h1 id="Program_Structure,_with_Simple_Example">Program Structure, with Simple Example</h1>
<h1 id="Gotchas:_Common_Problems_and_Troubleshooting">Gotchas: Common Problems and Troubleshooting</h1>
<p>So now you know ZooKeeper. It’s fast, simple, your application works, but wait … something’s wrong. Here are some pitfalls that ZooKeeper users fall into:</p>
<ol>
<li>If you are using watches, you must look for the connected watch event. When a ZooKeeper client disconnects from a server, you will not receive notification of changes until reconnected. If you are watching for a znode to come into existance, you will miss the event if the znode is created and deleted while you are disconnected.</li>
<li>You must test ZooKeeper server failures. The ZooKeeper service can survive failures as long as a majority of servers are active. The question to ask is: can your application handle it? In the real world a client’s connection to ZooKeeper can break. (ZooKeeper server failures and network partitions are common reasons for connection loss.) The ZooKeeper client library takes care of recovering your connection and letting you know what happened, but you must make sure that you recover your state and any outstanding requests that failed. Find out if you got it right in the test lab, not in production - test with a ZooKeeper service made up of a several of servers and subject them to reboots.</li>
<li>The list of ZooKeeper servers used by the client must match the list of ZooKeeper servers that each ZooKeeper server has. Things can work, although not optimally, if the client list is a subset of the real list of ZooKeeper servers, but not if the client lists ZooKeeper servers not in the ZooKeeper cluster.</li>
<li>Be careful where you put that transaction log. The most performance-critical part of ZooKeeper is the transaction log. ZooKeeper must sync transactions to media before it returns a response. A dedicated transaction log device is key to consistent good performance. Putting the log on a busy device will adversely effect performance. If you only have one storage device, put trace files on NFS and increase the snapshotCount; it doesn’t eliminate the problem, but it can mitigate it.</li>
<li>Set your Java max heap size correctly. It is very important to avoid swapping. Going to disk unnecessarily will almost certainly degrade your performance unacceptably. Remember, in ZooKeeper, everything is ordered, so if one request hits the disk, all other queued requests hit the disk.</li>
<li>To avoid swapping, try to set the heapsize to the amount of physical memory you have, minus the amount needed by the OS and cache. The best way to determine an optimal heap size for your configurations is to run load tests. If for some reason you can’t, be conservative in your estimates and choose a number well below the limit that would cause your machine to swap. For example, on a 4G machine, a 3G heap is a conservative estimate to start with.</li>
</ol>
<p>Outside the formal documentation, there’re several other sources of information for ZooKeeper developers.<br>[tbd]</p>
<p><strong>ZooKeeper Whitepaper [tbd: find url]</strong><br>The definitive discussion of ZooKeeper design and performance, by Yahoo! Research<br><strong>API Reference [tbd: find url]</strong><br>The complete reference to the ZooKeeper API<br><strong>ZooKeeper Talk at the Hadoup Summit 2008</strong><br>A video introduction to ZooKeeper, by Benjamin Reed of Yahoo! Research<br><strong>Barrier and Queue Tutorial</strong><br>The excellent Java tutorial by Flavio Junqueira, implementing simple barriers and producer-consumer queues using ZooKeeper.<br>ZooKeeper - A Reliable, Scalable Distributed Coordination System<br><strong>An article by Todd Hoff (07/15/2008)</strong><br><strong>ZooKeeper Recipes</strong><br>Pseudo-level discussion of the implementation of various synchronization solutions with ZooKeeper: Event Handles, Queues, Locks, and Two-phase Commits.<br><strong>[tbd]</strong><br>Any other good sources anyone can think of…</p>
]]></content>
    <summary type="html"><![CDATA[<p>翻译于最新的<a href="http://zookeeper.apache.org/doc/trunk/zookeeperProgrammers.html" target="_blank" rel="external">ZooKeeper 3.4 文档</a>。</p>
<h1 id="前言">前言</h1>
<p>本文档是为那些希望利用ZooKeeper的协调服务建立分布式应用程序的开发人员而写的指南。它包含了Zookeeper的概念和实践内容。<br>指南的前四节介绍了ZooKeeper各种概念的高层次的讨论。 对于理解ZooKeeper如何工作和如何使用它这些概念都是必须了解的。尽管不包含代码，但还是假定你熟悉分布式计算相关的问题。<br>第一组的章节包括：</p>
<ul>
<li>ZooKeeper数据模型： The ZooKeeper Data Model</li>
<li>ZooKeeper的会话： ZooKeeper Sessions</li>
<li>ZooKeeper的监视： ZooKeeper Watches</li>
<li>一致性保证：Consistency Guarantees<br><em>(下面的翻译中概念尽量不翻译成中文，因为英文更能直观的反映其概念)</em></li>
</ul>
<p>接下来的四个章节提供了编程实践信息，它们是:</p>
<ul>
<li>Building Blocks: A Guide to ZooKeeper Operations</li>
<li>Bindings</li>
<li>Program Structure, with Simple Example [tbd]</li>
<li>Gotchas: Common Problems and Troubleshooting</li>
</ul>
<p>附录中的链接是其它的有用的,和ZooKeeper相关的信息.<br>书中的章节都可以独立阅读，然而在开发你的第一个ZooKeeper程序之前， 你最好先阅读一下ZooKeeper数据模型和ZooKeeper基本操作。Simple Programmming Example对于理解ZooKeeper客户端程序的基本结构也很有帮助.<br>]]></summary>
    
      <category term="Zookeeper" scheme="http://colobu.com/tags/Zookeeper/"/>
    
      <category term="大数据" scheme="http://colobu.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hadoop生态圈一览]]></title>
    <link href="http://colobu.com/2014/09/26/hadoop-ecosystem-at-a-glance/"/>
    <id>http://colobu.com/2014/09/26/hadoop-ecosystem-at-a-glance/</id>
    <published>2014-09-26T09:02:36.000Z</published>
    <updated>2014-09-28T00:43:53.000Z</updated>
    <content type="html"><![CDATA[<p>Hadoop是一个大规模的分布式可扩展的批处理大数据框架(PB级别)，可以运行于千台服务器的集群。</p>
<p>最近几年Hadoop生态圈持续成长。 涌现了很多的关于工具和框架的术语。 也有很多的组织基于Hadoop进行研究和创新， 使Hadoop变得越来越好，越来越容易。基于作者的几周的潜心研究， 他提供了一个思维脑图， 描绘了Hadoop的生态圈， 可以帮助我们了解Hadoop生态圈的全貌。<br><a id="more"></a><br>英文原址: <a href="http://www.neevtech.com/blog/2013/03/18/hadoop-ecosystem-at-a-glance/" target="_blank" rel="external">Hadoop Ecosystem at a glance</a></p>
<p><img src="http://www.neevtech.com/blog/wp-content/uploads/2013/03/hadoop.png" alt=""></p>
<h1 id="Core">Core</h1>
<ul>
<li><strong>HDFS</strong>: Hadoop Distribute File System (HDFS) is a distributed file system designed to run on a commodity cluster of machines. HDFS is highly fault tolerant and is useful for processing large data sets. A Map Reduce job, described below, typically processes data stored in HDFS. Files in HDFS are split into blocks, typically 64MB or 128MB, and stored across nodes in the cluster. Each block of data is also replicated across more nodes, generally three, in the cluster to avoid data loss in case of a node failure.</li>
<li><strong>MapReduce</strong>: MapReduce is a software framework for processing large data sets, petabyte scale, on a cluster of commodity hardware.  When MapReduce jobs are run, Hadoop splits the input and locates the nodes on the cluster. The actual jobs are then run at or close to the node where the data is residing so that the data is as close to the computation node as possible. This avoids transfer of huge amount of data across the network so that the network does not become a bottleneck or get flooded.</li>
</ul>
<p>Distributions</p>
<ul>
<li><strong>Apache</strong>: Purely Open Source distribution of Hadoop maintained by the community at Apache Software Foundation.</li>
<li><strong>Cloudera</strong>: Cloudera’s distribution of Hadoop that is built on top of Apache Hadoop. The distribution includes capabilities such as management, security, high availability and integration with a wide variety of hardware and software solutions. Cloudera is the leading distributor of Hadoop.</li>
<li><strong>Horton Works</strong>: This also builds on the Open Source Apache Hadoop with claims to enterprise readiness. It also claims to be the only distribution that is available for Windows servers.</li>
<li><strong>MapR</strong>: Hadoop distribution with some unique features, most notably the ability to mount the Hadoop cluster over NFS.</li>
<li><strong>Intel</strong>: Intel’s Open Source version of Hadoop distribution.</li>
<li><strong>Greenplum</strong>:  Greenplum’s distribution is called Pivotal HD. One of the highlights of this distribution is a SQL-based database engine on Hadoop that allows querying of data in Hadoop using SQL.</li>
<li><strong>Amazon EMR</strong> : Amazon’s hosted version of MapReduce is called Elastic Map Reduce. This is part of the Amazon Web Services (AWS). EMR allows a Hadoop cluster to be deployed and MapReduce jobs to be run in the AWS cloud with just a few clicks.</li>
</ul>
<p>Related Projects</p>
<ul>
<li><strong>Avro</strong>: Avro is a data serialization framework that is useful in Hadoop and other systems. The framework allows one to define schema which is language independent so that data can be interchanged between different languages.e.g  A Hadoop client in a different language can use Avro as the data serialization framework to communicate with the Hadoop server which is in Java.</li>
<li><strong>Pig</strong>: Framework for analyzing large data sets using a high level language called Pig Latin. Scripts written in Pig Latin are compiled by the framework in MapReduce jobs which are run on the Hadoop cluster. Pig eases development of MapReduce jobs. A set of MapReduce jobs which may take hundreds of lines of code can be written with just few lines of Pig Latin scripts. At Yahoo &gt; 60% of Hadoop usage is on Pig.</li>
<li><strong>Hive</strong> : Hive is a data warehouse framework that stores querying of large data sets stored in Hadoop. To do this, Hive provides a high-level SQL like language called HiveQL. Traditional MapReduce programs can be plugged into HiveQL where its more efficient to have these instead of HiveQL.</li>
<li><strong>HBase</strong> : HBase is a distributed scalable data store based on Hadoop. HBase is a distributed, versioned, column-oriented database modeled after Google’s BigTable.</li>
<li><strong>Mahout</strong> : Mahout is a scalable Machine learning library. Mahout utilizes Hadoop to achieve massive scalability.</li>
<li><strong>YARN</strong> : YARN is the next generation of MapReduce a.k.a MapReduce 2. The MapReduce framework was overhauled using YARN to overcome the scalability bottlenecks in earlier version of MapReduce when it was run over a very large cluster(thousands of nodes).</li>
<li><strong>Ozzie</strong> : In a real life scenario, a MapReduce deployment typically involves running a sequence of MapReduce and other pre and post processing jobs at scheduled times or based on data availability. Ozzie is a workflow scheduler system that eases the creation and management of these workflows. A workflow is defined using XML in which one can do HDFS operations, run MapReduce jobs, Pig scripts, Streaming jobs, branching, chaining, etc.</li>
<li><strong>Flume</strong> : A distributed, reliable and available service for collecting, aggregating and moving log data to HDFS. This is typically useful in systems where log data needs to be moved to HDFS periodically for processing.</li>
<li><strong>Sqoop</strong> : Sqoop is designed for transferring data between Hadoop and relational databases.</li>
<li><strong>Cascading</strong> : Application framework for building applications using Hadoop.</li>
</ul>
<p>Related Technologies</p>
<p>Below is a list of related BigData technologies but which follow an architecture different from Hadoop.</p>
<ul>
<li><strong>Twitter Storm</strong> : As opposed to Hadoop which is a batch processing system, Storm is a distributed real-time processing system developed by Twitter. Storm is fast, scalable and easy to use.</li>
<li><strong>HPCC</strong> : High Performance Computing Cluster (HPCC) is an MPP (Massive Parallel Processing) computing platform for solving Big Data problems. HPCC follows an architecture different from Hadoop. It boasts a few differences and advantages over Hadoop.</li>
<li><strong>Dremel</strong> : A scalable interactive ad-hoc query system for analysis of read-only nested data by Google. Google’s BigQuery service is reportedly based on Dremel.</li>
</ul>
<p>This is not an exhaustive list and there may be many other projects, tools, and organizations related to Hadoop. I have tried to touch the most popular ones here.</p>
<p>In future posts, I wish to talk in detail about some of the less-talked-about projects in the above list but which can be really useful in day-to-day running and managing of a Hadoop cluster.</p>
]]></content>
    <summary type="html"><![CDATA[<p>Hadoop是一个大规模的分布式可扩展的批处理大数据框架(PB级别)，可以运行于千台服务器的集群。</p>
<p>最近几年Hadoop生态圈持续成长。 涌现了很多的关于工具和框架的术语。 也有很多的组织基于Hadoop进行研究和创新， 使Hadoop变得越来越好，越来越容易。基于作者的几周的潜心研究， 他提供了一个思维脑图， 描绘了Hadoop的生态圈， 可以帮助我们了解Hadoop生态圈的全貌。<br>]]></summary>
    
      <category term="Hadoop" scheme="http://colobu.com/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://colobu.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最佳免费的网站性能测试工具]]></title>
    <link href="http://colobu.com/2014/09/26/best-free-website-speed-testing-tools/"/>
    <id>http://colobu.com/2014/09/26/best-free-website-speed-testing-tools/</id>
    <published>2014-09-26T01:09:40.000Z</published>
    <updated>2014-09-26T01:41:59.000Z</updated>
    <content type="html"><![CDATA[<p>网站的加载速度在一定程度上来说是决定网站能否成功的关键。如果您是网站所有者，一定知道网站速度的重要性。因为没有人愿意为了打开一个网页而等老半天，换句话说，如果你的网站打开速度很慢，将流失大量的访客，甚至出现多米诺效应的不良影响。<br><a id="more"></a></p>
<p>英文原文: <a href="http://www.practicalecommerce.com/articles/4020-10-Free-Website-Speed-Tests-" target="_blank" rel="external">10 Free Website Speed Tests</a><br>梦想天空翻译整理: <a href="http://www.cnblogs.com/lhb25/p/best-free-website-speed-testing-tools.html" target="_blank" rel="external">博客园</a></p>
<h1 id="Google_PageSpeed_Insights">Google PageSpeed Insights</h1>
<p><img src="http://images.cnitblog.com/i/36987/201403/261530317497177.png" alt=""><br>首先介绍的这款网站速度和性能测试工具出自 Google，通过分析网页内容来为开发者提供提升网站加载速的建议。PageSpeed 的测试包含移动设备和桌面设备两方面，使您的网页在所有设备上都能快速加载。</p>
<h1 id="Yslow">Yslow</h1>
<p><img src="http://images.cnitblog.com/i/36987/201403/261532178117142.jpg" alt=""><br>YSlow 是最常用的网站性能分析工具之一，相信 Web 开发者特别是前端开发人员一定很熟悉。YSlow 基于一组高性能网页规则来给你提供建议，如何优化可以让网站更快。 </p>
<h1 id="Pingdom">Pingdom</h1>
<p><img src="http://images.cnitblog.com/i/36987/201403/261532309999146.jpg" alt=""><br>Pingdom 是一个伟大的工具，帮助用户确定网站加载时间并生成大量的报告，例如页面大小、浏览器缓存、性能等级等。它允许您跟踪性能历史和从不同的地理位置进行测试。在线检查网站每个元素的加载速度，生成非常详细的测试报告，帮助你轻松优化网站。</p>
<h1 id="Load_Impact">Load Impact</h1>
<p><img src="http://images.cnitblog.com/i/36987/201403/261532477807518.jpg" alt=""><br>Load Impact 帮助你为 Web 应用程序进行负载测试和性能测试。选择一个全球的负荷区，然后测试模拟客户、带宽、数据接受、每秒的请求等等。该工具显示一个漂亮的图表来测量加载时间。</p>
<h1 id="Which_Loads_Faster">Which Loads Faster</h1>
<p><img src="http://images.cnitblog.com/i/36987/201403/261535342028109.jpg" alt=""><br>这是一款开源的工具，可以在线对比两个网站的速度，例如 Google vs Bing，Apple vs Adobe 等，帮助你了解哪个网站加载更快。 </p>
<h1 id="Show_Slow">Show Slow</h1>
<p><img src="http://images.cnitblog.com/i/36987/201403/261536050931273.jpg" alt=""><br>Show Slow 是一个开源工具，帮助你监控各种网站性能指标。能够测试网站在 YSlow，Page Speed，WebPageTest 和 dynaTrace AJAX Edition 中的情况。</p>
<h1 id="GT_Matrix">GT Matrix</h1>
<p><img src="http://gtmetrix.com/" alt=""><br>GTmetrix 可以帮助你开发更快速，高效以及用户体验良好的网站。GTmetrix 结合了最流行的 Firefox 的性能组件 YSlow 和谷歌网页速度测试工具。 Gtmetrix 给目标网站评分并提供改进网站存在的问题的建议。</p>
<h1 id="Neustar_Free_Load_Testing_&amp;_Performance_Test">Neustar Free Load Testing &amp; Performance Test</h1>
<p><img src="http://images.cnitblog.com/i/36987/201403/261537227183658.jpg" alt=""><br>这是一款快速生成网站的性能数据的工具，通过对目标网站进行监控和加载测试，帮助你快速解决网站性能问题。</p>
<h1 id="Web_Page_Analyzer">Web Page Analyzer</h1>
<p><img src="http://images.cnitblog.com/i/36987/201403/261537368901962.jpg" alt=""><br>Web Page Analyzer  是一个强大的速度测试工具，为您提供了分析和描述性的网站测试结果以及如何改进它。它提供了各种功能网页速度报告，加载时间、分析和建议等等。</p>
<h1 id="WebPage_Test">WebPage Test</h1>
<p><img src="http://images.cnitblog.com/i/36987/201403/261537502338450.jpg" alt=""><br>借助 WebPage Test，你可以运行简单的测试或执行先进的测试包括多级事务、视频捕捉、内容阻塞等。你的结果将提供丰富的诊断信息，包括资源加载瀑布图，页面速度优化检查和改进的建议。</p>
<h1 id="Free_Speed_Test">Free Speed Test</h1>
<p><img src="http://images.cnitblog.com/i/36987/201403/261533597492366.jpg" alt=""><br>Free Speed Test 是一个在线的网站速度测试工具，通过在全球范围内多个数据中心来检查加载时间和速度。这将让你能够知道你的网站在世界各个角落的实际加载时间。</p>
<h1 id="Octa_Gate_Site_Timer">Octa Gate Site Timer</h1>
<p><img src="http://images.cnitblog.com/i/36987/201403/261534210151437.jpg" alt=""><br>它允许您监控用户需要多长时间下载一个或多个 Web 站点页面。当页面加载的时候，SiteTimer 会统计每个项目需要多长时间下载，包含了多少数据，然后把信息展示在一个表格中。</p>
]]></content>
    <summary type="html"><![CDATA[<p>网站的加载速度在一定程度上来说是决定网站能否成功的关键。如果您是网站所有者，一定知道网站速度的重要性。因为没有人愿意为了打开一个网页而等老半天，换句话说，如果你的网站打开速度很慢，将流失大量的访客，甚至出现多米诺效应的不良影响。<br>]]></summary>
    
      <category term="前端开发" scheme="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ember.js 技巧、诀窍和最佳实践]]></title>
    <link href="http://colobu.com/2014/09/26/Emberjs-tips-tricks-and-best-practices/"/>
    <id>http://colobu.com/2014/09/26/Emberjs-tips-tricks-and-best-practices/</id>
    <published>2014-09-26T00:57:33.000Z</published>
    <updated>2014-09-28T07:28:38.000Z</updated>
    <content type="html"><![CDATA[<p>Ember.js是一款用来创建炫酷的Web应用程序的JavaScript MV* 框架。 正像AngularJS，Backbone.js一样正在广泛的应用于现代的Web开发中, 知名用户包括 Yahoo!, Groupon, 和 ZenDesk.<br>总的来说， Ember.js还在推广之中， 国内使用它做开发的还比较少， 官方的文档也不是很完备。 所以这篇文章记录了我使用Ember中收集的一些技巧，诀窍和最佳实践， 并且会不断的更新。</p>
<p>想了解Ember.js和其它JavaScript框架的区别， 可以看这篇文章: <a href="http://www.airpair.com/js/javascript-framework-comparison" target="_blank" rel="external">AngularJS vs. Backbone.js vs. Ember.js</a>。<br><a id="more"></a></p>
<h1 id="通用">通用</h1>
<h3 id="_核心概念"><i class="fa fa-lightbulb-o"></i>  核心概念</h3>
<p><strong>Template</strong>： describes the user interface of your application by Handlebars。<br><strong>Router</strong>： The router translates a URL into a series of nested templates, each backed by a model.<br><strong>Route</strong>: A route is an object that tells the template which model it should display.<br><strong>Model</strong>： A model is an object that stores persistent state.<br><strong>Controller</strong>： A controller is an object that stores application state. A template can optionally have a controller in addition to a model, and can retrieve properties from both.<br><strong>Component</strong>： A component is a custom HTML tag whose behavior you implement using JavaScript and whose appearance you describe using Handlebars templates. </p>
<h3 id="_命名约定"><i class="fa fa-lightbulb-o"></i>  命名约定</h3>
<p>Ember.js 由Yehuda Katz创建, 他还是jQuery, Ruby on Rails 和 SproutCore核心开发组的成员。 就像Katz其它项目一样， 命名约定(convention over configuration)被广泛使用。<br>你可以查看这篇文章了解Ember.js的命名： <a href="http://colobu.com/2014/09/10/ember-naming-conventions/" target="_blank" rel="external">Ember命名规则</a></p>
<h3 id="_带Binding后缀的属性自动转为Ember-Binding对象"><i class="fa fa-lightbulb-o"></i>  带<code>Binding</code>后缀的属性自动转为<code>Ember.Binding</code>对象</h3>
<p><code>valueBinding: &quot;MyApp.someController.title&quot;</code> will create a binding from MyApp.someController.title to the value property of your object instance automatically. Now the two values will be kept in sync.</p>
<p>单向绑定: <code>bigTitlesBinding: Ember.Binding.oneWay(&quot;MyApp.preferencesController.bigTitles&quot;)</code></p>
<h3 id="View_vs-_Component">View vs. Component</h3>
<p>一句话， 尽量使用Component而不是View</p>
<blockquote>
<p>Contrarily to Ember views, an Ember component is not connected to a related Ember Controller, since it is self contained, in which regards both the data and events that it handles. In this sense, components are easier to reuse in different places of the application, as well as in different applications.<br><a href="http://raulbrito.github.io/articles/thoughts-on-ember-views-vs-components/" target="_blank" rel="external">http://raulbrito.github.io/articles/thoughts-on-ember-views-vs-components/</a></p>
</blockquote>
<h1 id="Controller">Controller</h1>
<h3 id="_转到其它页面"><i class="fa fa-lightbulb-o"></i>  转到其它页面</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">aController.transitionToRoute(<span class="string">'blogPosts'</span>);</div><div class="line">aController.transitionToRoute(<span class="string">'blogPosts.recentEntries'</span>);</div><div class="line">aController.transitionToRoute(<span class="string">'blogPost'</span>, aPost);</div><div class="line">aController.transitionToRoute(<span class="string">'blogPost'</span>, <span class="number">1</span>);</div></pre></td></tr></table></figure>

<p>转到指定的url在测试和调试的时候也可以使用，正式产品中还少用到。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">aController.transitionToRoute(<span class="string">'/'</span>);</div><div class="line">aController.transitionToRoute(<span class="string">'/blog/post/1/comment/13'</span>);</div></pre></td></tr></table></figure>



<h3 id="_访问其它Controller-_needs属性"><i class="fa fa-lightbulb-o"></i>  访问其它Controller. <code>needs</code>属性</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">App.CommentsController = Ember.ArrayController.extend({</div><div class="line">  needs: [<span class="string">'post'</span>],</div><div class="line">  postTitle: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> currentPost = <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'controllers.post'</span>); <span class="comment">// instance of App.PostController</span></div><div class="line">    <span class="keyword">return</span> currentPost.<span class="keyword">get</span>(<span class="string">'title'</span>);</div><div class="line">  }.property(<span class="string">'controllers.post.title'</span>)</div><div class="line">});</div></pre></td></tr></table></figure>

<p><code>needs</code>定义为此controller要访问的其它controllers的数组。<br>嵌套的controller也可以访问：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">App.CommentsNewController = Ember.ObjectController.extend({</div><div class="line">});</div><div class="line">App.IndexController = Ember.ObjectController.extend({</div><div class="line">  needs: [<span class="string">'commentsNew'</span>]</div><div class="line">});</div><div class="line"><span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'controllers.commentsNew'</span>); <span class="comment">// instance of App.CommentsNewController</span></div></pre></td></tr></table></figure>

<h3 id="_使用send调用定义的action"><i class="fa fa-lightbulb-o"></i>  使用<code>send</code>调用定义的<code>action</code></h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">App.WelcomeRoute = Ember.Route.extend({</div><div class="line">  actions: {</div><div class="line">    playTheme: <span class="keyword">function</span>() {</div><div class="line">       this.send(<span class="string">'playMusic'</span>, <span class="string">'theme.mp3'</span>);</div><div class="line">    },</div><div class="line">    playMusic: <span class="keyword">function</span>(track) {</div><div class="line">      // <span class="keyword">...</span></div><div class="line">    }</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_主动触发property变动事件"><i class="fa fa-lightbulb-o"></i>  主动触发property变动事件</h3>
<p><code>propertyDidChange</code>, <code>propertyWillChange</code> 即使你没有调用<code>get</code>或<code>set</code>也能触发事件。</p>
<h1 id="Route">Route</h1>
<h3 id="_一些钩子hook"><i class="fa fa-lightbulb-o"></i>  一些钩子<code>hook</code></h3>
<ul>
<li>activate Router进入此route时</li>
<li>beforeModel 在model之前调用</li>
<li>model 获取model数据</li>
<li>afterModel 当model获取到。 主要获取model时使用的是async/promise语法。</li>
<li>renderTemplate 渲染模版的钩子</li>
<li>setupController 为当前route设置钩子</li>
</ul>
<h3 id="_controllerFor"><i class="fa fa-lightbulb-o"></i>  <code>controllerFor</code></h3>
<p>在route中得到其它的controller对象。参数为the name of the route or controller。</p>
<h3 id="_modelFor得到父Route的model"><i class="fa fa-lightbulb-o"></i>  <code>modelFor</code>得到父Route的model</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">App.Router.map(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">this</span>.resource(<span class="string">'post'</span>, { path: <span class="string">'/post/:post_id'</span> }, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">this</span>.resource(<span class="string">'comments'</span>);</div><div class="line">    });</div><div class="line">});</div><div class="line"></div><div class="line">App.CommentsRoute = Ember.Route.extend({</div><div class="line">    afterModel: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">this</span>.<span class="keyword">set</span>(<span class="string">'post'</span>, <span class="keyword">this</span>.modelFor(<span class="string">'post'</span>));</div><div class="line">    }</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_transitionTo,_intermediateTransitionTo"><i class="fa fa-lightbulb-o"></i>  <code>transitionTo</code>, <code>intermediateTransitionTo</code></h3>
<p>跳转到另外的route. The route may be either a single route or route path:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.transitionTo(<span class="string">'blogPosts'</span>);</div><div class="line"><span class="keyword">this</span>.transitionTo(<span class="string">'blogPosts.recentEntries'</span>);</div><div class="line"><span class="keyword">this</span>.transitionTo(<span class="string">'blogPost'</span>, aPost);</div><div class="line"><span class="keyword">this</span>.transitionTo(<span class="string">'blogPost'</span>, <span class="number">1</span>);</div></pre></td></tr></table></figure>

<h3 id="_refresh_刷新本route及子route的model"><i class="fa fa-lightbulb-o"></i>  <code>refresh</code> 刷新本route及子route的model</h3>
<h3 id="_渲染非默认的模版"><i class="fa fa-lightbulb-o"></i>   渲染非默认的模版</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">App.PostsRoute = Ember.Route.extend({</div><div class="line">  renderTemplate: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">this</span>.render(<span class="string">'favoritePost'</span>);</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<h1 id="Model">Model</h1>
<h3 id="_使用Ember-Object的extend定义新类"><i class="fa fa-lightbulb-o"></i>  使用<code>Ember.Object</code>的<code>extend</code>定义新类</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">App.Person = Ember.Object.extend({</div><div class="line">  say: <span class="function"><span class="keyword">function</span><span class="params">(thing)</span> </span>{</div><div class="line">    alert(thing);</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<p><code>_super()</code>父类的方法。</p>
<p>创建实例: <code>var person = App.Person.create();</code></p>
<h3 id="_计算属性Computed_Properties"><i class="fa fa-lightbulb-o"></i>  计算属性Computed Properties</h3>
<p>computed properties let you declare functions as properties.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">App.Person = Ember.Object.extend({</div><div class="line">  <span class="comment">// these will be supplied by `create`</span></div><div class="line">  firstName: <span class="literal">null</span>,</div><div class="line">  lastName: <span class="literal">null</span>,</div><div class="line"></div><div class="line">  fullName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'firstName'</span>) + <span class="string">' '</span> + <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'lastName'</span>);</div><div class="line">  }.property(<span class="string">'firstName'</span>, <span class="string">'lastName'</span>)</div><div class="line">});</div><div class="line"></div><div class="line"><span class="keyword">var</span> ironMan = App.Person.create({</div><div class="line">  firstName: <span class="string">"Tony"</span>,</div><div class="line">  lastName:  <span class="string">"Stark"</span></div><div class="line">});</div><div class="line"></div><div class="line">ironMan.<span class="keyword">get</span>(<span class="string">'fullName'</span>); <span class="comment">// "Tony Stark"</span></div></pre></td></tr></table></figure>

<p>设置计算属性：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">App.Person = Ember.Object.extend({</div><div class="line">  firstName: <span class="literal">null</span>,</div><div class="line">  lastName: <span class="literal">null</span>,</div><div class="line"></div><div class="line">  fullName: <span class="function"><span class="keyword">function</span><span class="params">(key, value, previousValue)</span> </span>{</div><div class="line">    <span class="comment">// setter</span></div><div class="line">    <span class="keyword">if</span> (arguments.length &gt; <span class="number">1</span>) {</div><div class="line">      <span class="keyword">var</span> nameParts = value.split(/\s+/);</div><div class="line">      <span class="keyword">this</span>.<span class="keyword">set</span>(<span class="string">'firstName'</span>, nameParts[<span class="number">0</span>]);</div><div class="line">      <span class="keyword">this</span>.<span class="keyword">set</span>(<span class="string">'lastName'</span>,  nameParts[<span class="number">1</span>]);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// getter</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'firstName'</span>) + <span class="string">' '</span> + <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'lastName'</span>);</div><div class="line">  }.property(<span class="string">'firstName'</span>, <span class="string">'lastName'</span>)</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_@each计算"><i class="fa fa-lightbulb-o"></i>  <code>@each</code>计算</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">App.TodosController = Ember.Controller.extend({</div><div class="line">  todos: [</div><div class="line">    Ember.Object.create({ isDone: <span class="literal">true</span> }),</div><div class="line">    Ember.Object.create({ isDone: <span class="literal">false</span> }),</div><div class="line">    Ember.Object.create({ isDone: <span class="literal">true</span> })</div><div class="line">  ],</div><div class="line"></div><div class="line">  remaining: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> todos = <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'todos'</span>);</div><div class="line">    <span class="keyword">return</span> todos.filterBy(<span class="string">'isDone'</span>, <span class="literal">false</span>).<span class="keyword">get</span>(<span class="string">'length'</span>);</div><div class="line">  }.property(<span class="string">'todos.@each.isDone'</span>)</div><div class="line">});</div></pre></td></tr></table></figure>

<p>数组元素的每一个更新 （CUD或者数组重新被赋值）都会触发重新计算。</p>
<h3 id="_observers_是同步的"><i class="fa fa-lightbulb-o"></i>  <code>observers</code> 是同步的</h3>
<p>运行一次<code>Ember.run.once</code></p>
<p>Observers 在对象初始化之前不会被触发。如果想init时被触发，加上<code>.on(\&#39;init\&#39;)</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">App.Person = Ember.Object.extend({</div><div class="line">  init: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">this</span>.<span class="keyword">set</span>(<span class="string">'salutation'</span>, <span class="string">"Mr/Ms"</span>);</div><div class="line">  },</div><div class="line"></div><div class="line">  salutationDidChange: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="comment">// some side effect of salutation changing</span></div><div class="line">  }.observes(<span class="string">'salutation'</span>).on(<span class="string">'init'</span>)</div><div class="line">});</div></pre></td></tr></table></figure>

<p>增加observer:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">person.addObserver(<span class="string">'fullName'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// deal with the change</span></div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_Ember-computed(&#39;aaa&#39;,_function(){}),_Ember-observer(&#39;aaa&#39;,_function_()_{})"><i class="fa fa-lightbulb-o"></i>  <code>Ember.computed(&#39;aaa&#39;, function(){})</code>, <code>Ember.observer(&#39;aaa&#39;, function () {})</code></h3>
<p>可以写为 <code>function(){}.property(&#39;aaaa&#39;)</code>, <code>function(){}.observers(&#39;aaa&#39;)</code></p>
<h3 id="_reopen覆盖"><i class="fa fa-lightbulb-o"></i>  <code>reopen</code>覆盖</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">Person</span><span class="class">.reopen</span>(<span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">isPerson</span>:<span class="value"> true,</span></span></div><div class="line">  say: <span class="function">function</span>(thing) {</div><div class="line">    this._<span class="function">super</span>(thing + <span class="string">"!"</span>);</div><div class="line">  <span class="rule">}</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>Person.create().get(‘isPerson’) // true</p>
<h3 id="_架构"><i class="fa fa-lightbulb-o"></i>  架构</h3>
<p><img src="http://emberjs.com/images/guides/models/finding-unloaded-record-step1-diagram.png" alt=""></p>
<h3 id="_Store"><i class="fa fa-lightbulb-o"></i>  Store</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">App.Store = DS.Store.<span class="built_in">extend</span>();</div><div class="line">App.register(<span class="string">'store:main'</span>, App.Store);</div><div class="line">App.inject(<span class="string">'view'</span>, <span class="string">'store'</span>, <span class="string">'store:main'</span>);</div></pre></td></tr></table></figure>

<h3 id="_model_和_record"><i class="fa fa-lightbulb-o"></i>  model 和 record</h3>
<p>record是model的一个实例</p>
<h3 id="_adapter"><i class="fa fa-lightbulb-o"></i>  adapter</h3>
<p>负责将record和数据持久化后台结合起来。<br><code>DS.RESTAdapter</code>, <code>FixtureAdapter</code></p>
<h3 id="_Serializer"><i class="fa fa-lightbulb-o"></i>  Serializer</h3>
<p>A serializer is responsible for turning a raw JSON payload returned from your server into a record object.<br>负责将一个纯的JSON转换成record对象。</p>
<h3 id="_属性定义时，attr()类型可以不设置"><i class="fa fa-lightbulb-o"></i>  属性定义时，<code>attr()</code>类型可以不设置</h3>
<p>后台服务器返回啥就是啥。也可以指定类型。类型只能是<code>string</code>,<code>number</code>,<code>boolean</code>和<code>date</code>。<br>Date遵循 ISO 8601. 例如: 2014-05-27T12:54:01。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">firstName</span>: <span class="string">attr(),</span></div><div class="line"><span class="attribute">lastName</span>: <span class="string">attr(),</span></div><div class="line"><span class="attribute">birthday</span>: <span class="string">DS.attr('date')</span></div></pre></td></tr></table></figure>

<h3 id="_One-to-One,_One-to-Many和Many-to-Many-_hasMany"><i class="fa fa-lightbulb-o"></i>  One-to-One, One-to-Many和Many-to-Many. hasMany</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">App.User = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  profile:</span> <span class="literal">DS</span>.belongsTo(<span class="string">'profile'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line">App.Profile = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  user:</span> <span class="literal">DS</span>.belongsTo(<span class="string">'user'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line">App.Post = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  comments:</span> <span class="literal">DS</span>.hasMany(<span class="string">'comment'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line">App.Comment = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  post:</span> <span class="literal">DS</span>.belongsTo(<span class="string">'post'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line">App.Post = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  tags:</span> <span class="literal">DS</span>.hasMany(<span class="string">'tag'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line">App.Tag = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  posts:</span> <span class="literal">DS</span>.hasMany(<span class="string">'post'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line">var belongsTo = <span class="literal">DS</span>.belongsTo,</div><div class="line">    hasMany = <span class="literal">DS</span>.hasMany<span class="comment">;</span></div><div class="line"></div><div class="line">App.Comment = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  onePost:</span> belongsTo(<span class="string">'post'</span>),</div><div class="line"><span class="label">  twoPost:</span> belongsTo(<span class="string">'post'</span>),</div><div class="line"><span class="label">  redPost:</span> belongsTo(<span class="string">'post'</span>),</div><div class="line"><span class="label">  bluePost:</span> belongsTo(<span class="string">'post'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line"></div><div class="line">App.Post = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  comments:</span> hasMany(<span class="string">'comment'</span>, {</div><div class="line"><span class="label">    inverse:</span> <span class="string">'redPost'</span></div><div class="line">  })</div><div class="line">})</div></pre></td></tr></table></figure>

<h3 id="_增删改查"><i class="fa fa-lightbulb-o"></i>  增删改查</h3>
<ol>
<li>createRecord</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> store = <span class="keyword">this</span>.store;</div><div class="line"></div><div class="line"><span class="keyword">var</span> post = store.createRecord(<span class="string">'post'</span>, {</div><div class="line">  title: <span class="string">'Rails is Omakase'</span>,</div><div class="line">  body: <span class="string">'Lorem ipsum'</span></div><div class="line">});</div><div class="line"></div><div class="line">store.find(<span class="string">'user'</span>, <span class="number">1</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(user)</span> </span>{</div><div class="line">  post.<span class="keyword">set</span>(<span class="string">'author'</span>, user);</div><div class="line">});</div></pre></td></tr></table></figure>

<ol>
<li>deleteRecord/save 或者 destroyRecord<br>store.find(‘post’, 1).then(function (post) {<br>post.deleteRecord();<br>post.get(‘isDeleted’); // =&gt; true<br>post.save(); // =&gt; DELETE to /posts/1<br>});</li>
</ol>
<p>// OR<br>store.find(‘post’, 2).then(function (post) {<br>  post.destroyRecord(); // =&gt; DELETE to /posts/2<br>});</p>
<ol>
<li>push到store的缓存</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.store.<span class="keyword">push</span>(<span class="string">'album'</span>, {</div><div class="line">      id: <span class="number">1</span>,</div><div class="line">      title: <span class="string">"Fewer Moving Parts"</span>,</div><div class="line">      artist: <span class="string">"David Bazan"</span>,</div><div class="line">      songCount: <span class="number">10</span></div><div class="line">    });</div></pre></td></tr></table></figure>

<ol>
<li>save</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> onSuccess = <span class="function"><span class="keyword">function</span><span class="params">(post)</span> </span>{</div><div class="line">  <span class="keyword">self</span>.transitionToRoute(<span class="string">'posts.show'</span>, post);</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">var</span> onFail = <span class="function"><span class="keyword">function</span><span class="params">(post)</span> </span>{</div><div class="line">  <span class="comment">// deal with the failure here</span></div><div class="line">};</div><div class="line"></div><div class="line">post.save().then(onSuccess, onFail);</div></pre></td></tr></table></figure>

<ol>
<li>find<br>根据参数内部用<code>find</code>,<code>findAll</code>和<code>findQuery</code>实现。</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="reserved">var</span> posts = <span class="keyword">this</span>.store.find(<span class="string">'post'</span>); <span class="regexp">//</span><span class="function"> =&gt;</span> GET /posts</div><div class="line"><span class="reserved">var</span> posts = <span class="keyword">this</span>.store.all(<span class="string">'post'</span>); <span class="regexp">//</span><span class="function"> =&gt;</span> <span class="literal">no</span> network request</div><div class="line"><span class="reserved">var</span> aSinglePost = <span class="keyword">this</span>.store.find(<span class="string">'post'</span>, <span class="number">1</span>); <span class="regexp">//</span><span class="function"> =&gt;</span> GET /posts/<span class="number">1</span></div><div class="line"><span class="reserved">var</span> peters = <span class="keyword">this</span>.store.find(<span class="string">'person'</span>, { <span class="attribute">name</span>: <span class="string">"Peter"</span> }); <span class="regexp">//</span><span class="function"> =&gt;</span> GET to /persons?name=<span class="string">'Peter'</span></div></pre></td></tr></table></figure>

<h3 id="_model的一些方法"><i class="fa fa-lightbulb-o"></i>  model的一些方法</h3>
<p><code>incrementProperty</code><br><code>changedAttributes</code><br><code>
</code></p>
<h3 id="_Adapter的_URL_Conventions"><i class="fa fa-lightbulb-o"></i>  Adapter的 URL Conventions</h3>
<table>
<thead>
<tr>
<th>Action</th>
<th>HTTP Verb</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td>Find</td>
<td>GET</td>
<td>/people/123</td>
</tr>
<tr>
<td>Find All</td>
<td>GET</td>
<td>/people</td>
</tr>
<tr>
<td>Update</td>
<td>PUT</td>
<td>/people/123</td>
</tr>
<tr>
<td>Create</td>
<td>POST</td>
<td>/people</td>
</tr>
<tr>
<td>Delete</td>
<td>DELETE</td>
<td>/people/123</td>
</tr>
</tbody>
</table>
<h3 id="_namespace"><i class="fa fa-lightbulb-o"></i>  namespace</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="filename">App.ApplicationAdapter = DS.RESTAdapter.extend({</span></div><div class="line">  namespace: <span class="string">'api/1'</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>Requests for <code>App.Person</code> would now target <code>/api/1/people/1</code>.</p>
<h3 id="_normalizeHash"><i class="fa fa-lightbulb-o"></i>  normalizeHash</h3>
<p>如果想将JSON中的<code>lastNameOfPerson</code>关联model的<code>lastName</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">App.Person = DS.Model.extend({</div><div class="line">  lastName: DS.attr(<span class="string">'string'</span>)</div><div class="line">});</div><div class="line"></div><div class="line">App.PersonSerializer = DS.RESTSerializer.extend({</div><div class="line">  normalizeHash: {</div><div class="line">    lastNameOfPerson: <span class="function"><span class="keyword">function</span><span class="params">(hash)</span> </span>{</div><div class="line">      hash.lastName = hash.lastNameOfPerson;</div><div class="line">      <span class="keyword">delete</span> hash.lastNameOfPerson;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> hash;</div><div class="line">    }</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_Adapter的其它属性"><i class="fa fa-lightbulb-o"></i>  Adapter的其它属性</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">App.ApplicationAdapter = DS.RESTAdapter.extend({</div><div class="line">  <span class="keyword">namespace</span>: 'api/<span class="number">1</span>'</div><div class="line">});</div><div class="line"></div><div class="line">App.ApplicationAdapter = DS.RESTAdapter.extend({</div><div class="line">  host: 'https:<span class="comment">//api.example.com'</span></div><div class="line">});</div><div class="line"></div><div class="line">App.ApplicationAdapter = DS.RESTAdapter.extend({</div><div class="line">  pathForType: <span class="keyword">function</span>(<span class="class"><span class="keyword">type</span>) {</span></div><div class="line">    <span class="keyword">return</span> Ember.String.underscore(<span class="class"><span class="keyword">type</span>);</span></div><div class="line">  }</div><div class="line">});</div><div class="line"></div><div class="line">MyCustomAdapterAdapter = DS.RESTAdapter.extend({</div><div class="line">  defaultSerializer: '-<span class="keyword">default</span>'</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_定制Transformations"><i class="fa fa-lightbulb-o"></i>  定制Transformations</h3>
<p>除了内建类型<code>string</code>, <code>number</code>, <code>boolean</code>, and <code>date</code>，你可以定义新类型。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">App.CoordinatePointTransform = DS.Transform.extend({</div><div class="line">  serialize: function(<span class="keyword">value</span>) {</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">value</span>.<span class="keyword">get</span>(<span class="string">'x'</span>), <span class="keyword">value</span>.<span class="keyword">get</span>(<span class="string">'y'</span>)];</div><div class="line">  },</div><div class="line">  deserialize: function(<span class="keyword">value</span>) {</div><div class="line">    <span class="keyword">return</span> Ember.create({ x: <span class="keyword">value</span>[<span class="number">0</span>], y: <span class="keyword">value</span>[<span class="number">1</span>] });</div><div class="line">  }</div><div class="line">});</div><div class="line"></div><div class="line">App.Cursor = DS.Model.extend({</div><div class="line">  position: DS.attr(<span class="string">'coordinatePoint'</span>)</div><div class="line">});</div></pre></td></tr></table></figure>

<p>数组类型</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">App.ArrayTransform = DS.Transform.extend({</div><div class="line"></div><div class="line">    deserialize: <span class="function"><span class="keyword">function</span> <span class="params">(serialized)</span> </span>{</div><div class="line"><span class="pi">        'use strict'</span>;</div><div class="line">        <span class="keyword">return</span> Ember.A(serialized);</div><div class="line">    },</div><div class="line"></div><div class="line">    serialize: <span class="function"><span class="keyword">function</span> <span class="params">(deserialized)</span> </span>{</div><div class="line"><span class="pi">        'use strict'</span>;</div><div class="line">        <span class="keyword">return</span> deserialized ? deserialized.toArray() : [];</div><div class="line">    }</div><div class="line">});</div></pre></td></tr></table></figure>

<h1 id="View">View</h1>
<h3 id="_定义view"><i class="fa fa-lightbulb-o"></i>  定义view</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"></span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">view</span> </span><span class="string">"clickable"</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">This is a clickable area!</div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">view</span></span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"></div><div class="line">App.ClickableView = Ember.View.extend({</div><div class="line">  click: <span class="function"><span class="keyword">function</span><span class="params">(evt)</span> </span>{</div><div class="line">    this.get(<span class="string">'controller'</span>).send(<span class="string">'turnItUp'</span>, <span class="number">11</span>);</div><div class="line">  }</div><div class="line">});</div><div class="line"></div><div class="line">App.PlaybackController = Ember.ObjectController.extend({</div><div class="line">  actions: {</div><div class="line">    turnItUp: <span class="function"><span class="keyword">function</span><span class="params">(level)</span></span>{</div><div class="line">      <span class="comment">//Do your thing</span></div><div class="line">    }</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_定制view元素"><i class="fa fa-lightbulb-o"></i>  定制view元素</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="filename">App.MyView = Ember.View.extend({</span></div><div class="line">  tagName: <span class="string">'span'</span></div><div class="line">});</div><div class="line"></div><div class="line"><span class="filename">App.MyView = Ember.View.extend({</span></div><div class="line">  classNames: [<span class="string">'my-view'</span>]</div><div class="line">});</div><div class="line"></div><div class="line"><span class="filename">App.MyView = Ember.View.extend({</span></div><div class="line">  classNameBindings: [<span class="string">'isUrgent'</span>],</div><div class="line">  isUrgent: true</div><div class="line">});</div><div class="line"></div><div class="line">&lt;div class=<span class="string">"ember-view is-urgent"</span>&gt;</div><div class="line"></div><div class="line"><span class="filename">App.MyView = Ember.View.extend({</span></div><div class="line">  classNameBindings: [<span class="string">'isUrgent:urgent'</span>],</div><div class="line">  isUrgent: true</div><div class="line">});</div><div class="line"></div><div class="line"><span class="filename">App.MyView = Ember.View.extend({</span></div><div class="line">  classNameBindings: [<span class="string">'isEnabled:enabled:disabled'</span>],</div><div class="line">  isEnabled: false</div><div class="line">});</div><div class="line"></div><div class="line"><span class="filename">App.MyView = Ember.View.extend({</span></div><div class="line">  tagName: <span class="string">'a'</span>,</div><div class="line">  attributeBindings: [<span class="string">'href'</span>],</div><div class="line">  href: <span class="string">"http://emberjs.com"</span></div><div class="line">});</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"></span></span><span class="expression">{{<span class="variable"><span class="keyword">view</span></span> <span class="string">"info"</span> <span class="variable">tagName</span>=<span class="string">"span"</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"><span class="expression">{{<span class="variable"><span class="keyword">view</span></span> <span class="string">"info"</span> <span class="variable">id</span>=<span class="string">"info-view"</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"><span class="expression">{{<span class="variable"><span class="keyword">view</span></span> <span class="string">"alert"</span> <span class="variable">classBinding</span>=<span class="string">"isUrgent priority"</span>}}</span><span class="xml"><span class="php"></span></span></div></pre></td></tr></table></figure>

<h3 id="_内建的view"><i class="fa fa-lightbulb-o"></i>  内建的view</h3>
<ul>
<li>Ember.Checkbox</li>
<li>Ember.TextField</li>
<li>Ember.TextArea</li>
<li>Ember.Select</li>
</ul>
<h1 id="Template">Template</h1>
<h1 id="数据枚举_Ember-Enumerable">数据枚举 Ember.Enumerable</h1>
<h3 id="_forEach"><i class="fa fa-lightbulb-o"></i>  <code>forEach</code></h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].forEach(<span class="function"><span class="keyword">function</span><span class="params">(item)</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(item);</div><div class="line">  <span class="built_in">console</span>.log(item, <span class="keyword">this</span>.indexOf(item));</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_可枚举的类型"><i class="fa fa-lightbulb-o"></i>  可枚举的类型</h3>
<ul>
<li>Array： 实现纯javascript Array并且实现 Enumerable interface</li>
<li>Ember.ArrayController</li>
<li>Ember.Set</li>
</ul>
<h3 id="_toArray()得到纯javascript数组"><i class="fa fa-lightbulb-o"></i>  <code>toArray()</code>得到纯javascript数组</h3>
<h3 id="_firstObject,_lastObject"><i class="fa fa-lightbulb-o"></i>  <code>firstObject</code>, <code>lastObject</code></h3>
<h3 id="_MAP"><i class="fa fa-lightbulb-o"></i>  MAP</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> words = [<span class="string">"goodbye"</span>, <span class="string">"cruel"</span>, <span class="string">"world"</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> emphaticWords = words.map(<span class="function"><span class="keyword">function</span><span class="params">(item)</span> </span>{</div><div class="line">  <span class="keyword">return</span> item + <span class="string">"!"</span>;</div><div class="line">});</div><div class="line"><span class="comment">// ["goodbye!", "cruel!", "world!"]</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hawaii = Ember.<span class="built_in">Object</span>.create({</div><div class="line">  capital: <span class="string">"Honolulu"</span></div><div class="line">});</div><div class="line"></div><div class="line"><span class="keyword">var</span> california = Ember.<span class="built_in">Object</span>.create({</div><div class="line">  capital: <span class="string">"Sacramento"</span></div><div class="line">});</div><div class="line"></div><div class="line"><span class="keyword">var</span> states = [hawaii, california];</div><div class="line"></div><div class="line">states.mapBy(<span class="string">'capital'</span>);</div><div class="line"><span class="comment">//=&gt; ["Honolulu", "Sacramento"]</span></div></pre></td></tr></table></figure>

<h3 id="_filter"><i class="fa fa-lightbulb-o"></i>  filter</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"></div><div class="line">arr.filter(<span class="function"><span class="keyword">function</span><span class="params">(item, index, self)</span> </span>{</div><div class="line">  <span class="keyword">if</span> (item &lt; <span class="number">4</span>) { <span class="keyword">return</span> <span class="literal">true</span>; }</div><div class="line">})</div><div class="line"></div><div class="line"><span class="comment">// returns [1,2,3]</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Todo = Ember.<span class="built_in">Object</span>.extend({</div><div class="line">  title: <span class="literal">null</span>,</div><div class="line">  isDone: <span class="literal">false</span></div><div class="line">});</div><div class="line"></div><div class="line">todos = [</div><div class="line">  Todo.create({ title: <span class="string">'Write code'</span>, isDone: <span class="literal">true</span> }),</div><div class="line">  Todo.create({ title: <span class="string">'Go to sleep'</span> })</div><div class="line">];</div><div class="line"></div><div class="line">todos.filterBy(<span class="string">'isDone'</span>, <span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="comment">// returns an Array containing only items with `isDone == true`</span></div></pre></td></tr></table></figure>

<h3 id="_Aggregate"><i class="fa fa-lightbulb-o"></i>  Aggregate</h3>
<p><code>every</code>和<code>some</code>判断集合所有元素或者部分元素是否满足条件。<br>也可以</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">people.isEvery(<span class="string">'isHappy'</span>, <span class="literal">true</span>) // <span class="literal">false</span></div><div class="line">people.isAny(<span class="string">'isHappy'</span>, <span class="literal">true</span>)  // <span class="literal">true</span></div></pre></td></tr></table></figure>

<h1 id="Helper">Helper</h1>
<p><strong> bind class </strong><br>class可以是</p>
<ul>
<li>a string return value of an object’s property. <code>&lt;img \{\{bind-attr \class=&quot;view.someProperty}}&gt;</code></li>
<li>a boolean return value of an object’s property. true插入类名， false移除类名或替换类名 <code>&lt;img \{\{bind-attr \class=&quot;view.someBool:class-name-if-true&quot;}}&gt;</code> <code>&lt;img \{\{bind-attr \class=&quot;view.someBool:class-name-if-true:class-name-if-false&quot;}}&gt;</code></li>
<li>a hard-coded value <code>&lt;img \{\{bind-attr \class=&quot;:class-name-to-always-apply&quot;}}&gt;</code></li>
</ul>
<p>复合型: <code>&lt;img \{\{bind-attr \class=&quot;:class-name-to-always-apply view.someBool:class-name-if-true view.someProperty&quot;}}&gt;</code></p>
<h3 id="_each_helper"><i class="fa fa-lightbulb-o"></i>  <code>each</code> helper</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php">Developers = [{name: <span class="string">'Yehuda'</span>},{name: <span class="string">'Tom'</span>}, {name: <span class="string">'Paul'</span>}];</span></span></div><div class="line"></div><div class="line"><span class="expression">{{<span class="begin-block">#<span class="keyword">each</span> Developers</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">  <span class="expression">{{<span class="variable">name</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">each</span></span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"></div><div class="line"><span class="expression">{{<span class="begin-block">#<span class="keyword">each</span> person <span class="keyword">in</span> Developers</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">  <span class="expression">{{<span class="variable">person.name</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">each</span></span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"></div><div class="line"><span class="expression">{{<span class="begin-block">#<span class="keyword">each</span> DeveloperNames</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">  <span class="expression">{{<span class="variable">this</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">each</span></span>}}</span><span class="xml"><span class="php"></span></span></div></pre></td></tr></table></figure>

<p>集合为空时使用<code>\{\{#each}}</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"></span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">each</span> person <span class="keyword">in</span> Developers</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">  <span class="expression">{{<span class="variable">person.name</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"><span class="expression">{{<span class="variable"><span class="keyword">else</span></span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">  &lt;p&gt;Sorry, nobody is available <span class="keyword">for</span> this task.&lt;/p&gt;</div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">each</span></span>}}</span><span class="xml"><span class="php"></span></span></div></pre></td></tr></table></figure>

<p>指定渲染用的view</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"></span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">view</span> App.MyView </span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">  <span class="expression">{{<span class="variable"><span class="keyword">each</span></span> <span class="variable"><span class="keyword">view</span>.items</span> <span class="variable">itemView</span>\<span class="variable">class</span>=<span class="string">"App.AnItemView"</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">view</span></span>}}</span><span class="xml"><span class="php"></span></span></div></pre></td></tr></table></figure>

<p>默认遍历controller的属性，可以指定<code>itemController</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php">App.DeveloperController = Ember.ObjectController.extend({</span></span></div><div class="line">  isAvailableForHire: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> !this.get(<span class="string">'model.isEmployed'</span>) && this.get(<span class="string">'model.isSeekingWork'</span>);</div><div class="line">  }.property(<span class="string">'isEmployed'</span>, <span class="string">'isSeekingWork'</span>)</div><div class="line">})</div><div class="line"></div><div class="line"></div><div class="line"><span class="expression">{{<span class="begin-block">#<span class="keyword">each</span> person <span class="keyword">in</span> developers itemController</span>=<span class="string">"developer"</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">  <span class="expression">{{<span class="variable">person.name</span>}}</span><span class="xml"><span class="php"> </span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">if</span> person.isAvailableForHire</span>}}</span><span class="xml"><span class="php">Hire me!</span></span><span class="expression">{{<span class="end-block">/<span class="keyword">if</span></span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">each</span></span>}}</span><span class="xml"><span class="php"></span></span></div></pre></td></tr></table></figure>

<h3 id="_if-else"><i class="fa fa-lightbulb-o"></i>  if-else</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"></span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">if</span> message.isTypeSuccess</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">	......</div><div class="line"> <span class="expression">{{<span class="variable"><span class="keyword">else</span></span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">	......</div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">if</span></span>}}</span><span class="xml"><span class="php"></span></span></div></pre></td></tr></table></figure>

<p>另外还提供了<code>unless</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"></span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">unless</span> hasPaid</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">  You owe: $<span class="expression">{{<span class="variable">total</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">unless</span></span>}}</span><span class="xml"><span class="php"></span></span></div></pre></td></tr></table></figure>

<h3 id="_outlet"><i class="fa fa-lightbulb-o"></i>  <code>outlet</code></h3>
<p>一个模版占位符。<br>或</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"></span></span><span class="expression">{{<span class="variable"><span class="keyword">outlet</span></span> '<span class="variable">favoritePost</span>'}}</span><span class="xml"><span class="php"></span></span></div><div class="line"><span class="expression">{{<span class="variable"><span class="keyword">outlet</span></span> '<span class="variable">posts</span>'}}</span><span class="xml"><span class="php"></span></span></div><div class="line"></div><div class="line">App.PostsRoute = Ember.Route.extend({</div><div class="line">  renderTemplate: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    this.render(<span class="string">'favoritePost'</span>, { outlet: <span class="string">'favoritePost'</span> });</div><div class="line">    this.render(<span class="string">'posts'</span>, { outlet: <span class="string">'posts'</span> });</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"></span></span><span class="expression">{{<span class="variable"><span class="keyword">outlet</span></span> <span class="variable"><span class="keyword">view</span></span>='<span class="variable">sectionContainer</span>'}}</span><span class="xml"><span class="php"></span></span></div><div class="line"></div><div class="line">App.SectionContainer = Ember.ContainerView.extend({</div><div class="line">  tagName: <span class="string">'section'</span>,</div><div class="line">  classNames: [<span class="string">'special'</span>]</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_partial_渲染另外一个页面而不改变上下文"><i class="fa fa-lightbulb-o"></i>  <code>partial</code> 渲染另外一个页面而不改变上下文</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"></span></span><span class="expression">{{<span class="variable">foo</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"><span class="expression">{{<span class="variable">partial</span> <span class="string">"nav"</span>}}</span><span class="xml"><span class="php"></span></span></div></pre></td></tr></table></figure>

<h3 id="_render_使用包含的上下文"><i class="fa fa-lightbulb-o"></i>  <code>render</code> 使用包含的上下文</h3>
<p>{{render “navigation”}}</p>
<p>Calling {{render}} from within a template will insert another template that matches the provided name. The inserted template will access its properties on its own controller (rather than the controller of the parent template).</p>
<h3 id="_view"><i class="fa fa-lightbulb-o"></i>  <code>view</code></h3>
<p>{{view}} inserts a new instance of an Ember.View into a template passing its options to the Ember.View’s create method and using the supplied block as the view’s own template.</p>
<h3 id="_view,_partial和render的区别"><i class="fa fa-lightbulb-o"></i>  <code>view</code>, <code>partial</code>和<code>render</code>的区别</h3>
<p><strong>General</strong></p>
<table>
<thead>
<tr>
<th>Helper</th>
<th>Template</th>
<th>Model</th>
<th>View</th>
<th>Controller</th>
</tr>
</thead>
<tbody>
<tr>
<td>{{partial}}</td>
<td>Specified Template</td>
<td>Current Model</td>
<td>Current View</td>
<td>Current Controller</td>
</tr>
<tr>
<td>{{view}}</td>
<td>View’s Template</td>
<td>Current Model</td>
<td>Specified View</td>
<td>Current Controller</td>
</tr>
<tr>
<td>{{render}}</td>
<td>View’s Template</td>
<td>Specified Model</td>
<td>Specified View</td>
<td>Specified Controller</td>
</tr>
</tbody>
</table>
<p><strong>Specific</strong></p>
<table>
<thead>
<tr>
<th>Helper</th>
<th>Template</th>
<th>Model</th>
<th>View</th>
<th>Controller</th>
</tr>
</thead>
<tbody>
<tr>
<td>{{partial “author”}}</td>
<td>author.hbs</td>
<td>Post</td>
<td>App.PostView</td>
<td>App.PostController</td>
</tr>
<tr>
<td>{{view “author”}}</td>
<td>author.hbs</td>
<td>Post</td>
<td>App.AuthorView</td>
<td>App.PostController</td>
</tr>
<tr>
<td>{{render “author” author}}</td>
<td>author.hbs</td>
<td>Author</td>
<td>App.AuthorView     App.AuthorController</td>
</tr>
</tbody>
</table>
<h3 id="_with_changes_scope,_as"><i class="fa fa-lightbulb-o"></i>  <code>with</code> changes scope, <code>as</code></h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"></span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">with</span> person</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">  Welcome back, &lt;b&gt;<span class="expression">{{<span class="variable">firstName</span>}}</span><span class="xml"><span class="php"> </span></span><span class="expression">{{<span class="variable">lastName</span>}}</span><span class="xml"><span class="php">&lt;/b&gt;!</span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">with</span></span>}}</span><span class="xml"><span class="php"></span></span></div></pre></td></tr></table></figure>

<h3 id="_link-to"><i class="fa fa-lightbulb-o"></i>  <code>link-to</code></h3>
<p><code>link-to (routeName, context, options) String</code><br>提供tagName: <code>\{\{#link-to &#39;photoGallery&#39; tagName=&quot;li&quot;}}  Great Hamster Photos\{\{/link-to}}</code><br>自动添加<code>\class=&quot;active&quot;</code><br>指定model: <code>\{\{#link-to &#39;photoGallery&#39; aPhoto}}  \{\{aPhoto.title}}\{\{/link-to}}</code>,  for dynamic segments或者多个model或者model id: <code>\{\{#link-to &#39;photoGallery&#39; aPhotoId}}  \{\{aPhoto.title}}\{\{/link-to}}</code></p>
<h3 id="_input"><i class="fa fa-lightbulb-o"></i>  <code>input</code></h3>
<p><code>\{\{input type=&quot;text&quot; value=firstName disabled=entryNotAllowed size=&quot;50&quot;}}</code><br>支持action: <code>\{\{input action=&quot;submit&quot;}}</code><br>支持的actions: <code>enter</code> <code>insert-newline</code> <code>escape-press</code> <code>focus-\in</code> <code>focus-out</code> <code>key-press</code> 如<code>\{\{input focus-\in=&quot;alertMessage&quot;}}</code></p>
<p>checkbox: <code>\{\{input type=&quot;checkbox&quot; name=&quot;isAdmin&quot;}}</code></p>
<h3 id="_自定义helper"><i class="fa fa-lightbulb-o"></i>  自定义<code>helper</code></h3>
<p><strong>简单语法</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Ember.Handlebars.helper(<span class="string">'highlight'</span>, <span class="function"><span class="keyword">function</span><span class="params">(value, options)</span> </span>{</div><div class="line">  <span class="keyword">var</span> escaped = Handlebars.Utils.escapeExpression(value);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Ember.Handlebars.SafeString(<span class="string">'&lt;span \class="highlight"&gt;'</span> + escaped + <span class="string">'&lt;/span&gt;'</span>);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>使用<code>\{\{highlight name}}</code></p>
<p><strong>依赖参数</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Ember.Handlebars.helper(<span class="string">'fullName'</span>, <span class="function"><span class="keyword">function</span><span class="params">(person)</span> </span>{</div><div class="line">  <span class="keyword">return</span> person.<span class="keyword">get</span>(<span class="string">'firstName'</span>) + <span class="string">' '</span> + person.<span class="keyword">get</span>(<span class="string">'lastName'</span>);</div><div class="line">}, <span class="string">'firstName'</span>, <span class="string">'lastName'</span>);</div></pre></td></tr></table></figure>

<p>使用{{fullName person}}</p>
<p><strong>定制view helper</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ember.Handlebars.helper(<span class="string">'calendar'</span>, App.CalendarView);</div></pre></td></tr></table></figure>

<p>使用<code>\{\{calendar}}</code>或者<code>\{\{view &quot;calendar&quot;}}</code></p>
<h1 id="Component">Component</h1>
<h3 id="_HTML代码代替hbs模版"><i class="fa fa-lightbulb-o"></i>  HTML代码代替hbs模版</h3>
<p>在Component和View的实现时，可以直接使用<code>Ember.Handlebars.compile</code>直接写HTML代码，不用定义一个hbs模版文件。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>: <span class="type">Ember</span>.<span class="type">Handlebars</span>.compile(<span class="string">"Greetings {{name}}"</span>)</div></pre></td></tr></table></figure>

<h3 id="_定义组件"><i class="fa fa-lightbulb-o"></i>  定义组件</h3>
<ol>
<li>template必须以<code>components/</code>开头。比如组件<code>0</code>的模版为<code>components/blog-post</code></li>
<li>组件名必须包含破折号dash 。<code>blog-post</code>合法但是<code>post</code>不合法。</li>
<li>继承<code>Ember.Component</code>或子类。 <code>blog-post</code>的类为<code>App.BlogPostComponent</code></li>
</ol>
<h3 id="组件的钩子(Hook)函数">组件的钩子(Hook)函数</h3>
<h3 id="_传给组件参数"><i class="fa fa-lightbulb-o"></i>  传给组件参数</h3>
<p><code>\{\{blog-post title=name}}</code>, name是外部对象的属性<br>一句话<code>componentProperty=outerProperty</code></p>
<h3 id="_定制组件的属性"><i class="fa fa-lightbulb-o"></i>  定制组件的属性</h3>
<p>类似view。 </p>
<h3 id="_从组件发送action给其它应用"><i class="fa fa-lightbulb-o"></i>  从组件发送action给其它应用</h3>
<p>When a component is used inside a template, it has the ability to send actions to that template’s controller and routes. These allow the component to inform the application when important events, such as the user clicking a particular element in a component, occur.<br>组件<code>\{\{my-button action=&quot;showUser&quot;}}</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">App.MyButtonComponent = Ember.Component.extend({</div><div class="line">  click: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">this</span>.sendAction();</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<p>`this.sendAction(‘action’, param1, param2);</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">App.ConfirmButtonComponent = Ember.Component.extend({</div><div class="line">  actions: {</div><div class="line">    showConfirmation: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">this</span>.toggleProperty(<span class="string">'isShowingConfirmation'</span>); </div><div class="line">    },</div><div class="line"></div><div class="line">    confirm: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">this</span>.toggleProperty(<span class="string">'isShowingConfirmation'</span>);</div><div class="line">      <span class="keyword">this</span>.sendAction(<span class="string">'deleteAction'</span>, <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'param'</span>));</div><div class="line">    }</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"></span></span><span class="expression">{{! <span class="variable">templates</span><span class="end-block">/components</span><span class="end-block">/confirm-button.handlebars </span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line"></div><div class="line"><span class="expression">{{<span class="begin-block">#<span class="keyword">if</span> isShowingConfirmation</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">  &lt;button <span class="expression">{{<span class="variable"><span class="keyword">action</span></span> <span class="string">"confirm"</span>}}</span><span class="xml"><span class="php">&gt;Click again to confirm&lt;/button&gt;</span></span></div><div class="line"><span class="expression">{{<span class="variable"><span class="keyword">else</span></span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">  &lt;button <span class="expression">{{<span class="variable"><span class="keyword">action</span></span> <span class="string">"showConfirmation"</span>}}</span><span class="xml"><span class="php">&gt;</span></span><span class="expression">{{<span class="variable">title</span>}}</span><span class="xml"><span class="php">&lt;/button&gt;</span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">if</span></span>}}</span><span class="xml"><span class="php"></span></span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"></span></span><span class="expression">{{! <span class="variable">index.handlebars</span> }}</span><span class="xml"><span class="php"></span></span></div><div class="line"></div><div class="line">    <span class="expression">{{<span class="begin-block">#<span class="keyword">each</span> todo <span class="keyword">in</span> todos</span>}}</span><span class="xml"><span class="php"></span></span></div><div class="line">      &lt;p&gt;<span class="expression">{{<span class="variable">todo.title</span>}}</span><span class="xml"><span class="php"> </span></span><span class="expression">{{<span class="variable">confirm-button</span> <span class="variable">title</span>=<span class="string">"Delete"</span> <span class="variable">deleteAction</span>=<span class="string">"deleteTodo"</span> <span class="variable">param</span>=<span class="variable">todo</span>}}</span><span class="xml"><span class="php">&lt;/p&gt;</span></span></div><div class="line">    <span class="expression">{{<span class="end-block">/<span class="keyword">each</span></span>}}</span><span class="xml"><span class="php"></span></span></div></pre></td></tr></table></figure>

<p>多action: <code>\{\{user-form submit=&quot;createUser&quot; cancel=&quot;cancelUserCreation&quot;}}</code></p>
]]></content>
    <summary type="html"><![CDATA[<p>Ember.js是一款用来创建炫酷的Web应用程序的JavaScript MV* 框架。 正像AngularJS，Backbone.js一样正在广泛的应用于现代的Web开发中, 知名用户包括 Yahoo!, Groupon, 和 ZenDesk.<br>总的来说， Ember.js还在推广之中， 国内使用它做开发的还比较少， 官方的文档也不是很完备。 所以这篇文章记录了我使用Ember中收集的一些技巧，诀窍和最佳实践， 并且会不断的更新。</p>
<p>想了解Ember.js和其它JavaScript框架的区别， 可以看这篇文章: <a href="http://www.airpair.com/js/javascript-framework-comparison" target="_blank" rel="external">AngularJS vs. Backbone.js vs. Ember.js</a>。<br>]]></summary>
    
      <category term="Ember" scheme="http://colobu.com/tags/Ember/"/>
    
      <category term="前端开发" scheme="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android Activity 生命周期详解]]></title>
    <link href="http://colobu.com/2014/09/25/android-activity-lifecycle/"/>
    <id>http://colobu.com/2014/09/25/android-activity-lifecycle/</id>
    <published>2014-09-25T05:04:45.000Z</published>
    <updated>2014-09-25T05:54:24.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://stormzhang.github.io/" target="_blank" rel="external">张奇</a> 写的关于Activity生命周期的文章。<br>关于Activity的生命周期网上也有很多文章，最经典的莫过于官方的一张图解了。<br><img src="http://stormzhang.github.io/image/activity_lifecycle.png"></p>
<a id="more"></a>

<p>这张图列出了Activity生命周期最主要的一些方法，启动后依次执行：</p>
<p><code>onCreate --&gt; onStart --&gt; onResume --&gt; onPause --&gt; onStop --&gt; onDestroy</code></p>
<p>相信很多人也都已经知道以上方法与执行顺序，但是Activity还有其他方法，如onContentChanged， onPostCreate， onPostResume， onConfigurationChanged， onSaveInstanceState， onRestoreInstanceState，没有什么比自己做个Demo亲自试验研究下更有说服力了，下面我做了一个Demo来彻底研究下这些生命周期的方法，建议大家也亲自试验下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>{</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TAG = DemoActivity.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span>(Bundle savedInstanceState) {</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        Log.d(TAG, <span class="string">"onCreate"</span>);</div><div class="line">        setContentView(R.layout.activity_demo);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onContentChanged</span>() {</div><div class="line">        <span class="keyword">super</span>.onContentChanged();</div><div class="line">        Log.d(TAG, <span class="string">"onContentChanged"</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span>() {</div><div class="line">        <span class="keyword">super</span>.onStart();</div><div class="line">        Log.d(TAG, <span class="string">"onStart"</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRestart</span>() {</div><div class="line">        <span class="keyword">super</span>.onRestart();</div><div class="line">        Log.d(TAG, <span class="string">"onRestart"</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPostCreate</span>(Bundle savedInstanceState) {</div><div class="line">        <span class="keyword">super</span>.onPostCreate(savedInstanceState);</div><div class="line">        Log.d(TAG, <span class="string">"onPostCreate"</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span>() {</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        Log.d(TAG, <span class="string">"onResume"</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPostResume</span>() {</div><div class="line">        <span class="keyword">super</span>.onPostResume();</div><div class="line">        Log.d(TAG, <span class="string">"onPostResume"</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span>() {</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        Log.d(TAG, <span class="string">"onPause"</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span>() {</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">        Log.d(TAG, <span class="string">"onStop"</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span>() {</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        Log.d(TAG, <span class="string">"onDestroy"</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span>(Configuration newConfig) {</div><div class="line">        <span class="keyword">super</span>.onConfigurationChanged(newConfig);</div><div class="line">        Log.d(TAG, <span class="string">"onConfigurationChanged"</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span>(Bundle outState) {</div><div class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">        Log.d(TAG, <span class="string">"onSaveInstanceState"</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span>(Bundle outState) {</div><div class="line">        <span class="keyword">super</span>.onRestoreInstanceState(outState);</div><div class="line">        Log.d(TAG, <span class="string">"onRestoreInstanceState"</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>程序启动运行并结束上述生命周期的方法执行顺序是这样的：</p>
<p><code>onCreate --&gt; onContentChanged --&gt; onStart --&gt; onPostCreate --&gt; onResume --&gt; onPostResume --&gt; onPause --&gt; onStop --&gt; onDestroy</code></p>
<h1 id="onContentChanged">onContentChanged</h1>
<p>onContentChanged()是Activity中的一个回调方法<br>当Activity的布局改动时，即setContentView()或者addContentView()方法执行完毕时就会调用该方法， 例如，Activity中各种View的findViewById()方法都可以放到该方法中。</p>
<h1 id="onPostCreate、onPostResume">onPostCreate、onPostResume</h1>
<p>onPostCreate方法是指onCreate方法彻底执行完毕的回调，onPostResume类似，这两个方法官方说法是一般不会重写，现在知道的做法也就只有在使用ActionBarDrawerToggle的使用在onPostCreate需要在屏幕旋转时候等同步下状态，Google官方提供的一些实例就是如下做法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostCreate</span>(Bundle savedInstanceState) {</div><div class="line">    <span class="keyword">super</span>.onPostCreate(savedInstanceState);</div><div class="line"></div><div class="line">    <span class="comment">// Sync the toggle state after onRestoreInstanceState has occurred.</span></div><div class="line">    mDrawerToggle.syncState();</div><div class="line">}</div></pre></td></tr></table></figure>



<h1 id="onPause、_onStop">onPause、 onStop</h1>
<p>这里顺便再提一下onPause、 onStop的区别， onPause是在整个窗口被半遮盖或者半透明的时候会执行，而onStop则是在整个窗口被完全遮盖才会触发， 触发onStop的方法之前必定会触发onPause方法。</p>
<h1 id="onCreate、_onStart">onCreate、 onStart</h1>
<p>onCreate方法会在第一次创建的时候执行，紧接着便会执行onStart方法，之后页面被完全遮挡会执行onStop方法，再返回的时候一般便会执行onRestart —&gt; onStart方法， 但是如果如果这时候App内存不够需要更多的内存的时候，App便会杀死该进程，结束掉该Activity，所以这时候再返回的时候便会重新执行onCreate —&gt; onStart —&gt; onResume方法。</p>
<h1 id="onSaveInstanceState、_onRestoreInstanceState">onSaveInstanceState、 onRestoreInstanceState</h1>
<p>这是一个比较深入的话题，后面会单独来讲。</p>
<p>下面结合一些特定的使用场景来分析下Activity的生命周期。</p>
<h1 id="首次启动">首次启动</h1>
<p><code>onCreate --&gt; onStart --&gt; onResume</code></p>
<h1 id="按下返回按键">按下返回按键</h1>
<p><code>onPause --&gt; onStop --&gt; onDestroy</code></p>
<h1 id="按Home键">按Home键</h1>
<p><code>onPause --&gt; onSaveInstanceState --&gt; onStop</code></p>
<h1 id="再次打开">再次打开</h1>
<p><code>onRestart --&gt; onStart --&gt; onResume</code></p>
<h1 id="屏幕旋转">屏幕旋转</h1>
<ul>
<li>如果你不做任何配置</li>
</ul>
<p>启动Activity会执行如下方法：</p>
<p><code>onCreate --&gt; onStart --&gt; onResume</code></p>
<p>之后旋转屏幕，则Activity会被销毁并重新创建，之后便会执行如下方法：</p>
<p><code>onPause --&gt; onSaveInstanceState --&gt; onStop --&gt; onDestroy --&gt; onCreate --&gt; onStart --&gt; onRestoreInstanceState --&gt; onResume</code></p>
<ul>
<li>在AndroidManifest配置文件里声明android:configChanges属性</li>
</ul>
<p>默认屏幕旋转会重新创建，当然可以通过在配置文件里加上如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:configChanges=<span class="string">"keyboardHidden|orientation|screenSize"</span>（sdk&gt;<span class="number">13</span>时需加上screenSize）</div></pre></td></tr></table></figure>



<p>这个时候再旋转屏幕便不会销毁Activity，这时候再旋转屏幕可以看到只会执行onConfigurationChanged方法，有什么在屏幕旋转的逻辑可以重写这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span>(Configuration newConfig) {</div><div class="line">    <span class="keyword">if</span> (newConfig.orientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {</div><div class="line">        <span class="comment">// TODO:</span></div><div class="line">    }</div><div class="line">    <span class="keyword">super</span>.onConfigurationChanged(newConfig);</div><div class="line">}</div></pre></td></tr></table></figure>



<h1 id="FirstActivity打开SecondActivity">FirstActivity打开SecondActivity</h1>
<p>FirstActivity打开SecondActivity，这时候FirstActivity生命周期的方法是这样的： onPause —&gt; onSaveInstanceState —&gt; onStop, 这个时候在SecondActivity按返回键，FirstActivity会有以下集中情况：</p>
<ul>
<li><p>正常情况下会执行： <code>onRestart -&gt; onStart -&gt; onResume</code></p>
</li>
<li><p>当系统由于要回收内存而把 activity 销毁时</p>
</li>
</ul>
<p>Activity在onPause或者onStop状态下都有可能遇到由于突发事件系统需要回收内存，之后的onDestroy方法便不会再执行，这时候会执行： <code>onCreate --&gt; onStart --&gt; onRestoreInstanceState --&gt; onResume</code></p>
<p>下面介绍onSaveInstanceState和onRestoreInstanceState这两个方法。</p>
<h1 id="onSaveInstanceState">onSaveInstanceState</h1>
<p>onSaveInstanceState字面理解就是保存实例的状态，当某个activity变得“容易”被系统销毁时，该activity的onSaveInstanceState就会被执行，除非该activity是被用户主动销毁的，例如当用户按BACK键的时候。</p>
<p>注意上面的双引号，何为“容易”？言下之意就是该activity还没有被销毁，而仅仅是一种可能性。这种可能性有这么几种情况：</p>
<ul>
<li>1、当用户按下HOME键时</li>
</ul>
<p>这是显而易见的，系统不知道你按下HOME后要运行多少其他的程序，自然也不知道activity A是否会被销毁，故系统会调用onSaveInstanceState，让用户有机会保存某些非永久性的数据。以下几种情况的分析都遵循该原则</p>
<ul>
<li><p>2、长按HOME键，选择运行其他的程序时。</p>
</li>
<li><p>3、按下电源按键（关闭屏幕显示）时。</p>
</li>
<li><p>4、从activity A中启动一个新的activity时。</p>
</li>
<li><p>5、屏幕方向切换时，例如从竖屏切换到横屏时。</p>
</li>
</ul>
<p>在屏幕切换之前，系统会销毁activity A，在屏幕切换之后系统又会自动地创建activity A，所以onSaveInstanceState一定会被执行</p>
<p>总而言之，onSaveInstanceState的调用遵循一个重要原则，即当系统“未经你许可”时销毁了你的activity，则onSaveInstanceState会被系统调用，这是系统的责任，因为它必须要提供一个机会让你保存你的数据（当然你不保存那就随便你了）。</p>
<h1 id="onRestoreInstanceState">onRestoreInstanceState</h1>
<p>onSaveInstanceState字面理解就是恢复实例的状态, 需要注意的是，onSaveInstanceState方法和onRestoreInstanceState方法“不一定”是成对的被调用的，onRestoreInstanceState被调用的前提是，activity A“确实”被系统销毁了，而如果仅仅是停留在有这种可能性的情况下，则该方法不会被调用，例如，当正在显示activity A的时候，用户按下HOME键回到主界面，然后用户紧接着又返回到activity A，这种情况下activity A一般不会因为内存的原因被系统销毁，故activity A的onRestoreInstanceState方法不会被执行。</p>
<p>不过大多数情况下也是很少使用onRestoreInstanceState方法的，经常我们还是在onCreate方法里直接恢复状态的，onCreate方法里本身会有一个Bundle参数的，很多时候我们是这样使用的。（onCreate在onStart之前调用，而onRestoreInstanceState是在onStart之后调用）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span>(Bundle savedInstanceState) {</div><div class="line">    <span class="keyword">super</span>.onSaveInstanceState(icicle);</div><div class="line">    savedInstanceState.putLong(<span class="string">"param"</span>, value);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span>(Bundle savedInstanceState) {</div><div class="line">    <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>){</div><div class="line">        value = savedInstanceState.getLong(<span class="string">"param"</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html"><![CDATA[<p><a href="http://stormzhang.github.io/" target="_blank" rel="external">张奇</a> 写的关于Activity生命周期的文章。<br>关于Activity的生命周期网上也有很多文章，最经典的莫过于官方的一张图解了。<br><img src="http://stormzhang.github.io/image/activity_lifecycle.png"></p>
]]></summary>
    
      <category term="Android" scheme="http://colobu.com/tags/Android/"/>
    
      <category term="Android" scheme="http://colobu.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[45个实用的JavaScript技巧、窍门和最佳实践]]></title>
    <link href="http://colobu.com/2014/09/23/45-Useful-JavaScript-Tips,-Tricks-and-Best-Practices/"/>
    <id>http://colobu.com/2014/09/23/45-Useful-JavaScript-Tips,-Tricks-and-Best-Practices/</id>
    <published>2014-09-23T09:23:07.000Z</published>
    <updated>2014-10-13T06:30:55.000Z</updated>
    <content type="html"><![CDATA[<p>如你所知，JavaScript是世上编程语言的Number One (编者按： 原文如此), 用来编写Web和移动混合应用（比如PhoneGap或者Appcelerator）， 也可以编写服务器端的程序（比如NodeJS或者Wakanda），并且拥有很多其他的实现。 它也是很多新手进入编程世界的启蒙语言，因为它不但可以在浏览器上显示一个简单的alert信息，而且还可以用来控制一个机器人（使用nodebot，或者nodruino）。掌握JavaScript并且能够写出规范并性能高效代码的开发人员，已经成为人才市场上的猎寻目标。</p>
<p>在这篇文章中，Saad Mousliki将分享一组JavaScript的技巧、窍门和最佳实践，这些都是JavaScript程序员应该知晓的，不管他们是使用在浏览器/引擎上，还是服务器端（SSJS Service Side JavaScript）JavaScript解释器上。</p>
<p>需要注意的是，这篇文章中的代码片段都在最新的Google Chrome（版本号30）上测试过，它使用V8 JavaScript引擎（V8 3.20.17.15）</p>
<a id="more"></a>

<p>英文原址: <a href="http://modernweb.com/2013/12/23/45-useful-javascript-tips-tricks-and-best-practices/" target="_blank" rel="external">45 Useful JavaScript Tips, Tricks and Best Practices </a></p>
<h1 id="列表">列表</h1>
<h3 id="_第一次给变量赋值时莫忘使用_var关键字-"><i class="fa fa-lightbulb-o"></i> 第一次给变量赋值时莫忘使用 <code>var</code>关键字.</h3>
<p>给一个未声明的变量赋值会自动产生一个全局的变量。 避免全局变量。</p>
<h3 id="_使用_===_而不是_=="><i class="fa fa-lightbulb-o"></i> 使用 === 而不是 ==</h3>
<p>操作符 == (或者 !=) 执行自动的类型转换. 操作符 === (或 !==) 不会执行任何转换，它会比较值和类型， 并且被认为比 == 更快.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[<span class="number">10</span>] === <span class="number">10</span>    <span class="comment">// is false</span></div><div class="line">[<span class="number">10</span>]  == <span class="number">10</span>    <span class="comment">// is true</span></div><div class="line"><span class="string">'10'</span> == <span class="number">10</span>     <span class="comment">// is true</span></div><div class="line"><span class="string">'10'</span> === <span class="number">10</span>    <span class="comment">// is false</span></div><div class="line"> []   == <span class="number">0</span>     <span class="comment">// is true</span></div><div class="line"> [] ===  <span class="number">0</span>     <span class="comment">// is false</span></div><div class="line"> <span class="string">''</span> == <span class="literal">false</span>   <span class="comment">// is true but true == "a" is false</span></div><div class="line"> <span class="string">''</span> ===   <span class="literal">false</span> <span class="comment">// is false</span></div></pre></td></tr></table></figure>

<h3 id="_undefined,_null,_0,_false,_NaN,_‘’_(empty_string)_都是false-"><i class="fa fa-lightbulb-o"></i> undefined, null, 0, false, NaN, ‘’ (empty string) 都是false.</h3>
<h3 id="_行尾使用分号"><i class="fa fa-lightbulb-o"></i> 行尾使用分号</h3>
<p>行尾使用分号是一个好的习惯。 尽管如果忘了加也不会被警告， 因为大部分情况 JavaScript解析器会自动加上。 这篇文章描述了为什么要加分号的细节: <a href="http://davidwalsh.name/javascript-semicolons" target="_blank" rel="external">http://davidwalsh.name/javascript-semicolons</a>.</p>
<h3 id="_创建对象的构造函数"><i class="fa fa-lightbulb-o"></i> 创建对象的构造函数</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(firstName, lastName)</span></span>{</div><div class="line">    <span class="keyword">this</span>.firstName =  firstName;</div><div class="line">    <span class="keyword">this</span>.lastName = lastName;        </div><div class="line">} </div><div class="line"><span class="keyword">var</span> Saad = <span class="keyword">new</span> Person(<span class="string">"Saad"</span>, <span class="string">"Mousliki"</span>);</div></pre></td></tr></table></figure>

<h3 id="_使用_typeof,_instanceof_和_constructor要万分小心-"><i class="fa fa-lightbulb-o"></i> 使用 typeof, instanceof 和 constructor要万分小心.</h3>
<ul>
<li>typeof : 一个JavaScript的一元操作符， 返回代表一个变量的原始primitive类型的字符串。 别忘了typeof null 返回 “object”, 并且大部分的object类型 (Array, Date, and others) 也返回 “object”.</li>
<li>constructor : 一个内部prototype属性， 可以被覆盖。</li>
<li>instanceof : 另一个JavaScript运算符， 用来在所有的prototype链的constructor。 如果找到返回true,否则false.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line"><span class="keyword">typeof</span> arr;   <span class="comment">// return "object" </span></div><div class="line">arr  <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// true</span></div><div class="line">arr.constructor();  <span class="comment">//[]</span></div></pre></td></tr></table></figure>

<h3 id="_创建一个自调用的函数_Self-calling_Function"><i class="fa fa-lightbulb-o"></i> 创建一个自调用的函数 Self-calling Function</h3>
<p>常被称作自调用匿名函数Self-Invoked Anonymous Function或者立即调用函数表达式Immediately Invoked Function Expression (IIFE). 它是这样一个函数：当创建时会自动执行。格式如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    <span class="comment">// some private code that will be executed automatically</span></div><div class="line">})();  </div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span>{</div><div class="line">    <span class="keyword">var</span> result = a+b;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">})(<span class="number">10</span>,<span class="number">20</span>)</div></pre></td></tr></table></figure>

<h3 id="_从数组中随机选取一个元素"><i class="fa fa-lightbulb-o"></i> 从数组中随机选取一个元素</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items = [<span class="number">12</span>, <span class="number">548</span> , <span class="string">'a'</span> , <span class="number">2</span> , <span class="number">5478</span> , <span class="string">'foo'</span> , <span class="number">8852</span>, , <span class="string">'Doe'</span> , <span class="number">2145</span> , <span class="number">119</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span>  randomItem = items[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * items.length)];</div></pre></td></tr></table></figure>

<h3 id="_得到一个特定范围的随机值"><i class="fa fa-lightbulb-o"></i> 得到一个特定范围的随机值</h3>
<p>This code snippet can be useful when trying to generate fake data for testing purposes, such as a salary between min and max.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</div></pre></td></tr></table></figure>

<h3 id="_生成一个[0,max]范围的数组"><i class="fa fa-lightbulb-o"></i> 生成一个[0,max]范围的数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbersArray = [] , max = <span class="number">100</span>;</div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">1</span>; numbersArray.push(i++) &lt; max;);  <span class="comment">// numbers = [1,2,3 ... 100]</span></div></pre></td></tr></table></figure>

<p> javascript</p>
<h3 id="_生成随机字符/数字的数组"><i class="fa fa-lightbulb-o"></i> 生成随机字符/数字的数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRandomAlphaNum</span><span class="params">(len)</span> </span>{</div><div class="line">    <span class="keyword">var</span> rdmString = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span>( ; rdmString.length &lt; len; rdmString  += <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>));</div><div class="line">    <span class="keyword">return</span>  rdmString.substr(<span class="number">0</span>, len);</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_打乱数组"><i class="fa fa-lightbulb-o"></i> 打乱数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , -<span class="number">215</span> , <span class="number">228</span> , <span class="number">400</span> , <span class="number">122205</span>, -<span class="number">85411</span>];</div><div class="line">numbers = numbers.sort(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>});</div><div class="line"><span class="comment">/* the array numbers will be equal for example to [120, 5, 228, -215, 400, 458, -85411, 122205]  */</span></div></pre></td></tr></table></figure>

<p>A better option could be to implement a random sort order by code (e.g. : Fisher-Yates shuffle), than using the native sort JavaScript function. For more details take a look to this discussion.</p>
<h3 id="_字符串的trim函数"><i class="fa fa-lightbulb-o"></i> 字符串的trim函数</h3>
<p>The classic trim function of Java, C#, PHP and many other language that remove whitespace from a string doesn’t exist in JavaScript, so we could add it to the String object.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{<span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">""</span>);};</div></pre></td></tr></table></figure>

<p>A native implementation of the trim() function is available in the recent JavaScript engines.</p>
<h3 id="_将一个数组附加到另外一个数组上:_append函数"><i class="fa fa-lightbulb-o"></i> 将一个数组附加到另外一个数组上: append函数</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array1 = [<span class="number">12</span> , <span class="string">"foo"</span> , {name <span class="string">"Joe"</span>} , -<span class="number">2458</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> array2 = [<span class="string">"Doe"</span> , <span class="number">555</span> , <span class="number">100</span>];</div><div class="line"><span class="built_in">Array</span>.prototype.push.apply(array1, array2);</div><div class="line"><span class="comment">/* array1 will be equal to  [12 , "foo" , {name "Joe"} , -2458 , "Doe" , 555 , 100] */</span></div></pre></td></tr></table></figure>

<h3 id="_将arguments_对象转为数组"><i class="fa fa-lightbulb-o"></i> 将arguments 对象转为数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> argArray = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div></pre></td></tr></table></figure>

<h3 id="_校验参数是否为数字"><i class="fa fa-lightbulb-o"></i> 校验参数是否为数字</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span><span class="params">(n)</span></span>{</div><div class="line">    <span class="keyword">return</span> !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(n)) && <span class="built_in">isFinite</span>(n);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>读者提供了另外一个技巧</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span><span class="params">(n)</span> </span>{</div><div class="line"><span class="keyword">return</span> n === +n;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_校验参数是否为数组"><i class="fa fa-lightbulb-o"></i> 校验参数是否为数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span><span class="params">(obj)</span></span>{</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span> ;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Note that if the toString() method is overridden, you will not get the expected result using this trick.</p>
<p>Or use…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.isArray(obj); <span class="comment">// its a new Array method</span></div></pre></td></tr></table></figure>

<p>You could also use instanceof if you are not working with multiple frames. However, if you have many contexts, you will get a wrong result.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myFrame = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line"><span class="built_in">document</span>.body.appendChild(myFrame);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myArray = <span class="built_in">window</span>.frames[<span class="built_in">window</span>.frames.length-<span class="number">1</span>].Array;</div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> myArray(a,b,<span class="number">10</span>); <span class="comment">// [a,b,10]  </span></div><div class="line"></div><div class="line"><span class="comment">// instanceof will not work correctly, myArray loses his constructor </span></div><div class="line"><span class="comment">// constructor is not shared between frames</span></div><div class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// false</span></div></pre></td></tr></table></figure>

<h3 id="_得到数组的最大或者最小元素"><i class="fa fa-lightbulb-o"></i> 得到数组的最大或者最小元素</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span>  numbers = [<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , -<span class="number">215</span> , <span class="number">228</span> , <span class="number">400</span> , <span class="number">122205</span>, -<span class="number">85411</span>]; </div><div class="line"><span class="keyword">var</span> maxInNumbers = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, numbers); </div><div class="line"><span class="keyword">var</span> minInNumbers = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, numbers);</div></pre></td></tr></table></figure>

<h3 id="_清空数组"><i class="fa fa-lightbulb-o"></i> 清空数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [<span class="number">12</span> , <span class="number">222</span> , <span class="number">1000</span> ];  </div><div class="line">myArray.length = <span class="number">0</span>; <span class="comment">// myArray will be equal to [].</span></div></pre></td></tr></table></figure>

<h3 id="_不要使用delete方法删除数组的元素"><i class="fa fa-lightbulb-o"></i> 不要使用delete方法删除数组的元素</h3>
<p>Use splice instead of using delete to delete an item from an array. Using delete replaces the item with undefined instead of the removing it from the array.</p>
<p>Instead of…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items = [<span class="number">12</span>, <span class="number">548</span> ,<span class="string">'a'</span> , <span class="number">2</span> , <span class="number">5478</span> , <span class="string">'foo'</span> , <span class="number">8852</span>, , <span class="string">'Doe'</span> ,<span class="number">2154</span> , <span class="number">119</span> ]; </div><div class="line">items.length; <span class="comment">// return 11 </span></div><div class="line"><span class="keyword">delete</span> items[<span class="number">3</span>]; <span class="comment">// return true </span></div><div class="line">items.length; <span class="comment">// return 11 </span></div><div class="line"><span class="comment">/* items will be equal to [12, 548, "a", undefined × 1, 5478, "foo", 8852, undefined × 1, "Doe", 2154,       119]   */</span></div></pre></td></tr></table></figure>


<p>Use…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items = [<span class="number">12</span>, <span class="number">548</span> ,<span class="string">'a'</span> , <span class="number">2</span> , <span class="number">5478</span> , <span class="string">'foo'</span> , <span class="number">8852</span>, , <span class="string">'Doe'</span> ,<span class="number">2154</span> , <span class="number">119</span> ]; </div><div class="line">items.length; <span class="comment">// return 11 </span></div><div class="line">items.splice(<span class="number">3</span>,<span class="number">1</span>) ; </div><div class="line">items.length; <span class="comment">// return 10 </span></div><div class="line"><span class="comment">/* items will be equal to [12, 548, "a", 5478, "foo", 8852, undefined × 1, "Doe", 2154,       119]   */</span></div></pre></td></tr></table></figure>

<p>The delete method should be used to delete an object property.</p>
<h3 id="_设置length实现截短数组"><i class="fa fa-lightbulb-o"></i> 设置length实现截短数组</h3>
<p>Like the previous example of emptying an array, we truncate it using the length property.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [<span class="number">12</span> , <span class="number">222</span> , <span class="number">1000</span> , <span class="number">124</span> , <span class="number">98</span> , <span class="number">10</span> ];  </div><div class="line">myArray.length = <span class="number">4</span>; <span class="comment">// myArray will be equal to [12 , 222 , 1000 , 124].</span></div></pre></td></tr></table></figure>

<p>As a bonus, if you set the array length to a higher value, the length will be changed and new items will be added with undefined as a value. The array length is not a read only property.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">myArray.length = <span class="number">10</span>; <span class="comment">// the new array length is 10 </span></div><div class="line">myArray[myArray.length - <span class="number">1</span>] ; <span class="comment">// undefined</span></div></pre></td></tr></table></figure>

<h3 id="_使用逻辑_AND/_OR_作为条件判断"><i class="fa fa-lightbulb-o"></i> 使用逻辑 AND/ OR 作为条件判断</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="number">10</span>;  </div><div class="line">foo == <span class="number">10</span> && doSomething(); <span class="comment">// is the same thing as if (foo == 10) doSomething(); </span></div><div class="line">foo == <span class="number">5</span> || doSomething(); <span class="comment">// is the same thing as if (foo != 5) doSomething();</span></div></pre></td></tr></table></figure>

<p>The logical OR could also be used to set a default value for function argument.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">(arg1)</span></span>{ </div><div class="line">    arg1 = arg1 || <span class="number">10</span>; <span class="comment">// arg1 will have 10 as a default value if it’s not already set</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_使用map()函数遍历数组"><i class="fa fa-lightbulb-o"></i> 使用map()函数遍历数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> squares = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="keyword">function</span> <span class="params">(val)</span> </span>{  </div><div class="line">    <span class="keyword">return</span> val * val;  </div><div class="line">}); </div><div class="line"><span class="comment">// squares will be equal to [1, 4, 9, 16]</span></div></pre></td></tr></table></figure>

<h3 id="_四舍五入，_保留_N位小数"><i class="fa fa-lightbulb-o"></i> 四舍五入， 保留 N位小数</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num =<span class="number">2.443242342</span>;</div><div class="line">num = num.toFixed(<span class="number">4</span>);  <span class="comment">// num will be equal to 2.4432</span></div></pre></td></tr></table></figure>

<p>NOTE : the toFixed() function returns a string and not a number.</p>
<h3 id="_浮点数问题"><i class="fa fa-lightbulb-o"></i> 浮点数问题</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// is false </span></div><div class="line"><span class="number">9007199254740992</span> + <span class="number">1</span> <span class="comment">// is equal to 9007199254740992  </span></div><div class="line"><span class="number">9007199254740992</span> + <span class="number">2</span> <span class="comment">// is equal to 9007199254740994</span></div></pre></td></tr></table></figure>

<p>Why does this happen? 0.1 +0.2 is equal to 0.30000000000000004. What you need to know is that all JavaScript numbers are floating points represented internally in 64 bit binary according to the IEEE 754 standard. For more explanation, take a look to this blog post.</p>
<p>You can use toFixed() and toPrecision() to resolve this problem.</p>
<h3 id="_使用for-in循环检查对象的属性时需要注意"><i class="fa fa-lightbulb-o"></i> 使用for-in循环检查对象的属性时需要注意</h3>
<p>This code snippet could be useful in order to avoid iterating through the properties from the object’s prototype.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> object) {  </div><div class="line">    <span class="keyword">if</span> (object.hasOwnProperty(name)) { </div><div class="line">        <span class="comment">// do something with name                    </span></div><div class="line">    }  </div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_逗号操作符"><i class="fa fa-lightbulb-o"></i> 逗号操作符</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">0</span>; </div><div class="line"><span class="keyword">var</span> b = ( a++, <span class="number">99</span> ); </div><div class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// a will be equal to 1 </span></div><div class="line"><span class="built_in">console</span>.log(b);  <span class="comment">// b is equal to 99</span></div></pre></td></tr></table></figure>

<h3 id="_缓存需要查询或者计算的变量"><i class="fa fa-lightbulb-o"></i> 缓存需要查询或者计算的变量</h3>
<p>In the case of a jQuery selector, we could cache the DOM element.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> navright = <span class="built_in">document</span>.querySelector(<span class="string">'#right'</span>); </div><div class="line"><span class="keyword">var</span> navleft = <span class="built_in">document</span>.querySelector(<span class="string">'#left'</span>); </div><div class="line"><span class="keyword">var</span> navup = <span class="built_in">document</span>.querySelector(<span class="string">'#up'</span>); </div><div class="line"><span class="keyword">var</span> navdown = <span class="built_in">document</span>.querySelector(<span class="string">'#down'</span>);</div></pre></td></tr></table></figure>

<h3 id="_传给isFinite()的参数需要校验"><i class="fa fa-lightbulb-o"></i> 传给isFinite()的参数需要校验</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">isFinite</span>(<span class="number">0</span>/<span class="number">0</span>) ; <span class="comment">// false </span></div><div class="line"><span class="built_in">isFinite</span>(<span class="string">"foo"</span>); <span class="comment">// false </span></div><div class="line"><span class="built_in">isFinite</span>(<span class="string">"10"</span>); <span class="comment">// true </span></div><div class="line"><span class="built_in">isFinite</span>(<span class="number">10</span>);   <span class="comment">// true </span></div><div class="line"><span class="built_in">isFinite</span>(<span class="literal">undefined</span>);  <span class="comment">// false </span></div><div class="line"><span class="built_in">isFinite</span>();   <span class="comment">// false </span></div><div class="line"><span class="built_in">isFinite</span>(<span class="literal">null</span>);  <span class="comment">// true  !!!</span></div></pre></td></tr></table></figure>

<h3 id="_避免数组的索引为负值"><i class="fa fa-lightbulb-o"></i> 避免数组的索引为负值</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbersArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </div><div class="line"><span class="keyword">var</span> from = numbersArray.indexOf(<span class="string">"foo"</span>) ;  <span class="comment">// from is equal to -1 </span></div><div class="line">numbersArray.splice(from,<span class="number">2</span>);    <span class="comment">// will return [5]</span></div></pre></td></tr></table></figure>

<p>Make sure that the arguments passed to splice are not negative.</p>
<h3 id="_JSON的序列化和反序列化"><i class="fa fa-lightbulb-o"></i> JSON的序列化和反序列化</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = {name :<span class="string">'Saad'</span>, age : <span class="number">26</span>, department : {ID : <span class="number">15</span>, name : <span class="string">"R&D"</span>} }; </div><div class="line"><span class="keyword">var</span> stringFromPerson = <span class="built_in">JSON</span>.stringify(person); </div><div class="line"><span class="comment">/* stringFromPerson is equal to "{"name":"Saad","age":26,"department":{"ID":15,"name":"R&D"}}"   */</span> </div><div class="line"><span class="keyword">var</span> personFromString = <span class="built_in">JSON</span>.parse(stringFromPerson);  </div><div class="line"><span class="comment">/* personFromString is equal to person object  */</span></div></pre></td></tr></table></figure>

<h3 id="_避免使用_eval()_或者Function的构造函数"><i class="fa fa-lightbulb-o"></i> 避免使用 eval() 或者Function的构造函数</h3>
<p>Use of eval or the Function constructor are expensive operations as each time they are called script engine must convert source code to executable code.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func1 = <span class="keyword">new</span> <span class="built_in">Function</span>(functionCode);</div><div class="line"><span class="keyword">var</span> func2 = <span class="built_in">eval</span>(functionCode);</div></pre></td></tr></table></figure>

<h3 id="_避免使用_with()_(The_good_part)"><i class="fa fa-lightbulb-o"></i> 避免使用 with() (The good part)</h3>
<p>Using with() inserts a variable at the global scope. Thus, if another variable has the same name it could cause confusion and overwrite the value.</p>
<h3 id="_避免使用for-in遍历数组"><i class="fa fa-lightbulb-o"></i> 避免使用for-in遍历数组</h3>
<p>Instead of using…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;  </div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arrayNumbers) {  </div><div class="line">    sum += arrayNumbers[i];  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>…it’s better to use…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;  </div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arrayNumbers.length; i &lt; len; i++) {  </div><div class="line">    sum += arrayNumbers[i];  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>As a bonus, the instantiation of i and len is executed once because it’s in the first statement of the for loop. Thsi is faster than using…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrayNumbers.length; i++)</div></pre></td></tr></table></figure>

<p>Why? The length of the array arrayNumbers is recalculated every time the loop iterates.</p>
<p>NOTE : the issue of recalculating the length in each iteration was fixed in the latest JavaScript engines.</p>
<h3 id="_调用setTimeout()_和_setInterval()时传入函数而不是函数的字符串名字"><i class="fa fa-lightbulb-o"></i> 调用setTimeout() 和 setInterval()时传入函数而不是函数的字符串名字</h3>
<p>If you pass a string into setTimeout() or setInterval(), the string will be evaluated the same way as with eval, which is slow. Instead of using…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setInterval(<span class="string">'doSomethingPeriodically()'</span>, <span class="number">1000</span>);  </div><div class="line">setTimeout(<span class="string">'doSomethingAfterFiveSeconds()'</span>, <span class="number">5000</span>);</div></pre></td></tr></table></figure>

<p>…use…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setInterval(doSomethingPeriodically, <span class="number">1000</span>);  </div><div class="line">setTimeout(doSomethingAfterFiveSeconds, <span class="number">5000</span>);</div></pre></td></tr></table></figure>

<h3 id="_使用_switch/case_statement_而不是一堆的_if/else"><i class="fa fa-lightbulb-o"></i> 使用 switch/case statement 而不是一堆的 if/else</h3>
<p>Using switch/case is faster when there are more than 2 cases, and it is more elegant (better organized code). Avoid using it when you have more than 10 cases.</p>
<h3 id="_使用数字返回做switch/case_的条件判断"><i class="fa fa-lightbulb-o"></i> 使用数字返回做switch/case 的条件判断</h3>
<p>Using a switch/case statement with numeric ranges is possible with this trick.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCategory</span><span class="params">(age)</span> </span>{  </div><div class="line">    <span class="keyword">var</span> category = <span class="string">""</span>;  </div><div class="line">    <span class="keyword">switch</span> (<span class="literal">true</span>) {  </div><div class="line">        <span class="keyword">case</span> <span class="built_in">isNaN</span>(age):  </div><div class="line">            category = <span class="string">"not an age"</span>;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> (age &gt;= <span class="number">50</span>):  </div><div class="line">            category = <span class="string">"Old"</span>;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> (age &lt;= <span class="number">20</span>):  </div><div class="line">            category = <span class="string">"Baby"</span>;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">default</span>:  </div><div class="line">            category = <span class="string">"Young"</span>;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">    };  </div><div class="line">    <span class="keyword">return</span> category;  </div><div class="line">}  </div><div class="line">getCategory(<span class="number">5</span>);  <span class="comment">// will return "Baby"</span></div></pre></td></tr></table></figure>

<h3 id="_为创建的对象指定prototype"><i class="fa fa-lightbulb-o"></i> 为创建的对象指定prototype</h3>
<p>It’s possible to write a function that creates an object whose prototype is the given argument like this…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span><span class="params">(object)</span> </span>{  </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">OneShotConstructor</span><span class="params">()</span></span>{}; </div><div class="line">    OneShotConstructor.prototype= object;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OneShotConstructor(); </div><div class="line">} </div><div class="line">clone(<span class="built_in">Array</span>).prototype ;  <span class="comment">// []</span></div></pre></td></tr></table></figure>

<h3 id="_HTML_转义函数"><i class="fa fa-lightbulb-o"></i> HTML 转义函数</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeHTML</span><span class="params">(text)</span> </span>{  </div><div class="line">    <span class="keyword">var</span> replacements= {<span class="string">"&lt;"</span>: <span class="string">"&lt;"</span>, <span class="string">"&gt;"</span>: <span class="string">"&gt;"</span>,<span class="string">"&"</span>: <span class="string">"&amp;"</span>, <span class="string">"\""</span>: <span class="string">"&quot;"</span>};                      </div><div class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/[&lt;&gt;&"]/g</span>, <span class="function"><span class="keyword">function</span><span class="params">(character)</span> </span>{  </div><div class="line">        <span class="keyword">return</span> replacements[character];  </div><div class="line">    }); </div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_不要在循环内部使用try-catch-finally"><i class="fa fa-lightbulb-o"></i> 不要在循环内部使用try-catch-finally</h3>
<p>The try-catch-finally construct creates a new variable in the current scope at runtime each time the catch clause is executed where the caught exception object is assigned to a variable.</p>
<p>Instead of using…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = [<span class="string">'foo'</span>, <span class="string">'bar'</span>], i;  </div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = object.length; i &lt;len; i++) {  </div><div class="line">    <span class="keyword">try</span> {  </div><div class="line">        <span class="comment">// do something that throws an exception </span></div><div class="line">    }  </div><div class="line">    <span class="keyword">catch</span> (e) {   </div><div class="line">        <span class="comment">// handle exception  </span></div><div class="line">    } </div><div class="line">}</div></pre></td></tr></table></figure>

<p>…use…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = [<span class="string">'foo'</span>, <span class="string">'bar'</span>], i;  </div><div class="line"><span class="keyword">try</span> { </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, len = object.length; i &lt;len; i++) {  </div><div class="line">        <span class="comment">// do something that throws an exception </span></div><div class="line">    } </div><div class="line">} </div><div class="line"><span class="keyword">catch</span> (e) {   </div><div class="line">    <span class="comment">// handle exception  </span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_为XMLHttpRequests设置超时"><i class="fa fa-lightbulb-o"></i> 为XMLHttpRequests设置超时</h3>
<p>You could abort the connection if an XHR takes a long time (for example, due to a network issue), by using setTimeout() with the XHR call.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest (); </div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{  </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState == <span class="number">4</span>) {  </div><div class="line">        clearTimeout(timeout);  </div><div class="line">        <span class="comment">// do something with response data </span></div><div class="line">    }  </div><div class="line">}  </div><div class="line"><span class="keyword">var</span> timeout = setTimeout( <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{  </div><div class="line">    xhr.abort(); <span class="comment">// call error callback  </span></div><div class="line">}, <span class="number">60</span>*<span class="number">1000</span> <span class="comment">/* timeout after a minute */</span> ); </div><div class="line">xhr.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);  </div><div class="line"></div><div class="line">xhr.send();</div></pre></td></tr></table></figure>

<p>As a bonus, you should generally avoid synchronous XHR calls completely.</p>
<h3 id="_处理WebSocket_超时"><i class="fa fa-lightbulb-o"></i> 处理WebSocket 超时</h3>
<p>Generally when a WebSocket connection is established, a server could time out your connection after 30 seconds of inactivity. The firewall could also time out the connection after a period of inactivity.</p>
<p>To deal with the timeout issue you could send an empty message to the server periodically. To do this, add these two functions to your code: one to keep alive the connection and the other one to cancel the keep alive. Using this trick, you’ll control the timeout.</p>
<p>Add a timerID…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timerID = <span class="number">0</span>; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">keepAlive</span><span class="params">()</span> </span>{ </div><div class="line">    <span class="keyword">var</span> timeout = <span class="number">15000</span>;  </div><div class="line">    <span class="keyword">if</span> (webSocket.readyState == webSocket.OPEN) {  </div><div class="line">        webSocket.send(<span class="string">''</span>);  </div><div class="line">    }  </div><div class="line">    timerId = setTimeout(keepAlive, timeout);  </div><div class="line">}  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelKeepAlive</span><span class="params">()</span> </span>{  </div><div class="line">    <span class="keyword">if</span> (timerId) {  </div><div class="line">        cancelTimeout(timerId);  </div><div class="line">    }  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>The keepAlive() function should be added at the end of the onOpen() method of the webSocket connection and the cancelKeepAlive() at the end of the onClose() method.</p>
<h3 id="_牢记，原始运算符始终比函数调用要高效。使用VanillaJS。"><i class="fa fa-lightbulb-o"></i>  牢记，原始运算符始终比函数调用要高效。使用<a href="http://vanilla-js.com/" target="_blank" rel="external">VanillaJS</a>。</h3>
<p>For example, instead of using…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min(a,b); </div><div class="line">A.push(v);</div><div class="line"></div><div class="line">…use…</div><div class="line"></div><div class="line"><span class="keyword">var</span> min = a &lt; b ? a : b; </div><div class="line">A[A.length] = v;</div></pre></td></tr></table></figure>

<h3 id="_编码时不要忘记使用代码美化工具-_发布前使用JSLint_和_minification_(如JSMin)-"><i class="fa fa-lightbulb-o"></i> 编码时不要忘记使用代码美化工具. 发布前使用JSLint 和 minification (如JSMin).</h3>
<h3 id="_JavaScript如此美好，快来看看学习的一些资源吧"><i class="fa fa-lightbulb-o"></i> JavaScript如此美好，快来看看学习的一些资源吧</h3>
<p>Code Academy JavaScript tracks: <a href="http://www.codecademy.com/tracks/javascript" target="_blank" rel="external">http://www.codecademy.com/tracks/javascript</a><br>Eloquent JavaScript by Marjin Haverbeke: <a href="http://eloquentjavascript.net/" target="_blank" rel="external">http://eloquentjavascript.net/</a><br>Advanced JavaScript by John Resig: <a href="http://ejohn.org/apps/learn/" target="_blank" rel="external">http://ejohn.org/apps/learn/</a></p>
<h1 id="结尾">结尾</h1>
<p>我(Saad Mousliki)知道还有许许多多的技巧窍门和最佳实践。 所以如果你有更多想增加的，或者针对以上条目的反馈和更正， 请添加注释。</p>
<h1 id="参考">参考</h1>
<p>本文大大部分的代码都是我(Saad Mousliki)自己写的。 有部分的代码片段参考了一些其它文章或者论坛的帖子。</p>
<ul>
<li><a href="http://developer.nokia.com/Community/Wiki/JavaScript_Performance_Best_Practices" target="_blank" rel="external">JavaScript Performance Best Practices (CC)</a></li>
<li><a href="https://code.google.com/p/jslibs/wiki/JavascriptTips" target="_blank" rel="external">Google Code JavaScript tips</a></li>
<li><a href="http://stackoverflow.com/questions/724826/javascript-tips-and-tricks-javascript-best-practices" target="_blank" rel="external">StackOverFlow tips and tricks</a></li>
<li><a href="http://stackoverflow.com/questions/6888409/settimeout-for-xhr-requests" target="_blank" rel="external">TimeOut for XHR</a>fu</li>
</ul>
<h1 id="附加技巧">附加技巧</h1>
<p>除了前面文章中提到的技巧， 我也在这篇文章列出收集的更多的JavaScript技巧</p>
<h3 id="_两个感叹号"><i class="fa fa-lightbulb-o"></i> 两个感叹号</h3>
<p>一个元素转换为真的布尔值，一般用来判断某个元素是否存在，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>!![] <span class="literal">true</span>； ![] <span class="literal">false</span></div><div class="line"><span class="number">2.</span>!!{} <span class="literal">true</span>; !{} <span class="literal">false</span></div><div class="line"><span class="number">3.</span>!!<span class="literal">false</span> <span class="literal">false</span>; !<span class="literal">false</span> <span class="literal">true</span></div><div class="line"><span class="number">4.</span>!!<span class="literal">true</span> <span class="literal">true</span>; !<span class="literal">true</span> <span class="literal">false</span></div><div class="line"><span class="number">5.</span>!!<span class="literal">undefined</span> <span class="literal">false</span>; !<span class="literal">undefined</span> <span class="literal">true</span></div></pre></td></tr></table></figure>

<p>双感叹号才能真正的将他转换成对应的Boolean值，第一个感叹号是将其转化成Boolean类型的值，但是这一操作得到的是其取反以后的值，在进行一次取反运算才能得到其对应真正的布尔值 </p>
<h3 id="_把数字变字符串，_把字符串变数字"><i class="fa fa-lightbulb-o"></i> 把数字变字符串， 把字符串变数字</h3>
<p>把s变数字：<code>s = s - 0;</code> 或者 <code>s = +s;</code><br>把n变字符串：<code>n = n + &quot;&quot;;</code> </p>
<h3 id="把数组转换成CSV字符串">把数组转换成CSV字符串</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'peaches'</span>, <span class="string">'oranges'</span>, <span class="string">'mangoes'</span>];</div><div class="line">  </div><div class="line"><span class="keyword">var</span> str = fruits.valueOf();</div><div class="line">  </div><div class="line"><span class="comment">//print str: apple,peaches,oranges,mangoes</span></div></pre></td></tr></table></figure>

<p>如果不想逗号分隔：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'peaches'</span>, <span class="string">'oranges'</span>, <span class="string">'mangoes'</span>];</div><div class="line">  </div><div class="line"><span class="keyword">var</span> str = fruits.join(<span class="string">"|"</span>);</div><div class="line">  </div><div class="line"><span class="comment">//print str: apple|peaches|oranges|mangoes</span></div></pre></td></tr></table></figure>

<h3 id="_转换CSV字符串为数组"><i class="fa fa-lightbulb-o"></i> 转换CSV字符串为数组</h3>
<p>使用<code>split</code>方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"apple, peaches, oranges, mangoes"</span>;</div><div class="line">  </div><div class="line"><span class="keyword">var</span> fruitsArray = str.split(<span class="string">","</span>);</div><div class="line">  </div><div class="line"><span class="comment">//print fruitsArray[0]: apple</span></div></pre></td></tr></table></figure>

<h3 id="_移除数组指定索引"><i class="fa fa-lightbulb-o"></i> 移除数组指定索引</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeByIndex</span><span class="params">(arr, index)</span> </span>{</div><div class="line">    arr.splice(index, <span class="number">1</span>);</div><div class="line">}</div><div class="line"> </div><div class="line">test = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">test[<span class="number">0</span>] = <span class="string">'Apple'</span>;</div><div class="line">test[<span class="number">1</span>] = <span class="string">'Ball'</span>;</div><div class="line">test[<span class="number">2</span>] = <span class="string">'Cat'</span>;</div><div class="line">test[<span class="number">3</span>] = <span class="string">'Dog'</span>;</div><div class="line"> </div><div class="line">alert(<span class="string">"Array before removing elements: "</span>+test);</div><div class="line"> </div><div class="line">removeByIndex(test, <span class="number">2</span>);</div><div class="line"> </div><div class="line">alert(<span class="string">"Array after removing elements: "</span>+test);</div></pre></td></tr></table></figure>

<h3 id="_移除数组特定的值"><i class="fa fa-lightbulb-o"></i> 移除数组特定的值</h3>
<p>假定数组的值不会重复。如果有重复且想删除所有的重复的值， 注释掉<code>break</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeByValue</span><span class="params">(arr, val)</span> </span>{</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++) {</div><div class="line">        <span class="keyword">if</span>(arr[i] === val) {</div><div class="line">            arr.splice(i, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="keyword">var</span> somearray = [<span class="string">"mon"</span>, <span class="string">"tue"</span>, <span class="string">"wed"</span>, <span class="string">"thur"</span>]</div><div class="line"> </div><div class="line">removeByValue(somearray, <span class="string">"tue"</span>);</div><div class="line"> </div><div class="line"><span class="comment">//somearray will now have "mon", "wed", "thur"</span></div></pre></td></tr></table></figure>

<p>下面的方法是为Array类增加removeByValue方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.removeByValue = <span class="function"><span class="keyword">function</span><span class="params">(val)</span> </span>{</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.length; i++) {</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>[i] == val) {</div><div class="line">            <span class="keyword">this</span>.splice(i, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//..</span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> somearray = [<span class="string">"mon"</span>, <span class="string">"tue"</span>, <span class="string">"wed"</span>, <span class="string">"thur"</span>]</div><div class="line"> </div><div class="line">somearray.removeByValue(<span class="string">"tue"</span>);</div><div class="line"> </div><div class="line"><span class="comment">//somearray will now have "mon", "wed", "thur"</span></div></pre></td></tr></table></figure>

<h3 id="_根据方法名调用方法"><i class="fa fa-lightbulb-o"></i> 根据方法名调用方法</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> strFun = <span class="string">"someFunction"</span>; <span class="comment">//Name of the function to be called</span></div><div class="line"><span class="keyword">var</span> strParam = <span class="string">"this is the parameter"</span>; <span class="comment">//Parameters to be passed in function</span></div><div class="line">  </div><div class="line"><span class="comment">//Create the function</span></div><div class="line"><span class="keyword">var</span> fn = <span class="built_in">window</span>[strFun];</div><div class="line">  </div><div class="line"><span class="comment">//Call the function</span></div><div class="line">fn(strParam);</div></pre></td></tr></table></figure>

<h3 id="_检查Form_是否dirty"><i class="fa fa-lightbulb-o"></i> 检查Form 是否dirty</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Determines if a form is dirty by comparing the current value of each element</div><div class="line"> * with its default value.</div><div class="line"> *</div><div class="line"> * @param {Form} form the form to be checked.</div><div class="line"> * @return {Boolean} &lt;code&gt;true&lt;/code&gt; if the form is dirty, &lt;code&gt;false&lt;/code&gt;</div><div class="line"> *                   otherwise.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formIsDirty</span><span class="params">(form)</span> </span>{</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; form.elements.length; i++) {</div><div class="line">    <span class="keyword">var</span> element = form.elements[i];</div><div class="line">    <span class="keyword">var</span> type = element.type;</div><div class="line">    <span class="keyword">if</span> (type == <span class="string">"checkbox"</span> || type == <span class="string">"radio"</span>) {</div><div class="line">      <span class="keyword">if</span> (element.checked != element.defaultChecked) {</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      }</div><div class="line">    }</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">"hidden"</span> || type == <span class="string">"password"</span> ||</div><div class="line">             type == <span class="string">"text"</span> || type == <span class="string">"textarea"</span>) {</div><div class="line">      <span class="keyword">if</span> (element.value != element.defaultValue) {</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      }</div><div class="line">    }</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">"select-one"</span> || type == <span class="string">"select-multiple"</span>) {</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; element.options.length; j++) {</div><div class="line">        <span class="keyword">if</span> (element.options[j].selected !=</div><div class="line">            element.options[j].defaultSelected) {</div><div class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        }</div><div class="line">      }</div><div class="line">    }</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_检查字符串是否包含子串"><i class="fa fa-lightbulb-o"></i> 检查字符串是否包含子串</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.indexOf) {</div><div class="line">    <span class="built_in">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span><span class="params">(obj, start)</span> </span>{</div><div class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> i = (start || <span class="number">0</span>), j = <span class="keyword">this</span>.length; i &lt; j; i++) {</div><div class="line">             <span class="keyword">if</span> (<span class="keyword">this</span>[i] === obj) { <span class="keyword">return</span> i; }</div><div class="line">         }</div><div class="line">         <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="keyword">if</span> (!<span class="built_in">String</span>.prototype.contains) {</div><div class="line">    <span class="built_in">String</span>.prototype.contains = <span class="function"><span class="keyword">function</span> <span class="params">(arg)</span> </span>{</div><div class="line">        <span class="keyword">return</span> !!~<span class="keyword">this</span>.indexOf(arg);</div><div class="line">    };</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_移除数组的重复数据"><i class="fa fa-lightbulb-o"></i> 移除数组的重复数据</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeDuplicates</span><span class="params">(arr)</span> </span>{</div><div class="line">    <span class="keyword">var</span> temp = {};</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)</div><div class="line">        temp[arr[i]] = <span class="literal">true</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> r = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> temp)</div><div class="line">        r.push(k);</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="comment">//Usage</span></div><div class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'peach'</span>, <span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'orange'</span>];</div><div class="line"><span class="keyword">var</span> uniquefruits = removeDuplicates(fruits);</div><div class="line"><span class="comment">//print uniquefruits ['apple', 'orange', 'peach', 'strawberry'];</span></div></pre></td></tr></table></figure>

<h3 id="_记不住apply和call的区别"><i class="fa fa-lightbulb-o"></i> 记不住<code>apply</code>和<code>call</code>的区别</h3>
<p><a href="http://stackoverflow.com/questions/1986896/what-is-the-difference-between-call-and-apply" target="_blank" rel="external">stackoverflow</a>:<br>Think of a in apply for <strong>a</strong>rray of args and c in call for <strong>c</strong>olumns of args.</p>
<h3 id="_双波浪号~~是取整"><i class="fa fa-lightbulb-o"></i> 双波浪号~~是取整</h3>
<p><a href="http://rocha.la/JavaScript-bitwise-operators-in-practice" target="_blank" rel="external">http://rocha.la/JavaScript-bitwise-operators-in-practice</a> :<br>单波浪号是按位非，双波浪号是取整。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">~~<span class="number">2</span> === <span class="built_in">Math</span>.floor(<span class="number">2</span>); <span class="comment">//true, 2</span></div><div class="line">~~<span class="number">2.4</span> === <span class="built_in">Math</span>.floor(<span class="number">2</span>); <span class="comment">//true, 2</span></div><div class="line">~~<span class="number">3.9</span> === <span class="built_in">Math</span>.floor(<span class="number">3</span>); <span class="comment">//true, 3</span></div></pre></td></tr></table></figure>

<p>参考文档：</p>
<ul>
<li><a href="http://viralpatel.net/blogs/javascript-tips-tricks/" target="_blank" rel="external">21 JavaScript Tips and Tricks for JavaScript Developers</a></li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>如你所知，JavaScript是世上编程语言的Number One (编者按： 原文如此), 用来编写Web和移动混合应用（比如PhoneGap或者Appcelerator）， 也可以编写服务器端的程序（比如NodeJS或者Wakanda），并且拥有很多其他的实现。 它也是很多新手进入编程世界的启蒙语言，因为它不但可以在浏览器上显示一个简单的alert信息，而且还可以用来控制一个机器人（使用nodebot，或者nodruino）。掌握JavaScript并且能够写出规范并性能高效代码的开发人员，已经成为人才市场上的猎寻目标。</p>
<p>在这篇文章中，Saad Mousliki将分享一组JavaScript的技巧、窍门和最佳实践，这些都是JavaScript程序员应该知晓的，不管他们是使用在浏览器/引擎上，还是服务器端（SSJS Service Side JavaScript）JavaScript解释器上。</p>
<p>需要注意的是，这篇文章中的代码片段都在最新的Google Chrome（版本号30）上测试过，它使用V8 JavaScript引擎（V8 3.20.17.15）</p>
]]></summary>
    
      <category term="javascript" scheme="http://colobu.com/tags/javascript/"/>
    
      <category term="前端开发" scheme="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深入理解JavaScript 模块模式]]></title>
    <link href="http://colobu.com/2014/09/23/JavaScript-Module-Pattern-In-Depth/"/>
    <id>http://colobu.com/2014/09/23/JavaScript-Module-Pattern-In-Depth/</id>
    <published>2014-09-23T08:41:27.000Z</published>
    <updated>2014-09-24T02:18:55.000Z</updated>
    <content type="html"><![CDATA[<p>模块模式是JavaScript一种常用的编码模式。这是一般的理解，但也有一些高级应用没有得到很多关注。在本文中，我将回顾基础知识，浏览一些不错的高级技巧，甚至我认为是原生基础的。</p>
<a id="more"></a>

<p>英文原文： <a href="http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html" target="_blank" rel="external">JavaScript Module Pattern: In-Depth</a><br>中文翻译： <a href="http://www.oschina.net/translate/javascript-module-pattern-in-depth" target="_blank" rel="external">oschina</a> </p>
<h1 id="基础知识">基础知识</h1>
<p>首先我们开始简单概述模型模式。三年前Eric Miraglia(YUI)的博文使模型模式众所周知。如果你已经很熟悉模型模式，可以直接阅读“高级模式”。 </p>
<h2 id="匿名闭包">匿名闭包</h2>
<p>这是一切成为可能的基础，也是JavaScript最好的特性。我们将简单的创建匿名函数，并立即执行。所有函数内部代码都在闭包(closure)内。它提供了整个应用生命周期的私有和状态。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="comment">// ... all vars and functions are in this scope only</span></div><div class="line">    <span class="comment">// still maintains access to all globals</span></div><div class="line">}());</div></pre></td></tr></table></figure>

<p>注意匿名函数周围的()。这是语言的要求。关键字function一般认为是函数声明，包括()就是函数表达式。</p>
<h2 id="引入全局">引入全局</h2>
<p>JavaScript有个特性，称为隐性全局。使用变量名称时，解释器会从作用域向后寻找变量声明。如果没找到，变量会被假定入全局（以后可以全局调用）。如果会被分配使用，在还不存在时全局创建它。这意味着在匿名函数里使用全局变量很简单。不幸的是，这会导致代码难以管理，文件中不容易区分（对人而言）哪个变量是全局的。</p>
<p>幸好，匿名函数还有一个不错的选择。全局变量作为参数传递给匿名函数。将它们引入我们的代码中，既更清晰，又比使用隐性全局更快。下面是一个例子： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="params">($, YAHOO)</span> </span>{</div><div class="line">    <span class="comment">// 当前域有权限访问全局jQuery($)和YAHOO</span></div><div class="line">}(jQuery, YAHOO));</div></pre></td></tr></table></figure>

<h2 id="模块出口">模块出口</h2>
<p>有时你不只想用全局变量，但你需要先声明他们（模块的全局调用）。我们用匿名函数的返回值，很容易输出他们。这样做就完成了基本的模块模式。以下是一个完整例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MODULE = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> my = {},</div><div class="line">        privateVariable = <span class="number">1</span>;</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span><span class="params">()</span> </span>{</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    }</div><div class="line">     </div><div class="line">    my.moduleProperty = <span class="number">1</span>;</div><div class="line">    my.moduleMethod = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    };</div><div class="line">     </div><div class="line">    <span class="keyword">return</span> my;</div><div class="line">}());</div></pre></td></tr></table></figure>

<p>注意，我们声明了一个全局模块MODULE，有两个公开属性：方法MODULE.moduleMethod和属性MODULE.moduleProperty。而且，匿名函数的闭包还维持了私有内部状态。同时学会之上的内容，我们就很容易引入需要的全局变量，和输出到全局变量。 </p>
<h1 id="高级模式">高级模式</h1>
<p>对许多用户而言以上的还不足，我们可以采用以下的模式创造强大的，可扩展的结构。让我们使用MODULE模块，一个一个继续。 </p>
<h2 id="扩充">扩充</h2>
<p>模块模式的一个限制是整个模块必须在一个文件里。任何人都了解长代码分割到不同文件的必要。还好，我们有很好的办法扩充模块。（在扩充文件）首先我们引入模块（从全局），给他添加属性，再输出他。下面是一个例子扩充模块： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MODULE = (<span class="function"><span class="keyword">function</span> <span class="params">(my)</span> </span>{</div><div class="line">    my.anotherMethod = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">        <span class="comment">// 此前的MODULE返回my对象作为全局输出，因此这个匿名函数的参数MODULE就是上面MODULE匿名函数里的my</span></div><div class="line">    };</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> my;</div><div class="line">}(MODULE));</div></pre></td></tr></table></figure>

<p>我们再次使用var关键字以保持一致性，虽然其实没必要。代码执行后，模块获得一个新公开方法MODULE.anotherMethod。扩充文件没有影响模块的私有内部状态。 </p>
<h2 id="松耦合扩充">松耦合扩充</h2>
<p>上面的例子需要我们首先创建模块，然后扩充它，这并不总是必要的。提升JavaScript应用性能最好的操作就是异步加载脚本。因而我们可以创建灵活多部分的模块，可以将他们无顺序加载，以松耦合扩充。每个文件应有如下的结构：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MODULE = (<span class="function"><span class="keyword">function</span> <span class="params">(my)</span> </span>{</div><div class="line">    <span class="comment">// add capabilities...</span></div><div class="line">     </div><div class="line">    <span class="keyword">return</span> my;</div><div class="line">}(MODULE || {}));</div></pre></td></tr></table></figure>

<p>这个模式里，var语句是必须的，以标记引入时不存在会创建。这意味着你可以像LABjs一样同时加载所有模块文件而不被阻塞。 </p>
<h2 id="紧耦合扩充">紧耦合扩充</h2>
<p>虽然松耦合很不错，但模块上也有些限制。最重要的，你不能安全的覆写模块属性（因为没有加载顺序）。初始化时也无法使用其他文件定义的模块属性（但你可以在初始化后运行）。紧耦合扩充意味着一组加载顺序，但是允许覆写。下面是一个例子（扩充最初定义的MODULE）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MODULE = (<span class="function"><span class="keyword">function</span> <span class="params">(my)</span> </span>{</div><div class="line">    <span class="keyword">var</span> old_moduleMethod = my.moduleMethod;</div><div class="line">     </div><div class="line">    my.moduleMethod = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">        <span class="comment">// method override, has access to old through old_moduleMethod...</span></div><div class="line">    };</div><div class="line">     </div><div class="line">    <span class="keyword">return</span> my;</div><div class="line">}(MODULE));</div></pre></td></tr></table></figure>

<p>我们覆写的MODULE.moduleMethod，但依旧保持着私有内部状态。 </p>
<h2 id="克隆和继承">克隆和继承</h2>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MODULE_TWO = (<span class="function"><span class="keyword">function</span> <span class="params">(old)</span> </span>{</div><div class="line">    <span class="keyword">var</span> my = {},</div><div class="line">        key;</div><div class="line">     </div><div class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> old) {</div><div class="line">        <span class="keyword">if</span> (old.hasOwnProperty(key)) {</div><div class="line">            my[key] = old[key];</div><div class="line">        }</div><div class="line">    }</div><div class="line">     </div><div class="line">    <span class="keyword">var</span> super_moduleMethod = old.moduleMethod;</div><div class="line">    my.moduleMethod = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">        <span class="comment">// override method on the clone, access to super through super_moduleMethod</span></div><div class="line">    };</div><div class="line">     </div><div class="line">    <span class="keyword">return</span> my;</div><div class="line">}(MODULE));</div></pre></td></tr></table></figure>

<p>这种方式也许最不灵活。他可以实现巧妙的组合，但是牺牲了灵活性。正如我写的，对象的属性或方法不是拷贝，而是一个对象的两个引用。修改一个会影响其他。这可能可以保持递归克隆对象的属性固定，但无法固定方法，除了带eval的方法。不过，我已经完整的包含了模块。（其实就是做了一次浅拷贝）。 </p>
<h2 id="跨文件私有状态">跨文件私有状态</h2>
<p>一个模块分割成几个文件有一个严重缺陷。每个文件都有自身的私有状态，且无权访问别的文件的私有状态。这可以修复的。下面是一个松耦合扩充的例子，不同扩充文件之间保持了私有状态： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MODULE = (<span class="function"><span class="keyword">function</span> <span class="params">(my)</span> </span>{</div><div class="line">    <span class="keyword">var</span> _private = my._private = my._private || {},</div><div class="line">        _seal = my._seal = my._seal || <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">            <span class="keyword">delete</span> my._private;</div><div class="line">            <span class="keyword">delete</span> my._seal;</div><div class="line">            <span class="keyword">delete</span> my._unseal;</div><div class="line">        },<span class="comment">//模块加载后，调用以移除对_private的访问权限</span></div><div class="line">        _unseal = my._unseal = my._unseal || <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">            my._private = _private;</div><div class="line">            my._seal = _seal;</div><div class="line">            my._unseal = _unseal;</div><div class="line">        };<span class="comment">//模块加载前，开启对_private的访问，以实现扩充部分对私有内容的操作</span></div><div class="line">     </div><div class="line">    <span class="comment">// permanent access to _private, _seal, and _unseal</span></div><div class="line">     </div><div class="line">    <span class="keyword">return</span> my;</div><div class="line">}(MODULE || {}));</div></pre></td></tr></table></figure>

<p> 任何文件都可以在本地的变量_private中设置属性，他会对别的扩充立即生效（即初始化时所有扩充的私有状态都保存在_private变量，并被my._private输出）。模块完全加载了，应用调用MODULE._seal()方法阻止对私有属性的读取（干掉my._private输出)。如果此后模块又需要扩充，带有一个私有方法。加载扩充文件前调用MODULE._unseal()方法（恢复my._private，外部恢复操作权限）。加载后调用再seal()。</p>
<p>这个模式一直随我工作至今，我还没看到别的地方这样做的。我觉得这个模式很有用，值得写上。 </p>
<h2 id="子模块">子模块</h2>
<p>最后的高级模式实际上最简单。有很多好方法创建子模块。和创建父模块是一样的： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">MODULE.sub = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> my = {};</div><div class="line">    <span class="comment">// 就是多一级命名空间</span></div><div class="line">     </div><div class="line">    <span class="keyword">return</span> my;</div><div class="line">}());</div></pre></td></tr></table></figure>

<p>虽然很简单，但我还是提一下。子模块有所有正常模块的功能，包括扩充和私有状态。 </p>
<h1 id="总结">总结</h1>
<p> 大多数高级模式可以互相组合成更多有用的模式。如果要我提出一个复杂应用的设计模式，我会组合松耦合、私有状态和子模块。</p>
<p>这里我还没有涉及性能，不过我有个小建议：模块模式是性能增益的。他简化了许多，加快代码下载。松耦合可以无阻塞并行下载，等价于提高下载速度。可能初始化比别的方法慢一点，但值得权衡。只要全局正确的引入，运行性能不会有任何损失，可能还因为局部变量和更少的引用，加快子模块的加载。</p>
<p>最后，一个例子动态加载子模块到父模块（动态创建）中。这里就不用私有状态了，其实加上也很简单。这段代码允许整个复杂分成的代码核心及其子模块等平行加载完全。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> UTIL = (<span class="function"><span class="keyword">function</span> <span class="params">(parent, $)</span> </span>{</div><div class="line">    <span class="keyword">var</span> my = parent.ajax = parent.ajax || {};</div><div class="line">     </div><div class="line">    my.get = <span class="function"><span class="keyword">function</span> <span class="params">(url, params, callback)</span> </span>{</div><div class="line">        <span class="comment">// ok, so I'm cheating a bit :)</span></div><div class="line">        <span class="keyword">return</span> $.getJSON(url, params, callback);</div><div class="line">    };</div><div class="line">     </div><div class="line">    <span class="comment">// etc...</span></div><div class="line">     </div><div class="line">    <span class="keyword">return</span> parent;</div><div class="line">}(UTIL || {}, jQuery));</div></pre></td></tr></table></figure>

<p>我希望你能受益的，并请发表评论，分享您的想法。 现在，继续前进，并写出更好的，更模块化的JavaScript</p>
<blockquote>
<p>本文中的所有译文仅用于学习和交流目的，转载请务必注明文章译者、出处、和本文链接<br>我们的翻译工作遵照 CC 协议，如果我们的工作有侵犯到您的权益，请及时联系我们 </p>
</blockquote>
]]></content>
    <summary type="html"><![CDATA[<p>模块模式是JavaScript一种常用的编码模式。这是一般的理解，但也有一些高级应用没有得到很多关注。在本文中，我将回顾基础知识，浏览一些不错的高级技巧，甚至我认为是原生基础的。</p>
]]></summary>
    
      <category term="javascript" scheme="http://colobu.com/tags/javascript/"/>
    
      <category term="前端开发" scheme="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[打开你的思维:两点之间直线最快?]]></title>
    <link href="http://colobu.com/2014/09/19/open-your-mind-by-brachistochrone/"/>
    <id>http://colobu.com/2014/09/19/open-your-mind-by-brachistochrone/</id>
    <published>2014-09-19T05:12:11.000Z</published>
    <updated>2014-09-19T06:22:29.000Z</updated>
    <content type="html"><![CDATA[<p>原文出处: <a href="http://www.yixieshi.com/it/18974.html" target="_blank" rel="external">互联网的一些事</a></p>
<p>有多少人死在两点一线?<br><img src="http://3.im.guokr.com/gkimage/56/rx/2j/56rx2j.png" alt="图片来源于果壳网"><br><a id="more"></a></p>
<blockquote>
<p>数学上， 这叫做<a href="http://zh.wikipedia.org/wiki/%E6%9C%80%E9%80%9F%E9%99%8D%E7%B7%9A%E5%95%8F%E9%A1%8C" target="_blank" rel="external">最速降线问题</a>。 生活上，这叫<strong>顺势而为</strong>。</p>
</blockquote>
<hr>
<div class="articleCon"><br><center><br>    <img original="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WrWtcicGFIsDQsyzTdYskXuSJVLXX1BAwhQgNufknYSPWjibr2UHEY8hA/640" src="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WrWtcicGFIsDQsyzTdYskXuSJVLXX1BAwhQgNufknYSPWjibr2UHEY8hA/640" height="598" width="501" border="1"></center><br><center><br>    <img original="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8W5XOyZYTmKjP6zxSrFb61IBPrQf1W70ybS6iaXoHxCqda1j8xPtALxiaQ/640" src="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8W5XOyZYTmKjP6zxSrFb61IBPrQf1W70ybS6iaXoHxCqda1j8xPtALxiaQ/640" height="598" width="501" border="1"></center><br><center><br>    <img original="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WT846q0NQRfgEqYZlg8X3pOHe9Sa6PaueVNCWVP5l45EVa4jXPRY0zg/640" src="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WT846q0NQRfgEqYZlg8X3pOHe9Sa6PaueVNCWVP5l45EVa4jXPRY0zg/640" height="588" width="499" border="1"></center><br><center><br>    <img original="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WTSicPSiaQ6JVefHsTQdhe5qSBIsyOyRl9ndOY6D7BRLHYUebaZNo5Vtg/640" src="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WTSicPSiaQ6JVefHsTQdhe5qSBIsyOyRl9ndOY6D7BRLHYUebaZNo5Vtg/640" height="596" width="498" border="1"></center><br><center><br>    <img original="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WwuZzm9xN7dYgrxlL48BibkbXORvw6xclpNKwb8Gqv3KmXJUSQYsy3ibw/640" src="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WwuZzm9xN7dYgrxlL48BibkbXORvw6xclpNKwb8Gqv3KmXJUSQYsy3ibw/640" height="596" width="500" border="1"></center><br><center><br>    <img original="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WQHQjmEia2teEHH7NibCicyfvwduUia85MmN5nIJmyfNiaoRhaEkmDqwWvSQ/640" src="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WQHQjmEia2teEHH7NibCicyfvwduUia85MmN5nIJmyfNiaoRhaEkmDqwWvSQ/640" height="599" width="498" border="1"></center><br><center><br>    <img original="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8Wg5Emyicb6RpKFjia7JciapdYm10JDJFdCibahJT3KYF0NTRRFcrPxdibXYg/640" src="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8Wg5Emyicb6RpKFjia7JciapdYm10JDJFdCibahJT3KYF0NTRRFcrPxdibXYg/640" height="600" width="496" border="1"></center><br><center><br>    <img original="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WytKibI494g1YJPtxQjSdXvnBcZggX9LDJ1SiadRBKvNYk7mQqkuu7DYg/640" src="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WytKibI494g1YJPtxQjSdXvnBcZggX9LDJ1SiadRBKvNYk7mQqkuu7DYg/640" height="595" width="501" border="1"></center><br><center><br>    <img style="display: inline;" original="http://www.yixieshi.com/uploads/allimg/140918/1555162132-0.jpg" src="http://www.yixieshi.com/uploads/allimg/140918/1555162132-0.jpg" height="319" width="359" border="1"></center><br><center><br>    <img style="display: inline;" original="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WxlDVGuySdwLNmvS2buxjSfGfytOjRA6zniaNCSJQ7c5MazZ2s6GE0wQ/640" src="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WxlDVGuySdwLNmvS2buxjSfGfytOjRA6zniaNCSJQ7c5MazZ2s6GE0wQ/640" height="596" width="497" border="1"></center><br><center><br>    <img style="display: inline;" original="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8Wnt9FDdpKDatArnic25uUrA7r2LJTruxq2nhYSJXwLbFjicVWwbjTXkfw/640" src="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8Wnt9FDdpKDatArnic25uUrA7r2LJTruxq2nhYSJXwLbFjicVWwbjTXkfw/640" height="599" width="496" border="1"></center><br><center><br>    <img style="display: inline;" original="http://www.yixieshi.com/uploads/allimg/140918/1555163211-1.jpg" src="http://www.yixieshi.com/uploads/allimg/140918/1555163211-1.jpg" height="200" width="300" border="1"></center><br><center><br>    <img style="display: inline;" original="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WNCguO6VPlApGliajIibIPATBWxFvaqeVqkGicDfePoG8cD7kKU7aQqmfQ/640" src="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WNCguO6VPlApGliajIibIPATBWxFvaqeVqkGicDfePoG8cD7kKU7aQqmfQ/640" height="601" width="500" border="1"></center><br><center><br>    <img style="display: inline;" original="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WoiaTo2mLhXuIjvTClnqbcQxX1hic3haAqpbM5yRQoAaczpjjaXOpuKdg/640" src="http://mmbiz.qpic.cn/mmbiz/XGYjHeia6lmUddyBsbCELlOUrm8GtfS8WoiaTo2mLhXuIjvTClnqbcQxX1hic3haAqpbM5yRQoAaczpjjaXOpuKdg/640" height="597" width="498" border="1"></center><br><br></div>]]></content>
    <summary type="html"><![CDATA[<p>原文出处: <a href="http://www.yixieshi.com/it/18974.html" target="_blank" rel="external">互联网的一些事</a></p>
<p>有多少人死在两点一线?<br><img src="http://3.im.guokr.com/gkimage/56/rx/2j/56rx2j.png" alt="图片来源于果壳网"><br>]]></summary>
    
      <category term="鸡汤" scheme="http://colobu.com/categories/%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux Performance Analysis and Tools]]></title>
    <link href="http://colobu.com/2014/09/18/Linux-Performance-Analysis-and-Tools/"/>
    <id>http://colobu.com/2014/09/18/Linux-Performance-Analysis-and-Tools/</id>
    <published>2014-09-18T07:14:29.000Z</published>
    <updated>2014-09-19T00:24:57.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.brendangregg.com/linuxperf.html" target="_blank" rel="external">Brendan Gregg</a>曾是SUN公司(现已被Oracle收购)的kernal和性能工程师。2010年10月离开Oracle加入Joyent, 2014年成为Netflix公司的高级性能架构师。 Dtrace项目的专家之一， DTraceToolkit的创建者。 现在经常在他的博客上发表一些关于Linux性能的文章。<br>他专门开了一个页面介绍Linux 性能监控工具， 下图就是他的一副描述Linux监控工具的巨图：<br><img src="/images/2014-09-18/linux_observability_tools.png" alt="Linux observability tools" title="Linux observability tools"><br><a id="more"></a><br>他还制作了几张其它的关于Linux性能调优的工具图。<br><img src="/images/2014-09-18/linux_benchmarking_tools.png" alt="Linux benchmarking tools" title="Linux benchmarking tools"><br><img src="/images/2014-09-18/linux_tuning_tools.png" alt="Linux tuning tools" title="Linux tuning tools"><br><img src="/images/2014-09-18/linux_observability_sar.png" alt="Linux observability sar" title="Linux observability sar"></p>
<iframe src="//www.slideshare.net/slideshow/embed_code/16739605" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>]]></content>
    <summary type="html"><![CDATA[<p><a href="http://www.brendangregg.com/linuxperf.html" target="_blank" rel="external">Brendan Gregg</a>曾是SUN公司(现已被Oracle收购)的kernal和性能工程师。2010年10月离开Oracle加入Joyent, 2014年成为Netflix公司的高级性能架构师。 Dtrace项目的专家之一， DTraceToolkit的创建者。 现在经常在他的博客上发表一些关于Linux性能的文章。<br>他专门开了一个页面介绍Linux 性能监控工具， 下图就是他的一副描述Linux监控工具的巨图：<br><img src="/images/2014-09-18/linux_observability_tools.png" alt="Linux observability tools" title="Linux observability tools"><br>]]></summary>
    
      <category term="Linux" scheme="http://colobu.com/tags/Linux/"/>
    
      <category term="高并发编程" scheme="http://colobu.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux重传机制对测试结果的一个影响]]></title>
    <link href="http://colobu.com/2014/09/18/one-issue-caused-by-linux-retransmission/"/>
    <id>http://colobu.com/2014/09/18/one-issue-caused-by-linux-retransmission/</id>
    <published>2014-09-18T02:12:44.000Z</published>
    <updated>2014-09-19T00:24:38.000Z</updated>
    <content type="html"><![CDATA[<p>最近在测试系统的Benchmark的时候，遇到一个奇怪的现象： 有少许请求的总处理时间特别长。后来发现耗时基本处在connect to server上。<br><img src="/images/2014-09-18/benchmark_connect.jpg" alt=""><br>奇怪的是，耗时较长的连接所用的时间基本还有规律， 大概是1秒，3秒，7秒，15秒…..这样有规律的数列，而且耗时越长的连接数量越少。<br><a id="more"></a></p>
<h3 id="测试结果分析">测试结果分析</h3>
<p>我们的服务基本是一个部署在tomcat 7上的仅仅提供Restful API的web应用程序， 业务不是很复杂。 我使用ApacheBench性能测试工具进行Benchmark测试。<br>并发数选取500，测试脚本也很简单：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="title">rm</span> -fr esam.dat</div><div class="line">rm -f <span class="regexp">*.jpg</span></div><div class="line"></div><div class="line">ab -q -g data.dat -c <span class="number">500</span> -n <span class="number">100000</span> -H <span class="string">'Accept:application/xml'</span>  -p request.xml -T <span class="string">'application/xml'</span> <span class="url">http://ip:port/app/service1</span></div><div class="line"></div><div class="line">gnuplot conn.p</div><div class="line">gnuplot process.p</div><div class="line">gnuplot totaltime.p</div></pre></td></tr></table></figure>

<p>使用gnuplot将结果绘制成散列图。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># output to a jpeg file</span></div><div class="line"><span class="built_in">set</span> terminal jpeg size <span class="number">500</span>,<span class="number">500</span></div><div class="line"><span class="comment"># This sets the aspect ratio of the graph</span></div><div class="line"><span class="built_in">set</span> size <span class="number">1</span>, <span class="number">1</span></div><div class="line"><span class="comment"># The file we'll write to</span></div><div class="line"><span class="built_in">set</span> output <span class="string">"connect.jpg"</span></div><div class="line"><span class="comment"># The graph title</span></div><div class="line"><span class="built_in">set</span> title <span class="string">"Benchmark testing"</span></div><div class="line"><span class="comment"># Where to place the legend/key</span></div><div class="line"><span class="built_in">set</span> key left top</div><div class="line"><span class="comment"># Draw gridlines oriented on the y axis</span></div><div class="line"><span class="built_in">set</span> grid y</div><div class="line"><span class="comment"># Specify that the x-series data is time data</span></div><div class="line"><span class="built_in">set</span> xdata <span class="built_in">time</span></div><div class="line"><span class="comment"># Specify the *input* format of the time data</span></div><div class="line"><span class="built_in">set</span> timefmt <span class="string">"%s"</span></div><div class="line"><span class="comment"># Specify the *output* format for the x-axis tick labels</span></div><div class="line"><span class="built_in">set</span> <span class="built_in">format</span> x <span class="string">"%S"</span></div><div class="line"><span class="comment"># Label the x-axis</span></div><div class="line"><span class="built_in">set</span> xlabel <span class="string">'seconds'</span></div><div class="line"><span class="comment"># Label the y-axis</span></div><div class="line"><span class="built_in">set</span> ylabel <span class="string">"connecting time (ms)"</span></div><div class="line"><span class="comment"># Tell gnuplot to use tabs as the delimiter instead of spaces (default)</span></div><div class="line"><span class="built_in">set</span> datafile separator <span class="string">'\t'</span></div><div class="line"><span class="comment"># Plot the data</span></div><div class="line">plot <span class="string">"data.dat"</span> every ::<span class="number">2</span> <span class="keyword">using</span> <span class="number">2</span>:<span class="number">3</span> title <span class="string">'connecting time'</span> <span class="operator">with</span> points</div><div class="line">exit</div></pre></td></tr></table></figure>

<p>从结果图上看处理时间比较少，分布也很好(大概是正态分布的样子)。 ApacheBench的统计报告也显示服务器处理时间没问题， 那些耗时花费在connect上。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Concurrency Level:      <span class="number">500</span></div><div class="line">Time taken <span class="keyword">for</span> tests:   <span class="number">247.979</span> <span class="built_in">seconds</span></div><div class="line">Complete requests:      <span class="number">1000000</span></div><div class="line">Failed requests:        <span class="number">10</span></div><div class="line">   (Connect: <span class="number">0</span>, Receive: <span class="number">0</span>, Length: <span class="number">10</span>, Exceptions: <span class="number">0</span>)</div><div class="line">Write errors:           <span class="number">0</span></div><div class="line">Total transferred:      <span class="number">1795997576</span> <span class="keyword">bytes</span></div><div class="line">Total POSTed:           <span class="number">1061006366</span></div><div class="line">HTML transferred:       <span class="number">1662997443</span> <span class="keyword">bytes</span></div><div class="line">Requests per <span class="keyword">second</span>:    <span class="number">4032.60</span> [<span class="comment">#/sec] (mean)</span></div><div class="line">Time per request:       <span class="number">123.990</span> [ms] (mean)</div><div class="line">Time per request:       <span class="number">0.248</span> [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          <span class="number">7072.79</span> [Kbytes/<span class="built_in">sec</span>] received</div><div class="line">                        <span class="number">4178.33</span> kb/s sent</div><div class="line">                        <span class="number">11251.12</span> kb/s total</div><div class="line"></div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              <span class="built_in">min</span>  mean[+/-sd] <span class="built_in">median</span>   <span class="built_in">max</span></div><div class="line">Connect:        <span class="number">0</span>   <span class="number">78</span> <span class="number">367.1</span>      <span class="number">0</span>   <span class="number">15001</span></div><div class="line">Processing:     <span class="number">2</span>   <span class="number">46</span>  <span class="number">45.2</span>     <span class="number">28</span>    <span class="number">1593</span></div><div class="line">Waiting:        <span class="number">2</span>   <span class="number">46</span>  <span class="number">45.2</span>     <span class="number">28</span>    <span class="number">1593</span></div><div class="line">Total:          <span class="number">2</span>  <span class="number">124</span> <span class="number">371.9</span>     <span class="number">29</span>   <span class="number">15097</span></div></pre></td></tr></table></figure>

<h3 id="服务器端检查">服务器端检查</h3>
<p>现在将问题的焦点集中在为什么以小部分的连接为什么慢这个问题上。<br><code>dstat</code>随时监控着服务器的网络流量，读写基本都在10M左右，压力不大。<br>查看Tomcat NIO的实现。 Tomcat的NIO的实现还是比较特殊的。<br>Tomcat的<a href="http://www.docjar.com/html/api/org/apache/tomcat/util/net/NioEndpoint.java.html" target="_blank" rel="external">NioEndpoint.Acceptor</a>用来接受来自客户端的连接。<br>SocketChannel socket = serverSock.accept();<br>尽管代码中有pause(1000)的处理，但是只是在tomcat stop的时候调用。 只要网络条件允许， Tomcat应该能正常建立连接， 不会主动暂停接收连接请求。</p>
<h3 id="keep-alive的影响">keep-alive的影响</h3>
<p>监控服务器的连接数时发现测试时有大量的TCP连接建立和关闭。 没有利用HTTP的持久连接机制。<br>既然问题在于建立连接超时，那么只维持一定数量的连接应该可以避免这种问题。</p>
<p>Tomcat的配置中调整keep-alive相关的参数， ab的测试脚本中加入<code>-k</code>参数， 重新测试。</p>
<p>果不其然， 没有出现1秒,3秒这样跳跃的耗时长的请求。</p>
<h3 id="根源">根源</h3>
<p>为什么会出现部分耗时长的连接呢？<br>理论上好的网络条件下同一局域网内的服务器之间连接时间基本小于1毫秒， 除非三次握手不成功，TCP重试握手过程。<br>查找Linux 关于TCP/IP协议栈的参数的配置， 发现有几个相关的重试的参数：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">tcpsyn_retries</span></div><div class="line">tcp_synack_retries</div><div class="line">tcp_retries1</div><div class="line">tcp_retries2</div></pre></td></tr></table></figure>

<p>从客户端的角度分析， 我们可以看一下<code>tcpsyn_retries</code>这个参数。 </p>
<blockquote>
<p>对于一个新建连接，内核要发送多少个 SYN 连接请求才决定放弃。不应该大于255，默认值是5，对应于180秒左右时间。</p>
</blockquote>
<p>如果将这个值设为1, 测试建立connect时就会出现timeout的现象， 而不是等待1秒 ，3秒……才建立连接。</p>
<p>问题弄清楚了，在大量的短连接情况下， 部分的连接会出现三次握手不成功的现象。 如果握client发现握手在Linux配置的时间范围之内，TCP client还是会重试连接， 超出范围将会报连接超时。</p>
<h3 id="为什么是1,3,7,15……这样的数列？">为什么是1,3,7,15……这样的数列？</h3>
<p>这和Linux TCP/IP协议栈的实现相关。<br><a href="http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/net/ipv4/tcp_timer.c?id=4d22f7d372f5769c6c0149e427ed6353e2dcfe61" target="_blank" rel="external">tcp_timer.c</a><br>中计算超时时间：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((<span class="number">2</span> &lt;&lt; <span class="keyword">boundary</span>) - <span class="number">1</span>) * rto_base</div></pre></td></tr></table></figure>

<p>基本是按照\(2^n -1\)这样的时间来计算。</p>
]]></content>
    <summary type="html"><![CDATA[<p>最近在测试系统的Benchmark的时候，遇到一个奇怪的现象： 有少许请求的总处理时间特别长。后来发现耗时基本处在connect to server上。<br><img src="/images/2014-09-18/benchmark_connect.jpg" alt=""><br>奇怪的是，耗时较长的连接所用的时间基本还有规律， 大概是1秒，3秒，7秒，15秒…..这样有规律的数列，而且耗时越长的连接数量越少。<br>]]></summary>
    
      <category term="TCP/IP" scheme="http://colobu.com/tags/TCP-IP/"/>
    
      <category term="Linux" scheme="http://colobu.com/tags/Linux/"/>
    
      <category term="高并发编程" scheme="http://colobu.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux TCP/IP 协议栈调优]]></title>
    <link href="http://colobu.com/2014/09/18/linux-tcpip-tuning/"/>
    <id>http://colobu.com/2014/09/18/linux-tcpip-tuning/</id>
    <published>2014-09-18T00:36:17.000Z</published>
    <updated>2014-09-18T05:34:16.000Z</updated>
    <content type="html"><![CDATA[<p>最近忙于系统性能的DEBUG和调优。 有些性能瓶颈和Linux的TCP/IP的协议栈的设置有关，所以特别google了一下Linux TCP/IP的协议栈的参数意义和配置，记录一下。<br>如果想永久的保存参数的设置， 可以将参数加入到/etc/sysctl.conf中。如果想临时的更改参数的配置， 可以修改/proc/sys/net/ipv4/下的参数， 机器重启后更改失效。<br><a id="more"></a></p>
<hr>
<p><a href="http://yangrong.blog.51cto.com/6945369/1321594" target="_blank" rel="external">杨云1028</a>整理的参数的说明：<br>参考文章：<br>linux内核TCP相关参数解释<br><a href="http://os.chinaunix.net/a2008/0918/985/000000985483.shtml" target="_blank" rel="external">http://os.chinaunix.net/a2008/0918/985/000000985483.shtml</a></p>
<p>linux内核参数优化<br><a href="http://blog.chinaunix.net/uid-29081804-id-3830203.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-29081804-id-3830203.html</a></p>
<h3 id="linux内核参数注释">linux内核参数注释</h3>
<p>根据参数文件所处目录不同而进行分表整理<br><strong>下列文件所在目录：/proc/sys/net/ipv4/</strong></p>
<table style="width:100%;" cellpadding="0" cellspacing="0"><tbody><tr><td style="border-color:#000000;border-width:1px;background-color:#d9d9d9;padding:0px 7px;" width="274"><p style="text-align:center;"><span>名称</span></p></td><td style="border-top-color:#000000;border-right-color:#000000;border-bottom-color:#000000;border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-style:none;background-color:#d9d9d9;padding:0px 7px;" width="66"><p style="text-align:center;"><span>默认值</span></p></td><td style="border-top-color:#000000;border-right-color:#000000;border-bottom-color:#000000;border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-style:none;background-color:#d9d9d9;padding:0px 7px;" width="95"><p style="text-align:center;"><span>建议值</span></p></td><td style="border-top-color:#000000;border-right-color:#000000;border-bottom-color:#000000;border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-style:none;background-color:#d9d9d9;padding:0px 7px;" valign="top" width="455"><p><span>描述</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp<em>syn_retries</em></span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">5</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>对于一个新建连接，内核要发送多少个</span> SYN <span>连接请求才决定放弃。不应该大于</span>255<span>，默认值是</span>5<span>，对应于</span>180<span>秒左右时间。。</span>(<span>对于大负载而物理通信良好的网络而言</span>,<span>这个值偏高</span>,<span>可修改为</span>2.<span>这个值仅仅是针对对外的连接</span>,<span>对进来的连接</span>,<span>是由</span><strong><span style="font-family:cambria, serif;">tcp_retries1</span></strong><span>决定的</span>)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_synack_retries</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">5</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>对于远端的连接请求</span>SYN<span>，内核会发送</span>SYN <span>＋</span> ACK<span>数据报，以确认收到上一个</span> SYN<span>连接请求包。</span><span>这是所谓的三次握手</span>( threeway handshake)<span>机制的第二个步骤。这里决定内核在放弃连接之前所送出的</span> SYN+ACK <span>数目。不应该大于</span>255<span>，默认值是</span>5<span>，对应于</span>180<span>秒左右时间。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_keepalive_time</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">7200</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">600</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span style="font-size:15px;line-height:115%;">TCP</span><span style="font-size:15px;line-height:115%;">发送</span><span style="font-size:15px;line-height:115%;">keepalive</span><span style="font-size:15px;line-height:115%;">探测消息的间隔时间（秒），用于确认</span><span style="font-size:15px;line-height:115%;">TCP</span><span style="font-size:15px;line-height:115%;">连接是否有效。</span></p><p><span>防止两边建立连接但不发送数据的攻击。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_keepalive_probes</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">9</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">3</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span style="font-size:15px;line-height:115%;">TCP</span><span style="font-size:15px;line-height:115%;">发送</span><span style="font-size:15px;line-height:115%;">keepalive</span><span style="font-size:15px;line-height:115%;">探测消息的间隔时间（秒），用于确认</span><span style="font-size:15px;line-height:115%;">TCP</span><span style="font-size:15px;line-height:115%;">连接是否有效。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_keepalive_intvl</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">75</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">15</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span style="font-size:15px;line-height:115%;">探测消息未获得响应时，重发该消息的间隔时间（秒）。</span><span>默认值为</span>75<span>秒。</span> (<span>对于普通应用来说</span>,<span>这个值有一些偏大</span>,<span>可以根据需要改小</span>.<span>特别是</span>web<span>类服务器需要改小该值</span>,15<span>是个比较合适的值</span>)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_retries1</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">3</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">3</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>放弃回应一个</span>TCP<span>连接请求前﹐需要进行多少次重试。</span>RFC <span>规定最低的数值是</span>3</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_retries2</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">15</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">5</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>在丢弃激活</span>(<span>已建立通讯状况</span>)<span>的</span>TCP<span>连接之前﹐需要进行多少次重试。默认值为</span>15<span>，根据</span>RTO<span>的值来决定，相当于</span>13-30<span>分钟</span>(RFC1122<span>规定，必须大于</span>100<span>秒</span>).(<span>这个值根据目前的网络设置</span>,<span>可以适当地改小</span>,<span>我的网络内修改为了</span>5)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_orphan_retries</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">7</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">3</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>在近端丢弃</span>TCP<span>连接之前﹐要进行多少次重试。默认值是</span>7<span>个﹐相当于</span> 50<span>秒</span> - 16<span>分钟﹐视</span> RTO <span>而定。如果您的系统是负载很大的</span>web<span>服务器﹐那么也许需要降低该值﹐这类</span> sockets <span>可能会耗费大量的资源。另外参的考</span><strong><span style="font-family:cambria, serif;">tcp_max_orphans</span></strong><span>。</span>(<span>事实上做</span>NAT<span>的时候</span>,<span>降低该值也是好处显著的</span>,<span>我本人的网络环境中降低该值为</span>3)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_fin_timeout</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">60</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">2</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>对于本端断开的</span>socket<span>连接，</span>TCP<span>保持在</span>FIN-WAIT-2<span>状态的时间。对方可能会断开连接或一直不结束连接或不可预料的进程死亡。</span><span>默认值为</span> 60 <span>秒。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_max_tw_buckets</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">180000</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;"><span style="font-size:13px;line-height:115%;font-family:arial, sans-serif;">36000</span></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>系统在同时所处理的最大</span> timewait sockets <span>数目。如果超过此数的话﹐</span>time-wait socket <span>会被立即砍除并且显示警告信息。之所以要设定这个限制﹐纯粹为了抵御那些简单的</span> DoS <span>攻击﹐不过﹐如果网络条件需要比默认值更多﹐则可以提高它</span>(<span>或许还要增加内存</span>)<span>。</span>(<span>事实上做</span>NAT<span>的时候最好可以适当地增加该值</span>)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_tw_recycle</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>打开快速</span> TIME-WAIT sockets <span>回收。除非得到技术专家的建议或要求﹐请不要随意修改这个值。</span>(<span>做</span>NAT<span>的时候，建议打开它</span>)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_tw_reuse</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>表示是否允许重新应用处于</span>TIME-WAIT<span>状态的</span>socket<span>用于新的</span>TCP<span>连接</span>(<span>这个对快速重启动某些服务</span>,<span>而启动后提示端口已经被使用的情形非常有帮助</span>)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_max_orphans</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">8192</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">32768</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>系统所能处理不属于任何进程的</span>TCP sockets<span>最大数量。假如超过这个数量﹐那么不属于任何进程的连接会被立即</span>reset<span>，并同时显示警告信息。之所以要设定这个限制﹐纯粹为了抵御那些简单的</span> DoS <span>攻击﹐千万不要依赖这个或是人为的降低这个限制。如果内存大更应该增加这个值。</span>(<span>这个值</span>Redhat AS<span>版本中设置为</span>32768,<span>但是很多防火墙修改的时候</span>,<span>建议该值修改为</span>2000)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_abort_on_overflow</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>当守护进程太忙而不能接受新的连接，就象对方发送</span>reset<span>消息，默认值是</span>false<span>。这意味着当溢出的原因是因为一个偶然的猝发，那么连接将恢复状态。只有在你确信守护进程真的不能完成连接请求时才打开该选项，该选项会影响客户的使用。</span>(<span>对待已经满载的</span>sendmail,apache<span>这类服务的时候</span>,<span>这个可以很快让客户端终止连接</span>,<span>可以给予服务程序处理已有连接的缓冲机会</span>,<span>所以很多防火墙上推荐打开它</span>)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_syncookies</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>只有在内核编译时选择了</span>CONFIG_SYNCOOKIES<span>时才会发生作用。当出现</span>syn<span>等候队列出现溢出时象对方发送</span>syncookies<span>。</span><span>目的是为了防止</span>syn flood<span>攻击。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_stdurg</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>使用</span> TCP urg pointer <span>字段中的主机请求解释功能。大部份的主机都使用老旧的</span> BSD<span>解释，因此如果您在</span> Linux <span>打开它﹐或会导致不能和它们正确沟通。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_max_syn_backlog</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">1024</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">16384</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>对于那些依然还未获得客户端确认的连接请求﹐需要保存在队列中最大数目。对于超过</span> 128Mb <span>内存的系统﹐默认值是</span> 1024 <span>﹐低于</span> 128Mb <span>的则为</span> 128<span>。如果服务器经常出现过载﹐可以尝试增加这个数字。警告﹗假如您将此值设为大于</span> 1024<span>﹐最好修改</span><span style="font-family:cambria, serif;">include/net/tcp.h</span><span>里面的</span><span style="font-family:cambria, serif;">TCP_SYNQ_HSIZE</span><span>﹐以保持</span><span style="font-family:cambria, serif;">TCP_SYNQ_HSIZE*16(SYN Flood</span><span>攻击利用</span><span style="font-family:cambria, serif;">TCP</span><span>协议散布握手的缺陷，伪造虚假源</span><span style="font-family:cambria, serif;">IP</span><span>地址发送大量</span><span style="font-family:cambria, serif;">TCP-SYN</span><span>半打开连接到目标系统，最终导致目标系统</span><span style="font-family:cambria, serif;">Socket</span><span>队列资源耗尽而无法接受新的连接。为了应付这种攻击，现代</span><span style="font-family:cambria, serif;">Unix</span><span>系统中普遍采用多连接队列处理的方式来缓冲</span><span style="font-family:cambria, serif;">(</span><span>而不是解决</span><span style="font-family:cambria, serif;">)</span><span>这种攻击，是用一个基本队列处理正常的完全连接应用</span><span style="font-family:cambria, serif;">(Connect()</span><span>和</span><span style="font-family:cambria, serif;">Accept() )</span><span>，是用另一个队列单独存放半打开连接。</span><span>这种双队列处理方式和其他一些系统内核措施</span><span style="font-family:cambria, serif;">(</span><span>例如</span><span style="font-family:cambria, serif;">Syn-Cookies/Caches)</span><span>联合应用时，能够比较有效的缓解小规模的</span><span style="font-family:cambria, serif;">SYN Flood</span><span>攻击</span><span style="font-family:cambria, serif;">(</span><span>事实证明</span><span style="font-family:cambria, serif;">)</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_window_scaling</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>该文件表示设置</span>tcp/ip<span>会话的滑动窗口大小是否可变。参数值为布尔值，为</span>1<span>时表示可变，为</span>0<span>时表示不可变。</span>tcp/ip<span>通常使用的窗口最大可达到</span> 65535 <span>字节，对于高速网络，该值可能太小，这时候如果启用了该功能，可以使</span>tcp/ip<span>滑动窗口大小增大数个数量级，从而提高数据传输的能力</span>(RFC 1323)<span>。（对普通地百</span>M<span>网络而言，关闭会降低开销，所以如果不是高速网络，可以考虑设置为</span>0<span>）</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_timestamps</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p>Timestamps <span>用在其它一些东西中﹐可以防范那些伪造的</span> sequence <span>号码。一条</span>1G<span>的宽带线路或许会重遇到带</span> out-of-line<span>数值的旧</span>sequence <span>号码</span>(<span>假如它是由于上次产生的</span>)<span>。</span>Timestamp <span>会让它知道这是个</span> ‘<span>旧封包</span>‘<span>。</span>(<span>该文件表示是否启用以一种比超时重发更精确的方法（</span>RFC 1323<span>）来启用对</span> RTT <span>的计算；为了实现更好的性能应该启用这个选项。</span>)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_sack</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>使用</span> Selective ACK<span>﹐它可以用来查找特定的遗失的数据报</span>—- <span>因此有助于快速恢复状态。该文件表示是否启用有选择的应答（</span>Selective Acknowledgment<span>），这可以通过有选择地应答乱序接收到的报文来提高性能（这样可以让发送者只发送丢失的报文段）。</span>(<span>对于广域网通信来说这个选项应该启用，但是这会增加对</span> CPU <span>的占用。</span>)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_fack</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>打开</span>FACK<span>拥塞避免和快速重传功能。</span>(<span>注意，当</span><strong><span style="font-family:cambria, serif;">tcp_sack</span></strong><span>设置为</span>0<span>的时候，这个值即使设置为</span>1<span>也无效</span>)[<span style="color:#ff0000;">这个是</span><span style="color:#ff0000;">TCP</span><span style="color:#ff0000;">连接靠谱的核心功能</span>]</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_dsack</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>允许</span>TCP<span>发送</span>“<span>两个完全相同</span>“<span>的</span>SACK<span>。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_ecn</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p>TCP<span>的直接拥塞通告功能。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_reordering</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">3</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">6</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p>TCP<span>流中重排序的数据报最大数量</span><span>。</span> (<span>一般有看到推荐把这个数值略微调整大一些</span>,<span>比如</span>5)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_retrans_collapse</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">1</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>对于某些有</span>bug<span>的打印机提供针对其</span>bug<span>的兼容性。</span>(<span>一般不需要这个支持</span>,<span>可以关闭它</span>)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><a></a><a><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_wmem</span></strong></a><strong><span style="color:#ff0000;">：</span><span style="color:#ff0000;"><strong><span style="font-family:cambria, serif;">min</span></strong></span></strong><strong><strong><span style="font-family:cambria, serif;color:#ff0000;">default</span></strong></strong><strong><span style="color:#ff0000;"><strong><span style="font-family:cambria, serif;">max</span></strong></span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">4096 </p><p style="text-align:center;">16384 </p><p style="text-align:center;">131072</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">8192 </p><p style="text-align:center;">131072 </p><p style="text-align:center;"><span style="font-size:13px;line-height:115%;font-family:arial, sans-serif;">16777216</span></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p style="margin-bottom:0;"><span style="font-size:14px;">发送缓存设置</span></p><p style="margin-bottom:0;"><span style="font-size:14px;">min</span><span style="font-size:14px;">：为TCP socket预留用于发送缓冲的内存最小值。每个tcp socket都可以在建议以后都可以使用它。默认值为4096(4K)。</span></p><p style="margin-bottom:0;"><span style="font-size:14px;">default</span><span style="font-size:14px;">：为TCP socket预留用于发送缓冲的内存数量，默认情况下该值会影响其它协议使用的net.core.wmem_default 值，一般要低于net.core.wmem_default的值。默认值为16384(16K)。</span></p><p style="margin-bottom:0;"><span style="font-size:14px;">max: </span><span style="font-size:14px;">用于TCP socket发送缓冲的内存最大值。该值不会影响net.core.wmem_max，”静态”选择参数SO_SNDBUF则不受该值影响。默认值为131072(128K)。（对于服务器而言，增加这个参数的值对于发送数据很有帮助,在我的网络环境中,修改为了51200 131072 204800）</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp</span></strong><strong><span style="font-family:cambria, serif;color:#ff0000;">r</span></strong><strong><span style="font-family:cambria, serif;color:#ff0000;">mem</span></strong><strong><span style="color:#ff0000;">：</span><span style="color:#ff0000;"><strong><span style="font-family:cambria, serif;">min</span></strong></span></strong><strong><strong><span style="font-family:cambria, serif;color:#ff0000;">default</span></strong></strong><strong><span style="color:#ff0000;"><strong><span style="font-family:cambria, serif;">max</span></strong></span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;"><span style="font-size:13px;line-height:115%;font-family:arial, sans-serif;">4096</span><span style="font-size:13px;line-height:115%;font-family:arial, sans-serif;"></span></p><p style="text-align:center;"><span style="font-size:13px;line-height:115%;font-family:arial, sans-serif;">87380 </span></p><p style="text-align:center;"><span style="font-size:13px;line-height:115%;font-family:arial, sans-serif;">174760</span></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;"><span style="font-size:15px;line-height:115%;font-family:arial, sans-serif;">32768 </span></p><p style="text-align:center;"><span style="font-size:15px;line-height:115%;font-family:arial, sans-serif;">131072 </span></p><p style="text-align:center;"><span style="font-size:13px;line-height:115%;font-family:arial, sans-serif;">16777216</span></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>接收缓存设置</span></p><p><span>同</span>tcp_wmem</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;color:#ff0000;">tcp_mem</span></strong><strong><span style="color:#ff0000;">：</span><span style="color:#ff0000;"><strong><span style="font-family:cambria, serif;">min</span></strong></span></strong><strong><strong><span style="font-family:cambria, serif;color:#ff0000;">default</span></strong></strong><strong><span style="color:#ff0000;"><strong><span style="font-family:cambria, serif;">max</span></strong></span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;"><span>根据内存计算</span></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;"><span style="font-size:13px;line-height:115%;font-family:arial, sans-serif;">786432 </span></p><p style="text-align:center;"><span style="font-size:13px;line-height:115%;font-family:arial, sans-serif;">1048576 1572864</span></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p style="margin-bottom:0;"><strong><span style="font-size:16px;">low</span></strong><span style="font-size:16px;">：当TCP使用了低于该值的内存页面数时，TCP不会考虑释放内存。即低于此值没有内存压力。(理想情况下，这个值应与指定给 tcp_wmem 的第 2 个值相匹配 - 这第 2 个值表明，最大页面大小乘以最大并发请求数除以页大小 (131072 <em> 300 / 4096)。 )</em></span></p><p style="margin-bottom:0;"><strong><span style="font-size:16px;">pressure</span></strong><span style="font-size:16px;">：当TCP使用了超过该值的内存页面数量时，TCP试图稳定其内存使用，进入pressure模式，当内存消耗低于low值时则退出pressure状态。(理想情况下这个值应该是 TCP 可以使用的总缓冲区大小的最大值 (204800  300 / 4096)。 )</span></p><p style="margin-bottom:0;"><strong><span style="font-size:16px;">high</span></strong><span style="font-size:16px;">：允许所有tcp sockets用于排队缓冲数据报的页面量。(如果超过这个值，TCP 连接将被拒绝，这就是为什么不要令其过于保守 (512000 * 300 / 4096) 的原因了。 在这种情况下，提供的价值很大，它能处理很多连接，是所预期的 2.5 倍；或者使现有连接能够传输 2.5 倍的数据。 我的网络里为192000 300000 732000)</span></p><p style="margin-bottom:0;"><span style="font-size:16px;">一般情况下这些值是在系统启动时根据系统内存数量计算得到的。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_app_win</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">31</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">31</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>保留</span>max(window/2^tcp_app_win, mss)<span>数量的窗口由于应用缓冲。当为</span>0<span>时表示不需要缓冲。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_adv_win_scale</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">2</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">2</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>计算缓冲开销</span>bytes/2^tcp_adv_win_scale(<span>如果</span>tcp_adv_win_scale &gt; 0)<span>或者</span>bytes-bytes/2^(-tcp_adv_win_scale)(<span>如果</span>tcp_adv_win_scale BOOLEAN&gt;0)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_low_latency</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="66"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" width="95"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>允许</span> TCP/IP <span>栈适应在高吞吐量情况下低延时的情况；这个选项一般情形是的禁用。</span>(<span>但在构建</span>Beowulf <span>集群的时候</span>,<span>打开它很有帮助</span>)</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_westwood</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>启用发送者端的拥塞控制算法，它可以维护对吞吐量的评估，并试图对带宽的整体利用情况进行优化；对于</span> WAN <span>通信来说应该启用这个选项。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="text-align:justify;"><strong><span style="font-family:cambria, serif;">tcp_bic</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>为快速长距离网络启用</span> Binary Increase Congestion<span>；这样可以更好地利用以</span> GB <span>速度进行操作的链接；对于</span> WAN <span>通信应该启用这个选项。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="text-align:justify;"><strong>ip_forward</strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">0</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;"><span>－</span></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p>NAT<span>必须开启</span>IP<span>转发支持，把该值写</span>1</p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="text-align:justify;"><strong><span style="color:#ff0000;">ip_local_port_range</span></strong><span style="color:#ff0000;">:</span><span style="color:#ff0000;">min</span><span style="color:#ff0000;">max</span></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">32768</p><p style="text-align:center;">61000</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;">1024</p><p style="text-align:center;">65000</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span style="font-size:15px;line-height:115%;">表示用于向外连接的端口范围</span><span>，默认比较小，这个范围同样会间接用于</span>NAT<span>表规模。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="text-align:justify;"><a></a><a><strong><span style="color:#ff0000;">ip_conntrack_max</span></strong></a></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">65535</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;">65535</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="455"><p><span>系统支持的最大</span>ipv4<span>连接数，默认</span>65536<span>（事实上这也是理论最大值），同时这个值和你的内存大小有关，如果内存</span>128M<span>，这个值最大</span>8192<span>，</span>1G<span>以上内存这个值都是默认</span>65536</p></td></tr></tbody></table>

<p><strong>所处目录/proc/sys/net/ipv4/netfilter/</strong><br>文件需要打开防火墙才会存在</p>
<table cellpadding="0" cellspacing="0"><tbody><tr><td style="border-color:#000000;border-width:1px;background-color:#d9d9d9;padding:0px 7px;" valign="top" width="274"><p style="text-align:center;"><span>名称</span></p></td><td style="border-top-color:#000000;border-right-color:#000000;border-bottom-color:#000000;border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-style:none;background-color:#d9d9d9;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;"><span>默认值</span></p></td><td style="border-top-color:#000000;border-right-color:#000000;border-bottom-color:#000000;border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-style:none;background-color:#d9d9d9;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;"><span>建议值</span></p></td><td style="border-top-color:#000000;border-right-color:#000000;border-bottom-color:#000000;border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-style:none;background-color:#d9d9d9;padding:0px 7px;" valign="top" width="300"><p><span>描述</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="text-align:justify;"><strong><span style="color:#ff0000;">ip_conntrack_max</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">65536</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;">65536</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="300"><p><span>系统支持的最大</span>ipv4<span>连接数，默认</span>65536<span>（事实上这也是理论最大值），同时这个值和你的内存大小有关，如果内存</span>128M<span>，这个值最大</span>8192<span>，</span>1G<span>以上内存这个值都是默认</span>65536,<span>这个值受</span>/proc/sys/net/ipv4/ip_conntrack_max<span>限制</span></p><p><br></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="text-align:justify;"><a></a><a><strong><span style="color:#ff0000;">ip_conntrack_tcp_timeout_established</span></strong></a></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">432000</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;">180</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="300"><p><span>已建立的</span>tcp<span>连接的超时时间，默认</span>432000<span>，也就是</span>5<span>天。</span><span style="font-size:13px;line-height:115%;">影响：这个值过大将导致一些可能已经不用的连接常驻于内存中，占用大量链接资源，从而可能导致</span><span style="font-size:13px;line-height:115%;">NAT ip_conntrack: table full</span><span style="font-size:13px;line-height:115%;">的问题</span><span style="font-size:13px;line-height:115%;">。</span><span style="font-size:13px;line-height:115%;">建议：对于</span><span style="font-size:13px;line-height:115%;">NAT</span><span style="font-size:13px;line-height:115%;">负载相对本机的</span><span style="font-size:13px;line-height:115%;"> NAT</span><span style="font-size:13px;line-height:115%;">表大小很紧张的时候，可能需要考虑缩小这个值，以尽早清除连接，保证有可用的连接资源；如果不紧张，不必修改</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="text-align:justify;"><a></a><a><strong><span style="font-family:arial, sans-serif;">ip_conntrack_tcp_timeout_time_wait</span></strong></a></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">120</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;">120</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="300"><p>time_wait<span>状态超时时间，超过该时间就清除该连接</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="text-align:justify;"><strong><span style="font-family:arial, sans-serif;">ip_conntrack_tcp_timeout_close_wait</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">60</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;">60</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="300"><p>close_wait<span>状态超时时间，超过该时间就清除该连接</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="text-align:justify;"><strong><span style="font-family:arial, sans-serif;">ip_conntrack_tcp_timeout_fin_wait</span></strong></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">120</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;">120</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="300"><p>fin_wait<span>状态超时时间，超过该时间就清除该连接</span></p></td></tr></tbody></table>

<p><strong>文件所处目录/proc/sys/net/core/</strong></p>
<table cellpadding="0" cellspacing="0"><tbody><tr><td style="border-color:#000000;border-width:1px;background-color:#d9d9d9;padding:0px 7px;" valign="top" width="274"><p><span>名称</span></p></td><td style="border-top-color:#000000;border-right-color:#000000;border-bottom-color:#000000;border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-style:none;background-color:#d9d9d9;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;"><span>默认值</span></p></td><td style="border-top-color:#000000;border-right-color:#000000;border-bottom-color:#000000;border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-style:none;background-color:#d9d9d9;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;"><span>建议值</span></p></td><td style="border-top-color:#000000;border-right-color:#000000;border-bottom-color:#000000;border-top-width:1px;border-right-width:1px;border-bottom-width:1px;border-left-style:none;background-color:#d9d9d9;padding:0px 7px;" valign="top" width="300"><p><span>描述</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="margin-bottom:0;"><a></a><a><span style="font-size:16px;color:#ff0000;">netdev_max_backlog</span></a><span style="font-size:16px;color:#ff0000;"><br><br></span></p><p style="margin-bottom:0;"><br></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">1024</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;">16384</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="300"><p><span style="font-size:16px;line-height:115%;">每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目，对重负载服务器而言，该值需要调高一点。</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="margin-bottom:0;"><span style="font-size:16px;color:#ff0000;">somaxconn <br><br></span></p><p style="margin-bottom:0;"><br></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">128</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;">16384</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="300"><p><span style="font-size:16px;line-height:115%;">用来限制监听(LISTEN)队列最大数据包的数量，超过这个数量就会导致链接超时或者触发重传机制。</span></p><p><span style="font-size:16px;line-height:115%;">web</span><span style="font-size:16px;line-height:115%;">应用中listen函数的backlog默认会给我们内核参数的net.core.somaxconn限制到128，而nginx定义的NGX_LISTEN_BACKLOG默认为511，所以有必要调整这个值。对繁忙的服务器,增加该值有助于网络性能</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="margin-bottom:0;"><a></a><a><span style="font-size:16px;">wmem_default</span></a></p><p style="margin-bottom:0;"><br></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">129024</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;">129024</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="300"><p><span style="font-size:13px;line-height:115%;">默认的发送窗口大小</span><span style="font-size:16px;line-height:115%;">（以字节为单位）</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="margin-bottom:0;"><span style="font-size:16px;">rmem_default </span></p><p style="margin-bottom:0;"><br></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">129024</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;">129024</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="300"><p><span style="font-size:13px;line-height:115%;">默认的接收窗口大小</span><span style="font-size:16px;line-height:115%;">（以字节为单位）</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="margin-bottom:0;"><a></a><a></a><a><span style="font-size:16px;">rmem_max</span></a></p><p style="margin-bottom:0;"><br></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">129024</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;"><span style="font-size:16px;line-height:115%;">873200</span></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="300"><p><span style="font-size:16px;line-height:115%;">最大的TCP数据接收缓冲</span></p></td></tr><tr><td style="border-right-color:#000000;border-bottom-color:#000000;border-left-color:#000000;border-right-width:1px;border-bottom-width:1px;border-left-width:1px;border-top-style:none;padding:0px 7px;" valign="top" width="274"><p style="margin-bottom:0;"><span style="font-size:16px;">wmem_max </span></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="66"><p style="text-align:center;">129024</p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="95"><p style="text-align:center;"><span style="font-size:16px;line-height:115%;">873200</span></p></td><td style="border-top-style:none;border-left-style:none;border-bottom-color:#000000;border-bottom-width:1px;border-right-color:#000000;border-right-width:1px;padding:0px 7px;" valign="top" width="300"><p><span style="font-size:16px;line-height:115%;">最大的TCP数据发送缓冲</span></p></td></tr></tbody></table>

<h3 id="两种修改内核参数方法">两种修改内核参数方法</h3>
<ol>
<li><p>使用echo value方式直接追加到文件里如echo “1” &gt;/proc/sys/net/ipv4/tcp_syn_retries，但这种方法设备重启后又会恢复为默认值</p>
</li>
<li><p>把参数添加到/etc/sysctl.conf中，然后执行sysctl -p使参数生效，永久生效</p>
</li>
</ol>
<h3 id="内核生产环境优化参数">内核生产环境优化参数</h3>
<p>生产中常用的参数：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">net.ipv4.<span class="variable">tcp_syn_retries =</span> <span class="number">1</span></div><div class="line">net.ipv4.<span class="variable">tcp_synack_retries =</span> <span class="number">1</span></div><div class="line">net.ipv4.<span class="variable">tcp_keepalive_time =</span> <span class="number">600</span></div><div class="line">net.ipv4.<span class="variable">tcp_keepalive_probes =</span> <span class="number">3</span></div><div class="line">net.ipv4.<span class="variable">tcp_keepalive_intvl =</span><span class="number">15</span></div><div class="line">net.ipv4.<span class="variable">tcp_retries2 =</span> <span class="number">5</span></div><div class="line">net.ipv4.<span class="variable">tcp_fin_timeout =</span> <span class="number">2</span></div><div class="line">net.ipv4.<span class="variable">tcp_max_tw_buckets =</span> <span class="number">36000</span></div><div class="line">net.ipv4.<span class="variable">tcp_tw_recycle =</span> <span class="number">1</span></div><div class="line">net.ipv4.<span class="variable">tcp_tw_reuse =</span> <span class="number">1</span></div><div class="line">net.ipv4.<span class="variable">tcp_max_orphans =</span> <span class="number">32768</span></div><div class="line">net.ipv4.<span class="variable">tcp_syncookies =</span> <span class="number">1</span></div><div class="line">net.ipv4.<span class="variable">tcp_max_syn_backlog =</span> <span class="number">16384</span></div><div class="line">net.ipv4.<span class="variable">tcp_wmem =</span> <span class="number">8192</span> <span class="number">131072</span> <span class="number">16777216</span></div><div class="line">net.ipv4.<span class="variable">tcp_rmem =</span> <span class="number">32768</span> <span class="number">131072</span> <span class="number">16777216</span></div><div class="line">net.ipv4.<span class="variable">tcp_mem =</span> <span class="number">786432</span> <span class="number">1048576</span> <span class="number">1572864</span></div><div class="line">net.ipv4.<span class="variable">ip_local_port_range =</span> <span class="number">1024</span> <span class="number">65000</span></div><div class="line">net.ipv4.<span class="variable">ip_conntrack_max =</span> <span class="number">65536</span></div><div class="line">net.ipv4.netfilter.<span class="variable">ip_conntrack_max=</span><span class="number">65536</span></div><div class="line">net.ipv4.netfilter.<span class="variable">ip_conntrack_tcp_timeout_established=</span><span class="number">180</span></div><div class="line">net.core.<span class="variable">somaxconn =</span> <span class="number">16384</span></div><div class="line">net.core.<span class="variable">netdev_max_backlog =</span> <span class="number">16384</span></div></pre></td></tr></table></figure>

<p>不同的生产环境需要优化的参数基本差不多，只是值有相应的变化。具体优化值要参考应用场景，这儿所列只是常用优化参数，是否适合，可在上面查看该参数描述，理解后，再根据自己生产环境而设。</p>
<p>其它相关linux内核参数调整文章：<br>Linux内核参数优化<br><a href="http://flandycheng.blog.51cto.com/855176/476769" target="_blank" rel="external">http://flandycheng.blog.51cto.com/855176/476769</a></p>
<p>优化linux的内核参数来提高服务器并发处理能力<br><a href="http://www.ha97.com/4396.html" target="_blank" rel="external">http://www.ha97.com/4396.html</a></p>
<p>nginx做web服务器linux内核参数优化<br><a href="http://blog.csdn.net/force_eagle/article/details/6725243" target="_blank" rel="external">http://blog.csdn.net/force_eagle/article/details/6725243</a></p>
<hr>
<p><a href="http://www.sudops.com/linux-kernel-tcp-ip-sysctl-optimize.html" target="_blank" rel="external">sudops网站</a>提供的优化例子:<br>Linux下TCP/IP及内核参数优化有多种方式，参数配置得当可以大大提高系统的性能，也可以根据特定场景进行专门的优化，如TIME_WAIT过高，DDOS攻击等等。<br>如下配置是写在sysctl.conf中，可使用sysctl -p生效，文中附带了一些默认值和中文解释（从网上收集和翻译而来），确有些辛苦，转载请保留链接，谢谢～。<br>相关参数仅供参考，具体数值还需要根据机器性能，应用场景等实际情况来做更细微调整。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line">net.core.netdev_max_backlog = <span class="number">400000</span></div><div class="line"><span class="preprocessor">#该参数决定了，网络设备接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</span></div><div class="line"> </div><div class="line">net.core.optmem_max = <span class="number">10000000</span></div><div class="line"><span class="preprocessor">#该参数指定了每个套接字所允许的最大缓冲区的大小</span></div><div class="line"> </div><div class="line">net.core.rmem_default = <span class="number">10000000</span></div><div class="line"><span class="preprocessor">#指定了接收套接字缓冲区大小的缺省值（以字节为单位）。</span></div><div class="line"> </div><div class="line">net.core.rmem_max = <span class="number">10000000</span></div><div class="line"><span class="preprocessor">#指定了接收套接字缓冲区大小的最大值（以字节为单位）。</span></div><div class="line"> </div><div class="line">net.core.somaxconn = <span class="number">100000</span></div><div class="line"><span class="preprocessor">#Linux kernel参数，表示socket监听的backlog(监听队列)上限</span></div><div class="line"> </div><div class="line">net.core.wmem_default = <span class="number">11059200</span></div><div class="line"><span class="preprocessor">#定义默认的发送窗口大小；对于更大的 BDP 来说，这个大小也应该更大。</span></div><div class="line"> </div><div class="line">net.core.wmem_max = <span class="number">11059200</span></div><div class="line"><span class="preprocessor">#定义发送窗口的最大大小；对于更大的 BDP 来说，这个大小也应该更大。</span></div><div class="line"> </div><div class="line">net.ipv4.conf.all.rp_filter = <span class="number">1</span></div><div class="line">net.ipv4.conf.<span class="keyword">default</span>.rp_filter = <span class="number">1</span></div><div class="line"><span class="preprocessor">#严谨模式 1 (推荐)</span></div><div class="line"><span class="preprocessor">#松散模式 0</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_congestion_control = bic</div><div class="line"><span class="preprocessor">#默认推荐设置是 htcp</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_window_scaling = <span class="number">0</span></div><div class="line"><span class="preprocessor">#关闭tcp_window_scaling</span></div><div class="line"><span class="preprocessor">#启用 RFC 1323 定义的 window scaling；要支持超过 64KB 的窗口，必须启用该值。</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_ecn = <span class="number">0</span></div><div class="line"><span class="preprocessor">#把TCP的直接拥塞通告(tcp_ecn)关掉</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_sack = <span class="number">1</span></div><div class="line"><span class="preprocessor">#关闭tcp_sack</span></div><div class="line"><span class="preprocessor">#启用有选择的应答（Selective Acknowledgment），</span></div><div class="line"><span class="preprocessor">#这可以通过有选择地应答乱序接收到的报文来提高性能（这样可以让发送者只发送丢失的报文段）；</span></div><div class="line"><span class="preprocessor">#（对于广域网通信来说）这个选项应该启用，但是这会增加对 CPU 的占用。</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_max_tw_buckets = <span class="number">10000</span></div><div class="line"><span class="preprocessor">#表示系统同时保持TIME_WAIT套接字的最大数量</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_max_syn_backlog = <span class="number">8192</span></div><div class="line"><span class="preprocessor">#表示SYN队列长度，默认1024，改成8192，可以容纳更多等待连接的网络连接数。</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_syncookies = <span class="number">1</span></div><div class="line"><span class="preprocessor">#表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_timestamps = <span class="number">1</span></div><div class="line"><span class="preprocessor">#开启TCP时间戳</span></div><div class="line"><span class="preprocessor">#以一种比重发超时更精确的方法（请参阅 RFC 1323）来启用对 RTT 的计算；为了实现更好的性能应该启用这个选项。</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_tw_reuse = <span class="number">1</span></div><div class="line"><span class="preprocessor">#表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_tw_recycle = <span class="number">1</span></div><div class="line"><span class="preprocessor">#表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_fin_timeout = <span class="number">10</span></div><div class="line"><span class="preprocessor">#表示如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2状态的时间。</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_keepalive_time = <span class="number">1800</span></div><div class="line"><span class="preprocessor">#表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为30分钟。</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_keepalive_probes = <span class="number">3</span></div><div class="line"><span class="preprocessor">#如果对方不予应答，探测包的发送次数</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_keepalive_intvl = <span class="number">15</span></div><div class="line"><span class="preprocessor">#keepalive探测包的发送间隔</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_mem</div><div class="line"><span class="preprocessor">#确定 TCP 栈应该如何反映内存使用；每个值的单位都是内存页（通常是 4KB）。</span></div><div class="line"><span class="preprocessor">#第一个值是内存使用的下限。</span></div><div class="line"><span class="preprocessor">#第二个值是内存压力模式开始对缓冲区使用应用压力的上限。</span></div><div class="line"><span class="preprocessor">#第三个值是内存上限。在这个层次上可以将报文丢弃，从而减少对内存的使用。对于较大的 BDP 可以增大这些值（但是要记住，其单位是内存页，而不是字节）。</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_rmem</div><div class="line"><span class="preprocessor">#与 tcp_wmem 类似，不过它表示的是为自动调优所使用的接收缓冲区的值。</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_wmem = <span class="number">30000000</span> <span class="number">30000000</span> <span class="number">30000000</span></div><div class="line"><span class="preprocessor">#为自动调优定义每个 socket 使用的内存。</span></div><div class="line"><span class="preprocessor">#第一个值是为 socket 的发送缓冲区分配的最少字节数。</span></div><div class="line"><span class="preprocessor">#第二个值是默认值（该值会被 wmem_default 覆盖），缓冲区在系统负载不重的情况下可以增长到这个值。</span></div><div class="line"><span class="preprocessor">#第三个值是发送缓冲区空间的最大字节数（该值会被 wmem_max 覆盖）。</span></div><div class="line"> </div><div class="line">net.ipv4.ip_local_port_range = <span class="number">1024</span> <span class="number">65000</span></div><div class="line"><span class="preprocessor">#表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为1024到65000。</span></div><div class="line"> </div><div class="line">net.ipv4.netfilter.ip_conntrack_max=<span class="number">204800</span></div><div class="line"><span class="preprocessor">#设置系统对最大跟踪的TCP连接数的限制</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_slow_start_after_idle = <span class="number">0</span></div><div class="line"><span class="preprocessor">#关闭tcp的连接传输的慢启动，即先休止一段时间，再初始化拥塞窗口。</span></div><div class="line"> </div><div class="line">net.ipv4.route.gc_timeout = <span class="number">100</span></div><div class="line"><span class="preprocessor">#路由缓存刷新频率，当一个路由失败后多长时间跳到另一个路由，默认是300。</span></div><div class="line"> </div><div class="line">net.ipv4.tcp_syn_retries = <span class="number">1</span></div><div class="line"><span class="preprocessor">#在内核放弃建立连接之前发送SYN包的数量。</span></div><div class="line"> </div><div class="line">net.ipv4.icmp_echo_ignore_broadcasts = <span class="number">1</span></div><div class="line"><span class="preprocessor"># 避免放大攻击</span></div><div class="line"> </div><div class="line">net.ipv4.icmp_ignore_bogus_error_responses = <span class="number">1</span></div><div class="line"><span class="preprocessor"># 开启恶意icmp错误消息保护</span></div><div class="line"> </div><div class="line">net.inet.udp.checksum=<span class="number">1</span></div><div class="line"><span class="preprocessor">#防止不正确的udp包的攻击</span></div><div class="line"> </div><div class="line">net.ipv4.conf.<span class="keyword">default</span>.accept_source_route = <span class="number">0</span></div><div class="line"><span class="preprocessor">#是否接受含有源路由信息的ip包。参数值为布尔值，1表示接受，0表示不接受。</span></div><div class="line"><span class="preprocessor">#在充当网关的linux主机上缺省值为1，在一般的linux主机上缺省值为0。</span></div><div class="line"><span class="preprocessor">#从安全性角度出发，建议你关闭该功能。</span></div></pre></td></tr></table></figure>

<hr>
<p><a href="http://www.cnblogs.com/fczjuever/archive/2013/04/17/3026694.html" target="_blank" rel="external">最初的幸福ever</a>也提供了一些参数的说明。</p>
<p><strong>/proc/sys/net目录</strong><br>所有的TCP/IP参数都位于/proc/sys/net目录下（请注意，对/proc/sys/net目录下内容的修改都是临时的，任何修改在系统重启后都会丢失），例如下面这些重要的参数：</p>
<table cellpadding="0" cellspacing="0"><tbody><tr><td width="314"><p align="center"><span style="font-size: 13px;"><strong>参数（路径</strong><strong>+</strong><strong>文件）</strong></span></p></td><td width="449"><p align="center"><span style="font-size: 13px;"><strong>描述</strong></span></p></td><td width="212"><p align="center"><span style="font-size: 13px;"><strong>默认值</strong></span></p></td><td width="225"><p align="center"><span style="font-size: 13px;"><strong>优化值</strong></span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/core/rmem_default</span></p></td><td width="449"><p align="left"><span style="font-size: 13px;">默认的TCP数据接收窗口大小（字节）。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">229376</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">256960</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/core/rmem_max</span></p></td><td width="449"><p><span style="font-size: 13px;">最大的TCP数据接收窗口（字节）。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">131071</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">513920</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/core/wmem_default</span></p></td><td width="449"><p><span style="font-size: 13px;">默认的TCP数据发送窗口大小（字节）。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">229376</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">256960</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/core/wmem_max</span></p></td><td width="449"><p><span style="font-size: 13px;">最大的TCP数据发送窗口（字节）。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">131071</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">513920</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/core/netdev_max_backlog</span></p></td><td width="449"><p><span style="font-size: 13px;">在每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">1000</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">2000</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/core/somaxconn</span></p></td><td width="449"><p><span style="font-size: 13px;">定义了系统中每一个端口最大的监听队列的长度，这是个全局的参数。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">128</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">2048</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/core/optmem_max</span></p></td><td width="449"><p><span style="font-size: 13px;">表示每个套接字所允许的最大缓冲区的大小。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">20480</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">81920</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_mem</span></p></td><td width="449"><p><span style="font-size: 13px;">确定TCP栈应该如何反映内存使用，每个值的单位都是内存页（通常是4KB）。第一个值是内存使用的下限；第二个值是内存压力模式开始对缓冲区使用应用压力的上限；第三个值是内存使用的上限。在这个层次上可以将报文丢弃，从而减少对内存的使用。对于较大的BDP可以增大这些值（注意，其单位是内存页而不是字节）。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">94011&nbsp; 125351&nbsp; 188022</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">131072&nbsp; 262144&nbsp; 524288</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_rmem</span></p></td><td width="449"><p><span style="font-size: 13px;">为自动调优定义socket使用的内存。第一个值是为socket接收缓冲区分配的最少字节数；第二个值是默认值（该值会被rmem_default覆盖），缓冲区在系统负载不重的情况下可以增长到这个值；第三个值是接收缓冲区空间的最大字节数（该值会被rmem_max覆盖）。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">4096&nbsp; 87380&nbsp; 4011232</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">8760&nbsp; 256960&nbsp; 4088000</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_wmem</span></p></td><td width="449"><p><span style="font-size: 13px;">为自动调优定义socket使用的内存。第一个值是为socket发送缓冲区分配的最少字节数；第二个值是默认值（该值会被wmem_default覆盖），缓冲区在系统负载不重的情况下可以增长到这个值；第三个值是发送缓冲区空间的最大字节数（该值会被wmem_max覆盖）。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">4096&nbsp; 16384&nbsp; 4011232</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">8760&nbsp; 256960&nbsp; 4088000</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_keepalive_time</span></p></td><td width="449"><p><span style="font-size: 13px;">TCP发送keepalive探测消息的间隔时间（秒），用于确认TCP连接是否有效。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">7200</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">1800</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_keepalive_intvl</span></p></td><td width="449"><p><span style="font-size: 13px;">探测消息未获得响应时，重发该消息的间隔时间（秒）。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">75</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">30</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_keepalive_probes</span></p></td><td width="449"><p><span style="font-size: 13px;">在认定TCP连接失效之前，最多发送多少个keepalive探测消息。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">9</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">3</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_sack</span></p></td><td width="449"><p><span style="font-size: 13px;">启用有选择的应答（1表示启用），通过有选择地应答乱序接收到的报文来提高性能，让发送者只发送丢失的报文段，（对于广域网通信来说）这个选项应该启用，但是会增加对CPU的占用。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">1</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">1</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_fack</span></p></td><td width="449"><p><span style="font-size: 13px;">启用转发应答，可以进行有选择应答（SACK）从而减少拥塞情况的发生，这个选项也应该启用。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">1</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">1</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_timestamps</span></p></td><td width="449"><p><span style="font-size: 13px;">TCP时间戳（会在TCP包头增加12个字节），以一种比重发超时更精确的方法（参考RFC 1323）来启用对RTT 的计算，为实现更好的性能应该启用这个选项。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">1</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">1</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_window_scaling</span></p></td><td width="449"><p><span style="font-size: 13px;">启用RFC 1323定义的window scaling，要支持超过64KB的TCP窗口，必须启用该值（1表示启用），TCP窗口最大至1GB，TCP连接双方都启用时才生效。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">1</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">1</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_syncookies</span></p></td><td width="449"><p><span style="font-size: 13px;">表示是否打开TCP同步标签（syncookie），内核必须打开了CONFIG_SYN_COOKIES项进行编译，同步标签可以防止一个套接字在有过多试图连接到达时引起过载。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">1</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">1</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_tw_reuse</span></p></td><td width="449"><p><span style="font-size: 13px;">表示是否允许将处于TIME-WAIT状态的socket（TIME-WAIT的端口）用于新的TCP连接 。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">0</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">1</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_tw_recycle</span></p></td><td width="449"><p><span style="font-size: 13px;">能够更快地回收TIME-WAIT套接字。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">0</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">1</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_fin_timeout</span></p></td><td width="449"><p><span style="font-size: 13px;">对于本端断开的socket连接，TCP保持在FIN-WAIT-2状态的时间（秒）。对方可能会断开连接或一直不结束连接或不可预料的进程死亡。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">60</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">30</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/ip_local_port_range</span></p></td><td width="449"><p><span style="font-size: 13px;">表示TCP/UDP协议允许使用的本地端口号</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">32768&nbsp; 61000</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">1024&nbsp; 65000</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_max_syn_backlog</span></p></td><td width="449"><p><span style="font-size: 13px;">对于还未获得对方确认的连接请求，可保存在队列中的最大数目。如果服务器经常出现过载，可以尝试增加这个数字。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">2048</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">2048</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_low_latency</span></p></td><td width="449"><p><span style="font-size: 13px;">允许TCP/IP栈适应在高吞吐量情况下低延时的情况，这个选项应该禁用。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">0</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">&nbsp;</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_westwood</span></p></td><td width="449"><p><span style="font-size: 13px;">启用发送者端的拥塞控制算法，它可以维护对吞吐量的评估，并试图对带宽的整体利用情况进行优化，对于WAN 通信来说应该启用这个选项。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">0</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">&nbsp;</span></p></td></tr><tr><td width="314"><p><span style="font-size: 13px;">/proc/sys/net/ipv4/tcp_bic</span></p></td><td width="449"><p><span style="font-size: 13px;">为快速长距离网络启用Binary Increase Congestion，这样可以更好地利用以GB速度进行操作的链接，对于WAN通信应该启用这个选项。</span></p></td><td width="212"><p align="center"><span style="font-size: 13px;">1</span></p></td><td width="225"><p align="center"><span style="font-size: 13px;">&nbsp;</span></p></td></tr></tbody></table>
]]></content>
    <summary type="html"><![CDATA[<p>最近忙于系统性能的DEBUG和调优。 有些性能瓶颈和Linux的TCP/IP的协议栈的设置有关，所以特别google了一下Linux TCP/IP的协议栈的参数意义和配置，记录一下。<br>如果想永久的保存参数的设置， 可以将参数加入到/etc/sysctl.conf中。如果想临时的更改参数的配置， 可以修改/proc/sys/net/ipv4/下的参数， 机器重启后更改失效。<br>]]></summary>
    
      <category term="sysctl" scheme="http://colobu.com/tags/sysctl/"/>
    
      <category term="TCP/IP" scheme="http://colobu.com/tags/TCP-IP/"/>
    
      <category term="Linux" scheme="http://colobu.com/tags/Linux/"/>
    
      <category term="高并发编程" scheme="http://colobu.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
