<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[鸟窝]]></title>
  <subtitle><![CDATA[大道至简 Simplicity is the ultimate form of sophistication]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://colobu.com/"/>
  <updated>2016-02-18T01:45:41.781Z</updated>
  <id>http://colobu.com/</id>
  
  <author>
    <name><![CDATA[smallnest]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[十个团队建设小贴士]]></title>
    <link href="http://colobu.com/2015/06/18/10-team-building-tips/"/>
    <id>http://colobu.com/2015/06/18/10-team-building-tips/</id>
    <published>2015-06-18T01:44:02.000Z</published>
    <updated>2015-07-31T13:28:02.151Z</updated>
    <content type="html"><![CDATA[<p>Marco Castigliego总结的十个团队建设的<a href="http://www.javacodegeeks.com/2015/06/10-team-building-tips.html" target="_blank" rel="external">小贴士</a>。<br><a id="more"></a></p>
<h2 id="早上好">早上好</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy.gif" alt=""><br>当进入办公室还未坐下时，要对团队微笑着说早上好。 每一天。</p>
<h2 id="倾听">倾听</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy2.gif" alt=""><br>当团队的成员对你说话时， 看着他的眼睛，对他说的话表现出感兴趣。</p>
<h2 id="提供空间，信任团队">提供空间，信任团队</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy3.gif" alt=""><br>允许团队成员失败，让他们有机会弥补他们的错误。<br>你可能总是对的，但又如何？其他人从失败中学习、承担责任。</p>
<h2 id="搞好关系">搞好关系</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy4.gif" alt=""><br>给团队每个人倒杯咖啡。</p>
<h2 id="恭贺别人">恭贺别人</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy5.gif" alt=""><br>当别人取得成就时，说出来</p>
<h2 id="别把个人问题带入工作">别把个人问题带入工作</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy6.gif" alt=""><br>别因为你昨天晚上过的很糟糕就对其他人大喊大叫。</p>
<h2 id="结对编程">结对编程</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy7.gif" alt=""><br>很好的分享知识和建立牢固关系的方式</p>
<h2 id="反馈">反馈</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy8.gif" alt=""><br>在code review时莫要趾高气扬。 冷静且友好的说出你想说的。</p>
<h2 id="聚餐">聚餐</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy9.gif" alt=""><br>尽可能的和团队成员一起吃饭。</p>
<h2 id="说明天见">说明天见</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy10.gif" alt=""><br>当下班的时候，如果你不是最后一个离开的，要对其它人说 ”明天见“</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Marco Castigliego总结的十个团队建设的<a href="http://www.javacodegeeks.com/2015/06/10-team-building-tips.html" target="_blank" rel="external">小贴士</a>。<br>]]>
    
    </summary>
    
      <category term="管理" scheme="http://colobu.com/categories/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java程序员应当知道的10个面向对象设计原则]]></title>
    <link href="http://colobu.com/2015/03/05/10-object-oriented-design-principles-you-should-know/"/>
    <id>http://colobu.com/2015/03/05/10-object-oriented-design-principles-you-should-know/</id>
    <published>2015-03-05T00:41:19.000Z</published>
    <updated>2015-07-31T13:28:02.151Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="http://mp.weixin.qq.com/s?__biz=MzAxNzA1ODY2OA==&amp;mid=203837708&amp;idx=1&amp;sn=6009904c30d291471db530d2e1a3e3cf#rd" target="_blank" rel="external">Java程序员应当知道的10个面向对象设计原则</a><br><strong>程序员学架构</strong> 翻译自 <a href="http://javarevisited.blogspot.com/2012/03/10-object-oriented-design-p" target="_blank" rel="external">http://javarevisited.blogspot.com/2012/03/10-object-oriented-design-p</a></p>
<p>面向对象设计原则是OOPS编程的核心， 但我见过的大多数Java程序员热心于像Singleton (单例) 、 Decorator(装饰器)、Observer(观察者) 等设计模式，而没有把足够多的注意力放在学习面向对象的分析和设计上面。学习面向对象编程像“抽象”、“封装”、“多态”、“继承” 等基础知识是重要的，但同时为了创建简洁、模块化的设计，了解这些设计原则也同等重要。我经常看到不同经验水平的java程序员，他们有的不知道这些OOPS 和SOLID设计原则，有的只是不知道一个特定的设计原则会带来怎样的益处，甚至不知道在编码中如何使用这些设计原则。<br>(设计原则)底线是永远追求高内聚、低耦合的编码或设计。 Apache 和 Sun的开源代码是学习Java和OOPS设计原则的良好范例。它们向我们展示了，设计原则在Java编程中是如何使用的。Java JDK 使用了一些设计原则：BorderFactory类中的工厂模式、Runtime类中的单例模式、java.io 类中的装饰器模式。顺便说一句，如果您真的对Java编码原则感兴趣，请阅读Joshua Bloch 的Effective Java，他编写过Java API。我个人最喜欢的关于面向对象设计模式的是Kathy Sierra的Head First Design Pattern(深入浅出设计模式)，以及其它的关于深入浅出面向对象分析和设计。这些书对编写更好的代码有很大帮助，充分利用各种面向对象和SOLID的设计模式。<br>虽然学习设计模式(原则)最好的方法是现实中的例子和理解违反设计原则带来的不便，本文的宗旨是向那些没有接触过或正处于学习阶段的Java程序员介绍面向对象设计原则。我个人认为OOPS 和SOLID设计原则需要有文章清楚的介绍它们，在此我一定尽力做到这点，但现在请您准备浏览以下设计模式(原则) :)</p>
<a id="more"></a>
<h2 id="DRY">DRY</h2>
<p><em>Don&#39;t repeat yourself</em></p>
<p>我们第一个面向对象设计原则是：DRY ，从名称可以看出DRY(don&#39;t repeat yourself)意思是不写重复代码，而是抽象成可复用的代码块。如果您有两处以上相同的代码块，请考虑把它们抽象成一个单独的方法；或者您多次使用了硬编码的值，请把它们设置成公共常量。这种面向对象设计原则的优点是易于维护。重要的是不要滥用此原则，重复不是针对代码而是针对功能来说。它的意思是，如果您使用通用代码来验证OrderID和SSN，这并不意味着它们是相同的或者他们今后将保持不变。通过把通用代码用于实现两种不同的功能，或者您把这两种不同的功能密切地联系在一起；当您的OrderID格式改变时，您的SSN验证代码将会中断。所以要当心这种耦合，而且不要把彼此之间没有任何关系却类似的代码组合在一起。</p>
<h2 id="封装经常修改的代码">封装经常修改的代码</h2>
<p><em>Encapsulate What Changes</em></p>
<p>在软件领域永远不变的是“变化”，所以把您认为或怀疑将来要被修改的代码封装起来。这种面向对象设计模式的优点是：易于测试和维护恰当封装的代码。如果您在用Java编程，那么请遵守以下原则：变量和方法的访问权限默认设置为私有，并且逐步放开它们的访问权限，例如从“private”到“protected ”、“not public”。Java中的一些设计模式使用了封装，工厂设计模式就是一个例子，它封装了创建对象的代码而且提供了以下灵活性：后续生成新对象不影响现有的代码。</p>
<h2 id="打开/关闭设计原则">打开/关闭设计原则</h2>
<p><em>OpenClosed Design Principle</em></p>
<p>类、方法/函数应当是对扩展(新功能)开放，对修改闭合。这是另外一个优雅的SOLID 设计原则，以防止有人修改通过测试的代码。理想情况下假如您添加了新功能，那么您的代码要经过测试，这就是打开/关闭设计原则的目标。顺便说一句，SOLID中的字母“O”指的是打开/关闭设计原则。</p>
<h2 id="单一职责原则">单一职责原则</h2>
<p><em>Single Responsibility Principle(SRP)</em></p>
<p>单一职责原则是另外一个SOLID设计原则，SOLID中的字母“S”指的就是它。按照SRP，一个类修改的原因应当有且只有一个，或者一个类应当总是实现单一功能。如果您在Java中的一个类实现了多个功能，那么这些功能之间便产生了耦合关系；如果您修改其中的一个功能，您有可能就打破了这种耦合关系，那么就要进行另一轮测试以避免产生新的问题。</p>
<h2 id="依赖注入/反转原则">依赖注入/反转原则</h2>
<p><em>Dependency Injection or Inversion principle</em></p>
<p>不要问框架的依赖注入功能将会给你带来什么益处，依赖注入功能在spring框架里已经很好的得到了实现，这一设计原则的优雅之处在于：DI框架注入的任何一个类都易于用模拟对象进行测试，并且更易于维护，因为创建对象的代码在框架里是集中的而且和客户端代码是隔离的。有多种方法可以实现依赖注入，例如使用字节码工具，其中一些AOP(面向切面编程)框架如切入点表达式或者spring里使用的代理。想对这种SOLID设计原则了解更多，请看IOC 和 DI设计模式中的例子。 SOLID中的字母“D”指的就是这种设计原则。</p>
<h2 id="优先使用组合而非继承">优先使用组合而非继承</h2>
<p><em>Favor Composition over Inheritance</em></p>
<p>如果可以的话，要优先使用组合而非继承。你们中的一些人可能为此争论，但我发现组合比继承更有灵活性。组合允许在运行时通过设置属性修改一个类的行为，通过使用多态即以接口的形式实现类之间的组合关系，并且为修改组合关系提供了灵活性。甚至 Effective Java也建议优先使用组合而非继承。</p>
<h2 id="里氏替换原则">里氏替换原则</h2>
<p><em>Liskov Substitution Principle LSP</em></p>
<p>根据里氏替换原则，父类出现的地方可以用子类来替换，例如父类的方法或函数被子类对象替换应该没有任何问题。LSP和单一职责原则、接口隔离原则密切相关。如果一个父类的功能比其子类还要多，那么它可能不支持这一功能，而且也违反了LSP设计原则。为了遵循 LSP SOLID设计原则，派生类或子类(相对父类比较)必须增强功能，而非减少。SOLID中的字母“L”指的就是 LSP设计原则。</p>
<h2 id="接口隔离原则">接口隔离原则</h2>
<p>接口隔离原则指，如果不需要一个接口的功能，那么就不要实现此接口。这大多在以下情况发生：一个接口包含多种功能，而实现类只需要其中一种功能。接口设计是一种棘手的工作，因为一旦发布了接口，您就不能修改它否则会影响实现该接口的类。在Java中这种设计原则的另一个好处是：接口有一个特点，任何类使用它之前都要实现该接口所有的方法，所以使用功能单一的接口意味着实现更少的方法。</p>
<h2 id="编程以接口(而非实现对象)为中心">编程以接口(而非实现对象)为中心</h2>
<p>编程总是以接口(而非实现对象)为中心，这会使代码的结构灵活，而且任何一个新的接口实现对象都能兼容现有代码结构。所以在Java中，变量、方法返回值、方法参数的数据类型请使用接口。这是许多Java程序员的建议， Effective Java 以及 head first design pattern 等书也这样建议</p>
<h2 id="代理原则">代理原则</h2>
<p>不要期望一个类完成所有的功能，可以适当地把一些功能交给代理类实现。代理原则的典范是：Java 中的equals() 和 hashCode() 方法。为了比较两个对象的内容是否相同，我们让用于比较的类本身完成对比工作而非它们的调用方。这种设计原则的好处是：没有重复编码而且很容易修改类的行为。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="http://mp.weixin.qq.com/s?__biz=MzAxNzA1ODY2OA==&amp;mid=203837708&amp;idx=1&amp;sn=6009904c30d291471db530d2e1a3e3cf#rd" target="_blank" rel="external">Java程序员应当知道的10个面向对象设计原则</a><br><strong>程序员学架构</strong> 翻译自 <a href="http://javarevisited.blogspot.com/2012/03/10-object-oriented-design-p" target="_blank" rel="external">http://javarevisited.blogspot.com/2012/03/10-object-oriented-design-p</a></p>
<p>面向对象设计原则是OOPS编程的核心， 但我见过的大多数Java程序员热心于像Singleton (单例) 、 Decorator(装饰器)、Observer(观察者) 等设计模式，而没有把足够多的注意力放在学习面向对象的分析和设计上面。学习面向对象编程像“抽象”、“封装”、“多态”、“继承” 等基础知识是重要的，但同时为了创建简洁、模块化的设计，了解这些设计原则也同等重要。我经常看到不同经验水平的java程序员，他们有的不知道这些OOPS 和SOLID设计原则，有的只是不知道一个特定的设计原则会带来怎样的益处，甚至不知道在编码中如何使用这些设计原则。<br>(设计原则)底线是永远追求高内聚、低耦合的编码或设计。 Apache 和 Sun的开源代码是学习Java和OOPS设计原则的良好范例。它们向我们展示了，设计原则在Java编程中是如何使用的。Java JDK 使用了一些设计原则：BorderFactory类中的工厂模式、Runtime类中的单例模式、java.io 类中的装饰器模式。顺便说一句，如果您真的对Java编码原则感兴趣，请阅读Joshua Bloch 的Effective Java，他编写过Java API。我个人最喜欢的关于面向对象设计模式的是Kathy Sierra的Head First Design Pattern(深入浅出设计模式)，以及其它的关于深入浅出面向对象分析和设计。这些书对编写更好的代码有很大帮助，充分利用各种面向对象和SOLID的设计模式。<br>虽然学习设计模式(原则)最好的方法是现实中的例子和理解违反设计原则带来的不便，本文的宗旨是向那些没有接触过或正处于学习阶段的Java程序员介绍面向对象设计原则。我个人认为OOPS 和SOLID设计原则需要有文章清楚的介绍它们，在此我一定尽力做到这点，但现在请您准备浏览以下设计模式(原则) :)</p>
]]>
    
    </summary>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[22个必须知道的css技巧]]></title>
    <link href="http://colobu.com/2015/01/21/22-to-know-css-techniques/"/>
    <id>http://colobu.com/2015/01/21/22-to-know-css-techniques/</id>
    <published>2015-01-21T02:49:28.000Z</published>
    <updated>2015-07-31T13:28:02.151Z</updated>
    <content type="html"><![CDATA[<p>本文是 <a href="http://www.cnblogs.com/gredswsh" target="_blank" rel="external">Gredswsh的技术生活</a> 整理的 <a href="http://www.cnblogs.com/gredswsh/p/22-to-know-css-techniques.html" target="_blank" rel="external">22个必须知道的css技巧</a>， 作为偶尔也会涉猎前端开发的我来说，特别喜欢一些前端开发的总结性的文章，文末我也附上了其它几篇关于CSS技巧的文章。</p>
<a id="more"></a>
<h4 id="1、改变选中文字的背景和颜色">1、改变选中文字的背景和颜色</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="pseudo">::selection</span><span class="rules">{ <span class="comment">/* Safari and Opera */</span></span></div><div class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#c3effd</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#000</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="pseudo">::-moz-selection</span><span class="rules">{ <span class="comment">/* Firefox */</span></span></div><div class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#c3effd</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#000</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h4 id="2、防止火狐滚动条跳动">2、防止火狐滚动条跳动</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">html</span><span class="rules">{ <span class="rule"><span class="attribute">overflow-y</span>:<span class="value">scroll</span></span>; <span class="rule">}</span></span></div></pre></td></tr></table></figure>

<h4 id="3)分页打印">3)分页打印</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class">.page-break</span><span class="rules">{ <span class="rule"><span class="attribute">page-break-before</span>:<span class="value">always</span></span>; <span class="rule">}</span></span></div></pre></td></tr></table></figure>

<h4 id="4、使用!important">4、使用!important</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class">.page</span> <span class="rules">{ <span class="rule"><span class="attribute">background-color</span>:<span class="value">blue <span class="important">!important</span></span></span>;   <span class="rule"><span class="attribute">background-color</span>:<span class="value">red</span></span>;<span class="rule">}</span></span></div></pre></td></tr></table></figure>

<h4 id="5、图像替换文字">5、图像替换文字</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class">.header</span><span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">text-indent</span>:<span class="value">-<span class="number">9999px</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"><span class="function">url</span>(<span class="string">'someimage.jpg'</span>) no-repeat</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100px</span></span></span>; <span class="comment">/*dimensions equal to image size*/</span></div><div class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">500px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>标注：text-indent:-9999px; 是将首行左缩进到人看不到的地方</p>
<h4 id="6、兼容浏览器的最小高度">6、兼容浏览器的最小高度</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="id">#container</span><span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value">auto <span class="important">!important</span></span></span>;<span class="comment">/*all browsers except ie6 will respect the !important flag*/</span></div><div class="line">    <span class="rule"><span class="attribute">min-height</span>:<span class="value"><span class="number">500px</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">500px</span></span></span>;<span class="comment">/*Should have the same value as the min height above*/</span></div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h4 id="7、对新窗口打开得链接高亮显示">7、对新窗口打开得链接高亮显示</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">a</span><span class="attr_selector">[target="_blank"]</span><span class="pseudo">:before</span>,</div><div class="line"><span class="tag">a</span><span class="attr_selector">[target="new"]</span><span class="pseudo">:before</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span> <span class="number">5px</span> <span class="number">0</span> <span class="number">0</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">1px</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">outline</span>:<span class="value"><span class="number">1px</span> solid <span class="hexcolor">#333</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#333</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"><span class="hexcolor">#ff9</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">font</span>:<span class="value"><span class="number">12px</span> <span class="string">"Zapf Dingbats"</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">"\279C"</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h4 id="8、美化li序列号">8、美化li序列号</h4>
<p>如图：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">ol</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">font</span>:<span class="value"> italic <span class="number">1em</span> Georgia, Times, serif</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#999999</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">ol</span> <span class="tag">p</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">font</span>:<span class="value"> normal .<span class="number">8em</span> Arial, Helvetica, sans-serif</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#000000</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h4 id="9、首字下沉">9、首字下沉</h4>
<p>如图：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">p</span><span class="pseudo">:first-letter</span><span class="rules">{</span></div><div class="line"><span class="rule"><span class="attribute">display</span>:<span class="value">block</span></span>;</div><div class="line"><span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">5px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span></span></span>;</div><div class="line"><span class="rule"><span class="attribute">float</span>:<span class="value">left</span></span>;</div><div class="line"><span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#FF3366</span></span></span>;</div><div class="line"><span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">3.0em</span></span></span>;</div><div class="line"><span class="rule"><span class="attribute">font-family</span>:<span class="value">Georgia</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h4 id="10、兼容浏览器的opacity">10、兼容浏览器的opacity</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class">.transparent_class</span> <span class="rules">{  </span></div><div class="line">        <span class="rule"><span class="attribute">filter</span>:<span class="value"><span class="function">alpha</span>(opacity=<span class="number">50</span>)</span></span>;  </div><div class="line">        <span class="rule"><span class="attribute">-moz-opacity</span>:<span class="value"><span class="number">0.5</span></span></span>;  </div><div class="line">        <span class="rule"><span class="attribute">-khtml-opacity</span>:<span class="value"> <span class="number">0.5</span></span></span>;  </div><div class="line">        <span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">0.5</span></span></span>;  </div><div class="line">    <span class="rule">}</span></div></pre></td></tr></table></figure>

<h4 id="11、使用line-height实现垂直居中">11、使用line-height实现垂直居中</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">line-height</span><span class="pseudo">:30px</span>;</div></pre></td></tr></table></figure>

<h4 id="12、居中布局">12、居中布局</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span><span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">1000px</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">0</span> auto</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h4 id="13、移除ie文本域的垂直滚动条">13、移除ie文本域的垂直滚动条</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">textarea</span><span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">overflow</span>:<span class="value">auto</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h4 id="14、移动超链接的虚线框">14、移动超链接的虚线框</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">a</span><span class="pseudo">:active</span>, <span class="tag">a</span><span class="pseudo">:focus</span><span class="rules">{ <span class="rule"><span class="attribute">outline</span>:<span class="value">none</span></span>; <span class="rule">}</span></span></div></pre></td></tr></table></figure>

<h4 id="15、ie下元素消失，给该元素添加">15、ie下元素消失，给该元素添加</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">position</span><span class="pseudo">:relative</span>;</div></pre></td></tr></table></figure>

<h4 id="16、根据链接不一样，添加不一样的icons">16、根据链接不一样，添加不一样的icons</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">a</span><span class="attr_selector">[href$='.doc']</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value">transparent <span class="function">url</span>(/graphics/icons/doc.gif) no-repeat center right</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h4 id="17、css手型点击样式">17、css手型点击样式</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">input</span><span class="attr_selector">[type=submit]</span>,<span class="tag">label</span>,<span class="tag">select</span>,<span class="class">.pointer</span> <span class="rules">{ <span class="rule"><span class="attribute">cursor</span>:<span class="value">pointer</span></span>; <span class="rule">}</span></span></div></pre></td></tr></table></figure>

<h4 id="18、字母大写">18、字母大写</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">text-transform</span>: <span class="tag">capitalize</span>;</div></pre></td></tr></table></figure>

<h4 id="19、所有英文大写，且首字母比其他的大">19、所有英文大写，且首字母比其他的大</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">font-variant</span><span class="pseudo">:small-caps</span>;</div></pre></td></tr></table></figure>

<h4 id="20、高亮文本框，不支持ie">20、高亮文本框，不支持ie</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">input</span><span class="attr_selector">[type=text]</span><span class="pseudo">:focus</span>, <span class="tag">input</span><span class="attr_selector">[type=password]</span><span class="pseudo">:focus</span><span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">2px</span> solid <span class="hexcolor">#000</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<h4 id="21、移除img边框">21、移除img边框</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">a</span> <span class="tag">img</span><span class="rules">{ <span class="rule"><span class="attribute">border</span>:<span class="value">none</span></span>; <span class="rule">}</span></span></div></pre></td></tr></table></figure>

<h4 id="22、用label实现无表格表单">22、用label实现无表格表单</h4>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">HTML Code</div><div class="line"></div><div class="line">&lt;form method="post" action="#" &gt;</div><div class="line">&lt;p&gt;&lt;label for="username" &gt;Username&lt;/label&gt;</div><div class="line">&lt;input type="text" id="username" name="username" /&gt;</div><div class="line">&lt;/p&gt;</div><div class="line">&lt;p&gt;&lt;label for="password" &gt;Username&lt;/label&gt;</div><div class="line">&lt;input type="password" id="password" name="pass" /&gt;</div><div class="line">&lt;/p&gt;</div><div class="line">&lt;p&gt;&lt;input type="submit" value="Submit" /&gt;&lt;/p&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">CSS Code</div><div class="line"></div><div class="line">p label{</div><div class="line">    width:100px;</div><div class="line">    float:left;</div><div class="line">    margin-right:10px;</div><div class="line">    text-align:right;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>参考：<a href="http://www.cnblogs.com/guoguo-15/archive/2011/08/24/2151859.html" target="_blank" rel="external">http://www.cnblogs.com/guoguo-15/archive/2011/08/24/2151859.html</a></p>
<hr>
<p><strong>其它值得阅读的CSS文章</strong>：</p>
<ol>
<li><a href="http://www.smashingmagazine.com/2007/01/19/53-css-techniques-you-couldnt-live-without/" target="_blank" rel="external">53 CSS-Techniques You Couldn’t Live Without</a></li>
<li><a href="http://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048" target="_blank" rel="external">The 30 CSS Selectors you Must Memorize</a></li>
<li><a href="http://sixrevisions.com/css/css3-techniques-you-should-know/" target="_blank" rel="external">CSS3 Techniques You Should Know</a></li>
<li><a href="http://webdeveloperplus.com/css/25-incredibly-useful-css-tricks-you-should-know/" target="_blank" rel="external">25 Incredibly Useful CSS Tricks You Should Know</a></li>
<li><a href="http://www.w3cplus.com/css/css-specificity-things-you-should-know.html" target="_blank" rel="external">你应该知道的一些事情——CSS权重</a></li>
<li><a href="https://github.com/simaQ/cssfun/issues/1" target="_blank" rel="external">7个你可能不认识的CSS单位</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文是 <a href="http://www.cnblogs.com/gredswsh" target="_blank" rel="external">Gredswsh的技术生活</a> 整理的 <a href="http://www.cnblogs.com/gredswsh/p/22-to-know-css-techniques.html" target="_blank" rel="external">22个必须知道的css技巧</a>， 作为偶尔也会涉猎前端开发的我来说，特别喜欢一些前端开发的总结性的文章，文末我也附上了其它几篇关于CSS技巧的文章。</p>
]]>
    
    </summary>
    
      <category term="css" scheme="http://colobu.com/tags/css/"/>
    
      <category term="前端开发" scheme="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[三步创建Disruptor应用]]></title>
    <link href="http://colobu.com/2014/08/01/3-steps-to-create-a-disruptor-application/"/>
    <id>http://colobu.com/2014/08/01/3-steps-to-create-a-disruptor-application/</id>
    <published>2014-08-01T08:14:26.000Z</published>
    <updated>2015-07-31T13:28:02.151Z</updated>
    <content type="html"><![CDATA[<p><a href="http://lmax-exchange.github.io/disruptor/" target="_blank" rel="external">Disruptor</a>是一个高性能的用于线程间消息处理的开源框架。它的目标就是<strong>快</strong>.<br>我们知道，java.util.concurrent.ArrayBlockingQueue 是一个非常优秀的有界队列实现。Disruptor与之相比，性能更加的优秀。<br><img src="http://lmax-exchange.github.com/disruptor/images/latency-histogram.png" alt="性能比较"><br>完整的性能报告在<a href="https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results" target="_blank" rel="external">这里</a>.</p>
<p>Disruptor内部使用了RingBuffer，它是Disruptor的核心的数据结构。和其它的RingBuffer实现不同，Disruptor没有尾指针。这样实现是经过深思熟虑的，你可以看<a href="http://ifeve.com/dissecting-disruptor-whats-so-special/" target="_blank" rel="external">这篇文档</a>了解其细节。<br>更多的参考资料请参照官方文档以及并发编程网上翻译的<a href="http://ifeve.com/disruptor/" target="_blank" rel="external">一些文章</a>。</p>
<p>本文主要参考<a href="http://ifeve.com/disruptor-getting-started/" target="_blank" rel="external">Disruptor入门</a>这篇文章。</p>
<p>本文的代码已全部放在<a href="https://github.com/smallnest/DisruptorBootstrap" target="_blank" rel="external">github</a>上。 </p>
<a id="more"></a>
<p>在正式使用Disruptor之前，我们先声明一个ObjectEvent类，它用来传递消息的内容。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectEvent</span> </span>{</div><div class="line">	<span class="keyword">private</span> Object object;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> Object <span class="title">getObject</span>() {</div><div class="line">		<span class="keyword">return</span> object;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> ObjectEvent <span class="title">setObject</span>(Object object) {</div><div class="line">		<span class="keyword">this</span>.object = object;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>第一步，创建一个Disruptor对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Executor executor = Executors.newCachedThreadPool();</div><div class="line"><span class="keyword">int</span> bufferSize = <span class="number">1024</span>;</div><div class="line">Disruptor&lt;ObjectEvent&gt; disruptor = <span class="keyword">new</span> Disruptor&lt;&gt;(ObjectEvent::<span class="keyword">new</span>, bufferSize, executor, </div><div class="line">				ProducerType.SINGLE, <span class="keyword">new</span> LiteBlockingWaitStrategy());</div></pre></td></tr></table></figure>

<p>这是一个单一生产者的例子，如果在你的代码中仅仅有一个事件生产者，那么可以设置为单一生产者模式来提高系统的性能。</p>
<p>第一个参数用来在ring buffer中创建event，第二个参数是ring buffer的大小，第三个参数是消费者处理消息而使用的线程池。第四个参数是单或者多生产者模式，地五个参数是可选的等待策略。<br>以上代码主要用来设置RingBuffer.  </p>
<ul>
<li>第二步，创建消息处理的processors</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleEvent1</span>(ObjectEvent event, <span class="keyword">long</span> sequence, <span class="keyword">boolean</span> endOfBatch) {</div><div class="line">		System.out.println(<span class="string">"handler-1: "</span> + event.getObject());</div><div class="line">	}</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleEvent2</span>(ObjectEvent event, <span class="keyword">long</span> sequence, <span class="keyword">boolean</span> endOfBatch) {</div><div class="line">		System.out.println(<span class="string">"handler-2: "</span> + event.getObject());</div><div class="line">	}</div><div class="line">...</div><div class="line">disruptor.handleEventsWith(App::handleEvent1);</div><div class="line">disruptor.handleEventsWith(App::handleEvent2);</div><div class="line">...</div></pre></td></tr></table></figure>

<p>定义了两个processor,并使用handleEventsWith注册到Disruptor。注意这个方法可以使用职责链模式，例如<code>handleEventsWith(A).then(B)</code>。<br>然后就可以启动Disruptor了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">disruptor.start();</div></pre></td></tr></table></figure>

<ul>
<li>第三步，创建生产者<br>这一步我们可以创建一个生产者来发布消息（事件）。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">produceEvents</span>(Disruptor&lt;ObjectEvent&gt; disruptor) <span class="keyword">throws</span> InterruptedException {</div><div class="line">		RingBuffer&lt;ObjectEvent&gt; ringBuffer = disruptor.getRingBuffer();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">long</span> l = <span class="number">0</span>; <span class="keyword">true</span>; l++) {</div><div class="line">			String obj = <span class="string">"Test-"</span> + l;</div><div class="line">			ringBuffer.publishEvent((event, sequence) -&gt; event.setObject(obj));</div><div class="line">			Thread.sleep(<span class="number">1000</span>);</div><div class="line">		}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>通过以上三步，我们就可以创建一个简单的应用Disruptor的例子了。  </p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://lmax-exchange.github.io/disruptor/" target="_blank" rel="external">Disruptor</a>是一个高性能的用于线程间消息处理的开源框架。它的目标就是<strong>快</strong>.<br>我们知道，java.util.concurrent.ArrayBlockingQueue 是一个非常优秀的有界队列实现。Disruptor与之相比，性能更加的优秀。<br><img src="http://lmax-exchange.github.com/disruptor/images/latency-histogram.png" alt="性能比较"><br>完整的性能报告在<a href="https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results" target="_blank" rel="external">这里</a>.</p>
<p>Disruptor内部使用了RingBuffer，它是Disruptor的核心的数据结构。和其它的RingBuffer实现不同，Disruptor没有尾指针。这样实现是经过深思熟虑的，你可以看<a href="http://ifeve.com/dissecting-disruptor-whats-so-special/" target="_blank" rel="external">这篇文档</a>了解其细节。<br>更多的参考资料请参照官方文档以及并发编程网上翻译的<a href="http://ifeve.com/disruptor/" target="_blank" rel="external">一些文章</a>。</p>
<p>本文主要参考<a href="http://ifeve.com/disruptor-getting-started/" target="_blank" rel="external">Disruptor入门</a>这篇文章。</p>
<p>本文的代码已全部放在<a href="https://github.com/smallnest/DisruptorBootstrap" target="_blank" rel="external">github</a>上。 </p>
]]>
    
    </summary>
    
      <category term="Disruptor" scheme="http://colobu.com/tags/Disruptor/"/>
    
      <category term="高并发编程" scheme="http://colobu.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[45个实用的JavaScript技巧、窍门和最佳实践]]></title>
    <link href="http://colobu.com/2014/09/23/45-Useful-JavaScript-Tips,-Tricks-and-Best-Practices/"/>
    <id>http://colobu.com/2014/09/23/45-Useful-JavaScript-Tips,-Tricks-and-Best-Practices/</id>
    <published>2014-09-23T09:23:07.000Z</published>
    <updated>2015-07-31T13:28:02.167Z</updated>
    <content type="html"><![CDATA[<p>如你所知，JavaScript是世上编程语言的Number One (编者按： 原文如此), 用来编写Web和移动混合应用（比如PhoneGap或者Appcelerator）， 也可以编写服务器端的程序（比如NodeJS或者Wakanda），并且拥有很多其他的实现。 它也是很多新手进入编程世界的启蒙语言，因为它不但可以在浏览器上显示一个简单的alert信息，而且还可以用来控制一个机器人（使用nodebot，或者nodruino）。掌握JavaScript并且能够写出规范并性能高效代码的开发人员，已经成为人才市场上的猎寻目标。</p>
<p>在这篇文章中，Saad Mousliki将分享一组JavaScript的技巧、窍门和最佳实践，这些都是JavaScript程序员应该知晓的，不管他们是使用在浏览器/引擎上，还是服务器端（SSJS Service Side JavaScript）JavaScript解释器上。</p>
<p>需要注意的是，这篇文章中的代码片段都在最新的Google Chrome（版本号30）上测试过，它使用V8 JavaScript引擎（V8 3.20.17.15）</p>
<a id="more"></a>
<p>英文原址: <a href="http://modernweb.com/2013/12/23/45-useful-javascript-tips-tricks-and-best-practices/" target="_blank" rel="external">45 Useful JavaScript Tips, Tricks and Best Practices </a></p>
<h1 id="列表">列表</h1>
<h3 id="_第一次给变量赋值时莫忘使用_var关键字-"><i class="fa fa-lightbulb-o"></i> 第一次给变量赋值时莫忘使用 <code>var</code>关键字.</h3>
<p>给一个未声明的变量赋值会自动产生一个全局的变量。 避免全局变量。</p>
<h3 id="_使用_===_而不是_=="><i class="fa fa-lightbulb-o"></i> 使用 === 而不是 ==</h3>
<p>操作符 == (或者 !=) 执行自动的类型转换. 操作符 === (或 !==) 不会执行任何转换，它会比较值和类型， 并且被认为比 == 更快.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[<span class="number">10</span>] === <span class="number">10</span>    <span class="comment">// is false</span></div><div class="line">[<span class="number">10</span>]  == <span class="number">10</span>    <span class="comment">// is true</span></div><div class="line"><span class="string">'10'</span> == <span class="number">10</span>     <span class="comment">// is true</span></div><div class="line"><span class="string">'10'</span> === <span class="number">10</span>    <span class="comment">// is false</span></div><div class="line"> []   == <span class="number">0</span>     <span class="comment">// is true</span></div><div class="line"> [] ===  <span class="number">0</span>     <span class="comment">// is false</span></div><div class="line"> <span class="string">''</span> == <span class="literal">false</span>   <span class="comment">// is true but true == "a" is false</span></div><div class="line"> <span class="string">''</span> ===   <span class="literal">false</span> <span class="comment">// is false</span></div></pre></td></tr></table></figure>

<h3 id="_undefined,_null,_0,_false,_NaN,_&#39;&#39;_(empty_string)_都是false-"><i class="fa fa-lightbulb-o"></i> undefined, null, 0, false, NaN, &#39;&#39; (empty string) 都是false.</h3>
<h3 id="_行尾使用分号"><i class="fa fa-lightbulb-o"></i> 行尾使用分号</h3>
<p>行尾使用分号是一个好的习惯。 尽管如果忘了加也不会被警告， 因为大部分情况 JavaScript解析器会自动加上。 这篇文章描述了为什么要加分号的细节: <a href="http://davidwalsh.name/javascript-semicolons" target="_blank" rel="external">http://davidwalsh.name/javascript-semicolons</a>.</p>
<h3 id="_创建对象的构造函数"><i class="fa fa-lightbulb-o"></i> 创建对象的构造函数</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(firstName, lastName)</span></span>{</div><div class="line">    <span class="keyword">this</span>.firstName =  firstName;</div><div class="line">    <span class="keyword">this</span>.lastName = lastName;        </div><div class="line">} </div><div class="line"><span class="keyword">var</span> Saad = <span class="keyword">new</span> Person(<span class="string">"Saad"</span>, <span class="string">"Mousliki"</span>);</div></pre></td></tr></table></figure>

<h3 id="_使用_typeof,_instanceof_和_constructor要万分小心-"><i class="fa fa-lightbulb-o"></i> 使用 typeof, instanceof 和 constructor要万分小心.</h3>
<ul>
<li>typeof : 一个JavaScript的一元操作符， 返回代表一个变量的原始primitive类型的字符串。 别忘了typeof null 返回 “object”, 并且大部分的object类型 (Array, Date, and others) 也返回 “object”.</li>
<li>constructor : 一个内部prototype属性， 可以被覆盖。</li>
<li>instanceof : 另一个JavaScript运算符， 用来在所有的prototype链的constructor。 如果找到返回true,否则false.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line"><span class="keyword">typeof</span> arr;   <span class="comment">// return "object" </span></div><div class="line">arr  <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// true</span></div><div class="line">arr.constructor();  <span class="comment">//[]</span></div></pre></td></tr></table></figure>

<h3 id="_创建一个自调用的函数_Self-calling_Function"><i class="fa fa-lightbulb-o"></i> 创建一个自调用的函数 Self-calling Function</h3>
<p>常被称作自调用匿名函数Self-Invoked Anonymous Function或者立即调用函数表达式Immediately Invoked Function Expression (IIFE). 它是这样一个函数：当创建时会自动执行。格式如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    <span class="comment">// some private code that will be executed automatically</span></div><div class="line">})();  </div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span>{</div><div class="line">    <span class="keyword">var</span> result = a+b;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">})(<span class="number">10</span>,<span class="number">20</span>)</div></pre></td></tr></table></figure>

<h3 id="_从数组中随机选取一个元素"><i class="fa fa-lightbulb-o"></i> 从数组中随机选取一个元素</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items = [<span class="number">12</span>, <span class="number">548</span> , <span class="string">'a'</span> , <span class="number">2</span> , <span class="number">5478</span> , <span class="string">'foo'</span> , <span class="number">8852</span>, , <span class="string">'Doe'</span> , <span class="number">2145</span> , <span class="number">119</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span>  randomItem = items[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * items.length)];</div></pre></td></tr></table></figure>

<h3 id="_得到一个特定范围的随机值"><i class="fa fa-lightbulb-o"></i> 得到一个特定范围的随机值</h3>
<p>This code snippet can be useful when trying to generate fake data for testing purposes, such as a salary between min and max.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</div></pre></td></tr></table></figure>

<h3 id="_生成一个[0,max]范围的数组"><i class="fa fa-lightbulb-o"></i> 生成一个[0,max]范围的数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbersArray = [] , max = <span class="number">100</span>;</div><div class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">1</span>; numbersArray.push(i++) &lt; max;);  <span class="comment">// numbers = [1,2,3 ... 100]</span></div></pre></td></tr></table></figure>

<p> javascript</p>
<h3 id="_生成随机字符/数字的数组"><i class="fa fa-lightbulb-o"></i> 生成随机字符/数字的数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRandomAlphaNum</span><span class="params">(len)</span> </span>{</div><div class="line">    <span class="keyword">var</span> rdmString = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span>( ; rdmString.length &lt; len; rdmString  += <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>));</div><div class="line">    <span class="keyword">return</span>  rdmString.substr(<span class="number">0</span>, len);</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_打乱数组"><i class="fa fa-lightbulb-o"></i> 打乱数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , -<span class="number">215</span> , <span class="number">228</span> , <span class="number">400</span> , <span class="number">122205</span>, -<span class="number">85411</span>];</div><div class="line">numbers = numbers.sort(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{ <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>});</div><div class="line"><span class="comment">/* the array numbers will be equal for example to [120, 5, 228, -215, 400, 458, -85411, 122205]  */</span></div></pre></td></tr></table></figure>

<p>A better option could be to implement a random sort order by code (e.g. : Fisher-Yates shuffle), than using the native sort JavaScript function. For more details take a look to this discussion.</p>
<h3 id="_字符串的trim函数"><i class="fa fa-lightbulb-o"></i> 字符串的trim函数</h3>
<p>The classic trim function of Java, C#, PHP and many other language that remove whitespace from a string doesn’t exist in JavaScript, so we could add it to the String object.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{<span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">""</span>);};</div></pre></td></tr></table></figure>

<p>A native implementation of the trim() function is available in the recent JavaScript engines.</p>
<h3 id="_将一个数组附加到另外一个数组上:_append函数"><i class="fa fa-lightbulb-o"></i> 将一个数组附加到另外一个数组上: append函数</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array1 = [<span class="number">12</span> , <span class="string">"foo"</span> , {name <span class="string">"Joe"</span>} , -<span class="number">2458</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> array2 = [<span class="string">"Doe"</span> , <span class="number">555</span> , <span class="number">100</span>];</div><div class="line"><span class="built_in">Array</span>.prototype.push.apply(array1, array2);</div><div class="line"><span class="comment">/* array1 will be equal to  [12 , "foo" , {name "Joe"} , -2458 , "Doe" , 555 , 100] */</span></div></pre></td></tr></table></figure>

<h3 id="_将arguments_对象转为数组"><i class="fa fa-lightbulb-o"></i> 将arguments 对象转为数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> argArray = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div></pre></td></tr></table></figure>

<h3 id="_校验参数是否为数字"><i class="fa fa-lightbulb-o"></i> 校验参数是否为数字</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span><span class="params">(n)</span></span>{</div><div class="line">    <span class="keyword">return</span> !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(n)) && <span class="built_in">isFinite</span>(n);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>读者提供了另外一个技巧</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span><span class="params">(n)</span> </span>{</div><div class="line"><span class="keyword">return</span> n === +n;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_校验参数是否为数组"><i class="fa fa-lightbulb-o"></i> 校验参数是否为数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span><span class="params">(obj)</span></span>{</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span> ;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Note that if the toString() method is overridden, you will not get the expected result using this trick.</p>
<p>Or use…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.isArray(obj); <span class="comment">// its a new Array method</span></div></pre></td></tr></table></figure>

<p>You could also use instanceof if you are not working with multiple frames. However, if you have many contexts, you will get a wrong result.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myFrame = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line"><span class="built_in">document</span>.body.appendChild(myFrame);</div><div class="line"></div><div class="line"><span class="keyword">var</span> myArray = <span class="built_in">window</span>.frames[<span class="built_in">window</span>.frames.length-<span class="number">1</span>].Array;</div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> myArray(a,b,<span class="number">10</span>); <span class="comment">// [a,b,10]  </span></div><div class="line"></div><div class="line"><span class="comment">// instanceof will not work correctly, myArray loses his constructor </span></div><div class="line"><span class="comment">// constructor is not shared between frames</span></div><div class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// false</span></div></pre></td></tr></table></figure>

<h3 id="_得到数组的最大或者最小元素"><i class="fa fa-lightbulb-o"></i> 得到数组的最大或者最小元素</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span>  numbers = [<span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , -<span class="number">215</span> , <span class="number">228</span> , <span class="number">400</span> , <span class="number">122205</span>, -<span class="number">85411</span>]; </div><div class="line"><span class="keyword">var</span> maxInNumbers = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, numbers); </div><div class="line"><span class="keyword">var</span> minInNumbers = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, numbers);</div></pre></td></tr></table></figure>

<h3 id="_清空数组"><i class="fa fa-lightbulb-o"></i> 清空数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [<span class="number">12</span> , <span class="number">222</span> , <span class="number">1000</span> ];  </div><div class="line">myArray.length = <span class="number">0</span>; <span class="comment">// myArray will be equal to [].</span></div></pre></td></tr></table></figure>

<h3 id="_不要使用delete方法删除数组的元素"><i class="fa fa-lightbulb-o"></i> 不要使用delete方法删除数组的元素</h3>
<p>Use splice instead of using delete to delete an item from an array. Using delete replaces the item with undefined instead of the removing it from the array.</p>
<p>Instead of…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items = [<span class="number">12</span>, <span class="number">548</span> ,<span class="string">'a'</span> , <span class="number">2</span> , <span class="number">5478</span> , <span class="string">'foo'</span> , <span class="number">8852</span>, , <span class="string">'Doe'</span> ,<span class="number">2154</span> , <span class="number">119</span> ]; </div><div class="line">items.length; <span class="comment">// return 11 </span></div><div class="line"><span class="keyword">delete</span> items[<span class="number">3</span>]; <span class="comment">// return true </span></div><div class="line">items.length; <span class="comment">// return 11 </span></div><div class="line"><span class="comment">/* items will be equal to [12, 548, "a", undefined × 1, 5478, "foo", 8852, undefined × 1, "Doe", 2154,       119]   */</span></div></pre></td></tr></table></figure>


<p>Use…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items = [<span class="number">12</span>, <span class="number">548</span> ,<span class="string">'a'</span> , <span class="number">2</span> , <span class="number">5478</span> , <span class="string">'foo'</span> , <span class="number">8852</span>, , <span class="string">'Doe'</span> ,<span class="number">2154</span> , <span class="number">119</span> ]; </div><div class="line">items.length; <span class="comment">// return 11 </span></div><div class="line">items.splice(<span class="number">3</span>,<span class="number">1</span>) ; </div><div class="line">items.length; <span class="comment">// return 10 </span></div><div class="line"><span class="comment">/* items will be equal to [12, 548, "a", 5478, "foo", 8852, undefined × 1, "Doe", 2154,       119]   */</span></div></pre></td></tr></table></figure>

<p>The delete method should be used to delete an object property.</p>
<h3 id="_设置length实现截短数组"><i class="fa fa-lightbulb-o"></i> 设置length实现截短数组</h3>
<p>Like the previous example of emptying an array, we truncate it using the length property.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [<span class="number">12</span> , <span class="number">222</span> , <span class="number">1000</span> , <span class="number">124</span> , <span class="number">98</span> , <span class="number">10</span> ];  </div><div class="line">myArray.length = <span class="number">4</span>; <span class="comment">// myArray will be equal to [12 , 222 , 1000 , 124].</span></div></pre></td></tr></table></figure>

<p>As a bonus, if you set the array length to a higher value, the length will be changed and new items will be added with undefined as a value. The array length is not a read only property.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">myArray.length = <span class="number">10</span>; <span class="comment">// the new array length is 10 </span></div><div class="line">myArray[myArray.length - <span class="number">1</span>] ; <span class="comment">// undefined</span></div></pre></td></tr></table></figure>

<h3 id="_使用逻辑_AND/_OR_作为条件判断"><i class="fa fa-lightbulb-o"></i> 使用逻辑 AND/ OR 作为条件判断</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="number">10</span>;  </div><div class="line">foo == <span class="number">10</span> && doSomething(); <span class="comment">// is the same thing as if (foo == 10) doSomething(); </span></div><div class="line">foo == <span class="number">5</span> || doSomething(); <span class="comment">// is the same thing as if (foo != 5) doSomething();</span></div></pre></td></tr></table></figure>

<p>The logical OR could also be used to set a default value for function argument.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">(arg1)</span></span>{ </div><div class="line">    arg1 = arg1 || <span class="number">10</span>; <span class="comment">// arg1 will have 10 as a default value if it’s not already set</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_使用map()函数遍历数组"><i class="fa fa-lightbulb-o"></i> 使用map()函数遍历数组</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> squares = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="keyword">function</span> <span class="params">(val)</span> </span>{  </div><div class="line">    <span class="keyword">return</span> val * val;  </div><div class="line">}); </div><div class="line"><span class="comment">// squares will be equal to [1, 4, 9, 16]</span></div></pre></td></tr></table></figure>

<h3 id="_四舍五入，_保留_N位小数"><i class="fa fa-lightbulb-o"></i> 四舍五入， 保留 N位小数</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num =<span class="number">2.443242342</span>;</div><div class="line">num = num.toFixed(<span class="number">4</span>);  <span class="comment">// num will be equal to 2.4432</span></div></pre></td></tr></table></figure>

<p>NOTE : the toFixed() function returns a string and not a number.</p>
<h3 id="_浮点数问题"><i class="fa fa-lightbulb-o"></i> 浮点数问题</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">// is false </span></div><div class="line"><span class="number">9007199254740992</span> + <span class="number">1</span> <span class="comment">// is equal to 9007199254740992  </span></div><div class="line"><span class="number">9007199254740992</span> + <span class="number">2</span> <span class="comment">// is equal to 9007199254740994</span></div></pre></td></tr></table></figure>

<p>Why does this happen? 0.1 +0.2 is equal to 0.30000000000000004. What you need to know is that all JavaScript numbers are floating points represented internally in 64 bit binary according to the IEEE 754 standard. For more explanation, take a look to this blog post.</p>
<p>You can use toFixed() and toPrecision() to resolve this problem.</p>
<h3 id="_使用for-in循环检查对象的属性时需要注意"><i class="fa fa-lightbulb-o"></i> 使用for-in循环检查对象的属性时需要注意</h3>
<p>This code snippet could be useful in order to avoid iterating through the properties from the object’s prototype.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> object) {  </div><div class="line">    <span class="keyword">if</span> (object.hasOwnProperty(name)) { </div><div class="line">        <span class="comment">// do something with name                    </span></div><div class="line">    }  </div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_逗号操作符"><i class="fa fa-lightbulb-o"></i> 逗号操作符</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">0</span>; </div><div class="line"><span class="keyword">var</span> b = ( a++, <span class="number">99</span> ); </div><div class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// a will be equal to 1 </span></div><div class="line"><span class="built_in">console</span>.log(b);  <span class="comment">// b is equal to 99</span></div></pre></td></tr></table></figure>

<h3 id="_缓存需要查询或者计算的变量"><i class="fa fa-lightbulb-o"></i> 缓存需要查询或者计算的变量</h3>
<p>In the case of a jQuery selector, we could cache the DOM element.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> navright = <span class="built_in">document</span>.querySelector(<span class="string">'#right'</span>); </div><div class="line"><span class="keyword">var</span> navleft = <span class="built_in">document</span>.querySelector(<span class="string">'#left'</span>); </div><div class="line"><span class="keyword">var</span> navup = <span class="built_in">document</span>.querySelector(<span class="string">'#up'</span>); </div><div class="line"><span class="keyword">var</span> navdown = <span class="built_in">document</span>.querySelector(<span class="string">'#down'</span>);</div></pre></td></tr></table></figure>

<h3 id="_传给isFinite()的参数需要校验"><i class="fa fa-lightbulb-o"></i> 传给isFinite()的参数需要校验</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">isFinite</span>(<span class="number">0</span>/<span class="number">0</span>) ; <span class="comment">// false </span></div><div class="line"><span class="built_in">isFinite</span>(<span class="string">"foo"</span>); <span class="comment">// false </span></div><div class="line"><span class="built_in">isFinite</span>(<span class="string">"10"</span>); <span class="comment">// true </span></div><div class="line"><span class="built_in">isFinite</span>(<span class="number">10</span>);   <span class="comment">// true </span></div><div class="line"><span class="built_in">isFinite</span>(<span class="literal">undefined</span>);  <span class="comment">// false </span></div><div class="line"><span class="built_in">isFinite</span>();   <span class="comment">// false </span></div><div class="line"><span class="built_in">isFinite</span>(<span class="literal">null</span>);  <span class="comment">// true  !!!</span></div></pre></td></tr></table></figure>

<h3 id="_避免数组的索引为负值"><i class="fa fa-lightbulb-o"></i> 避免数组的索引为负值</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbersArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </div><div class="line"><span class="keyword">var</span> from = numbersArray.indexOf(<span class="string">"foo"</span>) ;  <span class="comment">// from is equal to -1 </span></div><div class="line">numbersArray.splice(from,<span class="number">2</span>);    <span class="comment">// will return [5]</span></div></pre></td></tr></table></figure>

<p>Make sure that the arguments passed to splice are not negative.</p>
<h3 id="_JSON的序列化和反序列化"><i class="fa fa-lightbulb-o"></i> JSON的序列化和反序列化</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = {name :<span class="string">'Saad'</span>, age : <span class="number">26</span>, department : {ID : <span class="number">15</span>, name : <span class="string">"R&D"</span>} }; </div><div class="line"><span class="keyword">var</span> stringFromPerson = <span class="built_in">JSON</span>.stringify(person); </div><div class="line"><span class="comment">/* stringFromPerson is equal to "{"name":"Saad","age":26,"department":{"ID":15,"name":"R&D"}}"   */</span> </div><div class="line"><span class="keyword">var</span> personFromString = <span class="built_in">JSON</span>.parse(stringFromPerson);  </div><div class="line"><span class="comment">/* personFromString is equal to person object  */</span></div></pre></td></tr></table></figure>

<h3 id="_避免使用_eval()_或者Function的构造函数"><i class="fa fa-lightbulb-o"></i> 避免使用 eval() 或者Function的构造函数</h3>
<p>Use of eval or the Function constructor are expensive operations as each time they are called script engine must convert source code to executable code.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func1 = <span class="keyword">new</span> <span class="built_in">Function</span>(functionCode);</div><div class="line"><span class="keyword">var</span> func2 = <span class="built_in">eval</span>(functionCode);</div></pre></td></tr></table></figure>

<h3 id="_避免使用_with()_(The_good_part)"><i class="fa fa-lightbulb-o"></i> 避免使用 with() (The good part)</h3>
<p>Using with() inserts a variable at the global scope. Thus, if another variable has the same name it could cause confusion and overwrite the value.</p>
<h3 id="_避免使用for-in遍历数组"><i class="fa fa-lightbulb-o"></i> 避免使用for-in遍历数组</h3>
<p>Instead of using…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;  </div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arrayNumbers) {  </div><div class="line">    sum += arrayNumbers[i];  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>…it’s better to use…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;  </div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arrayNumbers.length; i &lt; len; i++) {  </div><div class="line">    sum += arrayNumbers[i];  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>As a bonus, the instantiation of i and len is executed once because it’s in the first statement of the for loop. Thsi is faster than using…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrayNumbers.length; i++)</div></pre></td></tr></table></figure>

<p>Why? The length of the array arrayNumbers is recalculated every time the loop iterates.</p>
<p>NOTE : the issue of recalculating the length in each iteration was fixed in the latest JavaScript engines.</p>
<h3 id="_调用setTimeout()_和_setInterval()时传入函数而不是函数的字符串名字"><i class="fa fa-lightbulb-o"></i> 调用setTimeout() 和 setInterval()时传入函数而不是函数的字符串名字</h3>
<p>If you pass a string into setTimeout() or setInterval(), the string will be evaluated the same way as with eval, which is slow. Instead of using…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setInterval(<span class="string">'doSomethingPeriodically()'</span>, <span class="number">1000</span>);  </div><div class="line">setTimeout(<span class="string">'doSomethingAfterFiveSeconds()'</span>, <span class="number">5000</span>);</div></pre></td></tr></table></figure>

<p>…use…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setInterval(doSomethingPeriodically, <span class="number">1000</span>);  </div><div class="line">setTimeout(doSomethingAfterFiveSeconds, <span class="number">5000</span>);</div></pre></td></tr></table></figure>

<h3 id="_使用_switch/case_statement_而不是一堆的_if/else"><i class="fa fa-lightbulb-o"></i> 使用 switch/case statement 而不是一堆的 if/else</h3>
<p>Using switch/case is faster when there are more than 2 cases, and it is more elegant (better organized code). Avoid using it when you have more than 10 cases.</p>
<h3 id="_使用数字返回做switch/case_的条件判断"><i class="fa fa-lightbulb-o"></i> 使用数字返回做switch/case 的条件判断</h3>
<p>Using a switch/case statement with numeric ranges is possible with this trick.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCategory</span><span class="params">(age)</span> </span>{  </div><div class="line">    <span class="keyword">var</span> category = <span class="string">""</span>;  </div><div class="line">    <span class="keyword">switch</span> (<span class="literal">true</span>) {  </div><div class="line">        <span class="keyword">case</span> <span class="built_in">isNaN</span>(age):  </div><div class="line">            category = <span class="string">"not an age"</span>;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> (age &gt;= <span class="number">50</span>):  </div><div class="line">            category = <span class="string">"Old"</span>;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> (age &lt;= <span class="number">20</span>):  </div><div class="line">            category = <span class="string">"Baby"</span>;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">default</span>:  </div><div class="line">            category = <span class="string">"Young"</span>;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">    };  </div><div class="line">    <span class="keyword">return</span> category;  </div><div class="line">}  </div><div class="line">getCategory(<span class="number">5</span>);  <span class="comment">// will return "Baby"</span></div></pre></td></tr></table></figure>

<h3 id="_为创建的对象指定prototype"><i class="fa fa-lightbulb-o"></i> 为创建的对象指定prototype</h3>
<p>It’s possible to write a function that creates an object whose prototype is the given argument like this…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span><span class="params">(object)</span> </span>{  </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">OneShotConstructor</span><span class="params">()</span></span>{}; </div><div class="line">    OneShotConstructor.prototype= object;  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OneShotConstructor(); </div><div class="line">} </div><div class="line">clone(<span class="built_in">Array</span>).prototype ;  <span class="comment">// []</span></div></pre></td></tr></table></figure>

<h3 id="_HTML_转义函数"><i class="fa fa-lightbulb-o"></i> HTML 转义函数</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeHTML</span><span class="params">(text)</span> </span>{  </div><div class="line">    <span class="keyword">var</span> replacements= {<span class="string">"&lt;"</span>: <span class="string">"&lt;"</span>, <span class="string">"&gt;"</span>: <span class="string">"&gt;"</span>,<span class="string">"&"</span>: <span class="string">"&amp;"</span>, <span class="string">"\""</span>: <span class="string">"&quot;"</span>};                      </div><div class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/[&lt;&gt;&"]/g</span>, <span class="function"><span class="keyword">function</span><span class="params">(character)</span> </span>{  </div><div class="line">        <span class="keyword">return</span> replacements[character];  </div><div class="line">    }); </div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_不要在循环内部使用try-catch-finally"><i class="fa fa-lightbulb-o"></i> 不要在循环内部使用try-catch-finally</h3>
<p>The try-catch-finally construct creates a new variable in the current scope at runtime each time the catch clause is executed where the caught exception object is assigned to a variable.</p>
<p>Instead of using…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = [<span class="string">'foo'</span>, <span class="string">'bar'</span>], i;  </div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, len = object.length; i &lt;len; i++) {  </div><div class="line">    <span class="keyword">try</span> {  </div><div class="line">        <span class="comment">// do something that throws an exception </span></div><div class="line">    }  </div><div class="line">    <span class="keyword">catch</span> (e) {   </div><div class="line">        <span class="comment">// handle exception  </span></div><div class="line">    } </div><div class="line">}</div></pre></td></tr></table></figure>

<p>…use…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = [<span class="string">'foo'</span>, <span class="string">'bar'</span>], i;  </div><div class="line"><span class="keyword">try</span> { </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, len = object.length; i &lt;len; i++) {  </div><div class="line">        <span class="comment">// do something that throws an exception </span></div><div class="line">    } </div><div class="line">} </div><div class="line"><span class="keyword">catch</span> (e) {   </div><div class="line">    <span class="comment">// handle exception  </span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_为XMLHttpRequests设置超时"><i class="fa fa-lightbulb-o"></i> 为XMLHttpRequests设置超时</h3>
<p>You could abort the connection if an XHR takes a long time (for example, due to a network issue), by using setTimeout() with the XHR call.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest (); </div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{  </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState == <span class="number">4</span>) {  </div><div class="line">        clearTimeout(timeout);  </div><div class="line">        <span class="comment">// do something with response data </span></div><div class="line">    }  </div><div class="line">}  </div><div class="line"><span class="keyword">var</span> timeout = setTimeout( <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{  </div><div class="line">    xhr.abort(); <span class="comment">// call error callback  </span></div><div class="line">}, <span class="number">60</span>*<span class="number">1000</span> <span class="comment">/* timeout after a minute */</span> ); </div><div class="line">xhr.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);  </div><div class="line"></div><div class="line">xhr.send();</div></pre></td></tr></table></figure>

<p>As a bonus, you should generally avoid synchronous XHR calls completely.</p>
<h3 id="_处理WebSocket_超时"><i class="fa fa-lightbulb-o"></i> 处理WebSocket 超时</h3>
<p>Generally when a WebSocket connection is established, a server could time out your connection after 30 seconds of inactivity. The firewall could also time out the connection after a period of inactivity.</p>
<p>To deal with the timeout issue you could send an empty message to the server periodically. To do this, add these two functions to your code: one to keep alive the connection and the other one to cancel the keep alive. Using this trick, you’ll control the timeout.</p>
<p>Add a timerID…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timerID = <span class="number">0</span>; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">keepAlive</span><span class="params">()</span> </span>{ </div><div class="line">    <span class="keyword">var</span> timeout = <span class="number">15000</span>;  </div><div class="line">    <span class="keyword">if</span> (webSocket.readyState == webSocket.OPEN) {  </div><div class="line">        webSocket.send(<span class="string">''</span>);  </div><div class="line">    }  </div><div class="line">    timerId = setTimeout(keepAlive, timeout);  </div><div class="line">}  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelKeepAlive</span><span class="params">()</span> </span>{  </div><div class="line">    <span class="keyword">if</span> (timerId) {  </div><div class="line">        cancelTimeout(timerId);  </div><div class="line">    }  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>The keepAlive() function should be added at the end of the onOpen() method of the webSocket connection and the cancelKeepAlive() at the end of the onClose() method.</p>
<h3 id="_牢记，原始运算符始终比函数调用要高效。使用VanillaJS。"><i class="fa fa-lightbulb-o"></i>  牢记，原始运算符始终比函数调用要高效。使用<a href="http://vanilla-js.com/" target="_blank" rel="external">VanillaJS</a>。</h3>
<p>For example, instead of using…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min(a,b); </div><div class="line">A.push(v);</div><div class="line"></div><div class="line">…use…</div><div class="line"></div><div class="line"><span class="keyword">var</span> min = a &lt; b ? a : b; </div><div class="line">A[A.length] = v;</div></pre></td></tr></table></figure>

<h3 id="_编码时不要忘记使用代码美化工具-_发布前使用JSLint_和_minification_(如JSMin)-"><i class="fa fa-lightbulb-o"></i> 编码时不要忘记使用代码美化工具. 发布前使用JSLint 和 minification (如JSMin).</h3>
<h3 id="_JavaScript如此美好，快来看看学习的一些资源吧"><i class="fa fa-lightbulb-o"></i> JavaScript如此美好，快来看看学习的一些资源吧</h3>
<p>Code Academy JavaScript tracks: <a href="http://www.codecademy.com/tracks/javascript" target="_blank" rel="external">http://www.codecademy.com/tracks/javascript</a><br>Eloquent JavaScript by Marjin Haverbeke: <a href="http://eloquentjavascript.net/" target="_blank" rel="external">http://eloquentjavascript.net/</a><br>Advanced JavaScript by John Resig: <a href="http://ejohn.org/apps/learn/" target="_blank" rel="external">http://ejohn.org/apps/learn/</a></p>
<h1 id="结尾">结尾</h1>
<p>我(Saad Mousliki)知道还有许许多多的技巧窍门和最佳实践。 所以如果你有更多想增加的，或者针对以上条目的反馈和更正， 请添加注释。</p>
<h1 id="参考">参考</h1>
<p>本文大大部分的代码都是我(Saad Mousliki)自己写的。 有部分的代码片段参考了一些其它文章或者论坛的帖子。</p>
<ul>
<li><a href="http://developer.nokia.com/Community/Wiki/JavaScript_Performance_Best_Practices" target="_blank" rel="external">JavaScript Performance Best Practices (CC)</a></li>
<li><a href="https://code.google.com/p/jslibs/wiki/JavascriptTips" target="_blank" rel="external">Google Code JavaScript tips</a></li>
<li><a href="http://stackoverflow.com/questions/724826/javascript-tips-and-tricks-javascript-best-practices" target="_blank" rel="external">StackOverFlow tips and tricks</a></li>
<li><a href="http://stackoverflow.com/questions/6888409/settimeout-for-xhr-requests" target="_blank" rel="external">TimeOut for XHR</a>fu</li>
</ul>
<h1 id="附加技巧">附加技巧</h1>
<p>除了前面文章中提到的技巧， 我也在这篇文章列出收集的更多的JavaScript技巧</p>
<h3 id="_两个感叹号"><i class="fa fa-lightbulb-o"></i> 两个感叹号</h3>
<p>一个元素转换为真的布尔值，一般用来判断某个元素是否存在，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>!![] <span class="literal">true</span>； ![] <span class="literal">false</span></div><div class="line"><span class="number">2.</span>!!{} <span class="literal">true</span>; !{} <span class="literal">false</span></div><div class="line"><span class="number">3.</span>!!<span class="literal">false</span> <span class="literal">false</span>; !<span class="literal">false</span> <span class="literal">true</span></div><div class="line"><span class="number">4.</span>!!<span class="literal">true</span> <span class="literal">true</span>; !<span class="literal">true</span> <span class="literal">false</span></div><div class="line"><span class="number">5.</span>!!<span class="literal">undefined</span> <span class="literal">false</span>; !<span class="literal">undefined</span> <span class="literal">true</span></div></pre></td></tr></table></figure>

<p>双感叹号才能真正的将他转换成对应的Boolean值，第一个感叹号是将其转化成Boolean类型的值，但是这一操作得到的是其取反以后的值，在进行一次取反运算才能得到其对应真正的布尔值 </p>
<h3 id="_把数字变字符串，_把字符串变数字"><i class="fa fa-lightbulb-o"></i> 把数字变字符串， 把字符串变数字</h3>
<p>把s变数字：<code>s = s - 0;</code> 或者 <code>s = +s;</code><br>把n变字符串：<code>n = n + &quot;&quot;;</code> </p>
<h3 id="把数组转换成CSV字符串">把数组转换成CSV字符串</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'peaches'</span>, <span class="string">'oranges'</span>, <span class="string">'mangoes'</span>];</div><div class="line">  </div><div class="line"><span class="keyword">var</span> str = fruits.valueOf();</div><div class="line">  </div><div class="line"><span class="comment">//print str: apple,peaches,oranges,mangoes</span></div></pre></td></tr></table></figure>

<p>如果不想逗号分隔：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'peaches'</span>, <span class="string">'oranges'</span>, <span class="string">'mangoes'</span>];</div><div class="line">  </div><div class="line"><span class="keyword">var</span> str = fruits.join(<span class="string">"|"</span>);</div><div class="line">  </div><div class="line"><span class="comment">//print str: apple|peaches|oranges|mangoes</span></div></pre></td></tr></table></figure>

<h3 id="_转换CSV字符串为数组"><i class="fa fa-lightbulb-o"></i> 转换CSV字符串为数组</h3>
<p>使用<code>split</code>方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"apple, peaches, oranges, mangoes"</span>;</div><div class="line">  </div><div class="line"><span class="keyword">var</span> fruitsArray = str.split(<span class="string">","</span>);</div><div class="line">  </div><div class="line"><span class="comment">//print fruitsArray[0]: apple</span></div></pre></td></tr></table></figure>

<h3 id="_移除数组指定索引"><i class="fa fa-lightbulb-o"></i> 移除数组指定索引</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeByIndex</span><span class="params">(arr, index)</span> </span>{</div><div class="line">    arr.splice(index, <span class="number">1</span>);</div><div class="line">}</div><div class="line"> </div><div class="line">test = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">test[<span class="number">0</span>] = <span class="string">'Apple'</span>;</div><div class="line">test[<span class="number">1</span>] = <span class="string">'Ball'</span>;</div><div class="line">test[<span class="number">2</span>] = <span class="string">'Cat'</span>;</div><div class="line">test[<span class="number">3</span>] = <span class="string">'Dog'</span>;</div><div class="line"> </div><div class="line">alert(<span class="string">"Array before removing elements: "</span>+test);</div><div class="line"> </div><div class="line">removeByIndex(test, <span class="number">2</span>);</div><div class="line"> </div><div class="line">alert(<span class="string">"Array after removing elements: "</span>+test);</div></pre></td></tr></table></figure>

<h3 id="_移除数组特定的值"><i class="fa fa-lightbulb-o"></i> 移除数组特定的值</h3>
<p>假定数组的值不会重复。如果有重复且想删除所有的重复的值， 注释掉<code>break</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeByValue</span><span class="params">(arr, val)</span> </span>{</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++) {</div><div class="line">        <span class="keyword">if</span>(arr[i] === val) {</div><div class="line">            arr.splice(i, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="keyword">var</span> somearray = [<span class="string">"mon"</span>, <span class="string">"tue"</span>, <span class="string">"wed"</span>, <span class="string">"thur"</span>]</div><div class="line"> </div><div class="line">removeByValue(somearray, <span class="string">"tue"</span>);</div><div class="line"> </div><div class="line"><span class="comment">//somearray will now have "mon", "wed", "thur"</span></div></pre></td></tr></table></figure>

<p>下面的方法是为Array类增加removeByValue方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.removeByValue = <span class="function"><span class="keyword">function</span><span class="params">(val)</span> </span>{</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.length; i++) {</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>[i] == val) {</div><div class="line">            <span class="keyword">this</span>.splice(i, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//..</span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> somearray = [<span class="string">"mon"</span>, <span class="string">"tue"</span>, <span class="string">"wed"</span>, <span class="string">"thur"</span>]</div><div class="line"> </div><div class="line">somearray.removeByValue(<span class="string">"tue"</span>);</div><div class="line"> </div><div class="line"><span class="comment">//somearray will now have "mon", "wed", "thur"</span></div></pre></td></tr></table></figure>

<h3 id="_根据方法名调用方法"><i class="fa fa-lightbulb-o"></i> 根据方法名调用方法</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> strFun = <span class="string">"someFunction"</span>; <span class="comment">//Name of the function to be called</span></div><div class="line"><span class="keyword">var</span> strParam = <span class="string">"this is the parameter"</span>; <span class="comment">//Parameters to be passed in function</span></div><div class="line">  </div><div class="line"><span class="comment">//Create the function</span></div><div class="line"><span class="keyword">var</span> fn = <span class="built_in">window</span>[strFun];</div><div class="line">  </div><div class="line"><span class="comment">//Call the function</span></div><div class="line">fn(strParam);</div></pre></td></tr></table></figure>

<h3 id="_检查Form_是否dirty"><i class="fa fa-lightbulb-o"></i> 检查Form 是否dirty</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Determines if a form is dirty by comparing the current value of each element</div><div class="line"> * with its default value.</div><div class="line"> *</div><div class="line"> * @param {Form} form the form to be checked.</div><div class="line"> * @return {Boolean} &lt;code&gt;true&lt;/code&gt; if the form is dirty, &lt;code&gt;false&lt;/code&gt;</div><div class="line"> *                   otherwise.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">formIsDirty</span><span class="params">(form)</span> </span>{</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; form.elements.length; i++) {</div><div class="line">    <span class="keyword">var</span> element = form.elements[i];</div><div class="line">    <span class="keyword">var</span> type = element.type;</div><div class="line">    <span class="keyword">if</span> (type == <span class="string">"checkbox"</span> || type == <span class="string">"radio"</span>) {</div><div class="line">      <span class="keyword">if</span> (element.checked != element.defaultChecked) {</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      }</div><div class="line">    }</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">"hidden"</span> || type == <span class="string">"password"</span> ||</div><div class="line">             type == <span class="string">"text"</span> || type == <span class="string">"textarea"</span>) {</div><div class="line">      <span class="keyword">if</span> (element.value != element.defaultValue) {</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">      }</div><div class="line">    }</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">"select-one"</span> || type == <span class="string">"select-multiple"</span>) {</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; element.options.length; j++) {</div><div class="line">        <span class="keyword">if</span> (element.options[j].selected !=</div><div class="line">            element.options[j].defaultSelected) {</div><div class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        }</div><div class="line">      }</div><div class="line">    }</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_检查字符串是否包含子串"><i class="fa fa-lightbulb-o"></i> 检查字符串是否包含子串</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.indexOf) {</div><div class="line">    <span class="built_in">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span><span class="params">(obj, start)</span> </span>{</div><div class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> i = (start || <span class="number">0</span>), j = <span class="keyword">this</span>.length; i &lt; j; i++) {</div><div class="line">             <span class="keyword">if</span> (<span class="keyword">this</span>[i] === obj) { <span class="keyword">return</span> i; }</div><div class="line">         }</div><div class="line">         <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="keyword">if</span> (!<span class="built_in">String</span>.prototype.contains) {</div><div class="line">    <span class="built_in">String</span>.prototype.contains = <span class="function"><span class="keyword">function</span> <span class="params">(arg)</span> </span>{</div><div class="line">        <span class="keyword">return</span> !!~<span class="keyword">this</span>.indexOf(arg);</div><div class="line">    };</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="_移除数组的重复数据"><i class="fa fa-lightbulb-o"></i> 移除数组的重复数据</h3>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeDuplicates</span><span class="params">(arr)</span> </span>{</div><div class="line">    <span class="keyword">var</span> temp = {};</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)</div><div class="line">        temp[arr[i]] = <span class="literal">true</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> r = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> temp)</div><div class="line">        r.push(k);</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="comment">//Usage</span></div><div class="line"><span class="keyword">var</span> fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'peach'</span>, <span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'orange'</span>];</div><div class="line"><span class="keyword">var</span> uniquefruits = removeDuplicates(fruits);</div><div class="line"><span class="comment">//print uniquefruits ['apple', 'orange', 'peach', 'strawberry'];</span></div></pre></td></tr></table></figure>

<h3 id="_记不住apply和call的区别"><i class="fa fa-lightbulb-o"></i> 记不住<code>apply</code>和<code>call</code>的区别</h3>
<p><a href="http://stackoverflow.com/questions/1986896/what-is-the-difference-between-call-and-apply" target="_blank" rel="external">stackoverflow</a>:<br>Think of a in apply for <strong>a</strong>rray of args and c in call for <strong>c</strong>olumns of args.</p>
<h3 id="_双波浪号~~是取整"><i class="fa fa-lightbulb-o"></i> 双波浪号~~是取整</h3>
<p><a href="http://rocha.la/JavaScript-bitwise-operators-in-practice" target="_blank" rel="external">http://rocha.la/JavaScript-bitwise-operators-in-practice</a> :<br>单波浪号是按位非，双波浪号是取整。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">~~<span class="number">2</span> === <span class="built_in">Math</span>.floor(<span class="number">2</span>); <span class="comment">//true, 2</span></div><div class="line">~~<span class="number">2.4</span> === <span class="built_in">Math</span>.floor(<span class="number">2</span>); <span class="comment">//true, 2</span></div><div class="line">~~<span class="number">3.9</span> === <span class="built_in">Math</span>.floor(<span class="number">3</span>); <span class="comment">//true, 3</span></div></pre></td></tr></table></figure>

<p>参考文档：</p>
<ul>
<li><a href="http://viralpatel.net/blogs/javascript-tips-tricks/" target="_blank" rel="external">21 JavaScript Tips and Tricks for JavaScript Developers</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>如你所知，JavaScript是世上编程语言的Number One (编者按： 原文如此), 用来编写Web和移动混合应用（比如PhoneGap或者Appcelerator）， 也可以编写服务器端的程序（比如NodeJS或者Wakanda），并且拥有很多其他的实现。 它也是很多新手进入编程世界的启蒙语言，因为它不但可以在浏览器上显示一个简单的alert信息，而且还可以用来控制一个机器人（使用nodebot，或者nodruino）。掌握JavaScript并且能够写出规范并性能高效代码的开发人员，已经成为人才市场上的猎寻目标。</p>
<p>在这篇文章中，Saad Mousliki将分享一组JavaScript的技巧、窍门和最佳实践，这些都是JavaScript程序员应该知晓的，不管他们是使用在浏览器/引擎上，还是服务器端（SSJS Service Side JavaScript）JavaScript解释器上。</p>
<p>需要注意的是，这篇文章中的代码片段都在最新的Google Chrome（版本号30）上测试过，它使用V8 JavaScript引擎（V8 3.20.17.15）</p>
]]>
    
    </summary>
    
      <category term="javascript" scheme="http://colobu.com/tags/javascript/"/>
    
      <category term="前端开发" scheme="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[7个你可能不知道的CSS单位]]></title>
    <link href="http://colobu.com/2015/03/06/7-CSS-Units-You-Might-Not-Know-About/"/>
    <id>http://colobu.com/2015/03/06/7-CSS-Units-You-Might-Not-Know-About/</id>
    <published>2015-03-06T01:19:24.000Z</published>
    <updated>2015-07-31T13:28:02.167Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://webdesign.tutsplus.com/articles/7-css-units-you-might-not-know-about--cms-22573" target="_blank" rel="external">7 CSS Units You Might Not Know About</a><br>译文：<a href="http://www.ido321.com/1301.html" target="_blank" rel="external">7个你可能不知道的CSS单位</a><br>译者：dwqs</p>
<p>众所周知，当使用CSS技术的时候，很容被一些奇异问题给困住。而当我们面对新的问题时，这会让我们处于非常不利的位置。<br>但是，伴随着Web的发展，新的解决方案也在慢慢成熟。因此，作为一个Web设计和前端开发人员，除了对我们使用的工具或属性非常了解并能熟练运用，已经别无选择了。<br>这也意味着，对于那些特别的工具或属性，即使平常很少使用，但是当需要的时候，我们也能很好的把它运用到工作中。<br>今天，我就介绍一些你之前可能不知道的CSS 属性，是一些例如px和ems测量方面的单位，但是很有可能你之前都没听过这些。一起来看看吧。<br><a id="more"></a></p>
<p>回顾一下常见的几个CSS的尺寸</p>
<table class="dataintable">
  <tbody><tr>
    <th style="width:22%;">单位</th>
    <th>描述</th>
  </tr>
  <tr>
    <td>%</td>
    <td>百分比</td>
  </tr>
  <tr>
    <td>in</td>
    <td>英寸</td>
  </tr>
  <tr>
    <td>cm</td>
    <td>厘米</td>
  </tr>
  <tr>
    <td>mm</td>
    <td>毫米</td>
  </tr>
  <tr>
    <td>em</td>
    <td>
	<p>1em 等于当前的字体尺寸。</p>
	<p>2em 等于当前字体尺寸的两倍。</p>
	<p>例如，如果某元素以 12pt 显示，那么 2em 是24pt。</p>
	<p>在 CSS 中，em 是非常有用的单位，因为它可以自动适应用户所使用的字体。</p>
	</td>
  </tr>
  <tr>
    <td>ex</td>
    <td>一个 ex 是一个字体的 x-height。 (x-height 通常是字体尺寸的一半。)</td>
  </tr>
  <tr>
    <td>pt</td>
    <td>磅 (1 pt 等于 1/72 英寸)</td>
  </tr>
  <tr>
    <td>pc</td>
    <td>12 点活字 (1 pc 等于 12 点)</td>
  </tr>
  <tr>
    <td>px</td>
    <td>像素 (计算机屏幕上的一个点)</td>
  </tr>
</tbody></table>


<h2 id="rem">rem</h2>
<p>从与我们已经熟悉的但很相似的单位开始介绍。em被定义为相对于当前对象内文本的字体大小。如果你给body元素设置了一个字体大小，那么body的任何子元素的em值都等于body设置的font-size。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"test"</span>&gt;</span>Test<span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">body {</div><div class="line">    font-size: 14px;</div><div class="line">}</div><div class="line">div {</div><div class="line">    font-size: 1.2em; // calculated at 14px * 1.2, or 16.8px</div><div class="line">}</div></pre></td></tr></table></figure>

<p>div中的字体大小是1.2em，也就是div从父类元素继承的字体大小的1.2倍。在这里，body的字体是14px，那么div的字体大小是1.2*14=16.8px.</p>
<p>但是，如果你用em一层一层级联得定义嵌套元素的字体大小又会花生什么事情呢？在下面这一小段代码里我们应用了和上面一样一样的CSS，每一个div都从它上一级父元素继承了字体大小，并且逐渐得增加。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">        Test <span class="comment">&lt;!-- 14 * 1.2 = 16.8px --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">            Test <span class="comment">&lt;!-- 16.8 * 1.2 = 20.16px --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="title">div</span>&gt;</span></div><div class="line">                Test <span class="comment">&lt;!-- 20.16 * 1.2 = 24.192px --&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div></pre></td></tr></table></figure>

<iframe id="cp_embed_xbZQRQ" src="//codepen.io/tutsplus/embed/xbZQRQ?height=350&theme-id=0&slug-hash=xbZQRQ&default-tab=result" scrolling="no" frameborder="0" height="350" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>

<p>虽然在某些地方这正是我们想要的，但是通常情况下我们还是希望就依赖单一的相对度量单位就好。这时，就应该用rem了，rem中的r代表根元素，它的值就是根元素设置的字体大小。在大多数情况下，根元素就是html了。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">html</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">14px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">div</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">1.2rem</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>这样在上面的那三个嵌套的div娃们的字体大小都是 1.2*14px = 16.8px 了。<br>适用于网格布局</p>
<p>Rems不仅适用于字体大小，也用于网格布局。例如，你可以用基于html根元素字体大小的rem作为整个网格布局或者UI库的大小单位，然后在其他特定的地方用em单位。这样将会给你带来更多的字体大小和伸缩的可控性，</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container {</div><div class="line">    width: 70rem; // 70 * 14px = 980px</div><div class="line">}</div></pre></td></tr></table></figure>

<p>概念上来说，这个方法的思想就是让你的界面根据你的内容进行缩放。但是，这样做并不是对所有的情况都有意义。</p>
<h2 id="vh和vw">vh和vw</h2>
<p>响应式Web设计对百分比规则有很大的依赖性。然而，对于每一个问题，CSS百分比并不是最好的解决方案。CSS宽度是相对于包含它的最近的父元素的宽度的。如果你想使用的是视口的高度或宽度，而不是父元素的，那要肿么办呢？vh和vw就能满足这个需求了。</p>
<p>1vh等于1%的视口高度。例如，浏览器高度是900px，那么1vh = 900*1%=9px，同理，若视口宽度是750px,则1vw是7.5px。</p>
<p>它们的用途很广泛。比如，我们用很简单的方法只用一行CSS代码就实现同屏幕等高的框。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class">.slide</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100vh</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>假设你要来一个和屏幕同宽的标题，你只要设置这个标题的font-size的单位为vm，那标题的字体大小就会自动根据浏览器的宽度进行缩放，以达到字体和viewport大小同步的效果，有木有？！</p>
<iframe id="cp_embed_gbPQga" src="//codepen.io/tutsplus/embed/gbPQga?height=350&theme-id=0&slug-hash=gbPQga&default-tab=result" scrolling="no" frameborder="0" height="350" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>

<h2 id="vmin和vmax">vmin和vmax</h2>
<p>vh和vw是相对于视口的宽度和高度，而vmin和vmax则关于视口高度和宽度两者的最小或者最大值。例如，如果浏览器的高宽分别为700px和1100px，则1vmin=7px，1vmax=11px；如果高宽分别是1080px和800px,则1vmin=8px,1vmax=10.8px。</p>
<p>那么什么时候需要这些值呢？</p>
<p>假设有一个元素，你需要让它始终在屏幕上可见。只要对其高度和宽度使用vmin单位，并赋予其低于100的值就可以做到了。例如，可以这样定义一个至少有两个边触摸到屏幕的方形：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class">.box</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100vmin</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100vmin</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p><img src="https://cms-assets.tutsplus.com/uploads/users/30/posts/22573/image/vmin.png" alt=""><br>如果你要让这个方形框框始终铺满整个视口的可见区域（四边始终触摸到屏幕的四边）：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class">.box</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100vmax</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100vmax</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p><img src="https://cms-assets.tutsplus.com/uploads/users/30/posts/22573/image/vmax.png" alt=""><br>结合使用这些单位可以为我们提供一个新颖有意思的方式来灵活地利用我们视口的大小。</p>
<h2 id="ex和ch">ex和ch</h2>
<p>单位ex和ch，就跟em和rem类似，取决于当前的字体和字体大小。然而，跟em和rem不同的是，ex和ch是基于字体的度量单位，依赖于设定的字体。</p>
<p>单位ch通常被定义为数字0的宽度。你可以在Eric Meyers的博客里找到关于它的一些有意思的讨论，例如将一个等宽字体的字母”N”的宽度设置为40ch,那么在另一种类型的字体里它却可以包含40个字母。这个单位的传统用途主要是盲文的排版，但是除此之外，肯定还有可以应用他的地方。</p>
<p>单位ex定义为当前字体的小写x的高度或者1/2的em。很多时候，它是字体的中间标志。<br><img src="https://cms-assets.tutsplus.com/uploads/users/30/posts/22573/image/x2.png" alt=""><br>x-height; the height of the lower case x（read more about <a href="https://webdesign.tutsplus.com/articles/the-anatomy-of-web-typography--webdesign-10533" target="_blank" rel="external">The Anatomy of Web Typography</a>）</p>
<p>他们有很多的用途，但是大部分用于版式的微调。比如，sup元素（上角标字符），可以利用position:relative;bottom: 1ex;实现，同理，可以实现一个下角标文字。浏览器默认的处理方式是利用上标和下标特定垂直对齐规则，但是如果你想更细粒度更精确得控制，你可以像下面这样做：<br><code>` css
sup {
    position: relative;
    bottom: 1ex;
}
sub {
    position: relative;
    bottom: -1ex;
}</code></p>
<h2 id="总结">总结</h2>
<p>持续关注CSS的发展和扩展是非常重要的，这样你才能熟练运用你工具箱中特定的工具。说不定将来你遇到的某个特殊的问题就需要使用这些复杂的单位来解决。花点时间去阅读新的技术规范，注册订阅一些不错的网站或者资源，类似 cssweekly这样的。 当然不要忘记现在就去注册像Tuts+这样的网站来获取每周的更新，课程，免费教程还有资源！</p>
<h2 id="扩展阅读">扩展阅读</h2>
<p>More CSS unit goodness.</p>
<ul>
<li><a href="http://webdesign.tutsplus.com/articles/taking-the-erm-out-of-ems--webdesign-12321" target="_blank" rel="external">Taking the “Erm..” Out of Ems</a></li>
<li><a href="http://webdesign.tutsplus.com/articles/taking-ems-even-further--webdesign-12543" target="_blank" rel="external">Taking Ems Even Further</a></li>
<li><a href="http://caniuse.com/#feat=viewport-units" target="_blank" rel="external">Caniuse Viewport units</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://webdesign.tutsplus.com/articles/7-css-units-you-might-not-know-about--cms-22573" target="_blank" rel="external">7 CSS Units You Might Not Know About</a><br>译文：<a href="http://www.ido321.com/1301.html" target="_blank" rel="external">7个你可能不知道的CSS单位</a><br>译者：dwqs</p>
<p>众所周知，当使用CSS技术的时候，很容被一些奇异问题给困住。而当我们面对新的问题时，这会让我们处于非常不利的位置。<br>但是，伴随着Web的发展，新的解决方案也在慢慢成熟。因此，作为一个Web设计和前端开发人员，除了对我们使用的工具或属性非常了解并能熟练运用，已经别无选择了。<br>这也意味着，对于那些特别的工具或属性，即使平常很少使用，但是当需要的时候，我们也能很好的把它运用到工作中。<br>今天，我就介绍一些你之前可能不知道的CSS 属性，是一些例如px和ems测量方面的单位，但是很有可能你之前都没听过这些。一起来看看吧。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[akka actor的运行原理]]></title>
    <link href="http://colobu.com/2015/05/28/Akka-actor-scheduling/"/>
    <id>http://colobu.com/2015/05/28/Akka-actor-scheduling/</id>
    <published>2015-05-28T05:16:48.000Z</published>
    <updated>2015-07-31T13:28:02.167Z</updated>
    <content type="html"><![CDATA[<p>最近在调研Scala web框架的性能时遇到一些问题， 比如生成巨多的Actor，GC时间过长，CPU使用率太高， 执行Actor的Receive是遇到耗时操作的问题等。怀疑Akka的调度器有些问题，特意整理了一些Akka调度器的背景知识，以及从源代码分析一下Actor是怎么执行地。<br><a id="more"></a></p>
<h3 id="Dispatcher">Dispatcher</h3>
<p>Akka MessageDispatcher驱动Akka actor运行(tick)，也可以说是这个机器的引擎。所有的MessageDispatcher都实现了ExecutionContext trait, 这意味着它们可以用来执行任何代码， 例如 <a href="http://doc.akka.io/docs/akka/snapshot/scala/futures.html#futures-scala" target="_blank" rel="external">Future</a>.</p>
<p>如果对Actor不做额外配置的话，<code>ActorSystem</code>会使用一个缺省的Dispatcher。缺省的Dispatcher也可以进行参数调整，缺省它使用一个特定的<code>default-executor</code>。如果<code>ActorSystem</code>在创建时传入一个ExecutionContext，则此ExecutionContext 将作为此<code>ActorSystem</code>的所有Dispatcher的缺省<code>executor</code>。缺省的<code>default-executor</code>是<code>fork-join-executor</code>,在大部分情况下它的性能还是不错的。</p>
<h4 id="可以通过下面的代码得到一个配置的Dispatcher:">可以通过下面的代码得到一个配置的Dispatcher:</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// for use with Futures, Scheduler, etc.</span></div><div class="line">implicit <span class="keyword">val</span> executionContext = system.dispatchers.lookup(<span class="string">"my-dispatcher"</span>)</div></pre></td></tr></table></figure>

<h4 id="为Actor设置Dispatcher">为Actor设置Dispatcher</h4>
<p>如果你希望为你的 Actor 设置非缺省的派发器，你需要做两件事:<br>首先要配置dispatcher:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">my-dispatcher {</div><div class="line">  # Dispatcher is the name of the event-based dispatcher</div><div class="line">  type = Dispatcher</div><div class="line">  # What kind of ExecutionService to <span class="operator"><span class="keyword">use</span></span></div><div class="line">  executor = <span class="string">"fork-join-executor"</span></div><div class="line">  # Configuration <span class="keyword">for</span> the fork <span class="keyword">join</span> pool</div><div class="line">  fork-<span class="keyword">join</span>-executor {</div><div class="line">    # <span class="keyword">Min</span> <span class="built_in">number</span> <span class="keyword">of</span> threads <span class="keyword">to</span> cap factor-based parallelism <span class="built_in">number</span> <span class="keyword">to</span></div><div class="line">    parallelism-<span class="keyword">min</span> = <span class="number">2</span></div><div class="line">    # Parallelism (threads) ... <span class="keyword">ceil</span>(available processors * factor)</div><div class="line">    parallelism-factor = <span class="number">2.0</span></div><div class="line">    # <span class="keyword">Max</span> <span class="built_in">number</span> <span class="keyword">of</span> threads <span class="keyword">to</span> cap factor-based parallelism <span class="built_in">number</span> <span class="keyword">to</span></div><div class="line">    parallelism-<span class="keyword">max</span> = <span class="number">10</span></div><div class="line">  }</div><div class="line">  # Throughput defines the maximum <span class="built_in">number</span> <span class="keyword">of</span> messages <span class="keyword">to</span> be</div><div class="line">  # processed per actor <span class="keyword">before</span> the thread jumps <span class="keyword">to</span> the <span class="keyword">next</span> actor.</div><div class="line">  # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">as</span> fair <span class="keyword">as</span> possible.</div><div class="line">  throughput = <span class="number">100</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>或者配置使用<code>thread-pool-executor</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">my-thread-pool-dispatcher {</div><div class="line">  # Dispatcher is the name of the event-based dispatcher</div><div class="line">  type = Dispatcher</div><div class="line">  # What kind of ExecutionService to <span class="operator"><span class="keyword">use</span></span></div><div class="line">  executor = <span class="string">"thread-pool-executor"</span></div><div class="line">  # Configuration <span class="keyword">for</span> the thread pool</div><div class="line">  thread-pool-executor {</div><div class="line">    # minimum <span class="built_in">number</span> <span class="keyword">of</span> threads <span class="keyword">to</span> cap factor-based core <span class="built_in">number</span> <span class="keyword">to</span></div><div class="line">    core-pool-<span class="keyword">size</span>-<span class="keyword">min</span> = <span class="number">2</span></div><div class="line">    # <span class="keyword">No</span> <span class="keyword">of</span> core threads ... <span class="keyword">ceil</span>(available processors * factor)</div><div class="line">    core-pool-<span class="keyword">size</span>-factor = <span class="number">2.0</span></div><div class="line">    # maximum <span class="built_in">number</span> <span class="keyword">of</span> threads <span class="keyword">to</span> cap factor-based <span class="built_in">number</span> <span class="keyword">to</span></div><div class="line">    core-pool-<span class="keyword">size</span>-<span class="keyword">max</span> = <span class="number">10</span></div><div class="line">  }</div><div class="line">  # Throughput defines the maximum <span class="built_in">number</span> <span class="keyword">of</span> messages <span class="keyword">to</span> be</div><div class="line">  # processed per actor <span class="keyword">before</span> the thread jumps <span class="keyword">to</span> the <span class="keyword">next</span> actor.</div><div class="line">  # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">as</span> fair <span class="keyword">as</span> possible.</div><div class="line">  throughput = <span class="number">100</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>这样，你就可以配置Actor使用图个特定的disptacher:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> akka.actor.Props</div><div class="line">val <span class="variable">myActor =</span> context.actorOf(Props[MyActor], <span class="string">"myactor"</span>)</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">akka.actor.deployment {</span></div><div class="line">  /myactor {</div><div class="line">    dispatcher =<span class="string"> my-dispatcher</span></div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>或者用另外一种方式,可以在代码中指定dispatcher：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> akka.actor.Props</div><div class="line">val <span class="variable">myActor =</span></div><div class="line">  context.actorOf(Props[MyActor].withDispatcher(<span class="string">"my-dispatcher"</span>), <span class="string">"myactor1"</span>)</div></pre></td></tr></table></figure>

<h4 id="dispatcher的类型">dispatcher的类型</h4>
<ul>
<li><p>Dispatcher</p>
<ul>
<li>可共享性: 无限制</li>
<li>邮箱: 任何一种类型，为每一个Actor创建一个</li>
<li>使用场景: 缺省派发器，Bulkheading</li>
<li>底层使用: <code>java.util.concurrent.ExecutorService</code><br>   可以指定“executor”使用“fork-join-executor”, “thread-pool-executor” 或者 the FQCN(类名的全称) of an akka.dispatcher.ExecutorServiceConfigurator</li>
</ul>
</li>
<li><p>PinnedDispatcher</p>
<ul>
<li>可共享性: 无</li>
<li>邮箱: 任何一种类型，为每个Actor创建一个</li>
<li>使用场景: Bulkheading</li>
<li>底层使用: 任何 akka.dispatch.ThreadPoolExecutorConfigurator<br>   缺省为一个 “thread-pool-executor”</li>
</ul>
</li>
<li><p>BalancingDispatcher</p>
<ul>
<li>可共享性: 仅对同一类型的Actor共享</li>
<li>邮箱: 任何，为所有的Actor创建一个</li>
<li>使用场景: Work-sharing</li>
<li>底层使用: java.util.concurrent.ExecutorService<br>   指定使用 “executor” 使用 “fork-join-executor”, “thread-pool-executor” 或 the FQCN(类名的全称) of an akka.dispatcher.ExecutorServiceConfigurator</li>
</ul>
</li>
<li><p>CallingThreadDispatcher</p>
<ul>
<li>可共享性: 无限制</li>
<li>邮箱: 任何，每Actor每线程创建一个（需要时）</li>
<li>使用场景: 仅为测试使用</li>
<li>底层使用: 调用的线程 (duh)</li>
</ul>
</li>
</ul>
<h4 id="邮箱">邮箱</h4>
<p>kka Mailbox 保存发往某 Actor的消息. 通常每个 Actor 拥有自己的邮箱, 但是如果是使用 BalancingDispatcher 使用同一个 BalancingDispatcher 的所有Actor共享同一个邮箱实例.<br>内置的邮箱的类型：</p>
<ul>
<li>UnboundedMailbox - 缺省邮箱</li>
<li>SingleConsumerOnlyUnboundedMailbox</li>
<li>BoundedMailbox</li>
<li>NonBlockingBoundedMailbox</li>
<li>UnboundedPriorityMailbox</li>
<li>BoundedPriorityMailbox</li>
<li>UnboundedStablePriorityMailbox</li>
<li>BoundedStablePriorityMailbox</li>
<li>UnboundedControlAwareMailbox</li>
<li>BoundedControlAwareMailbox</li>
</ul>
<h3 id="工作原理">工作原理</h3>
<p>我们只看本地(同一个JVM进程)的ActRef: <code>LocalActorRef</code>,它定义了send (<code>!</code>)方法：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="keyword">def</span> !(message: Any)(implicit sender: ActorRef = Actor.noSender): Unit = actorCell.sendMessage(message, sender)</div></pre></td></tr></table></figure>

<p><code>actorCell</code>实现了<code>akka.actor.dungeon.Dispatch</code> trait。它实现了具体的message的发送：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> sendMessage(msg: Envelope): Unit =</div><div class="line">  <span class="keyword">try</span> {</div><div class="line">    <span class="keyword">if</span> (system.settings.SerializeAllMessages) {</div><div class="line">      <span class="keyword">val</span> unwrapped = (msg.message <span class="keyword">match</span> {</div><div class="line">        <span class="keyword">case</span> DeadLetter(wrapped, _, _) ⇒ wrapped</div><div class="line">        <span class="keyword">case</span> other                     ⇒ other</div><div class="line">      }).asInstanceOf[AnyRef]</div><div class="line">      <span class="keyword">if</span> (!unwrapped.isInstanceOf[NoSerializationVerificationNeeded]) {</div><div class="line">        <span class="keyword">val</span> s = SerializationExtension(system)</div><div class="line">        s.deserialize(s.serialize(unwrapped).get, unwrapped.getClass).get</div><div class="line">      }</div><div class="line">    }</div><div class="line">    dispatcher.dispatch(<span class="keyword">this</span>, msg)</div><div class="line">  } <span class="keyword">catch</span> handleException</div></pre></td></tr></table></figure>

<p>可以看到，还是交给dispatcher.dispatch进行消息的分发。<br>看具体的实现类<code>Dispatcher.dispatch</code>:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span>[akka] <span class="keyword">def</span> dispatch(receiver: ActorCell, invocation: Envelope): Unit = {</div><div class="line">  <span class="keyword">val</span> mbox = receiver.mailbox</div><div class="line">  mbox.enqueue(receiver.self, invocation)</div><div class="line">  registerForExecution(mbox, <span class="keyword">true</span>, <span class="keyword">false</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>将消息放在对应的actor的邮箱中后，就会调用<code>registerForExecution</code>方法。<br>这个方法最重要的一行就是执行mbox,因为mbox实现了<code>ForkJoinTask</code>和<code>Runnable</code>接口。 (如果执行失败，还可能执行一次)</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">executorService execute mbox</div></pre></td></tr></table></figure>

<p>其实是将mbox放到线程池中执行。<br>mbox并不是一次全部执行完的，而是有<code>throughput</code>参数确定。每次只执行<code>throughput</code>个消息，执行完会加入到线程池等待队列中，除非全部执行完毕。<br>因此当<code>throughput=1</code>的时候对actor来说比较“公平”，这样actor能平均的执行。</p>
<p>由此得出几个结论：</p>
<ul>
<li>可以调解线程池的大小进行调优</li>
<li>具体的dispatcher实现该如何执行actor。 比如我们可以实现一个优先级队列来执行优先级比较高的Actor。</li>
<li>如果一个Actor执行比较耗时的操作，比如IO操作，就会影响线程池的执行，造成整体吞吐率下降。所以为这些耗时的Actor配置专门的线程池</li>
<li>Akka会中断一个Actor而去执行别的actor吗，然后回来继续执行先前的Actor? 答案是不会。 因为一旦Actor交给线程池，线程就会去执行它。 如果你在Actor中sleep线程，会导致线程池中的此线程sleep。 所以你必须想一些办法，比如一个长的业务逻辑分成几个业务逻辑，每次只执行一个业务逻辑，通过状态变换分成多次执行。</li>
<li>如果没有其它情况，线程会执行完actor 邮箱中的一部分消息，如果还有消息，会将此邮箱再放入线程池等待执行，直到没有待处理的消息为止。</li>
</ul>
<h3 id="参考资料">参考资料</h3>
<ol>
<li><a href="http://doc.akka.io/docs/akka/snapshot/scala/dispatchers.html" target="_blank" rel="external">Dispatchers</a></li>
<li><a href="http://letitcrash.com/post/40755146949/tuning-dispatchers-in-akka-applications" target="_blank" rel="external">tuning dispatchers in akka applications</a></li>
<li><a href="https://www.zybuluo.com/MiloXia/note/80283" target="_blank" rel="external">https://www.zybuluo.com/MiloXia/note/80283</a></li>
<li><a href="https://github.com/akka/akka/tree/master/akka-actor/src/main/scala/akka/dispatch" target="_blank" rel="external">https://github.com/akka/akka/tree/master/akka-actor/src/main/scala/akka/dispatch</a></li>
<li><a href="http://www.gtan.com/akka_doc/scala/dispatchers.html" target="_blank" rel="external">http://www.gtan.com/akka_doc/scala/dispatchers.html</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在调研Scala web框架的性能时遇到一些问题， 比如生成巨多的Actor，GC时间过长，CPU使用率太高， 执行Actor的Receive是遇到耗时操作的问题等。怀疑Akka的调度器有些问题，特意整理了一些Akka调度器的背景知识，以及从源代码分析一下Actor是怎么执行地。<br>]]>
    
    </summary>
    
      <category term="akka" scheme="http://colobu.com/tags/akka/"/>
    
      <category term="Scala" scheme="http://colobu.com/categories/Scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Apache Bench 和 Gnuplot产生性能测试图]]></title>
    <link href="http://colobu.com/2014/08/04/Apache-Bench-and-Gnuplot/"/>
    <id>http://colobu.com/2014/08/04/Apache-Bench-and-Gnuplot/</id>
    <published>2014-08-04T05:16:20.000Z</published>
    <updated>2015-07-31T13:28:02.167Z</updated>
    <content type="html"><![CDATA[<p><a href="http://httpd.apache.org/docs/2.2/programs/ab.html" target="_blank" rel="external">Apache Beach</a> (ab)是Apache自带的一个性能测试工具，专门用来测试网站的性能， 不仅限于Apache web服务器。</p>
<p>它可以同时模拟多个并发请求，测试Web服务器的最大承载压力，同时也可以根据Apache Bench提供的测试结果对服务器性能参数进行调整。它可以记录测试数据，其它工具比如Gnuplot可以利用测试数据进行分析。它也可以提供一个summary，可以直观显示当前测试的web服务器的性能。</p>
<a id="more"></a>
<ul>
<li>安装ab<br>ab是Apache httpd的一部分。不同的发行版提供了不同的安装方法。<br>比如在笔者使用的redhat 6.4上可以查看此工具在哪个包里：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#yum provides /usr/bin/ab</span></div><div class="line">......</div><div class="line">httpd-tools-<span class="number">2.2</span>.<span class="number">15</span>-<span class="number">30</span>.el6.centos.x86_64 : Tools <span class="keyword">for</span> use with the Apache HTTP</div><div class="line">                                        : Server</div><div class="line">Repo        : updates</div><div class="line">Matched from:</div><div class="line">Filename    : /usr/bin/ab</div><div class="line">......</div></pre></td></tr></table></figure>

<p>它被打包在httpd-tools包里，安装httpd-tools:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install httpd-tools</div></pre></td></tr></table></figure>

<p>安装成功后查看帮助：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ab -h</div></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">man ab</div></pre></td></tr></table></figure>

<ul>
<li>运行ab<br>一个最简单的ab例子就是：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ab -n 100 -c 10 http://www.google.com/</span></div></pre></td></tr></table></figure>

<p>注意网址后面要加&quot;/&quot;或者明确的path如&quot;<a href="https://www.google.com/?gfe_rd=cr&amp;ei=_BvfU77ZGMeL8QfugIHAAw" target="_blank" rel="external">https://www.google.com/?gfe_rd=cr&amp;ei=_BvfU77ZGMeL8QfugIHAAw</a>&quot;.<br>&quot;-c&quot;是并发数，可以模拟同时有多少个clients并发访问。<br>&quot;-n&quot;表示总的请求数。每个client发送的请求数为此数字除以client数（上面的数字）。<br>&quot;-t&quot;可以指定测试的最大时间，如果还不到此数请求已经发完，那么测试也会结束。当使用-t参数时，ab内部默认最大的请求数为50000，为了同时使用&quot;-n&quot;指定的参数，可以将&quot;-t&quot;参数放在&quot;-n&quot;参数之前， 如果想了解更多的信息， 可以查看这篇<a href="http://100continue.iteye.com/blog/1325398" target="_blank" rel="external">文章</a>.</p>
<ul>
<li>实际运行ab<br>我使用apache ab要测试的是一个tomcat搭建的集群，上面跑着CPU密集型的一个应用程序，前面使用nginx作为load balancer。<br>此应用的一个主要的服务通过RESTful service提供， 并且是POST类型的。 Request body是一个XML。<br>我想随机的替换body中的一个属性，以便测试动态请求对服务器的影响。 但是Apache ab只能提供静态的数据，所以我下载了它的代码并改造了一下。<br><strong> 首先创建了一个request.xml， 并将其中的那个属性改为占位符
</strong> 修改ab.c文件，将发送请求中的占位符用随机数代替<br>修改的代码可重用性不高，在这里就不贴了。</li>
</ul>
<p>写了一个脚本，可以测试不同的并发数：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> var <span class="keyword">in</span> {<span class="number">4</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">150</span>,<span class="number">200</span>,<span class="number">300</span>}</div><div class="line"><span class="keyword">do</span></div><div class="line">        ab -g plot/biz<span class="variable">$var</span>.dat -r -c <span class="variable">${var}</span> -n <span class="variable">${total}</span> -H <span class="string">'Accept:application/xml'</span>  -p request.xml -T <span class="string">'application/xml'</span> http://localhost:<span class="number">8080</span>/app/biz</div><div class="line"></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>

<ul>
<li>使用Gnuplot生成图表<br>在上一步中生成了测试数据，我们可以通过Gnuplot这一强大的工具生成漂亮的图表了。<br>在生成图表之前，我们还需要处理一下获得的数据，<br>如果直接使用测试生成报表，我们可能得到这样一个图表：<br><img src="/images/2014-08-04/biz.png" alt="相应时间">.</li>
</ul>
<p>相应的Gnuplot文件为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#output as png image</div><div class="line"><span class="operator"><span class="keyword">set</span> terminal png <span class="keyword">size</span> <span class="number">1000</span>,<span class="number">560</span></span></div><div class="line"></div><div class="line">#save file <span class="keyword">to</span> <span class="string">"domain.png"</span></div><div class="line"><span class="keyword">set</span> <span class="keyword">output</span> <span class="string">"biz.png"</span></div><div class="line"></div><div class="line">#graph title</div><div class="line"><span class="keyword">set</span> title <span class="string">"Biz Performance"</span></div><div class="line"><span class="keyword">set</span> <span class="keyword">key</span> invert <span class="keyword">reverse</span> <span class="keyword">Left</span> outside</div><div class="line"></div><div class="line">#nicer aspect ratio <span class="keyword">for</span> image <span class="keyword">size</span></div><div class="line">#<span class="keyword">set</span> <span class="keyword">size</span> <span class="number">1</span>,<span class="number">0.7</span></div><div class="line"></div><div class="line"># y-axis grid</div><div class="line"><span class="keyword">set</span> grid y</div><div class="line"></div><div class="line">#x-axis label</div><div class="line"><span class="keyword">set</span> xlabel <span class="string">"requests"</span></div><div class="line"></div><div class="line">#y-axis label</div><div class="line"><span class="keyword">set</span> ylabel <span class="string">"response time (ms)"</span></div><div class="line">#plot <span class="keyword">data</span> <span class="keyword">from</span> <span class="string">"biz.dat"</span> <span class="keyword">using</span> <span class="keyword">column</span> <span class="number">9</span> <span class="keyword">with</span> smooth sbezier <span class="keyword">lines</span></div><div class="line">#<span class="keyword">and</span> title <span class="keyword">of</span> <span class="string">"Biz Performance"</span> <span class="keyword">for</span> the given <span class="keyword">data</span></div><div class="line">plot <span class="string">"biz4.dat"</span> <span class="keyword">using</span> <span class="number">9</span> smooth sbezier <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 4"</span>, \</div><div class="line"><span class="string">"biz20.dat"</span> <span class="keyword">using</span> <span class="number">9</span> smooth sbezier <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 20"</span>, \</div><div class="line"><span class="string">"biz50.dat"</span> <span class="keyword">using</span> <span class="number">9</span> smooth sbezier <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 50"</span>, \</div><div class="line"><span class="string">"biz100.dat"</span> <span class="keyword">using</span> <span class="number">9</span> smooth sbezier <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 100"</span>, \</div><div class="line"><span class="string">"biz150.dat"</span> <span class="keyword">using</span> <span class="number">9</span> smooth sbezier <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 150"</span>, \</div><div class="line"><span class="string">"biz200.dat"</span> <span class="keyword">using</span> <span class="number">9</span> smooth sbezier <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 200"</span>, \</div><div class="line"><span class="string">"biz300.dat"</span> <span class="keyword">using</span> <span class="number">9</span> smooth sbezier <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 300"</span></div></pre></td></tr></table></figure>

<p>这张图有参考价值，我们可以看到大部分的请求的相应时间落在那个数值段中，但是不能以时间序列显示服务器的性能。 它是以&quot;总用时“ (ttime) 进行排序，所以一般它会一条上升的曲线来显示。<br>这篇<a href="http://www.bradlanders.com/2013/04/15/apache-bench-and-gnuplot-youre-probably-doing-it-wrong/" target="_blank" rel="external">文章</a>中指出了一种按照时间序列显示数据的方法。 Apapche ab生成的测试数据中已经包含了时间戳，可以修改Gnuplot生成按时间序列显示的响应时间图：<br><img src="/images/2014-08-04/timeseries.jpg" alt="时间序列">.</p>
<p>Gnuplot文件为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Let's output to a jpeg file</span></div><div class="line"><span class="built_in">set</span> terminal jpeg size <span class="number">500</span>,<span class="number">500</span></div><div class="line"><span class="comment"># This sets the aspect ratio of the graph</span></div><div class="line"><span class="built_in">set</span> size <span class="number">1</span>, <span class="number">1</span></div><div class="line"><span class="comment"># The file we'll write to</span></div><div class="line"><span class="built_in">set</span> output <span class="string">"graphs/timeseries.jpg"</span></div><div class="line"><span class="comment"># The graph title</span></div><div class="line"><span class="built_in">set</span> title <span class="string">"Benchmark testing"</span></div><div class="line"><span class="comment"># Where to place the legend/key</span></div><div class="line"><span class="built_in">set</span> key left top</div><div class="line"><span class="comment"># Draw gridlines oriented on the y axis</span></div><div class="line"><span class="built_in">set</span> grid y</div><div class="line"><span class="comment"># Specify that the x-series data is time data</span></div><div class="line"><span class="built_in">set</span> xdata <span class="built_in">time</span></div><div class="line"><span class="comment"># Specify the *input* format of the time data</span></div><div class="line"><span class="built_in">set</span> timefmt <span class="string">"%s"</span></div><div class="line"><span class="comment"># Specify the *output* format for the x-axis tick labels</span></div><div class="line"><span class="built_in">set</span> <span class="built_in">format</span> x <span class="string">"%S"</span></div><div class="line"><span class="comment"># Label the x-axis</span></div><div class="line"><span class="built_in">set</span> xlabel <span class="string">'seconds'</span></div><div class="line"><span class="comment"># Label the y-axis</span></div><div class="line"><span class="built_in">set</span> ylabel <span class="string">"response time (ms)"</span></div><div class="line"><span class="comment"># Tell gnuplot to use tabs as the delimiter instead of spaces (default)</span></div><div class="line"><span class="built_in">set</span> datafile separator <span class="string">'\t'</span></div><div class="line"><span class="comment"># Plot the data</span></div><div class="line">plot <span class="string">"data/testing.tsv"</span> every ::<span class="number">2</span> <span class="keyword">using</span> <span class="number">2</span>:<span class="number">5</span> title <span class="string">'response time'</span> <span class="operator">with</span> points</div><div class="line">exit</div></pre></td></tr></table></figure>

<p>为了得到按时间序列显示的吞吐率图表，我们可以处理一下得到的测试数据：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> var <span class="keyword">in</span> {<span class="number">4</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">150</span>,<span class="number">200</span>,<span class="number">300</span>}</div><div class="line"><span class="keyword">do</span></div><div class="line">   start_time=`awk <span class="string">'{print $6}'</span> plot/biz<span class="variable">$var</span>.dat | grep -v <span class="string">'wait'</span> | sort | uniq -c|head -<span class="number">1</span>|awk <span class="string">'{print $2}'</span>`</div><div class="line">  awk <span class="string">'{print $6}'</span> plot/biz<span class="variable">$var</span>.dat | grep -v <span class="string">'wait'</span> | sort | uniq -c|awk -v t=<span class="variable">$start_time</span> <span class="string">'{print $2-t,$1}'</span> &gt; plot/epochtime<span class="variable">$var</span>.dat</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>

<p>然后根据一下的Gnuplot配置生成图表。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#output as png image</div><div class="line"><span class="operator"><span class="keyword">set</span> terminal png  <span class="keyword">size</span> <span class="number">1000</span>,<span class="number">560</span></span></div><div class="line"></div><div class="line"><span class="keyword">set</span> <span class="keyword">output</span> <span class="string">"throughput.png"</span></div><div class="line"></div><div class="line">#graph title</div><div class="line"><span class="keyword">set</span> title <span class="string">"Throughput"</span></div><div class="line"></div><div class="line"><span class="keyword">set</span> <span class="keyword">key</span> invert <span class="keyword">reverse</span> <span class="keyword">Left</span> outside</div><div class="line"></div><div class="line">#nicer aspect ratio <span class="keyword">for</span> image <span class="keyword">size</span></div><div class="line">#<span class="keyword">set</span> <span class="keyword">size</span> <span class="number">1</span>,<span class="number">0.6</span></div><div class="line"></div><div class="line"># y-axis grid</div><div class="line"><span class="keyword">set</span> grid y</div><div class="line"></div><div class="line"></div><div class="line">#x-axis label</div><div class="line"><span class="keyword">set</span> xlabel <span class="string">"time"</span></div><div class="line"></div><div class="line">#y-axis label</div><div class="line"><span class="keyword">set</span> ylabel <span class="string">"responses per second"</span></div><div class="line">plot <span class="string">"epochtime4.dat"</span> <span class="keyword">using</span> <span class="number">1</span>:<span class="number">2</span> <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 4"</span>, \</div><div class="line"><span class="string">"epochtime20.dat"</span> <span class="keyword">using</span> <span class="number">1</span>:<span class="number">2</span> <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 20"</span>, \</div><div class="line"><span class="string">"epochtime50.dat"</span> <span class="keyword">using</span> <span class="number">1</span>:<span class="number">2</span> <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 50"</span>, \</div><div class="line"><span class="string">"epochtime100.dat"</span> <span class="keyword">using</span> <span class="number">1</span>:<span class="number">2</span> <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 100"</span>, \</div><div class="line"><span class="string">"epochtime150.dat"</span> <span class="keyword">using</span> <span class="number">1</span>:<span class="number">2</span> <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 150"</span>, \</div><div class="line"><span class="string">"epochtime200.dat"</span> <span class="keyword">using</span> <span class="number">1</span>:<span class="number">2</span> <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 200"</span>, \</div><div class="line"><span class="string">"epochtime300.dat"</span> <span class="keyword">using</span> <span class="number">1</span>:<span class="number">2</span> <span class="keyword">with</span> <span class="keyword">lines</span> title <span class="string">"concurrency 300"</span></div></pre></td></tr></table></figure>

<p><img src="/images/2014-08-04/throughput.png" alt="吞吐率"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://httpd.apache.org/docs/2.2/programs/ab.html" target="_blank" rel="external">Apache Beach</a> (ab)是Apache自带的一个性能测试工具，专门用来测试网站的性能， 不仅限于Apache web服务器。</p>
<p>它可以同时模拟多个并发请求，测试Web服务器的最大承载压力，同时也可以根据Apache Bench提供的测试结果对服务器性能参数进行调整。它可以记录测试数据，其它工具比如Gnuplot可以利用测试数据进行分析。它也可以提供一个summary，可以直观显示当前测试的web服务器的性能。</p>
]]>
    
    </summary>
    
      <category term="ApacheBench" scheme="http://colobu.com/tags/ApacheBench/"/>
    
      <category term="Gnuplot" scheme="http://colobu.com/tags/Gnuplot/"/>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[架构学习资料整理（2013）]]></title>
    <link href="http://colobu.com/2015/07/21/Architecture-2013/"/>
    <id>http://colobu.com/2015/07/21/Architecture-2013/</id>
    <published>2015-07-21T00:48:22.000Z</published>
    <updated>2015-07-31T13:28:02.182Z</updated>
    <content type="html"><![CDATA[<p>地瓜哥2013攒的架构资料：<a href="http://www.diguage.com/archives/41.html" target="_blank" rel="external">分享D瓜哥最近攒的资料（架构方面）</a></p>
<p>以前见过零零散散地介绍一些知名网站架构的分析文章。最近D瓜哥也想研究一下各大知名网站的架构。所以，就搜集了一下这方面资料。限于时间问题，这篇文章分享的文章并没有都看完，所以不保证所有文章的质量。另外，如果有朋友发现更好的文章，欢迎留言告知。再补充进来。</p>
<a id="more"></a>
<h2 id="知名网站架构分析">知名网站架构分析</h2>
<ol><br><li><a target="_blank" href="http://dbanotes.net/arch/google_app_engine_arch.html">探索Google App Engine背后的奥秘(1)–Google的核心技术</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/google_app_engine_arch_guess.html">探索Google App Engine背后的奥秘(2)–Google的整体架构猜想</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/google_app_engine-intro.html">探索Google App Engine背后的奥秘(3)- Google App Engine的简介</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/google_app_engine-arch_intro.html">探索Google App Engine背后的奥秘(4)- Google App Engine的架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/google_app_engine-datastore.html">探索Google App Engine背后的奥秘(5)- Datastore的设计</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/google_app_engine-summary.html">探索Google App Engine背后的奥秘(6)-<span id="more-41"></span> 总结</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/8/16/the-architecture-of-amazon.html">Amazon网站架构学习总结</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/8/16/the-architecture-of-amazon.html">Amazon网站架构学习总结</a></li><br><li><a target="_blank" href="http://dbanotes.net/tech-memo/amazon_dynamo.html">Amazon 的 Dynamo 架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/web/ebay_application_server.html">eBay 的应用服务器规模</a></li><br><li><a target="_blank" href="http://dbanotes.net/database/ebay_storage.html">eBay 的数据量</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/taobao_arch.html">来自淘宝的架构经验</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/yahoo_arch.html">Yahoo！社区架构</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/facebook-arch-overview-part1">基于Facebook和Flash平台的应用架构解析（一）</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/facebook-arch-overview-part2">基于Facebook和Flash平台的应用架构解析（二）</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/facebook-arch-overview-final">基于Facebook和Flash平台的应用架构解析（三）</a></li><br><li><a target="_blank" href="http://www.biaodianfu.com/facebook-efficient-storage-of-billions-of-photos.html">Facebook图片存储架构的学习</a></li><br><li><a target="_blank" href="http://developer.51cto.com/art/200905/123565.htm">facebook图片存储架构技术全解析</a></li><br><li><a target="_blank" href="http://www.csdn.net/article/2011-04-29/296900">Facebook数据仓库揭秘：RCFile高效存储结构</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/facebook_arch_note.html">Facebook 架构学习</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/facebook_arch_note.html">Facebook 架构学习</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/renren-mobile-arch">人人网移动开发架构</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/qzone-architecture">QQ空间技术架构之深刻揭密</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/twitter_arch.html">Twitter 的架构扩展: 100 倍性能提升</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/8/14/the-architecture-of-twitter.html">Twitter网站架构学习笔记</a></li><br><li><a target="_blank" href="http://developer.51cto.com/art/201009/226825.htm">国内外大型SNS网站后台架构对比</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/8/13/the-architecture-of-youku.html">优酷网架构学习笔记</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/youku_arch.html">优酷网(Youku.com)架构经验</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/3/6/634350416046298451.html">YouTube架构学习体会</a></li><br><li><a target="_blank" href="http://dbanotes.net/opensource/youtube_web_arch.html">YouTube 的架构扩展</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/8/27/the-architecture-of-digg.html">Digg网站架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/digg_arch_cache_and_shard.html">Digg 网站架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/opensource/wikipedia_arch.html">WikiPedia技术架构学习笔记</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/8/16/the-architecture-of-yupoo.html">Yupoo网站架构学习总结</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/3/7/634351294385186067.html">Flickr 网站架构分析</a></li><br><li><a target="_blank" href="http://dbanotes.net/web/flickr_lamp_capacity_planning.html">学习 Flickr 的 基于 LAMP 的容量规划经验</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/myspace_arch_2008.html">MySpace 系统架构</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/3/7/634351257301504864.html">回顾MySpace架构的坎坷之路</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/hj-yihaodian-b2c-evolution-road">挑战空中加油——1号店B2C电商系统演进之路</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/3/5/634349627089221280.html">PlentyOfFish.com .NET网站的又一传奇</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/douban_arch.html">学习豆瓣好榜样–网站架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/37signals_arch.html">37Signals 架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/review/tailrank_arch.html">Tailrank 网站架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/smugmug_arch.html">SmugMug 的架构介绍</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/5/26/poppende-architecture.html">高并发PHP网站Poppen.de架构学习</a></li><br><li><a target="_blank" href="https://groups.drupal.org/node/194308">Drupal与大型网站架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/imobile_web_arch_gaochunhui.html">手机之家网站架构–对话高春辉</a></li><br><li><a target="_blank" href="http://www.cnblogs.com/realviv/articles/1883563.html">手机之家的网站架构设计和演化</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/heroku_architecture.html">学习 HeroKu 的架构设计</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/3/17/634359701352994625.html">各大网站架构总结笔记</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/presentations/petals-network-architecture-introduced">花瓣网的架构介绍</a></li><br><li><a target="_blank" href="http://developer.51cto.com/developer/webarc/">大型网站架构技术专家谈</a></li><br></ol>

<h2 id="架构分析与设计">架构分析与设计</h2>
<ol><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/the-network-infrastructure-in-an-open-environment">架构之美–开放环境下的网络架构</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/message-based-distributed-architecture">案例分析：基于消息的分布式架构</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/ieee-pattern-based-architecture-reviews">基于模式的架构评审</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/next-generation-massively-multithreaded-architectures">为不规则应用设计新一代超大型多线程架构</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/rails-voip-system-architecture-and-development">从简单到复杂：大型Rails与VoIP系统架构与部署实践</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/it-architecture-inside-out-perspectives">专家视角看IT与架构</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/cjz-architecture-corruption">架构腐化之谜</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/xw-cloud-in-my-view">我眼中的云端架构</a></li><br><li><a target="_blank" href="http://www.yejun.cn/?p=1154">从100PV到1亿级PV网站架构演变</a></li><br><li><a target="_blank" href="http://open.taobao.com/doc/detail.htm?id=1011">网站架构设计方案</a></li><br><li><a target="_blank" href="http://hi.baidu.com/injava/item/e62923e88a713ff7e1a5d44b">浅谈大型网站动态应用系统架构</a>——鉴于某度有胡乱改系统，而且不自动保留原来数据的恶习，建议大家手动备份下来。</li><br><li><a target="_blank" href="http://blog.sina.com.cn/s/blog_46d0a3930100euxb.html">做大的艺术 – 大型网站的架构设计</a></li><br><li><a target="_blank" href="http://www.williamlong.info/archives/1960.html">平台网站架构设计之我所见</a></li><br><li><a target="_blank" href="https://speakerdeck.com/shiningray/diao-si-cheng-xu-yuan-ru-he-da-zao-ri-pvbai-mo-de-wang-zhan-jia-gou">屌丝程序员如何打造日PV百万的网站架构</a></li><br><li><a target="_blank" href="http://www.ibm.com/developerworks/cn/java/j-lo-restmvc/">设计 REST 风格的 MVC 框架</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/5/24/memcached-in-cluster-structure.html">集群架构实践 – 初试Memcached</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/5/7/634404076902160236.html">BigPipe，加速你的页面加载</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/4/28/634395931511515337.html">一步步构建大型网站架构</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2012/2/18/image-storage-cache-1.html">图片存储架构学习：缓存，架构师的美丽小三</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/news/2008/06/extremescaling">要快速伸缩？重新架构吧！</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/12/2/big-cluster-rails-voip-experience.html">大型Rails与VoIP系统架构与部署实践</a></li><br><li><a target="_blank" href="http://www.williamlong.info/archives/1908.html">LAMP网站架构方案分析</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2008/09/03/226749.html">大型网站架构演变和知识体系</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2009/04/28/267970.html">网站架构相关PPT、文章整理</a></li><br><li><a target="_blank" href="http://www.toplee.com/blog/71.html">说说大型高并发高负载网站的系统架构</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/09/25/14035.html">软件架构设计思考之一</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/video-service-arch">视频流服务架构解析</a></li><br><li><a target="_blank" href="http://www.diguage.com/archives/7.html">Rails架构简介</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/anti-ddos-cdn-1">自建CDN防御DDoS（1）：知己知彼，建设持久防线</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/anti-ddos-cdn-2">自建CDN防御DDoS（2）：架构设计、成本与部署细节</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/anti-ddos-cdn-3">自建CDN防御DDoS（3）：架构的后续改进</a></li><br><li><a target="_blank" href="http://blog.yufeng.info/ppt">系统技术非业余研究-资料下载</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/08/29/11503.html">中小型应用系统知识体系</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/08/23/10824.html">中小型应用系统架构体系</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/architect/">《架构师》月刊</a>——InfoQ推出来的电子杂志。貌似还不错。</li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/06/13/6037.html">系统设计说明书(架构、概要、详细)目录结构</a>——D瓜哥不太擅长写文档，所以插播个文档模板。</li><br></ol>

<h2 id="架构背后的技术">架构背后的技术</h2>
<ol><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/11/15/cdn-introduction.html">CDN（内容分发网络）技术原理</a></li><br><li><a target="_blank" href="http://www.diguage.com/archives/34.html">高性能网站的十四条黄金法则</a></li><br><li><a target="_blank" href="http://blog.csdn.net/longxibendi/article/details/6647024">大型网站后台架构的web server与缓存</a></li><br><li><a target="_blank" href="http://blog.csdn.net/21aspnet/article/details/5295572">Facebook性能大提升的秘密：HipHop</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2012/3/10/squid-usage.html">浅谈Squid在图片存储架构中的应用</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/tao-tfs">揭秘淘宝自主研发的文件系统——TFS</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/lzy-million-visits-site-technical-preparations">百万级访问量网站的技术准备工作</a></li><br><li><a target="_blank" href="http://blog.csdn.net/longxibendi/article/details/6665670">谈谈大型网站的负载均衡器、db proxy和db</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/design-motivation-and-introduction-of-Pomelo-framework">深入浅出node.js游戏服务器开发——Pomelo框架的设计动机与架构介绍</a></li><br><li><a target="_blank" href="http://os.51cto.com/art/201111/301143.htm">架构师不可不知的十大可扩展架构</a></li><br><li><a target="_blank" href="http://blog.csdn.net/jarfield/article/details/4322953">Memcached FAQ(1) 一般性的问题</a></li><br><li><a target="_blank" href="http://blog.csdn.net/jarfield/article/details/4336035">Memcached FAQ(2) 集群架构方面的问题</a></li><br><li><a target="_blank" href="http://blog.csdn.net/jarfield/article/details/4341819">Memcached FAQ(3) 性能和客户端库方面的问题</a></li><br><li><a target="_blank" href="http://blog.csdn.net/jarfield/article/details/4345501">Memcached FAQ(4) 选项、Item过期和命名空间方面的问题</a></li><br><li><a target="_blank" href="http://www.diguage.com/archives/6.html">分享一些资料（侧重Linux）</a></li><br><li><a target="_blank" href="http://www.diguage.com/archives/75.html">用JavaScript阐述MapReduce原理</a></li><br><li><a target="_blank" href="http://www.diguage.com/archives/67.html">分享一些D瓜哥攒的比较好的Web开发资料</a></li><br></ol>

<h2 id="数据库架构">数据库架构</h2>
<ol><br><li><a target="_blank" href="http://blog.csdn.net/zhangzhaokun/article/details/4711693">大型高并发高负载web应用系统架构-数据库架构策略</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/yupoo-partition-database">又拍网架构中的分库设计</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/Architecture-Datomic">Datomic的架构</a></li><br><li><a target="_blank" href="http://blog.yufeng.info/archives/2349">低成本和高性能MySQL云数据的架构探索</a></li><br></ol>

<h2 id="插件架构">插件架构</h2>
<ol><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/05/25/5187.html">关于Plugin Framework的关键因素</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/06/30/6925.html">Plugin Architecture简述</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/07/03/7069.html">Eclipse(3.1) Plugin Framework(基于OSGI的Plugin Architecture)</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/11/06/18491.html">OSGI与Plugin Architecture</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/11/15/19820.html">思考插件架构体系</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2006/03/12/34930.html">基于Equinox开发系统的总结</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2006/04/07/39880.html">Declarative Services――Service-Oriented Component Model</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2006/04/15/41268.html">Service-Oriented Component Model(SOCM)</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2006/05/28/48593.html">插件开发框架的思考</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2006/08/18/64440.html">基于Eclipse Equinox的插件框架：TPF</a></li><br></ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>地瓜哥2013攒的架构资料：<a href="http://www.diguage.com/archives/41.html" target="_blank" rel="external">分享D瓜哥最近攒的资料（架构方面）</a></p>
<p>以前见过零零散散地介绍一些知名网站架构的分析文章。最近D瓜哥也想研究一下各大知名网站的架构。所以，就搜集了一下这方面资料。限于时间问题，这篇文章分享的文章并没有都看完，所以不保证所有文章的质量。另外，如果有朋友发现更好的文章，欢迎留言告知。再补充进来。</p>
]]>
    
    </summary>
    
      <category term="架构" scheme="http://colobu.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="架构" scheme="http://colobu.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一些开源项目的性能基准Benchmark]]></title>
    <link href="http://colobu.com/2014/08/22/Benchmark-of-some-popular-frameworks/"/>
    <id>http://colobu.com/2014/08/22/Benchmark-of-some-popular-frameworks/</id>
    <published>2014-08-22T08:31:35.000Z</published>
    <updated>2015-07-31T13:28:02.182Z</updated>
    <content type="html"><![CDATA[<p>项目中使用了好些的开源项目。对于它们的性能， 只有官方的一些性能报告和一些第三方的性能分析。 做性能估计的时候只是根据以往的经验做估算。 随着软件的不断升级，以及服务器硬件配置的升级， 这些开源项目的性能也有了变化。以前的性能数据可能不太准确了。<br>所以这篇文章记录了当前(2014年秋)我在AWS机器上做的一些性能数据，期望在做软件架构的时候有所帮助。<br>当前测试的软件包括：</p>
<ul>
<li>Tomcat</li>
<li>Jetty</li>
<li>Vert.x</li>
<li>Memcached</li>
<li>MongoDB</li>
<li>Java serializers</li>
<li>CXF</li>
<li>Spring MVC</li>
</ul>
<p>这篇文章会不断更新， 将我最新的测试列出来。</p>
<a id="more"></a>
<p>服务器采用的<a href="http://aws.amazon.com/cn/ec2/instance-types/" target="_blank" rel="external">AWS c3.xlarge</a>,</p>
<table>
<thead>
<tr>
<th>型号</th>
<th>vCPU</th>
<th>内存 (GiB)</th>
<th>存储 (GB)</th>
</tr>
</thead>
<tbody>
<tr>
<td>c3.xlarge</td>
<td>4</td>
<td>7.5</td>
<td>2 x 40</td>
</tr>
</tbody>
</table>
<h1 id="_Tomcat_7-0-37"><i class="fa fa-cube fa-2x"></i> <b style="text-shadow: 0px 1px 4px rgba(0, 0, 0, 0.3);">Tomcat 7.0.37</b></h1>
<hr>
<p>Test tool: Apache Bench (ab)<br>JDK： build 1.7.0_17-b02</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">                   Java Blocking Connector   Java Non Blocking Connector   APR/native Connector</div><div class="line">                             BIO                         NIO                       APR</div><div class="line">Classname              Http11Protocol             Http11NioProtocol         Http11AprProtocol</div><div class="line">Tomcat <span class="keyword">Version</span>           <span class="number">3.</span>x onwards                 <span class="number">6.</span>x onwards              <span class="number">5.5</span>.x onwards</div><div class="line">Support Polling              NO                          YES                       YES</div><div class="line">Polling Size                 <span class="keyword">N</span>/A                   maxConnections             maxConnections</div><div class="line"><span class="keyword">Read</span> HTTP Request         Blocking                  Non Blocking                 Blocking</div><div class="line"><span class="keyword">Read</span> HTTP Body            Blocking                  Sim Blocking                 Blocking</div><div class="line"><span class="keyword">Write</span> HTTP Response       Blocking                  Sim Blocking                 Blocking</div><div class="line">Wait for next Request     Blocking                  Non Blocking               Non Blocking</div><div class="line">SSL Support               Java SSL                    Java SSL                   OpenSSL</div><div class="line">SSL Handshake             Blocking                  Non blocking                 Blocking</div><div class="line"><span class="keyword">Max</span> Connections        maxConnections              maxConnections             maxConnections</div></pre></td></tr></table></figure>

<h2 id="BIO">BIO</h2>
<p>default server.xml.<br>采用默认的tomcat配置， TPS(throughput)可以达到3000/秒。<br><img src="/images/2014-08-22/tomcat_index_default.png" alt="throughput"></p>
<h2 id="NIO">NIO</h2>
<p>将BIO连接改成NIO连接。 可以看到性能有不少的提升，TPS(throughput)可以达到4500/秒。 </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">Connector</span> <span class="attribute">port</span>=<span class="value">"8080"</span> <span class="attribute">protocol</span>=<span class="value">"org.apache.coyote.http11.Http11NioProtocol"</span> </span></div><div class="line">           <span class="attribute">acceptCount</span>=<span class="value">"100"</span></div><div class="line">           <span class="attribute">enableLookups</span>=<span class="value">"false"</span></div><div class="line">           <span class="attribute">compression</span>=<span class="value">"off"</span> </div><div class="line">           <span class="attribute">maxConnections</span>=<span class="value">"65500"</span></div><div class="line">           <span class="attribute">maxKeepAliveRequests</span>=<span class="value">"1"</span></div><div class="line">           <span class="attribute">tcpNoDelay</span>=<span class="value">"true"</span></div><div class="line">           <span class="attribute">connectionTimeout</span>=<span class="value">"20000"</span></div><div class="line">           <span class="attribute">redirectPort</span>=<span class="value">"8443"</span> /&gt;</div></pre></td></tr></table></figure>

<p><img src="/images/2014-08-22/tomcat_index_nio.png" alt="throughput"></p>
<p>如果用一个Servlet代替index.jsp，性能差不多。 事实上也应该如此，index.jsp最终也会编译成一个servlet(查看tomcat的work目录)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@WebServlet</span>(name = <span class="string">"test"</span>, urlPatterns = { <span class="string">"/hello"</span> })</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4212401095124126998</span>L;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span>(HttpServletRequest request, HttpServletResponse response) <span class="keyword">throws</span> IOException {</div><div class="line">		PrintWriter writer = response.getWriter();</div><div class="line">		writer.println(<span class="string">"&lt;html&gt;Hello servlet&lt;/html&gt;"</span>);</div><div class="line">		writer.flush();</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p><img src="/images/2014-08-22/tomcat_servlet_nio.png" alt="throughput"></p>
<p>在吞吐率一定的情况下， 相应时间和并发数成反比：<br>$$<br> throughput =  \frac{concurrency}{response\ time}<br>$$</p>
<p>例如，throughput = 3000, 并发数为1000, 则每个response的平均相应时间为330毫秒。</p>
<h1 id="_Jetty"><i class="fa fa-cube fa-2x"></i> <b style="text-shadow: 0px 1px 4px rgba(0, 0, 0, 0.3);">Jetty</b></h1>
<hr>
<p>Jetty提供了一个Web服务器和javax.servlet容器。 还支持 SPDY, WebSocket, OSGi, JMX, JNDI, JAAS等。 Jetty被广泛的应用在各种项目和产品中， 包括开发过程和生产系统。 Jetty很容易的被嵌入其它设备，工具，框架和应用服务器/集群中。<br>测试用的Jetty 是9.2.2.v20140723版本。<br><img src="/images/2014-08-22/jetty_simple.png" alt="throughput"></p>
<p>可以看到Jetty的吞吐率能够达到 5600 requests/second. </p>
<h1 id="_Vert-x"><i class="fa fa-cube fa-2x"></i> <b style="text-shadow: 0px 1px 4px rgba(0, 0, 0, 0.3);">Vert.x</b></h1>
<hr>
<p>Vert.x是一个轻量级的， 高性能， 支持多语言的应用平台， 运行于JVM之上。为现代的移动应用， Web和企业应用而设计。主项目现在已经作为eclipse的一个<a href="http://projects.eclipse.org/projects/rt.vertx" target="_blank" rel="external">子项目</a>。其它项目如各种模块还在<a href="https://github.com/vert-x/" target="_blank" rel="external">vert-x organisation</a>自己的代码库上开发。它使用Netty处理网络IO。<br>它的部分核心开发人员也是netty的核心开发人员，技术应该相当高。</p>
<p><img src="/images/2014-08-22/vert.x.simple.png" alt="throughput"><br>从图上可以看出， vert.x性能还是挺高的， 大并发下能达到10000 requests/second之上。<br>但是， Vert.x 毕竟还是一个小众的开发框架， 有待于生态圈的建设。 开发模式与传统的Java servlet不太一样，和常用的Spring框架等也不能很好的集成。所以能否壮大还有待观察。</p>
<h1 id="_Memcached"><i class="fa fa-cube fa-2x"></i> <b style="text-shadow: 0px 1px 4px rgba(0, 0, 0, 0.3);">Memcached</b></h1>
<hr>
<p>Test tool: <a href="https://github.com/twitter/twemperf" target="_blank" rel="external">twemperf</a><br>下面的命令创建1000个并发连接，来连接本机的11211端口（此端口是该工具的默认端口），连接创建的速度是每秒1000个，每一个连接发送“set”请求10次（相当于迭代10次），这10次请求在每秒1000的请求的速度下发送，发送的数据大小在（也就是存入到memcached中的value的大小）1~16个字节中正态分布。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mcperf --linger=<span class="number">0</span> --timeout=<span class="number">5</span> --conn-rate=<span class="number">1000</span> --call-rate=<span class="number">1000</span> --num-calls=<span class="number">10</span> --num-conns=<span class="number">1000</span> --sizes=u1,<span class="number">16</span></div></pre></td></tr></table></figure>

<p>测试结果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Total</span>: <span class="string">connections 1000 requests 10000 responses 10000 test-duration 1.009 s</span></div><div class="line"></div><div class="line"><span class="livecodeserver">Connection rate: <span class="number">991.1</span> conn/s (<span class="number">1.0</span> ms/conn &lt;= <span class="number">12</span> concurrent connections)</span></div><div class="line">Connection <span class="built_in">time</span> [ms]: <span class="built_in">avg</span> <span class="number">10.2</span> <span class="built_in">min</span> <span class="number">10.0</span> <span class="built_in">max</span> <span class="number">10.5</span> stddev <span class="number">0.04</span></div><div class="line">Connect <span class="built_in">time</span> [ms]: <span class="built_in">avg</span> <span class="number">0.2</span> <span class="built_in">min</span> <span class="number">0.1</span> <span class="built_in">max</span> <span class="number">0.4</span> stddev <span class="number">0.03</span></div><div class="line"></div><div class="line">Request rate: <span class="number">9911.1</span> req/s (<span class="number">0.1</span> ms/req)</div><div class="line">Request size [B]: <span class="built_in">avg</span> <span class="number">35.9</span> <span class="built_in">min</span> <span class="number">28.0</span> <span class="built_in">max</span> <span class="number">44.0</span> stddev <span class="number">4.80</span></div><div class="line"></div><div class="line">Response rate: <span class="number">9911.1</span> rsp/s (<span class="number">0.1</span> ms/rsp)</div><div class="line">Response size [B]: <span class="built_in">avg</span> <span class="number">8.0</span> <span class="built_in">min</span> <span class="number">8.0</span> <span class="built_in">max</span> <span class="number">8.0</span> stddev <span class="number">0.00</span></div><div class="line">Response <span class="built_in">time</span> [ms]: <span class="built_in">avg</span> <span class="number">0.1</span> <span class="built_in">min</span> <span class="number">0.0</span> <span class="built_in">max</span> <span class="number">2.4</span> stddev <span class="number">0.00</span></div><div class="line">Response <span class="built_in">time</span> [ms]: p25 <span class="number">1.0</span> p50 <span class="number">1.0</span> p75 <span class="number">1.0</span></div><div class="line">Response <span class="built_in">time</span> [ms]: p95 <span class="number">1.0</span> p99 <span class="number">1.0</span> p999 <span class="number">1.0</span></div><div class="line">Response type: stored <span class="number">10000</span> not_stored <span class="number">0</span> exists <span class="number">0</span> not_found <span class="number">0</span></div><div class="line">Response type: <span class="built_in">num</span> <span class="number">0</span> deleted <span class="number">0</span> <span class="function"><span class="keyword">end</span> <span class="title">0</span> <span class="title">value</span> <span class="title">0</span></span></div><div class="line">Response type: error <span class="number">0</span> client_error <span class="number">0</span> server_error <span class="number">0</span></div></pre></td></tr></table></figure>

<p>再看一个测试,创建100个连接，来连接本机的11211端口，每一个连接在上一个连接断开后创建，每一个连接发送100个“set”请求，每一个请求是在收到上一个请求的响应之后创建，发送的数据大小是1个字节。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mcperf --linger=<span class="number">0</span> --call-rate=<span class="number">0</span> --num-calls=<span class="number">100</span> --conn-rate=<span class="number">0</span> --num-conns=<span class="number">100</span> --sizes=d1</div></pre></td></tr></table></figure>

<p>测试结果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Total</span>: <span class="string">connections 100 requests 10000 responses 10000 test-duration 0.423 s</span></div><div class="line"></div><div class="line"><span class="livecodeserver">Connection rate: <span class="number">236.5</span> conn/s (<span class="number">4.2</span> ms/conn &lt;= <span class="number">1</span> concurrent connections)</span></div><div class="line">Connection <span class="built_in">time</span> [ms]: <span class="built_in">avg</span> <span class="number">4.2</span> <span class="built_in">min</span> <span class="number">3.4</span> <span class="built_in">max</span> <span class="number">5.2</span> stddev <span class="number">0.79</span></div><div class="line">Connect <span class="built_in">time</span> [ms]: <span class="built_in">avg</span> <span class="number">0.0</span> <span class="built_in">min</span> <span class="number">0.0</span> <span class="built_in">max</span> <span class="number">0.1</span> stddev <span class="number">0.01</span></div><div class="line"></div><div class="line">Request rate: <span class="number">23653.1</span> req/s (<span class="number">0.0</span> ms/req)</div><div class="line">Request size [B]: <span class="built_in">avg</span> <span class="number">28.0</span> <span class="built_in">min</span> <span class="number">28.0</span> <span class="built_in">max</span> <span class="number">28.0</span> stddev <span class="number">0.00</span></div><div class="line"></div><div class="line">Response rate: <span class="number">23653.1</span> rsp/s (<span class="number">0.0</span> ms/rsp)</div><div class="line">Response size [B]: <span class="built_in">avg</span> <span class="number">8.0</span> <span class="built_in">min</span> <span class="number">8.0</span> <span class="built_in">max</span> <span class="number">8.0</span> stddev <span class="number">0.00</span></div><div class="line">Response <span class="built_in">time</span> [ms]: <span class="built_in">avg</span> <span class="number">0.0</span> <span class="built_in">min</span> <span class="number">0.0</span> <span class="built_in">max</span> <span class="number">0.2</span> stddev <span class="number">0.00</span></div><div class="line">Response <span class="built_in">time</span> [ms]: p25 <span class="number">1.0</span> p50 <span class="number">1.0</span> p75 <span class="number">1.0</span></div><div class="line">Response <span class="built_in">time</span> [ms]: p95 <span class="number">1.0</span> p99 <span class="number">1.0</span> p999 <span class="number">1.0</span></div><div class="line">Response type: stored <span class="number">10000</span> not_stored <span class="number">0</span> exists <span class="number">0</span> not_found <span class="number">0</span></div><div class="line">Response type: <span class="built_in">num</span> <span class="number">0</span> deleted <span class="number">0</span> <span class="function"><span class="keyword">end</span> <span class="title">0</span> <span class="title">value</span> <span class="title">0</span></span></div><div class="line">Response type: error <span class="number">0</span> client_error <span class="number">0</span> server_error <span class="number">0</span></div></pre></td></tr></table></figure>

<p>get方法：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mcperf --linger=<span class="number">0</span> --call-rate=<span class="number">0</span> --num-calls=<span class="number">100</span> --conn-rate=<span class="number">0</span> --num-conns=<span class="number">100</span> --sizes=d1 --m=get</div></pre></td></tr></table></figure>

<p>测试结果</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Total</span>: <span class="string">connections 100 requests 10000 responses 10000 test-duration 0.342 s</span></div><div class="line"></div><div class="line"><span class="livecodeserver">Connection rate: <span class="number">292.4</span> conn/s (<span class="number">3.4</span> ms/conn &lt;= <span class="number">1</span> concurrent connections)</span></div><div class="line">Connection <span class="built_in">time</span> [ms]: <span class="built_in">avg</span> <span class="number">3.4</span> <span class="built_in">min</span> <span class="number">2.9</span> <span class="built_in">max</span> <span class="number">4.1</span> stddev <span class="number">0.52</span></div><div class="line">Connect <span class="built_in">time</span> [ms]: <span class="built_in">avg</span> <span class="number">0.0</span> <span class="built_in">min</span> <span class="number">0.0</span> <span class="built_in">max</span> <span class="number">0.1</span> stddev <span class="number">0.01</span></div><div class="line"></div><div class="line">Request rate: <span class="number">29235.6</span> req/s (<span class="number">0.0</span> ms/req)</div><div class="line">Request size [B]: <span class="built_in">avg</span> <span class="number">19.0</span> <span class="built_in">min</span> <span class="number">19.0</span> <span class="built_in">max</span> <span class="number">19.0</span> stddev <span class="number">0.00</span></div><div class="line"></div><div class="line">Response rate: <span class="number">29235.6</span> rsp/s (<span class="number">0.0</span> ms/rsp)</div><div class="line">Response size [B]: <span class="built_in">avg</span> <span class="number">32.0</span> <span class="built_in">min</span> <span class="number">32.0</span> <span class="built_in">max</span> <span class="number">32.0</span> stddev <span class="number">0.00</span></div><div class="line">Response <span class="built_in">time</span> [ms]: <span class="built_in">avg</span> <span class="number">0.0</span> <span class="built_in">min</span> <span class="number">0.0</span> <span class="built_in">max</span> <span class="number">0.2</span> stddev <span class="number">0.00</span></div><div class="line">Response <span class="built_in">time</span> [ms]: p25 <span class="number">1.0</span> p50 <span class="number">1.0</span> p75 <span class="number">1.0</span></div><div class="line">Response <span class="built_in">time</span> [ms]: p95 <span class="number">1.0</span> p99 <span class="number">1.0</span> p999 <span class="number">1.0</span></div><div class="line">Response type: stored <span class="number">0</span> not_stored <span class="number">0</span> exists <span class="number">0</span> not_found <span class="number">0</span></div><div class="line">Response type: <span class="built_in">num</span> <span class="number">0</span> deleted <span class="number">0</span> <span class="function"><span class="keyword">end</span> <span class="title">0</span> <span class="title">value</span> <span class="title">10000</span></span></div><div class="line">Response type: error <span class="number">0</span> client_error <span class="number">0</span> server_error</div></pre></td></tr></table></figure>

<h1 id="_MongoDB"><i class="fa fa-cube fa-2x"></i> <b style="text-shadow: 0px 1px 4px rgba(0, 0, 0, 0.3);">MongoDB</b></h1>
<hr>
<p>Test tool: <a href="http://www.mongodb.org/about/contributors/reference/js-benchmarking-harness/" target="_blank" rel="external">官方测试性能方法</a><br><a href="https://github.com/mongodb/mongo-perf" target="_blank" rel="external">mongo-perf</a></p>
<h1 id="_Java_serializers"><i class="fa fa-cube fa-2x"></i> <b style="text-shadow: 0px 1px 4px rgba(0, 0, 0, 0.3);">Java serializers</b></h1>
<hr>
<p>下面这个工具很强大，，通过它可以得到大多数流行的java序列化框架的benchmark。<br><a href="https://github.com/eishay/jvm-serializers/wiki" target="_blank" rel="external">Java serializers</a></p>
<p>这个链接是我利用这个工作在AWS做的测试结果：<br><a href="/2014/08/26/java-serializer-comparison/">Java序列化框架性能比较</a></p>
<p><a href="https://code.google.com/p/json-smart/wiki/Benchmark" target="_blank" rel="external">json-smart</a> 的作者提供另外一个测试，号称他的json-smart比其它框架有显著的提升，但是有人用上面的 jvm-serializers测试套件测试了一下，反而不如jackson， 虽然比一些其它的框架要好。 </p>
<h1 id="_CXF"><i class="fa fa-cube fa-2x"></i> <b style="text-shadow: 0px 1px 4px rgba(0, 0, 0, 0.3);">CXF</b></h1>
<hr>
<p>Test tool: Apache Bench (ab)</p>
<p>这里使用cxf 3.0.1实现RESTful形式的两个web service。<br>Web容器依然是上面的Tomcat, NIO配置。<br>对于普通的CXF实现 (/test/hello),仅仅返回一个String，不涉及到序列化反序列化。性能结果为：<br><img src="/images/2014-08-22/tomcat_cxf_string.png" alt="throughput"></p>
<p>相比于普通的tomcat下的web application，性能有所下降。 </p>
<p>如果加上Jackson序列化，性能结果为：<br><img src="/images/2014-08-22/tomcat_cxf_json.png" alt="throughput"><br>性能和上面的差不多，基本能达到3000 TPS。</p>
<p>CXF codes:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Service</span></div><div class="line"><span class="annotation">@Path</span>(<span class="string">"/test"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>{</div><div class="line">    <span class="annotation">@GET</span></div><div class="line">    <span class="annotation">@Path</span>(<span class="string">"/hello"</span>)</div><div class="line">    <span class="keyword">public</span> Response <span class="title">say</span>() {        </div><div class="line">        <span class="keyword">return</span> Response.ok().entity(<span class="string">"hello cxf"</span>).build();</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="annotation">@GET</span></div><div class="line">    <span class="annotation">@Path</span>(<span class="string">"/user/{id}"</span>)</div><div class="line">    <span class="keyword">public</span> User <span class="title">queryUser</span>(@<span class="title">PathParam</span>("id") <span class="keyword">final</span> String id) {        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"birdnest"</span>, <span class="string">"sadsadsadasd31edqwdwqde"</span>,<span class="string">"abc@wqedwq.com"</span>, <span class="string">"127.0.0.1"</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</div><div class="line">	<span class="annotation">@JsonProperty</span>(<span class="string">"id"</span>)</div><div class="line">	<span class="keyword">private</span> String userid;</div><div class="line">	<span class="keyword">private</span> String hashPassword;</div><div class="line">	<span class="keyword">private</span> String mail;</div><div class="line">	<span class="keyword">private</span> String ipAddress;</div><div class="line">	<span class="annotation">@JsonIgnore</span></div><div class="line">	<span class="keyword">private</span> Date lastLoginDate;</div><div class="line">	......</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Bean</span>(destroyMethod = <span class="string">"destroy"</span>)</div><div class="line">    <span class="keyword">public</span> Server <span class="title">restEndpoint</span>() {</div><div class="line">        List&lt;Object&gt; serviceBeans = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        serviceBeans.add(testService);</div><div class="line">       </div><div class="line">        JAXRSServerFactoryBean factoryBean = <span class="keyword">new</span> JAXRSServerFactoryBean();</div><div class="line">        factoryBean.setAddress(<span class="string">""</span>);</div><div class="line">        factoryBean.setServiceBeans(serviceBeans);</div><div class="line">        </div><div class="line">        factoryBean.setProviders(Arrays.asList(                </div><div class="line">                <span class="keyword">new</span> JacksonJsonProvider(<span class="keyword">new</span> ObjectMapper())</div><div class="line">        ));</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">return</span> factoryBean.create();</div><div class="line">    }</div></pre></td></tr></table></figure>

<h1 id="_Spring_MVC"><i class="fa fa-cube fa-2x"></i> <b style="text-shadow: 0px 1px 4px rgba(0, 0, 0, 0.3);">Spring MVC</b></h1>
<hr>
<p>这里使用Spring MVC生成两个RESTful形式的web services， 就像上面的CXF一样。正好可以和上面的CXF和Tomcat比较， 看看不同的Restful的实现框架的性能如何。</p>
<p>Spring MVC的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMVCController</span> </span>{</div><div class="line"></div><div class="line">	<span class="annotation">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</div><div class="line">	<span class="annotation">@ResponseBody</span></div><div class="line">	<span class="keyword">public</span> String <span class="title">hello</span>() {</div><div class="line">		<span class="keyword">return</span> <span class="string">"hello MVC"</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@RequestMapping</span>(value = <span class="string">"/user/{id}"</span>, method = RequestMethod.GET)</div><div class="line">	<span class="annotation">@ResponseBody</span></div><div class="line">	<span class="keyword">public</span> User <span class="title">queryUser</span>(@<span class="title">PathVariable</span>( "id" ) Long id) {</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">"birdnest"</span>, <span class="string">"sadsadsadasd31edqwdwqde"</span>,<span class="string">"abc@wqedwq.com"</span>, <span class="string">"127.0.0.1"</span>);</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>hello webservice的性能如下， 看起来还不错， 比CXF框架好多了。<br><img src="/images/2014-08-22/tomcat_springmvc_string.png" alt="简单返回String类型"><br>吞吐率可以达到3000 requests每秒。</p>
<p>J返回SON对象的web service的性能也不错：<br><img src="/images/2014-08-22/tomcat_springmvc_json.png" alt="返回json类型"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>项目中使用了好些的开源项目。对于它们的性能， 只有官方的一些性能报告和一些第三方的性能分析。 做性能估计的时候只是根据以往的经验做估算。 随着软件的不断升级，以及服务器硬件配置的升级， 这些开源项目的性能也有了变化。以前的性能数据可能不太准确了。<br>所以这篇文章记录了当前(2014年秋)我在AWS机器上做的一些性能数据，期望在做软件架构的时候有所帮助。<br>当前测试的软件包括：</p>
<ul>
<li>Tomcat</li>
<li>Jetty</li>
<li>Vert.x</li>
<li>Memcached</li>
<li>MongoDB</li>
<li>Java serializers</li>
<li>CXF</li>
<li>Spring MVC</li>
</ul>
<p>这篇文章会不断更新， 将我最新的测试列出来。</p>
]]>
    
    </summary>
    
      <category term="benchmark" scheme="http://colobu.com/tags/benchmark/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 异步编程最佳实践]]></title>
    <link href="http://colobu.com/2015/03/24/Best-Practices-of-Asynchronous-Programming-With-Java/"/>
    <id>http://colobu.com/2015/03/24/Best-Practices-of-Asynchronous-Programming-With-Java/</id>
    <published>2015-03-24T06:03:47.000Z</published>
    <updated>2015-07-31T13:28:02.182Z</updated>
    <content type="html"><![CDATA[<p>最近异步编程非常流行， 主要是它能够在多核系统上提高吞吐率。异步编程是一种编程方式，可以提高对UI的快速响应。 Java中的异步编程模型提供了一致性的编程模型， 可以用来在程序中支持异步。 本文讨论了在使用Java执行异步操作应该遵循的最佳实践。</p>
<p>原文：<a href="http://www.developer.com/java/data/best-practices-of-asynchronous-programming-with-java.html" target="_blank" rel="external">Best Practices of Asynchronous Programming With Java</a><br><a id="more"></a></p>
<h1 id="什么是异步？为什么要用它？">什么是异步？为什么要用它？</h1>
<p>异步编程提供了一个非阻塞的，事件驱动的编程模型。 这种编程模型利用系统中多核执行任务来提供并行，因此提供了应用的吞吐率。此处吞吐率是指在单位时间内所做任务的数量。 在这种编程方式下， 一个工作单元将独立于主应用线程而执行， 并且会将它的状态通知调用线程：成功，处理中或者失败。</p>
<p>我们需要异步来消除阻塞模型。其实异步编程模型可以使用同样的线程来处理多个请求， 这些请求不会阻塞这个线程。想象一个应用正在使用的线程正在执行任务， 然后等待任务完成才进行下一步。 log框架就是一个很好的例子：典型地你想将异常和错误日志记录到一个目标中， 比如文件，数据库或者其它类似地方。你不会让你的程序等待日志写完才执行，否则程序的响应就会受到影响。 相反，如果对log框架的调用是异步地，应用就可以并发执行其它任务而无需等待。这是一个非阻塞执行的例子。</p>
<p>为了在Java中实现异步，你需要使用<code>Future</code> 和 <code>FutureTask</code>, 它们位于<code>java.util.concurrent</code>包下. <code>Future</code>是一个接口而<code>FutureTask</code>是它的一个实现类。实际上，如果在你的代码中使用<code>Future</code>, 你的异步任务会立即执行， 并且调用线程可以得到结果<code>promise</code>。</p>
<p>下面的代码片段定义了一个包含两个方法的接口。 一个是同步方法，另外一个是异步方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.Future;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDataManager</span> </span>{</div><div class="line">   <span class="comment">// synchronous method</span></div><div class="line">   <span class="keyword">public</span> String <span class="title">getDataSynchronously</span>();</div><div class="line">   <span class="comment">// asynchronous method</span></div><div class="line">   <span class="keyword">public</span> Future&lt;String&gt; <span class="title">getDataAsynchronously</span>();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>值得注意的是回调模型的弊端就是当回调嵌套时很麻烦。</p>
<h1 id="该做和不该做的">该做和不该做的</h1>
<p>为了方便测试， 你应该在代码中将功能从多线程中隔离出来。当在Java中编写异步代码时，你应该遵循异步模型，这样调用线程就不会被阻塞。<br>注意构造函数不能是异步的，你不应该在构造函数中调用异步方法。当任务互相不依赖时异步方式尤其有用。当调用任务依赖被调用任务时不应该使用异步(译者按：这对异步来说无意义，因为业务上调用线程被阻塞了).</p>
<p>你应该在异步方法中处理异常. 你不应该为长时间的task实现异常. 一个长时间运行的任务，如果异步执行的话, 可能会比同步执行耗费更长的时间， 因为运行时要为异步执行的方法执行线程上下文的切换， 线程状态的存储等. 你也应该注意同步的异常和异步的异常有所不同。 同步异常暗示 每次程序执行到那个程序特殊状态时就会抛出异常；异步异常的跟踪则困难的多。所以同步和异步异常暗示同步或异步代码可能抛出异常(synchronous and asynchronous exceptions imply synchronous or asynchronous code in your program that might raise exceptions.)。</p>
<h1 id="推荐阅读">推荐阅读</h1>
<ol>
<li><a href="https://msdn.microsoft.com/en-us/magazine/dn818494.aspx" target="_blank" rel="external">https://msdn.microsoft.com/en-us/magazine/dn818494.aspx</a></li>
<li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/gkiez.html" target="_blank" rel="external">http://docs.oracle.com/javaee/6/tutorial/doc/gkiez.html</a></li>
<li><a href="https://technology.amis.nl/2009/02/19/asynchronous-processing-in-java-applications-leveraging-those-multi-cores/" target="_blank" rel="external">https://technology.amis.nl/2009/02/19/asynchronous-processing-in-java-applications-leveraging-those-multi-cores/</a></li>
<li><a href="http://javarevisited.blogspot.in/2015/01/how-to-use-future-and-futuretask-in-Java.html" target="_blank" rel="external">http://javarevisited.blogspot.in/2015/01/how-to-use-future-and-futuretask-in-Java.html</a></li>
<li><a href="http://www.codeproject.com/Articles/562021/Asynchronous-models-and-patterns" target="_blank" rel="external">http://www.codeproject.com/Articles/562021/Asynchronous-models-and-patterns</a></li>
</ol>
<h1 id="总结">总结</h1>
<p>异步对于设计大规模快速响应的应用是至关重要的。异步回调模型带来了很多的好处；你可以依赖你的异步回调方法来执行昂贵的I/O操作而你的处理器可以执行其它任务。然而虽然在Java和C#中提供了异步的支持，异步编程并不总是那么容易实现。异步方式的使用要谨慎: 你应该清楚什么时候可以用和什么时候不该用。</p>
<p>本文中我们介绍了异步编程的概念， 以及使用Java编程需要怎么去实现. 本文也列出了使用异步编程的最佳实践。谢谢阅读。</p>
<h1 id="译者增加的内容">译者增加的内容</h1>
<p>Java 7中提供了Fork/Join框架， 可以将一个大的task分割成很多可以并行执行的小task。Java 8中parallelStream内部利用Fork/Join执行并发操作。<br><a href="http://reactivex.io/" target="_blank" rel="external">Reactive Extensions for .NET</a>提供了异步和基于事件编程框架， Java中对应的是Netflix的<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a>,你可以使用它实现CQRS和Event Sourcing模式。<br><a href="http://akka.io/" target="_blank" rel="external">Akka</a>提供了一个分布式的，容错的，事件驱动的框架， 可以实现异步的分布式的编程。<br>还有Spring的<a href="https://github.com/reactor/reactor" target="_blank" rel="external">reactor</a>也提供了高性能的事件驱动的异步框架。<br>像Node.js天生支持异步编程模式， 其它语言如golang使用 goroutines 和 channels.也很容易实现异步。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近异步编程非常流行， 主要是它能够在多核系统上提高吞吐率。异步编程是一种编程方式，可以提高对UI的快速响应。 Java中的异步编程模型提供了一致性的编程模型， 可以用来在程序中支持异步。 本文讨论了在使用Java执行异步操作应该遵循的最佳实践。</p>
<p>原文：<a href="http://www.developer.com/java/data/best-practices-of-asynchronous-programming-with-java.html" target="_blank" rel="external">Best Practices of Asynchronous Programming With Java</a><br>]]>
    
    </summary>
    
      <category term="异步" scheme="http://colobu.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Building With Gulp]]></title>
    <link href="http://colobu.com/2014/09/15/Building-With-Gulp/"/>
    <id>http://colobu.com/2014/09/15/Building-With-Gulp/</id>
    <published>2014-09-15T02:45:51.000Z</published>
    <updated>2015-07-31T13:28:02.182Z</updated>
    <content type="html"><![CDATA[<p>对网站资源进行优化，并使用不同浏览器测试并不是网站设计过程中最有意思的部分，但是这个过程中的很多重复的任务能够使用正确的工具自动完成，从而使效率大大提高，这是让很多开发者觉得有趣的地方。</p>
<p>Gulp是一个构建系统，它能通过自动执行常见任务，比如编译预处理CSS，压缩JavaScript和刷新浏览器，来改进网站开发的过程。通过本文，我们将知道如何使用Gulp来改变开发流程，从而使开发更加快速高效。</p>
<blockquote>
<p>Grunt 一直是前端领域构建工具的王者，然而它也不是毫无缺陷的，近期风头正劲的 gulp.js 隐隐有取而代之的态势。那么，究竟是什么使得 gulp.js 备受关注呢？ gulp.js 的作者 Eric Schoffstall 在他<a href="http://slid.es/contra/gulp" target="_blank" rel="external">介绍 gulp.js 的 presentation</a> 中总结了 Grunt 的几点不足之处，请看nightire的<a href="http://blog.segmentfault.com/nightire/1190000000435599" target="_blank" rel="external">翻译和总结</a>。<br>阮一峰在他的<a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript 标准参考教程</a>也有专门一节介绍： <a href="http://javascript.ruanyifeng.com/tool/gulp.html" target="_blank" rel="external">Gulp：任务自动管理工具 </a>。<br>还有chenllos的<a href="http://www.html-js.com/article/2083" target="_blank" rel="external">gulp构建进阶</a>供参考。</p>
</blockquote>
<a id="more"></a>
<p><a href="https://github.com/yeol/blog/blob/master/20140828_building_with_gulp.md" target="_blank" rel="external">翻译地址</a><br><a href="http://www.smashingmagazine.com/2014/06/11/building-with-gulp/" target="_blank" rel="external">原文地址</a></p>
<p>###What Is Gulp?</p>
<p><a href="http://gulpjs.com/" target="_blank" rel="external">Gulp</a>是一个构建系统，开发者可以使用它在网站开发过程中自动执行常见任务。Gulp是基于Node.js构建的，因此Gulp源文件和你用来定义任务的Gulp文件都被写进了JavaScript（或者CoffeeScript）里。前端开发工程师还可以用自己熟悉的语言来编写任务去lint JavaScript和CSS、解析模板以及在文件变动时编译LESS文件（当然这些只是一小部分例子）。</p>
<p>Gulp本身虽然不能完成很多任务，但它有大量插件可用，开发者可以访问<a href="http://gulpjs.com/plugins/" target="_blank" rel="external">插件页面</a>或者在npm搜索gulpplugin就能看到。例如，有些插件可以用来<a href="https://www.npmjs.org/package/gulp-jshint/" target="_blank" rel="external">执行JSHint</a>、<a href="https://www.npmjs.org/package/gulp-coffee/" target="_blank" rel="external">编译CoffeeScript</a>，<a href="http://npmjs.org/package/gulp-mocha" target="_blank" rel="external">执行Mocha测试</a>，甚至<a href="http://npmjs.org/package/gulp-bump" target="_blank" rel="external">更新版本号</a>。</p>
<p>对比其他构建工具，比如<a href="http://gruntjs.com/" target="_blank" rel="external">Grunt</a>，以及最近流行的<a href="http://www.solitr.com/blog/2014/02/broccoli-first-release/" target="_blank" rel="external">Broccoli</a>，我相信Gulp会更胜一筹（请看后面的”Why Gulp?”部分），同时我汇总了一个使用<a href="https://gist.github.com/callumacrae/9231589" target="_blank" rel="external">Javascript编写的构建工具清单</a>，可供大家参考。</p>
<p>Gulp是一个可以<a href="https://github.com/gulpjs/gulp/" target="_blank" rel="external">在GitHub上</a>找到的开源项目。</p>
<p>###Installing Gulp</p>
<p>安装Gulp的过程十分简单。首先，需要在全局安装Gulp包：</p>
<p><code>npm install -g gulp</code></p>
<p>然后，在项目里面安装Gulp：</p>
<p><code>npm install --save-dev gulp</code></p>
<p>###Using Gulp</p>
<p>现在我们创建一个Gulp任务来压缩JavaScript文件。首先创建一个名为gulpfile.js的文件，这是定义Gulp任务的地方，它可以通过gulp命令来运行，接着把下面的代码放到gulpfile.js文件里面。</p>
<pre><code><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),
   uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);

gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
   gulp.src(<span class="string">'js/app.js'</span>)
      .pipe(uglify())
      .pipe(gulp.dest(<span class="string">'build'</span>))
});
</code></pre><p>然后在npm里面运行npm install –save-dev gulp-uglify来安装gulp-uglify，最后通过运行gulp minify来执行任务。假设js目录下有个app.js文件，那么一个新的app.js将被创建在编译目录下，它包含了js/app.js的压缩内容。想一想，到底发生了什么？</p>
<p>我们只在gulpfile.js里做了一点事情。首先，我们加载gulp和gulp-uglify模块：</p>
<pre><code><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),
    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);
</code></pre><p>然后，我们定义了一个叫minify的任务，它执行时会调用函数，这个函数会作为第二个参数：</p>
<pre><code>gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{

});
</code></pre><p>最后，也是难点所在，我们需要定义任务应该做什么：</p>
<pre><code>gulp.src(<span class="string">'js/app.js'</span>)
   .<span class="keyword">pipe</span>(uglify())
   .<span class="keyword">pipe</span>(gulp.dest(<span class="string">'build'</span>))
</code></pre><p>如果你对数据流非常熟悉（其实大多数前端开发人员并不熟悉），上面所提供的代码对你来说就没有太大意义了。</p>
<p>###STREAMS</p>
<p>数据流能够通过一系列的小函数来传递数据，这些函数会对数据进行修改，然后把修改后的数据传递给下一个函数。</p>
<p>在上面的例子中，gulp.src()函数用字符串匹配一个文件或者文件的编号（被称为“glob”）,然后创建一个对象流来代表这些文件，接着传递给uglify()函数，它接受文件对象之后返回有新压缩源文件的文件对象，最后那些输出的文件被输入gulp.dest()函数，并保存下来。</p>
<p>整个数据流动过程如下图所示：<br><img src="http://p1.qhimg.com/t01759cebd478ca1a35.png" alt=""></p>
<p>当只有一个任务的时候，函数并不会起太大的作用。然而，仔细思考下面的代码：</p>
<pre><code>gulp.task(<span class="string">'js'</span>, function () {
   <span class="keyword">return</span> gulp.src(<span class="string">'js/*.js'</span>)
      .<span class="keyword">pipe</span>(jshint())
      .<span class="keyword">pipe</span>(jshint.reporter(<span class="string">'default'</span>))
      .<span class="keyword">pipe</span>(uglify())
      .<span class="keyword">pipe</span>(concat(<span class="string">'app.js'</span>))
      .<span class="keyword">pipe</span>(gulp.dest(<span class="string">'build'</span>));
});
</code></pre><p>在运行这段程序之前，你需要先安装gulp,gulp-jshint,gulp-uglify和gulp-concat。</p>
<p>这个任务会让所有的文件匹配js/*.js（比如js目录下的所有JavaScript文件），并且执行JSHint，然后打印输出结果，取消文件缩进，最后把他们合并起来，保存为build/app.js，整个过程如下图所示：<br><img src="http://p0.qhimg.com/t01c6591bd2705a2ee7.png" alt=""></p>
<p>如果你对Grunt 足够熟悉，就会注意到，Gulp和Grunt的工作方式很不一样。Grunt不使用数据流，而是使用文件，对文件执行单个任务然后保存到新的文件中，每个任务都会重复执行所有进程，文件系统频繁的处理任务会导致Grunt的运行速度比Gulp慢。</p>
<p>如果想要获取更加全面的数据流知识，请查看“<a href="https://github.com/substack/stream-handbook" target="_blank" rel="external">Stream Handbook</a>”.</p>
<p>###GULP.SRC()</p>
<p>gulp.src()方法输入一个glob(比如匹配一个或多个文件的字符串)或者glob数组，然后返回一个可以传递给插件的数据流。</p>
<p>Gulp使用<a href="https://github.com/isaacs/node-glob" target="_blank" rel="external">node-glob</a>来从你指定的glob里面获取文件，这里列举下面的例子来阐述，方便大家理解：</p>
<ul>
<li>js/app.js   精确匹配文件</li>
<li>js/*.js     仅匹配js目录下的所有后缀为.js的文件</li>
<li>js/<em>*/</em>.js  匹配js目录及其子目录下所有后缀为.js的文件</li>
<li>!js/app.js  从匹配结果中排除js/app.js，这种方法在你想要匹配除了特殊文件之外的所有文件时非常管用</li>
<li>*.+(js|css) 匹配根目录下所有后缀为.js或者.css的文件</li>
</ul>
<p>此外，Gulp也有很多其他的特征，但并不常用。如果你想了解更多的特征，请查看<a href="https://github.com/isaacs/minimatch" target="_blank" rel="external">Minimatch</a>文档。</p>
<p>js目录下包含了压缩和未压缩的JavaScript文件，现在我们想要创建一个任务来压缩还没有被压缩的文件，我们需要先匹配目录下所有的JavaScript文件，然后排除后缀为.min.js的文件:</p>
<p><code>gulp.src([&#39;js/**/*.js&#39;, &#39;!js/**/*.min.js&#39;])</code></p>
<p>###DEFINING TASKS</p>
<p>gulp.task()函数通常会被用来定义任务。当你定义一个简单的任务时，需要传入任务名字和执行函数两个属性。</p>
<pre><code>gulp.task(<span class="string">'greet'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
   <span class="built_in">console</span>.log(<span class="string">'Hello world!'</span>);
});
</code></pre><p>执行gulp greet的结果就是在控制台上打印出“Hello world”.</p>
<p>一个任务有时也可以是一系列任务。假设要定义一个任务build来执行css、js、imgs这三个任务，我们可以通过指定一个任务数组而不是函数来完成。</p>
<p><code>gulp.task(&#39;build&#39;, [&#39;css&#39;, &#39;js&#39;, &#39;imgs&#39;]);</code></p>
<p>这些任务不是同时进行的，所以你不能认为在js任务开始的时候css任务已经结束了，也可能还没有结束。为了确保一个任务在另一个任务执行前已经结束，可以将函数和任务数组结合起来指定其依赖关系。例如，定义一个css任务，在执行前需要检查greet任务是否已经执行完毕，这样做就是可行的:</p>
<pre><code>gulp.task(<span class="string">'css'</span>, [<span class="string">'greet'</span>], <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
   <span class="comment">// Deal with CSS here</span>
});
</code></pre><p>现在，当执行css任务时，Gulp会先执行greet任务，然后在它结束后再调用你定义的函数。</p>
<p>###DEFAULT TASKS</p>
<p>你可以定义一个在gulp开始运行时候默认执行的任务，并将这个任务命名为“default”：</p>
<pre><code>gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
   <span class="comment">// Your default task</span>
});
</code></pre><p>###PLUGINS</p>
<p>Gulp上有超过600种插件供你选择，你可以在<a href="http://gulpjs.com/plugins/" target="_blank" rel="external">插件页面</a>或者npm上搜索gulpplugin来浏览插件列表。有些拥有“gulpfriendly”标签的插件，他们不能算插件，但是能在Gulp上正常运行。<br>需要注意的是，当直接在npm里搜索时，你无法知道某一插件是否在黑名单上（你需要滚动到插件页面底部才能看到）。</p>
<p>大多数插件的使用都很方便，它们都配有详细的文档，而且调用方法也相同（通过传递文件对象流给它），它们通常会对这些文件进行修改（但是有一些插件例外，比如validators），最后返回新的文件给下一个插件。</p>
<p>让我们用前面的js任务来详细说明一下：</p>
<pre><code>var gulp = <span class="keyword">require</span>(<span class="string">'gulp'</span>),
    jshint = <span class="keyword">require</span>(<span class="string">'gulp-jshint'</span>),
    uglify = <span class="keyword">require</span>(<span class="string">'gulp-uglify'</span>),
    concat = <span class="keyword">require</span>(<span class="string">'gulp-concat'</span>);

gulp.task(<span class="string">'js'</span>, function () {
   <span class="keyword">return</span> gulp.src(<span class="string">'js/*.js'</span>)
      .<span class="keyword">pipe</span>(jshint())
      .<span class="keyword">pipe</span>(jshint.reporter(<span class="string">'default'</span>))
      .<span class="keyword">pipe</span>(uglify())
      .<span class="keyword">pipe</span>(concat(<span class="string">'app.js'</span>))
      .<span class="keyword">pipe</span>(gulp.dest(<span class="string">'build'</span>));
});
</code></pre><p>这里使用了三个插件，<a href="https://github.com/wearefractal/gulp-jshint" target="_blank" rel="external">gulp-jshint</a>,<a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="external">gulp-uglify</a>和<a href="https://github.com/wearefractal/gulp-concat" target="_blank" rel="external">gulp-concat</a>。开发者可以参考插件的README文档，插件有很多配置选项，而且给定的初始值通常能满足需求。细心的读者可能会发现，程序中JSHint插件执行了2次，这是因为第一次执行JSHint只是给文件对象附加了jshint属性，并没有输出。你可以自己读取jshint的属性或者传递给默认的JSHint的接收函数或者其他的接收函数,比如<a href="https://github.com/sindresorhus/jshint-stylish" target="_blank" rel="external">jshint-stylish</a>.</p>
<p>其他两个插件的作用很清楚：uglify()函数压缩代码，concat(‘app.js’)函数将所有文件合并到一个叫app.js的文件中。</p>
<p>###GULP-LOAD-PLUGINS</p>
<p>我发现gulp-load-plugin模块十分有用，它能够自动地从package.json中加载任意Gulp插件然后把它们附加到一个对象上。它的基本用法如下所示：</p>
<pre><code><span class="keyword">var</span> gulpLoadPlugins = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>),
    plugins = gulpLoadPlugins();
</code></pre><p>你可以把所有代码写到一行，但是我并不推荐这样做。</p>
<p>在执行那些代码之后，插件对象就已经包含了插件，并使用“驼峰式”的方式进行命名（例如，gulp-ruby-sass将被加载成plugins.rubySass），这样就可以很方便地使用了。例如，前面的js任务简化为如下：</p>
<pre><code>var gulp = <span class="keyword">require</span>(<span class="string">'gulp'</span>),
    gulpLoadPlugins = <span class="keyword">require</span>(<span class="string">'gulp-load-plugins'</span>),
    plugins = gulpLoadPlugins();

gulp.task(<span class="string">'js'</span>, function () {
   <span class="keyword">return</span> gulp.src(<span class="string">'js/*.js'</span>)
      .<span class="keyword">pipe</span>(plugins.jshint())
      .<span class="keyword">pipe</span>(plugins.jshint.reporter(<span class="string">'default'</span>))
      .<span class="keyword">pipe</span>(plugins.uglify())
      .<span class="keyword">pipe</span>(plugins.concat(<span class="string">'app.js'</span>))
      .<span class="keyword">pipe</span>(gulp.dest(<span class="string">'build'</span>));
});
</code></pre><p>假设package.json文件如下面所示：</p>
<pre><code>{
   "<span class="attribute">devDependencies</span>": <span class="value">{
      "<span class="attribute">gulp-concat</span>": <span class="value"><span class="string">"~2.2.0"</span></span>,
      "<span class="attribute">gulp-uglify</span>": <span class="value"><span class="string">"~0.2.1"</span></span>,
      "<span class="attribute">gulp-jshint</span>": <span class="value"><span class="string">"~1.5.1"</span></span>,
      "<span class="attribute">gulp</span>": <span class="value"><span class="string">"~3.5.6"</span>
   </span>}
</span>}
</code></pre><p>这个例子虽然已经够短了，但是使用更长更复杂的Gulp文件会把它们简化成一两行代码。</p>
<p>三月初发布的Gulp-load-plugins0.4.0版本添加了延迟加载功能，提高了插件的性能，因为插件在使用的时候才会被加载进来，你不用担心package.json里未被使用的插件影响性能（但是你需要把他们清理掉）。换句话说，如果你在执行任务时只需要两个插件，那么其他不相关的插件就不会被加载。</p>
<p>###WATCHING FILES</p>
<p>Gulp可以监听文件的修改动态，然后在文件被改动的时候执行一个或多个任务。这个特性十分有用（对我来说，这可能是Gulp中最有用的一个功能）。你可以保存LESS文件，接着Gulp会自动把它转换为CSS文件并更新浏览器。</p>
<p>使用gulp.watch()方法可以监听文件，它接受一个glob或者glob数组（和gulp.src()一样）以及一个任务数组来执行回调。</p>
<p>让我们看看下面，build任务可以将模板转换成html格式，然后我们希望定义一个watch任务来监听模板文件的变化，并将这些模板转换成html格式。watch函数的使用方法如下所示：</p>
<pre><code>gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
   gulp.watch(<span class="string">'templates/*.tmpl.html'</span>, [<span class="string">'build'</span>]);
});
</code></pre><p>现在，当改变一个模板文件时，build任务会被执行并生成HTML文件，也可以给watch函数一个回调函数，而不是一个任务数组。在这个示例中，回调函数有一个包含触发回调函数信息的event对象：</p>
<pre><code>gulp.watch(<span class="string">'templates/*.tmpl.html'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>{
   <span class="built_in">console</span>.log(<span class="string">'Event type: '</span> + event.type); <span class="comment">// added, changed, or deleted</span>
   <span class="built_in">console</span>.log(<span class="string">'Event path: '</span> + event.path); <span class="comment">// The path of the modified file</span>
});
</code></pre><p>Gulp.watch()的另一个非常好的特性是返回我们熟知的watcher。利用watcher来监听额外的事件或者向watch中添加文件。例如，在执行一系列任务和调用一个函数时，你就可以在返回的watcher中添加监听change事件:</p>
<pre><code><span class="keyword">var</span> watcher = gulp.watch(<span class="string">'templates/*.tmpl.html'</span>, [<span class="string">'build'</span>]);
watcher.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>{
   <span class="built_in">console</span>.log(<span class="string">'Event type: '</span> + event.type); <span class="comment">// added, changed, or deleted</span>
   <span class="built_in">console</span>.log(<span class="string">'Event path: '</span> + event.path); <span class="comment">// The path of the modified file</span>
});
</code></pre><p>除了change事件，还可以监听很多其他的事件:</p>
<ul>
<li>end      在watcher结束时触发（这意味着，在文件改变的时候，任务或者回调不会执行）</li>
<li>error    在出现error时触发</li>
<li>ready    在文件被找到并正被监听时触发</li>
<li>nomatch  在glob没有匹配到任何文件时触发</li>
</ul>
<p>Watcher对象也包含了一些可以调用的方法：</p>
<ul>
<li>watcher.end()      停止watcher（以便停止执行后面的任务或者回调函数）</li>
<li>watcher.files()    返回watcher监听的文件列表</li>
<li>watcher.add(glob)  将与指定glob相匹配的文件添加到watcher（也接受可选的回调当第二个参数）</li>
<li>watcher.remove(filepath) 从watcher中移除个别文件</li>
</ul>
<p>###Reloading Changes In The Browser</p>
<p>当一个文件被修改或者Gulp任务被执行时可以用Gulp来加载或者更新网页。LiveReload和BrowserSync插件就可以用来实现在游览器中加载更新的内容。</p>
<p>####LIVERELOAD</p>
<p><a href="http://livereload.com/" target="_blank" rel="external">LiveReload</a>结合了浏览器扩展（包括<a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei" target="_blank" rel="external">Chrome extension</a>），在发现文件被修改时会实时更新网页。它可以和<a href="https://www.npmjs.org/package/gulp-watch" target="_blank" rel="external">gulp-watch</a>插件或者前面描述的gulp-watch()函数一起使用。下面有一个<a href="https://github.com/vohof/gulp-livereload" target="_blank" rel="external">gulp-livereload</a>仓库中的README文件提到的例子:</p>
<pre><code><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),
    less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>),
    livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>),
    watch = <span class="built_in">require</span>(<span class="string">'gulp-watch'</span>);

gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
   gulp.src(<span class="string">'less/*.less'</span>)
      .pipe(watch())
      .pipe(less())
      .pipe(gulp.dest(<span class="string">'css'</span>))
      .pipe(livereload());
});
</code></pre><p>这会监听到所有与less/*.less相匹配的文件的变化。一旦监测到变化，就会生成css并保存，然后重新加载网页.</p>
<p>####BROWSERSYNC</p>
<p><a href="http://browsersync.io/" target="_blank" rel="external">BroserSync</a>在浏览器中展示变化的功能与LiveReload非常相似，但是它有更多的功能。</p>
<p>当你改变代码的时候，BrowserSync会重新加载页面，或者如果是css文件，会直接添加进css中，页面并不需要再次刷新。这项功能在网站是禁止刷新的时候是很有用的。假设你正在开发单页应用的第4页，刷新页面就会导致你回到开始页。使用LiveReload的话，你就需要在每次改变代码之后还需要点击四次，而当你修改CSS时，插入一些变化时，BrowserSync会直接将需要修改的地方添加进CSS，就不用再点击回退。</p>
<p><img src="http://p7.qhimg.com/t01b21adb0b23364a0c.gif" alt=""></p>
<p>BrowserSync提供了一种在多个浏览器里测试网页的很好方式<a href="http://p7.qhimg.com/t01b21adb0b23364a0c.gif" target="_blank" rel="external">（查看大图）</a>。</p>
<p>BrowserSync也可以在不同浏览器之间同步点击翻页、表单操作、滚动位置。你可以在电脑和iPhone上打开不同的浏览器然后进行操作。所有设备上的链接将会随之变化，当你向下滚动页面时，所有设备上页面都会向下滚动（通常还很流畅！）。当你在表单中输入文本时，每个窗口都会有输入。当你不想要这种行为时，也可以把这个功能关闭。</p>
<p><img src="http://p4.qhimg.com/t011034e5a90ce13015.gif" alt=""></p>
<p>BrowserSync不需要使用浏览器插件，因为它本身就可以给你提供文件。<a href="http://p4.qhimg.com/t011034e5a90ce13015.gif" target="_blank" rel="external">（查看大图）</a></p>
<p>BrowserSync不需要使用浏览器插件，因为它本身就可以为你提供文件服务（如果文件是动态的，则为他们提供代理服务）和用来开启浏览器和服务器之间的socket的脚本服务。到目前为止这个功能的使用都十分顺畅。</p>
<p>实际上BrowserSync对于Gulp并不算一种插件，因为BrowserSync并不像一个插件一样操作文件。然而，<a href="https://www.npmjs.org/package/browser-sync" target="_blank" rel="external">npm上的BrowserSync模块</a>能在Gulp上被直接调用。</p>
<p>首先，需要通过npm安装一下：</p>
<p><code>npm install --save-dev browser-sync</code></p>
<p>然后gulpfile.js会启动BrowserSync并监听文件：</p>
<pre><code><span class="keyword">var</span> gulp = require(<span class="symbol">'gul</span>p'),
    browserSync = require(<span class="symbol">'browser</span>-sync');

gulp.task(<span class="symbol">'browser</span>-sync', function () {
   <span class="keyword">var</span> files = [
      <span class="symbol">'app</span><span class="javadoc">/**/*.html',
      'app/assets/css/**/</span>*.css',
      <span class="symbol">'app</span>/assets/imgs<span class="javadoc">/**/*.png',
      'app/assets/js/**/</span>*.js'
   ];

   browserSync.init(files, {
      server: {
         baseDir: './app'
      }
   });
});
</code></pre><p>执行gulp browser-sync后会监听匹配文件的变化，同时为app目录提供文件服务。</p>
<p>此外BrowserSync的开发者还写了很多关于<a href="https://github.com/shakyShane/gulp-browser-sync" target="_blank" rel="external">BrowserSync+Gulp</a>仓库的其他用途。</p>
<p>###Why Gulp?</p>
<p>前面提到过，Gulp是<a href="https://gist.github.com/callumacrae/9231589" target="_blank" rel="external">为数不多</a>的使用JavaScript开发的构建工具之一，也有其他不是用JavaScript开发的构建工具，比如Rake，那么我们为什么要选择Gulp呢?</p>
<p>目前最流行的两种使用JavaScript开发的构建工具是Grunt和Gulp。Grunt在<a href="http://www.smashingmagazine.com/2013/10/29/get-up-running-grunt/" target="_blank" rel="external">2013年非常流行</a>，因为它彻底改变了许多人开发网站的方式，它有上千种插件可供用户使用，从linting、压缩、合并代码到使用Bower安装程序包,启动Express服务都能办到。这些和Gulp的很不一样，Gulp只有执行单个小任务来处理文件的插件，因为任务都是JavaScript（和Gtunt使用的大型对象不同），根本不需要插件，你只需用传统方法启动一个Express服务就可以了。</p>
<p>Grunt任务拥有大量的配置，会引用大量你实际上并不需要的对象属性，但是Gulp里同样的任务也许只有几行。让我们看个简单的Gtuntfile.js，它规定一个将LESS转换为CSS的任务，然后执行<a href="https://github.com/ai/autoprefixer" target="_blank" rel="external">Autoprefixer</a>:</p>
<pre><code>grunt.initConfig({
   less: {
      development: {
         files: {
            <span class="string">"build/tmp/app.css"</span>: <span class="string">"assets/app.less"</span>
         }
      }
   },

   autoprefixer: {
      <span class="keyword">options</span>: {
         browsers: [<span class="string">'last 2 version'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>]
      },
      multiple_files: {
         expand: <span class="keyword">true</span>,
         <span class="keyword">flatten</span>: <span class="keyword">true</span>,
         src: <span class="string">'build/tmp/app.css'</span>,
         dest: <span class="string">'build/'</span>
      }
   }
});

grunt.loadNpmTasks(<span class="string">'grunt-contrib-less'</span>);
grunt.loadNpmTasks(<span class="string">'grunt-autoprefixer'</span>);

grunt.registerTask(<span class="string">'css'</span>, [<span class="string">'less'</span>, <span class="string">'autoprefixer'</span>]);
</code></pre><p>与Gulpfile.js文件进行对比，它们执行的任务相同：</p>
<pre><code><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),
   less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>),
   autoprefix = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>);

gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{
   gulp.src(<span class="string">'assets/app.less'</span>)
      .pipe(less())
      .pipe(autoprefix(<span class="string">'last 2 version'</span>, <span class="string">'ie 8'</span>, <span class="string">'ie 9'</span>))
      .pipe(gulp.dest(<span class="string">'build'</span>));
});
</code></pre><p>因为Grunt比Gulp更加频繁地操作文件系统，所以使用数据流的Gulp总是比Grunt快。对于一个小的LESS文件，gulpfile.js通常需要6ms，而gruntfile.js则需要大概50ms——慢8倍多。这只是个简单的例子，对于长的文件，这个数字会增加得更显著。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>对网站资源进行优化，并使用不同浏览器测试并不是网站设计过程中最有意思的部分，但是这个过程中的很多重复的任务能够使用正确的工具自动完成，从而使效率大大提高，这是让很多开发者觉得有趣的地方。</p>
<p>Gulp是一个构建系统，它能通过自动执行常见任务，比如编译预处理CSS，压缩JavaScript和刷新浏览器，来改进网站开发的过程。通过本文，我们将知道如何使用Gulp来改变开发流程，从而使开发更加快速高效。</p>
<blockquote>
<p>Grunt 一直是前端领域构建工具的王者，然而它也不是毫无缺陷的，近期风头正劲的 gulp.js 隐隐有取而代之的态势。那么，究竟是什么使得 gulp.js 备受关注呢？ gulp.js 的作者 Eric Schoffstall 在他<a href="http://slid.es/contra/gulp" target="_blank" rel="external">介绍 gulp.js 的 presentation</a> 中总结了 Grunt 的几点不足之处，请看nightire的<a href="http://blog.segmentfault.com/nightire/1190000000435599" target="_blank" rel="external">翻译和总结</a>。<br>阮一峰在他的<a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript 标准参考教程</a>也有专门一节介绍： <a href="http://javascript.ruanyifeng.com/tool/gulp.html" target="_blank" rel="external">Gulp：任务自动管理工具 </a>。<br>还有chenllos的<a href="http://www.html-js.com/article/2083" target="_blank" rel="external">gulp构建进阶</a>供参考。</p>
</blockquote>
]]>
    
    </summary>
    
      <category term="Gulp" scheme="http://colobu.com/tags/Gulp/"/>
    
      <category term="前端开发" scheme="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CQRS 和 Event sourcing]]></title>
    <link href="http://colobu.com/2015/05/19/CQRS-and-Event-sourcing/"/>
    <id>http://colobu.com/2015/05/19/CQRS-and-Event-sourcing/</id>
    <published>2015-05-19T06:25:01.000Z</published>
    <updated>2015-07-31T13:28:02.182Z</updated>
    <content type="html"><![CDATA[<p>CQRS全称为Command Query Responsibility Segregation。 CQRS并不是一个完整的架构，而是一个小的模式。这个模式首先由Greg Young 和 Udi Dahan提出，Martin Flower有一篇文章专门介绍这个模式，微软也有一个专门教程介绍CQRS。<br>CQRS描述起来很简单，就是命令和查询职责分离。<br><a id="more"></a><br>传统上，我们会使用统一的模型进行数据的增删改查，并提供统一的服务，这是我们最常用的一种方式，很多框架也提供了辅助功能帮我们自动产生CRUD的代码。<br>但是，这也带来一些问题：</p>
<ul>
<li>对数据的读取往往比写入频繁得多</li>
<li>在读取数据时，我们通常会获取大量数据，或是一个数据列表。与之相比，对数据的写入通常只影响一个单一的聚合。</li>
<li>从用户的角度来看，数据的读取应当表现出比写入更高的性能。对于用户来说，在进行数据变更时产生一些拖慢的现象更易于接受。</li>
</ul>
<p>Vladimir Khorikov定义了<a href="http://enterprisecraftsmanship.com/2015/04/20/types-of-cqrs/" target="_blank" rel="external">三种类型的CQRS</a>，并且与不使用CQRS（No CQRS）的架构方式进行了对比：</p>
<ul>
<li>在No CQRS架构中，使用同一个领域模型进行命令与查询的处理。这种方式不会造成代码或复杂度的提高，但会使对读取操作的优化变得非常困难，甚至完全不可能。</li>
<li>在分离式类结构中，使用领域类处理命令，并用数据传输对象（DTO）负责返回读取的数据，这种方式会带来某种程度的重复。Khorikov相信，到了这个阶段的CQRS应用对于大多数企业应用来说已经足够了，它在复杂性与性能之间实现了良好的平衡。</li>
<li>在分离式模型中，数据的读取与写入将使用不同的API与模型对应实现。这种方式不仅能够优化查询，并且能够利用缓存，对于读取负载很高的应用来说是一种不错的方案。</li>
<li>对查询使用分离的存储结构以进行优化，能够应对更大规模的读取操作。对于数据的写入与查询将各种使用不同类型的存储结构，比如分别使用一个关系型数据库和一个NoSQL类型的数据库。通常会在后台运行读存储结构的同步，因此数据的读取将实现最终一致性。这种模式的可伸缩性最高，但同时也意味着最高的复杂性。<br><img src="http://www.codeproject.com/KB/architecture/555855/CQRS.jpg" alt=""></li>
</ul>
<p>CQRS经常和Event Sourcing一起提到，尽管两者没有依赖关系，它们只是经常互相补充。<br>一个对象从创建开始到消亡会经历很多事件，以前我们是在每次对象参与完一个业务动作后把对象的最新状态持久化保存到数据库中，也就是说我们的数据库中的数据是反映了对象的当前最新的状态。而事件溯源则相反，不是保存对象的最新状态，而是保存这个对象所经历的每个事件，所有的由对象产生的事件会按照时间先后顺序有序的存放在数据库中。可以看出，事件溯源的这种做法是更符合事实观的，因为它完整的描述了对象的整个生命周期过程中所经历的所有事件。</p>
<h3 id="参考文章">参考文章</h3>
<ol>
<li><a href="http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/" target="_blank" rel="external">http://codebetter.com/gregyoung/2010/02/16/cqrs-task-based-uis-event-sourcing-agh/</a></li>
<li><a href="http://martinfowler.com/bliki/CQRS.html" target="_blank" rel="external">http://martinfowler.com/bliki/CQRS.html</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/jj554200.aspx" target="_blank" rel="external">CQRS Journey</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/dn589792.aspx" target="_blank" rel="external">Event Sourcing Pattern</a></li>
<li><a href="http://en.wikipedia.org/wiki/Command%E2%80%93query_separation" target="_blank" rel="external">http://en.wikipedia.org/wiki/Command%E2%80%93query_separation</a></li>
<li><a href="http://www.codeproject.com/Articles/555855/Introduction-to-CQRS" target="_blank" rel="external">Introduction to CQRS</a></li>
<li><a href="http://www.infoq.com/cn/news/2015/05/cqrs-advantages" target="_blank" rel="external">http://www.infoq.com/cn/news/2015/05/cqrs-advantages</a></li>
<li><a href="http://www.cnblogs.com/netfocus/p/4150084.html" target="_blank" rel="external">http://www.cnblogs.com/netfocus/p/4150084.html</a></li>
<li><a href="http://jensrantil.github.io/cqrsevent-sourcing-messaging-patterns.html" target="_blank" rel="external">http://jensrantil.github.io/cqrsevent-sourcing-messaging-patterns.html</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>CQRS全称为Command Query Responsibility Segregation。 CQRS并不是一个完整的架构，而是一个小的模式。这个模式首先由Greg Young 和 Udi Dahan提出，Martin Flower有一篇文章专门介绍这个模式，微软也有一个专门教程介绍CQRS。<br>CQRS描述起来很简单，就是命令和查询职责分离。<br>]]>
    
    </summary>
    
      <category term="CQRS" scheme="http://colobu.com/tags/CQRS/"/>
    
      <category term="架构" scheme="http://colobu.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[循环冗余校验CRC简介]]></title>
    <link href="http://colobu.com/2014/10/22/CRC-introduction/"/>
    <id>http://colobu.com/2014/10/22/CRC-introduction/</id>
    <published>2014-10-22T01:07:24.000Z</published>
    <updated>2015-07-31T13:28:02.198Z</updated>
    <content type="html"><![CDATA[<p>循环冗余校验（英语：Cyclic redundancy check，通称“CRC”）是一种根据网络数据数据包或电脑文件等数据产生简短固定位数校验码的一种散列函數，主要用来检测或校验数据传输或者保存后可能出现的错误。生成的数字在传输或者存储之前计算出来并且附加到数据后面，然后接收方进行检验确定数据是否发生变化。一般来说，循环冗余校验的值都是32位的整数。由于本函数易于用二进制的电脑硬件使用、容易进行数学分析并且尤其善于检测传输通道干扰引起的错误，因此获得广泛应用。此方是由W. Wesley Peterson于1961年发表。<br>CRC为校验和的一种，是两个字节数据流采用二进制除法（没有借位和进位，使用异或来代替减法）相除所得到的余数。其中被除数是需要计算校验和的信息数据流的二进制表示；除数是一个长度为(n+1)的预定义二进制数，通常用多项式的系数来表示。在做除法之前，要在信息数据之后先加上n个0. 冗余码的位数是n位。<br>冗余码的计算方法是，先将信息码后面补0，补0的个数是生成多项式最高次幂；将补零之后的信息码用模二除法（非二进制除法）除以G(X)对应的2进制码，注意除法过程中所用的减法是模2减法，即没有借位的减法，也就是异或运算。当被除数逐位除完时，得到比除数少一位的余数。此余数即为冗余位,将其添加在信息位后便构成CRC码字。</p>
<p>例如，假设信息码字为<code>11100011</code>，生成多项式G(X)=X^5+X^4+X+1，计算CRC码字。G(X) = X^5+X^4+X+1,也就是<code>110011</code>，因为最高次是5，所以，在信息码字后补5个0，变为1110001100000。用1110001100000模二除法除以110011，余数为<code>11010</code>，即为所求的冗余位。<br>因此发送出去的CRC码字为原始码字11100011末尾加上冗余位11010，即 <code>1110001111010</code>。接收端收到码字后，采用同样的方法验证，即将收到的码字用模二除法除以110011（是G(X)对应的二进制生成码），发现余数是0，则认为码字在传输过程中没有出错。</p>
<p>尽管在错误检测中非常有用，CRC并不能可靠地校验数据完整性（即数据没有发生任何变化），这是因为CRC多项式是线性结构，可以非常容易地故意改变量据而维持CRC不变。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>循环冗余校验（英语：Cyclic redundancy check，通称“CRC”）是一种根据网络数据数据包或电脑文件等数据产生简短固定位数校验码的一种散列函數，主要用来检测或校验数据传输或者保存后可能出现的错误。生成的数字在传输或者存储之前计算出来并且附加到数据后面，然后]]>
    </summary>
    
      <category term="CRC" scheme="http://colobu.com/tags/CRC/"/>
    
      <category term="网络编程" scheme="http://colobu.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS的几个属性display,float,clear,overflow,visibility]]></title>
    <link href="http://colobu.com/2014/08/28/CSS-display-float-clear-overflow-visibility/"/>
    <id>http://colobu.com/2014/08/28/CSS-display-float-clear-overflow-visibility/</id>
    <published>2014-08-28T03:12:40.000Z</published>
    <updated>2015-07-31T13:28:02.198Z</updated>
    <content type="html"><![CDATA[<p>整理了几个CSS常用的属性。</p>
<h3 id="display属性:block/inline/none">display属性:block/inline/none</h3>
<p>display：block(作用是把行属性标签显示成块属性标签，可以设置宽高) ；<br>display：inline(作用是把块属性标签显示成行属性标签，这时块属性标签就不能设置宽高啦)；<br>display：none(作用是使所控制的标签不显示)<br>visibility：hidden(是设置元素的框的不可见，但是在布局中的位置是不变的)<br>它和display：none的区别就在于后者不会占用那个位置，下一个元素会直接覆盖它，而前者是会占用那个布局，只是不显示内容，是    一片空白；并且下载的时候对于display：none就不会把不显示的元素给下载下来，而visibility：hidden则会把不显示的元素给下 载下来；</p>
<a id="more"></a>
<h3 id="float（浮动，照样受文档流的限制）行标签float之后就可以设置它的宽高">float（浮动，照样受文档流的限制）行标签float之后就可以设置它的宽高</h3>
<p>float：none/left/right<br>none : 　对象不浮动<br>left : 　左浮动<br>right : 　右浮动</p>
<h3 id="clear（清除浮动）">clear（清除浮动）</h3>
<p>clear：both/none/left/right<br>none : 　允许两边都可以有浮动对象<br>both : 　不允许有浮动对象<br>left : 　不允许左边有浮动对象<br>right : 　不允许右边有浮动对象</p>
<h3 id="overflow（超出）">overflow（超出）</h3>
<p>overflow：visible/auto/hidden/scroll<br>visible : 　不剪切内容也不添加滚动条<br>auto : 　默认属性<br>hidden : 　隐藏超出内容<br>scroll : 　总是显示滚动条</p>
<h3 id="visibility(可视)">visibility(可视)</h3>
<p>visibility : inherit/visible/hidden<br>inherit : 　继承上一个父对象的可见性<br>visible : 　对象可视<br>hidden : 　对象隐藏</p>
<h3 id="几种图片格式的差别：">几种图片格式的差别：</h3>
<p>gif：不支持半透明<br>jpg：支持透明<br>png：部分支持透明，需要额外处理</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>整理了几个CSS常用的属性。</p>
<h3 id="display属性:block/inline/none">display属性:block/inline/none</h3>
<p>display：block(作用是把行属性标签显示成块属性标签，可以设置宽高) ；<br>display：inline(作用是把块属性标签显示成行属性标签，这时块属性标签就不能设置宽高啦)；<br>display：none(作用是使所控制的标签不显示)<br>visibility：hidden(是设置元素的框的不可见，但是在布局中的位置是不变的)<br>它和display：none的区别就在于后者不会占用那个位置，下一个元素会直接覆盖它，而前者是会占用那个布局，只是不显示内容，是    一片空白；并且下载的时候对于display：none就不会把不显示的元素给下载下来，而visibility：hidden则会把不显示的元素给下 载下来；</p>
]]>
    
    </summary>
    
      <category term="CSS" scheme="http://colobu.com/tags/CSS/"/>
    
      <category term="前端开发" scheme="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java bean对象之间复制属性]]></title>
    <link href="http://colobu.com/2014/08/11/Copy-properties-between-java-beans/"/>
    <id>http://colobu.com/2014/08/11/Copy-properties-between-java-beans/</id>
    <published>2014-08-11T07:32:55.000Z</published>
    <updated>2015-07-31T13:28:02.198Z</updated>
    <content type="html"><![CDATA[<p>在现在的企业级Java应用程序中， Java Bean被广泛的应用。 一堆的相关的划分也应运而生， 如DTO, DAO, BO, POJO, VO等。这里不去管这些概念的细节， 如果你感兴趣，可以google之， 比如<a href="http://stackoverflow.com/questions/1612334/difference-between-dto-vo-pojo-javabeans" target="_blank" rel="external">这篇文章</a>。 这里要讨论的问题是如何在不同的Java Bean对象之间复制它们的属性？<br>这有几种情况需要考虑：</p>
<ul>
<li>源对象和目标对象的类型可能不同</li>
<li>只想复制部分的对象</li>
<li>要复制的对象的属性名字不同</li>
<li>如何实现深复制 (deep copy)?</li>
</ul>
<a id="more"></a>
<p>目前有几个Bean copy库可以使用：</p>
<ul>
<li><a href="http://dozer.sourceforge.net/" target="_blank" rel="external">Dozer</a></li>
<li><a href="http://commons.apache.org/proper/commons-beanutils/" target="_blank" rel="external">Apache common-beanutils</a></li>
<li><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/BeanUtils.html" target="_blank" rel="external">Spring BeantUtils class</a></li>
<li>Others</li>
</ul>
<h1 id="Dozer">Dozer</h1>
<p>Dozer是一个功能强大的Bean复制库。 你可以通过Annotation, API或者XML定义Map规则。 XML是最简单，修改方便，非侵入的方式。<br>除了最简单不同类型，不同属性名称的转换外， Dozer还支持：</p>
<ul>
<li>不同类型属性之间的转换，如字符串转为日期类型。 或者定制的类型转换</li>
<li>枚举类型</li>
<li>集合属性复制，并且支持Array，List,Set之间的转换</li>
<li>Map类型的转换</li>
<li>索引属性</li>
<li>深拷贝</li>
<li>部分复制</li>
<li>单向复制</li>
<li>表达式</li>
<li>...</li>
</ul>
<p>除此之外， 它还提供了Spring, JMX, JAXB的集成。</p>
<p>如果，实际上大部分，我们不需要这么强大的功能。 比如我们可能只是需要一个clone的功能。 你可以考虑使用 Apache common-beanutils和Spring BeanUtils类。</p>
<h1 id="Apache_common-beanutils">Apache common-beanutils</h1>
<p>BeanUtils 类提供了两个转换方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> 	copyProperties(Object dest, Object orig)</div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> 	copyProperty(Object bean, String name, Object value)</div></pre></td></tr></table></figure>

<p>第二个方法用来复制一个特定的属性。<br>属性名字必须一样， 类型不一样可能执行默认的数据转换。 执行浅复制。</p>
<p>它还提供了一个<code>clone</code>方法。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">Object</span> 	cloneBean(<span class="built_in">Object</span> bean)</div></pre></td></tr></table></figure>

<h1 id="Spring_BeanUtils">Spring BeanUtils</h1>
<p>Spring BeanUtils提供了更多的功能。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> void 	copyProperties(<span class="built_in">Object</span> source, <span class="built_in">Object</span> target)</div><div class="line">Copy the <span class="keyword">property</span> values <span class="keyword">of</span> the given source bean <span class="keyword">into</span> the target bean.</div><div class="line"><span class="keyword">static</span> void 	copyProperties(<span class="built_in">Object</span> source, <span class="built_in">Object</span> target, <span class="keyword">Class</span>&lt;?&gt; editable)</div><div class="line">Copy the <span class="keyword">property</span> values <span class="keyword">of</span> the given source bean <span class="keyword">into</span> the given target bean, only setting properties defined <span class="keyword">in</span> the given <span class="string">"editable"</span> <span class="keyword">class</span> (<span class="keyword">or</span> <span class="keyword">interface</span>).</div><div class="line"><span class="keyword">static</span> void 	copyProperties(<span class="built_in">Object</span> source, <span class="built_in">Object</span> target, <span class="built_in">String</span>... ignoreProperties)</div><div class="line">Copy the <span class="keyword">property</span> values <span class="keyword">of</span> the given source bean <span class="keyword">into</span> the given target bean, ignoring the given <span class="string">"ignoreProperties"</span>.</div></pre></td></tr></table></figure>

<p>你可以指定要复制的属性 (第二种方法)或者排除部分属性（第三种方法）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在现在的企业级Java应用程序中， Java Bean被广泛的应用。 一堆的相关的划分也应运而生， 如DTO, DAO, BO, POJO, VO等。这里不去管这些概念的细节， 如果你感兴趣，可以google之， 比如<a href="http://stackoverflow.com/questions/1612334/difference-between-dto-vo-pojo-javabeans" target="_blank" rel="external">这篇文章</a>。 这里要讨论的问题是如何在不同的Java Bean对象之间复制它们的属性？<br>这有几种情况需要考虑：</p>
<ul>
<li>源对象和目标对象的类型可能不同</li>
<li>只想复制部分的对象</li>
<li>要复制的对象的属性名字不同</li>
<li>如何实现深复制 (deep copy)?</li>
</ul>
]]>
    
    </summary>
    
      <category term="Java" scheme="http://colobu.com/tags/Java/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[拆解 invokedynamic]]></title>
    <link href="http://colobu.com/2015/06/23/Dismantling-invokedynamic/"/>
    <id>http://colobu.com/2015/06/23/Dismantling-invokedynamic/</id>
    <published>2015-06-23T02:31:55.000Z</published>
    <updated>2015-07-31T13:28:02.198Z</updated>
    <content type="html"><![CDATA[<p>作者: <a href="https://plus.google.com/109266851795683366529" target="_blank" rel="external">Rafael Winterhalter</a>,原文发表在他的博客上：<a href="http://mydailyjava.blogspot.com/2015/03/dismantling-invokedynamic.html" target="_blank" rel="external">Dismantling invokedynamic </a></p>
<p>Many Java developers regarded the JDK’s version seven release as somewhat a disappointment. On the surface, merely a few language and library extensions made it into the release, namely Project Coin and NIO2. But under the covers, the seventh version of the platform shipped the single biggest extension to the JVM’s type system ever introduced after its initial release. Adding the invokedynamic instruction did not only lay the foundation for implementing lambda expressions in Java 8, it also was a game changer for translating dynamic languages into the Java byte code format.</p>
<p>While the invokedynamic instruction is an implementation detail for executing a language on the Java virtual machine, understanding the functioning of this instruction gives true insights into the inner workings of executing a Java program. This article gives a beginner’s view on what problem the invokedynamic instruction solves and how it solves i<br><a id="more"></a></p>
<h3 id="Method_handles">Method handles</h3>
<p>Method handles are often described as a retrofitted version of Java’s reflection API, but this is not what they are meant to represent. While method handles do represent a method, constructor or field, they are not intended to describe properties of these class members. It is for example not possible to directly extract metadata from a method handle such as modifiers or annotation values of the represented method. And while method handles allow for the invocation of a referenced method, their main purpose is to be used together with an invokedynamic call site. For gaining a better understanding of method handles, looking at them as an imperfect replacement for the reflection API is however a reasonable starting point.</p>
<p>Method handles cannot be instantiated. Instead, method handles are created by using a designated lookup object. These objects are themselves created by using a factory method that is provided by the MethodHandles class. Whenever the factory is invoked, it first creates a security context which ensures that the resulting lookup object can only locate methods that are also visible to the class from which the factory method was invoked. A lookup object can then be created as follows:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Example {</div><div class="line">  <span class="keyword">void</span> doSomething() {</div><div class="line">    MethodHandles.Lookup lookup = MethodHandles.lookup();</div><div class="line">  }</div><div class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">foo</span>() { <span class="comment">/* ... */</span> }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>As argued before, the above lookup object could only be used to locate methods that are also visible to the Example class such as foo. It would for example be impossible to look up a private method of another class. This is a first major difference to using the reflection API where private methods of outside classes can be located just as any other method and where these methods can even be invoked after marking such a method as accessible. Method handles are therefore sensible of their creation context which is a first major difference to the reflection API.</p>
<p>Apart from that, a method handle is more specific than the reflection API by describing a specific type of method rather than representing just any method. In a Java program, a method&#39;s type is a composite of both the method&#39;s return type and the types of its parameters. For example, the only method of the following Counter class returns an int representing the number of characters of the only String-typed argument:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Counter {</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> count(String name) {</div><div class="line">    <span class="keyword">return</span> name.length();</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>A representation of this method&#39;s type can be created by using another factory. This factory is found in the MethodType class which also represents instances of created method types. Using this factory, the method type for Counter::count can be created by handing over the method&#39;s return type and its parameter types bundled as an array:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MethodType methodType = MethodType.methodType(<span class="keyword">int</span>.class, <span class="keyword">new</span> Class&lt;?&gt;[] {String.class});</div></pre></td></tr></table></figure>

<p>By using the lookup object that was created before and the above method type, it is now possible to locate a method handle that represents the Counter::count method as depicted in the following code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MethodType methodType = MethodType.methodType(<span class="keyword">int</span>.class, <span class="keyword">new</span> Class&lt;?&gt;[] {String.class});</div><div class="line">MethodHandles.Lookup lookup = MethodHandles.lookup();</div><div class="line">MethodHandle methodHandle = lookup.findStatic(Counter.class, <span class="string">"count"</span>, methodType);</div><div class="line"><span class="keyword">int</span> count = methodHandle.invokeExact(<span class="string">"foo"</span>);</div><div class="line">assertThat(count, is(<span class="number">3</span>));</div></pre></td></tr></table></figure>

<p>At first glance, using a method handle might seem like an overly complex version of using the reflection API. However, keep in mind that the direct invocation of a method using a handle is not the main intent of its use.</p>
<p>The main difference of the above example code and of invoking a method via the reflection API is only revealed when looking into the differences of how the Java compiler translates both invocations into Java byte code. When a Java program invokes a method, this method is uniquely identified by its name and by its (non-generic) parameter types and even by its return type. It is for this reason that it is possible to overload methods in Java. And even though the Java programming language does not allow it, the JVM does in theory allow to overload a method by its return type.</p>
<p>Following this principle, a reflective method call is executed as a common method call of the Method::invoke method. This method is identified by its two parameters which are of the types Object and Object[]. In addition to this, the method is identified by its Object return type. Because of this signature, all arguments to this method need to always be boxed and enclosed in an array. Similarly, the return value needs to be boxed if it was primitive or null is returned if the method was void.</p>
<p>Method handles are the exception to this rule. Instead of invoking a method handle by referring to the signature of MethodHandle::invokeExact signature which takes an Object[] as its single argument and returns Object, method handles are invoked by using a so-called polymorphic signature. A polymorphic signature is created by the Java compiler dependant on the types of the actual arguments and the expected return type at a call site. For example, when invoking the method handle as above with</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> count = methodHandle.invokeExact(<span class="string">"foo"</span>);</div></pre></td></tr></table></figure>

<p>the Java compiler translates this invocation as if the invokeExact method was defined to accept a single single argument of type String and returning an int type. Obviously, such a method does not exist and for (almost) any other method, this would result in a linkage error at runtime. For method handles, the Java Virtual Machine does however recognize this signature to be polymorphic and treats the invocation of the method handle as if the Counter::count method that the handle refers to was inset directly into the call site. Thus, the method can be invoked without the overhead of boxing primitive values or the return type and without placing the argument values inside an array.</p>
<p>At the same time, when using the invokeExact invocation, it is guaranteed to the Java virtual machine that the method handle always references a method at runtime that is compatible to the polymorphic signature. For the example, the JVM expected that the referenced method actually accepts a String as its only argument and that it returns a primitive int. If this constraint was not fulfilled, the execution would instead result in a runtime error. However, any other method that accepts a single String and that returns a primitive int could be successfully filled into the method handle&#39;s call site to replace Counter::count.</p>
<p>In contrast, using the Counter::count method handle at the following three invocations would result in runtime errors, even though the code compiles successfully:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> count1 = methodHandle.invokeExact((Object) <span class="string">"foo"</span>);</div><div class="line"><span class="keyword">int</span> count2 = (Integer) methodHandle.invokeExact(<span class="string">"foo"</span>);</div><div class="line">methodHandle.invokeExact(<span class="string">"foo"</span>);</div></pre></td></tr></table></figure>

<p>The first statement results in an error because the argument that is handed to the handle is too general. While the JVM expected a String as an argument to the method, the Java compiler suggested that the argument would be an Object type. It is important to understand that the Java compiler took the casting as a hint for creating a different polymorphic signature with an Object type as a single parameter type while the JVM expected a String at runtime. Note that this restriction also holds for handing too specific arguments, for example when casting an argument to an Integer where the method handle required a Number type as its argument. In the second statement, the Java compiler suggested to the runtime that the handle&#39;s method would return an Integer wrapper type instead of the primitive int. And without suggesting a return type at all in the third statement, the Java compiler implicitly translated the invocation into a void method call. Hence, invokeExact really does mean exact.</p>
<p>This restriction can sometimes be too harsh. For this reason, instead of requiring an exact invocation, the method handle also allows for a more forgiving invocation where conversions such as type castings and boxings are applied. This sort of invocation can be applied by using the MethodHandle::invoke method. Using this method, the Java compiler still creates a polymorphic signature. This time, the Java virtual machine does however test the actual arguments and the return type for compatibility at run time and converts them by applying boxings or castings, if appropriate. Obviously, these transformations can sometimes add a runtime overhead. </p>
<h3 id="Fields,_methods_and_constructors:_handles_as_a_unified_interface">Fields, methods and constructors: handles as a unified interface</h3>
<p>Other than Method instances of the reflection API, method handles can equally reference fields or constructors. The name of the MethodHandle type could therefore be seen as too narrow. Effectively, it does not matter what class member is referenced via a method handle at runtime as long as its MethodType, another type with a misleading name, matches the arguments that are passed at the associated call site.</p>
<p>Using the appropriate factories of a MethodHandles.Lookup object, a field can be looked up to represent a getter or a setter. Using getters or setters in this context does not refer to invoking an actual method that follows the Java bean specification. Instead, the field-based method handle directly reads from or writes to the field but in shape of a method call via invoking the method handle. By representing such field access via method handles, field access or method invocations can be used interchangeably.</p>
<p>As an example for such interchange, take the following class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Bean {</div><div class="line">  String value;</div><div class="line">  <span class="keyword">void</span> print(String x) {</div><div class="line">    System.out.println(x);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>For the above Bean class, the following method handles can be used for either writing a string to the value field or for invoking the print method with the same string as an argument:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MethodHandle fieldHandle = lookup.findSetter(Bean.class, <span class="string">"value"</span>, String.class);</div><div class="line">MethodType methodType = MethodType.methodType(<span class="keyword">void</span>.class, <span class="keyword">new</span> Class&lt;?&gt;[] {String.class});</div><div class="line">MethodHandle methodHandle = lookup.findVirtual(Bean.class, <span class="string">"print"</span>, methodType);</div></pre></td></tr></table></figure>

<p>As long as the method handle call site is handed an instance of Bean together with a String while returning void, both method handles could be used interchangeably as shown here:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">anyHandle.invokeExact((Bean) mybean, (String) myString);</div></pre></td></tr></table></figure>

<p>Note that the polymorphic signature of the above call site does not match the method type of the above handle. However, within Java byte code, non-static methods are invoked as if they were static methods with where the this reference is handed as a first, implicit argument. A non-static method&#39;s nominal type does therefore diverge from its actual runtime type. Similarly, access to a non-static field requires an instance to be access.</p>
<p>Similarly to fields and methods, it is possible to locate and invoke constructors which are considered as methods with a void return value for their nominal type. Furthermore, one can not only invoke a method directly but even invoke a super method as long as this super method is reachable for the class from which the lookup factory was created. In contrast, invoking a super method is not possible at all when relying on the reflection API. If required, it is even possible to return a constant value from a handle.</p>
<h3 id="Performance_metrics">Performance metrics</h3>
<p>Method handles are often described as being a more performant as the Java reflection API. At least for recent releases of the HotSpot virtual machine, this is not true. The simplest way of proving this is <a href="https://gist.github.com/raphw/881e1745996f9d314ab0" target="_blank" rel="external">writing an appropriate benchmark</a>. Then again, is not all too simple to write a benchmark for a Java program which is optimized while it is executed. The de facto standard for writing a benchmark has become using JMH, a harness that ships under the OpenJDK umbrella. The full benchmark can be found as a gist in my GitHub profile. In this article, only the most important aspects of this benchmark are covered.</p>
<p>From the benchmark, it becomes obvious that reflection is already implemented quite efficiently. Modern JVMs know a concept named inflation where a frequently invoked reflective method call is replaced with runtime generated Java byte code. What remains is the overhead of applying the boxing for passing arguments and receiving a return values. These boxings can sometimes be eliminated by the JVM&#39;s Just-in-time compiler but this is not always possible. For this reason, using method handles can be more performant than using the reflection API if method calls involve a significant amount of primitive values. This does however require that the exact method signatures are already known at compile time such that the appropriate polymorphic signature can be created. For most use cases of the reflection API, this guarantee can however not be given because the invoked method&#39;s types are not known at compile time. In this case, using method handles does not offer any performance benefits and should not be used to replace it.</p>
<h3 id="Creating_an_invokedynamic_call_site">Creating an invokedynamic call site</h3>
<p>Normally, invokedynamic call sites are created by the Java compiler only when it needs to translate a lambda expression into byte code. It is worthwhile to note that lambda expressions could have been implemented without invokedynamic call sites altogether, for example by converting them into anonymous inner classes. As a main difference to the suggested approach, using invokedynamic delays the creation of a similar class to runtime. We are looking into class creation in the next section. For now, bear however in mind that invokedynamic does not have anything to do with class creation, it only allows to delay the decision of how to dispatch a method until runtime.</p>
<p>For a better understanding of invokedynamic call sites, it helps to create such call sites explicitly in order to look at the mechanic in isolation. To do so, the following example makes use of <a href="https://github.com/raphw/byte-buddy" target="_blank" rel="external">my code generation framework Byte Buddy</a> which provides explicit byte code generation of invokedynamic call sites without requiring a any knowledge of the byte code format.</p>
<p>Any invokedynamic call site eventually yields a MethodHandle that references the method to be invoked. Instead of invoking this method handle manually, it is however up to the Java runtime to do so. Because method handles have become a known concept to the Java virtual machine, these invocations are then optimized similarly to a common method call. Any such method handle is received from a so-called bootstrap method which is nothing more than a plain Java method that fulfills a specific signature. For a trivial example of a bootstrap method, look at the following code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Bootstrapper {</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> CallSite <span class="title">bootstrap</span>(Object... args) <span class="keyword">throws</span> Throwable {</div><div class="line">    MethodType methodType = MethodType.methodType(<span class="keyword">int</span>.class, <span class="keyword">new</span> Class&lt;?&gt;[] {String.class})</div><div class="line">    MethodHandles.Lookup lookup = MethodHandles.lookup();</div><div class="line">    MethodHandle methodHandle = lookup.findStatic(Counter.class, <span class="string">"count"</span>, methodType);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ConstantCallSite(methodHandle);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>For now, we do not care much about the arguments of the method. Instead, notice that the method is static what is as a matter of fact a requirement. Within Java byte code, an invokedynamic call site references the full signature of a bootstrap method but not a specific object which could have a state and a life cycle. Once the invokedynamic call site is invoked, control flow is handed to the referenced bootstrap method which is now responsible for identifying a method handle. Once this method handle is returned from the bootstrap method, it is invoked by the Java runtime.</p>
<p>As obvious from the above example, a MethodHandle is not returned directly from a bootstrap method. Instead, the handle is wrapped inside of a CallSite object. Whenever a bootstrap method is invoked, the invokedynamic call site is later permanently bound to the CallSite object that is returned from this method. Consequently, a bootstrap method is only invoked a single time for any call site. Thanks to this intermediate CallSite object, it is however possible to exchange the referenced MethodHandle at a later point. For this purpose, the Java class library already offers different implementations of CallSite. We have already seen a ConstantCallSite in the example code above. As the name suggests, a ConstantCallSite always references the same method handle without a possibility of a later exchange. Alternatively, it is however also possible to for example use a MutableCallSite which allows to change the referenced MethodHandle at a later point in time or it is even possible to implement a custom CallSite class.</p>
<p>With the above bootstrap method and Byte Buddy, we can now implement a custom invokedynamic instruction. For this, Byte Buddy offers the InvokeDynamic instrumentation that accepts a bootstrap method as its only mandatory argument. Such instrumentations are then fed to Byte Buddy. Assuming the following class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> class Example {</div><div class="line">  <span class="keyword">abstract</span> <span class="keyword">int</span> method();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>we can use Byte Buddy to subclass Example in order to override method. We are then going to implement this method to contain a single invokedynamic call site. Without any further configuration, Byte Buddy creates a polymorphic signature that resembles the method type of the overridden method. However, for non-static methods, the this reference is set as a first, implicit argument. Assuming that we want to bind the Counter::count method which expects a String as a single argument, we could not bind this handle to Example::method because of this type mismatch. Therefore, we need to create a different call site without the implicit argument but with an String in its place. This can be achieved by using Byte Buddy&#39;s domain specific language:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Instrumentation invokeDynamic = InvokeDynamic</div><div class="line"> .bootstrap(Bootstrapper.class.getDeclaredMethod(“bootstrap”, Object[].class))</div><div class="line"> .withoutImplicitArguments()</div><div class="line"> .withValue(<span class="string">"foo"</span>);</div></pre></td></tr></table></figure>

<p>With this instrumentation in place, we can finally extend the Example class and override method to implement the invokedynamic call site as in the following code snippet:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Example example = <span class="keyword">new</span> ByteBuddy()</div><div class="line">  .subclass(Example.class)</div><div class="line">   .method(named(“method”)).intercept(invokeDynamic)</div><div class="line">   .make()</div><div class="line">   .load(Example.class.getClassLoader(), </div><div class="line">         ClassLoadingStrategy.Default.INJECTION)</div><div class="line">   .getLoaded()</div><div class="line">   .newInstance();</div><div class="line"><span class="keyword">int</span> result = example.method();</div><div class="line">assertThat(result, is(<span class="number">3</span>));</div></pre></td></tr></table></figure>

<p>As obvious from the above assertion, the characters of the &quot;foo&quot; string were counted correctly. By setting appropriate break points in the code, it is further possible to validate that the bootstrap method is called and that control flow further reaches the Counter::count method.</p>
<p>So far, we did not gain much from using an invokedynamic call site. The above bootstrap method would always bind Counter::count and can therefore only produce a valid result if the invokedynamic call site really wanted to transform a String into an int. Obviously, bootstrap methods can however be more flexible thanks to the arguments they receive from the invokedynamic call site. Any bootstrap method receives at least three arguments:</p>
<p>As a first argument, the bootstrap method receives a MethodHandles.Lookup object. The security context of this object is that of the class that contains the invokedynamic call site that triggered the bootstrapping. As discussed before, this implies that private methods of the defining class could be bound to the invokedynamic call site using this lookup instance.<br>The second argument is a String representing a method name. This string serves as a hint to indicate from the call site which method should be bound to it. Strictly speaking, this argument is not required as it is perfectly legal to bind a method with another name. Byte Buddy simply serves the the name of the overridden method as this argument, if not specified differently.<br>Finally, the MethodType of the method handle that is expected to be returned is served as a third argument. For the example above, we specified explicitly that we expect a String as a single parameter. At the same time, Byte Buddy derived that we require an int as a return value from looking at the overridden method, as we again did not specify any explicit return type.</p>
<p>It is up to the implementor of a bootstrap method what exact signature this method should portray as long as it can at least accept these three arguments. If the last parameter of a bootstrap method represents an Object array, this last parameter is treated as a varargs and can therefore accept any excess arguments. This is also the reason why the above example bootstrap method is valid.</p>
<p>Additionally, a bootstrap method can receive several arguments from an invokedynamic call site as long as these arguments can be stored in a class&#39;s constant pool. For any Java class, a constant pool stores values that are used inside of a class, largely numbers or string values. As of today, such constants can be primitive values of at least 32 bit size, Strings, Classes, MethodHandles and MethodTypes. This allows bootstrap methods to be used more flexible, if locating a suitable method handle requires additional information in form of such arguments. </p>
<h3 id="Lambda_expressions">Lambda expressions</h3>
<p>Whenever the Java compiler translates a lambda expression into byte code, it copies the lambda&#39;s body into a private method inside of the class in which the expression is defined. These methods are named lambda$X$Y with X being the name of the method that contains the lambda expression and with Y being a zero-based sequence number. The parameters of such a method are those of the functional interface that the lambda expression implements. Given that the lambda expression makes no use of non-static fields or methods of the enclosing class, the method is also defined to be static.</p>
<p>For compensation, the lambda expression is itself substituted by an invokedynamic call site. On its invocation, this call site requests the binding of a factory for an instance of the functional interface. As arguments to this factory, the call site supplies any values of the lambda expression&#39;s enclosing method which are used inside of the expression and a reference to the enclosing instance, if required. As a return type, the factory is required to provide an instance of the functional interface.</p>
<p>For bootstrapping a call site, any invokedynamic instruction currently delegates to the LambdaMetafactory class which is included in the Java class library. This factory is then responsible for creating a class that implements the functional interface and which invokes the appropriate method that contains the lambda&#39;s body which, as described before, is stored in the original class. In the future, this bootstrapping process might however change which is one of the major advantages of using invokedynamic for implementing lambda expressions. If one day, a better suited language feature was available for implementing lambda expressions, the current implementation could simply be swapped out.</p>
<p>In order to being able to create a class that implements the functional interface, any call site representing a lambda expression provides additional arguments to the bootstrap method. For the obligatory arguments, it already provides the name of the functional interface&#39;s method. Also, it provides a MethodType of the factory method that the bootstrapping is supposed to yield as a result. Additionally, the bootstrap method is supplied another MethodType that describes the signature of the functional interface&#39;s method. To that, it receives a MethodHandle referencing the method that contains the lambda&#39;s method body. Finally, the call site provides a MethodType of the generic signature of the functional interface&#39;s method, i.e. the signature of the method at the call site before type-erasure was applied.</p>
<p>When invoked, the bootstrap method looks at these arguments and creates an appropriate implementation of a class that implements the functional interface. This class is created using the <a href="http://asm.ow2.org/" target="_blank" rel="external">ASM library</a>, a low-level byte code parser and writer that has become the de facto standard for direct Java byte code manipulation. Besides implementing the functional interface&#39;s method, the bootstrap method also adds an appropriate constructor and a static factory method for creating instances of the class. It is this factory method that is later bound to the invokedyanmic call site. As arguments, the factory receives an instance to the lambda method&#39;s enclosing instance, in case it is accessed and also any values that are read from the enclosing method.</p>
<p>As an example, consider the following lambda expression:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Foo {</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">void</span> bar(<span class="keyword">int</span> j) {</div><div class="line">    Consumer consumer = k -&gt; System.out.println(i + j + k);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>In order to be executed, the lambda expression requires access to both the enclosing instance of Foo and to the value j of its enclosing method. Therefore, the desugared version of the above class looks something like the following where the invokedynamic instruction is represented by some pseudo-code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Foo {</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">void</span> bar(<span class="keyword">int</span> j) {</div><div class="line">    Consumer consumer = &lt;invokedynamic(<span class="keyword">this</span>, j)&gt;;</div><div class="line">  }</div><div class="line">  <span class="keyword">private</span> /* non-<span class="keyword">static</span> */ <span class="keyword">void</span> lambda$foo$0(<span class="keyword">int</span> j, <span class="keyword">int</span> k) {</div><div class="line">    System.out.println(<span class="keyword">this</span>.i + j + k);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>In order to being able to invoke lambda$foo$0, both the enclosing Foo instance and the j variable are handed to the factory that is bound by the invokedyanmic instruction. This factory then receives the variables it requires in order to create an instance of the generated class. This generated class would then look something like the following:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Foo$$Lambda$<span class="number">0</span> implements Consumer {</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Foo _this;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> j;</div><div class="line">  <span class="keyword">private</span> Foo$$Lambda$0(Foo _this, <span class="keyword">int</span> j) {</div><div class="line">    <span class="keyword">this</span>._this = _this;</div><div class="line">    <span class="keyword">this</span>.j = j;</div><div class="line">  }</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Consumer get$<span class="title">Lambda</span>(Foo _this, <span class="keyword">int</span> j) {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Foo$$Lambda$<span class="number">0</span>(_this, j);</div><div class="line">  }</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span>(Object value) { <span class="comment">// type erasure</span></div><div class="line">    _this.lambda$foo$<span class="number">0</span>(_this, j, (Integer) value);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Eventually, the factory method of the generated class is bound to the invokedynamic call site via a method handle that is contained by a ConstantCallSite. However, if the lambda expression is fully stateless, i.e. it does not require access to the instance or method in which it is enclosed, the LambdaMetafactory returns a so-called constant method handle that references an eagerly created instance of the generated class. Hence, this instance serves as a singleton to be used for every time that the lambda expression&#39;s call site is reached. Obviously, this optimization decision affects your application&#39;s memory footprint and is something to keep in mind when writing lambda expressions. Also, no factory method is added to a class of a stateless lambda expression.</p>
<p>You might have noticed that the lambda expression&#39;s method body is contained in a private method which is now invoked from another class. Normally, this would result in an illegal access error. To overcome this limitation, the generated classes are loaded using so-called anonymous class loading. Anonymous class loading can only be applied when a class is loaded explicitly by handing a byte array. Also, it is not normally possible to apply anonymous class loading in user code as it is hidden away in the internal classes of the Java class library. When a class is loaded using anonymous class loading, it receives a host class of which it inherits its full security context. This involves both method and field access rights and the protection domain such that a lambda expression can also be generated for signed jar files. Using this approch, lambda expression can be considered more secure than anonymous inner classes because private methods are never reachable from outside of a class.</p>
<h3 id="Under_the_covers:_lambda_forms">Under the covers: lambda forms</h3>
<p>Lambda forms are an implementation detail of how MethodHandles are executed by the virtual machine. Because of their name, lambda forms are however often confused with lambda expressions. Instead, lambda forms are inspired by lambda calculus and received their name for that reason, not for their actual usage to implement lambda expressions in the OpenJDK.</p>
<p>In earlier versions of the OpenJDK 7, method handles could be executed in one of two modes. Method handles were either directly rendered as byte code or they were dispatched using explicit assembly code that was supplied by the Java runtime. The byte code rendering was applied to any method handle that was considered to be fully constant throughout the lifetime of a Java class. If the JVM could however not prove this property, the method handle was instead executed by dispatching it to the supplied assembly code. Unfortunately, because assembly code cannot be optimized by Java&#39;s JIT-compiler, this lead to non-constant method handle invocations to &quot;fall off the performance cliff&quot;. As this also affected the lazily bound lambda expressions, this was obviously not a satisfactory solution.</p>
<p>LambdaForms were introduced to solve this problem. Roughly speaking, lambda forms represent byte code instructions which, as stated before, can be optimized by a JIT-compiler. In the OpenJDK, a MethodHandle&#39;s invocation semantics are today represented by a LambdaForm to which the handle carries a reference. With this optimizable intermediate representation, the use of non-constant MethodHandles has become significantly more performant. As a matter of fact, it is even possible to see a byte-code compiled LambdaForm in action. Simply place a break point inside of a bootstrap method or inside of a method that is invoked via a MethodHandle. Once the break point kicks it, the byte code-translated LambdaForms can be found on the call stack.</p>
<h3 id="Why_this_matters_for_dynamic_languages">Why this matters for dynamic languages</h3>
<p>Any language that should be executed on the Java virtual machine needs to be translated to Java byte code. And as the name suggests, Java byte code aligns rather close to the Java programming language. This includes the requirement to define a strict type for any value and before invokedynamic was introduced, a method call required to specify an explicit target class for dispatching a method. Looking at the following JavaScript code, specifying either information is however not possible when translating the method into byte code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function (foo) {</div><div class="line">  foo.bar();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Using an invokedynamic call site, it has become possible to delay the identification of the method&#39;s dispatcher until runtime and furthermore, to rebind the invocation target, in case that a previous decision needs to be corrected. Before, using the reflection API with all of its performance drawbacks was the only real alternative to implementing a dynamic language.</p>
<p>The real profiteer of the invokedynamic instruction are therefore dynamic programming languages. Adding the instruction was a first step away from aligning the byte code format to the Java programming language, making the JVM a powerful runtime even for dynamic languages. And as lambda expressions proved, this stronger focus on hosting dynamic languages on the JVM does neither interfere with evolving the Java language. In contrast, the Java programming languages gained from these efforts.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>作者: <a href="https://plus.google.com/109266851795683366529" target="_blank" rel="external">Rafael Winterhalter</a>,原文发表在他的博客上：<a href="http://mydailyjava.blogspot.com/2015/03/dismantling-invokedynamic.html" target="_blank" rel="external">Dismantling invokedynamic </a></p>
<p>Many Java developers regarded the JDK’s version seven release as somewhat a disappointment. On the surface, merely a few language and library extensions made it into the release, namely Project Coin and NIO2. But under the covers, the seventh version of the platform shipped the single biggest extension to the JVM’s type system ever introduced after its initial release. Adding the invokedynamic instruction did not only lay the foundation for implementing lambda expressions in Java 8, it also was a game changer for translating dynamic languages into the Java byte code format.</p>
<p>While the invokedynamic instruction is an implementation detail for executing a language on the Java virtual machine, understanding the functioning of this instruction gives true insights into the inner workings of executing a Java program. This article gives a beginner’s view on what problem the invokedynamic instruction solves and how it solves i<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://colobu.com/tags/Java/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RecyclerView的拖动和滑动 第一部分 ：基本的ItemTouchHelper示例]]></title>
    <link href="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/"/>
    <id>http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/</id>
    <published>2015-09-16T01:31:27.000Z</published>
    <updated>2015-09-16T01:58:29.467Z</updated>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf" target="_blank" rel="external">Drag and Swipe with RecyclerView </a><br>翻译: <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0630/3123.html" target="_blank" rel="external">RecyclerView的拖动和滑动 第一部分 ：基本的ItemTouchHelper示例</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a><br>另一个翻译: <a href="https://github.com/bboyfeiyu/android-tech-frontier/blob/master/issue-18/%E6%8B%96%E6%8B%BDRecyclerView.md" target="_blank" rel="external">拖拽RecyclerView</a> by <a href="https://github.com/objectlife" target="_blank" rel="external">objectlife</a></p>
<p><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/1.gif" alt=""><br>在安卓中，有许多关于如何使用RecyclerView实现<strong>“drag &amp; drop”</strong> 与 <strong>“wipe-to-dismiss”</strong>的教程，库和例子。即使现在已经有了新的，更优的实现方式，大多数仍然是使用老旧的<a href="http://developer.android.com/guide/topics/ui/drag-drop.html" target="_blank" rel="external">View.OnDragListener</a>以及Roman Nurik在<a href="https://github.com/romannurik/Android-SwipeToDismiss" target="_blank" rel="external">SwipeToDismiss</a>中所使用的方法。很少有人使用新的api，反而要么经常依赖于<code>GestureDetectors</code>和<code>onInterceptTouchEvent</code>，要么实现方式很复杂。实际上，在RecyclerView上添加拖动特性有一个非常简单的方法。这个方法只需要一个类，并且它也是Android 兼容包的一部分，它就是：</p>
<h4 style="text-align: center;"><a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" data-href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" class="markup--anchor markup--h4-anchor" rel="external" target="_blank">ItemTouchHelper</a></h4>

<p>ItemTouchHelper是一个强大的工具，它处理好了关于在RecyclerView上添加拖动排序与滑动删除的所有事情。它是RecyclerView.ItemDecoration的子类，也就是说它可以轻易的添加到几乎所有的LayoutManager和Adapter中。它还可以和现有的item动画一起工作，提供受类型限制的拖放动画等等，</p>
<p>这篇文章中，我会演示一个ItemTouchHelper的简单实现，然后在这个系列文章的后面部分，我们将拓展范围，探索一些新的特性。<br><a id="more"></a></p>
<h3 id="跳过开头部分">跳过开头部分</h3>
<p>只对完整源码感兴趣？直接跳到github： <a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo" target="_blank" rel="external">Android-ItemTouchHelper-Demo</a>。第一次提交的代码和本文的内容相对应。 在这里下载<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/releases" target="_blank" rel="external">demo apk</a> 。</p>
<h3 id="设置">设置</h3>
<p>第一件事是RecyclerView的基本设置，修改build.gradle，添加RecyclerView的依赖。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:22.2.0'</span></div></pre></td></tr></table></figure>

<p>ItemTouchHelper可以与几乎任意的RecyclerView.Adapter 和 LayoutManager使用，但是本文建立了几个基本的文件，可以在Gist上找到：<br><a href="https://gist.github.com/iPaulPro/2216ea5e14818056cfcc" target="_blank" rel="external">https://gist.github.com/iPaulPro/2216ea5e14818056cfcc</a></p>
<h3 id="使用_ItemTouchHelper_和_ItemTouchHelper-Callback">使用 ItemTouchHelper 和 ItemTouchHelper.Callback</h3>
<p>要使用ItemTouchHelper，你需要创建一个<a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html" target="_blank" rel="external">ItemTouchHelper.Callback</a>。这个接口可以让你监听“move”与 “swipe”事件。这里还是控制view被选中的状态以及重写默认动画的地方。如果你只是想要一个基本的实现，有一个帮助类可以使用：<a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.SimpleCallback.html" target="_blank" rel="external">SimpleCallback</a>,但是为了了解其工作机制，我们还是自己实现。</p>
<p>启用基本的拖动排序与滑动删除需要重写的主要回调方法是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getMovementFlags(RecyclerView, ViewHolder)</div><div class="line">onMove(RecyclerView, ViewHolder, ViewHolder)</div><div class="line">onSwiped(ViewHolder, <span class="keyword">int</span>)</div></pre></td></tr></table></figure>

<p>我也需要两个帮助方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">isLongPressDragEnabled()</div><div class="line">isItemViewSwipeEnabled()</div></pre></td></tr></table></figure>

<p>我们将一一解答上面的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder) {</div><div class="line">    <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;</div><div class="line">    <span class="keyword">int</span> swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;</div><div class="line">    <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>ItemTouchHelper可以让你轻易得到一个事件的方向。你需要重写<strong>getMovementFlags()</strong>方法来指定可以支持的拖放和滑动的方向。使用<strong>helperItemTouchHelper.makeMovementFlags(int, int)</strong>来构造返回的flag。这里我们启用了上下左右两种方向。注：上下为拖动（drag），左右为滑动（swipe）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLongPressDragEnabled</span>() {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>ItemTouchHelper可以用于没有滑动的拖动操作（或者反过来），你必须指明你到底要支持哪一种。要支持长按RecyclerView item进入拖动操作，你必须在<strong>isLongPressDragEnabled()</strong>方法中返回true。或者，也可以调用<strong>ItemTouchHelper.startDrag(RecyclerView.ViewHolder) </strong>方法来开始一个拖动。这会在后面讲到。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isItemViewSwipeEnabled</span>() {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>而要在view任意位置触摸事件发生时启用滑动操作，则直接在<strong>isItemViewSwipeEnabled()</strong>中返回true就可以了。或者，你也主动调用<strong>ItemTouchHelper.startSwipe(RecyclerView.ViewHolder) </strong>来开始滑动操作。</p>
<p>接下来的两个是<strong>onMove()</strong>和<strong>onSwiped()</strong>，用于通知底层数据的更新。首先我们创建一个可以将这些回调方法传递出去的接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemTouchHelperAdapter</span> </span>{</div><div class="line"> </div><div class="line">    <span class="keyword">void</span> onItemMove(<span class="keyword">int</span> fromPosition, <span class="keyword">int</span> toPosition);</div><div class="line"> </div><div class="line">    <span class="keyword">void</span> onItemDismiss(<span class="keyword">int</span> position);</div><div class="line">}</div></pre></td></tr></table></figure>

<p><a href="https://gist.github.com/iPaulPro/5d43325ac7ae579760a9" target="_blank" rel="external">ItemTouchHelperAdapter.java Gist</a></p>
<p>以本例来说，最简单的方法就是在我们的<strong>RecyclerListAdapter</strong> 中实现这个listener。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerListAdapter</span> <span class="keyword">extends</span> </span></div><div class="line">        <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">ItemViewHolder</span>&gt; </div><div class="line">        <span class="keyword">implements</span> <span class="title">ItemTouchHelperAdapter</span> {<span class="comment">// ... code from gist</span></div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemDismiss</span>(<span class="keyword">int</span> position) {</div><div class="line">    mItems.remove(position);</div><div class="line">    notifyItemRemoved(position);</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemMove</span>(<span class="keyword">int</span> from, <span class="keyword">int</span> to) {</div><div class="line">    Collections.swap(mItems, from, to);</div><div class="line">    notifyItemMoved(from, to);</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>notifyItemRemoved()</strong>和 <strong>notifyItemMoved()</strong>的调用非常重要，有了它们Adapter才能知道发生了改变。同时还需要注意的是每当一个view切换到了一个新的索引时，我们都需要改变item的位置，<strong>而不是在拖动事件结束的时候</strong>。</p>
<p>现在我们回来创建我们的<strong>SimpleItemTouchHelperCallback</strong>，我们仍然需要重写<strong>onMove()</strong> 和 <strong>onSwiped()</strong>。</p>
<p>首先我们添加一个构造函数以及一个引用adapter的成员变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ItemTouchHelperAdapter mAdapter;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="title">SimpleItemTouchHelperCallback</span>(</div><div class="line">        ItemTouchHelperAdapter adapter) {</div><div class="line">    mAdapter = adapter;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后重写剩下的事件同时通知adapter：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMove</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder, </div><div class="line">        RecyclerView.ViewHolder target) {</div><div class="line">    mAdapter.onItemMove(viewHolder.getAdapterPosition(), </div><div class="line">            target.getAdapterPosition());</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwiped</span>(RecyclerView.ViewHolder viewHolder, </div><div class="line">        <span class="keyword">int</span> direction) {</div><div class="line">    mAdapter.onItemDismiss(viewHolder.getAdapterPosition());</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这样Callback类大致如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleItemTouchHelperCallback</span> <span class="keyword">extends</span> <span class="title">ItemTouchHelper</span>.<span class="title">Callback</span> </span>{</div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ItemTouchHelperAdapter mAdapter;</div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="title">SimpleItemTouchHelperCallback</span>(ItemTouchHelperAdapter adapter) {</div><div class="line">        mAdapter = adapter;</div><div class="line">    }</div><div class="line">     </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLongPressDragEnabled</span>() {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">  </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isItemViewSwipeEnabled</span>() {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">  </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span>(RecyclerView recyclerView, ViewHolder viewHolder) {</div><div class="line">        <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;</div><div class="line">        <span class="keyword">int</span> swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;</div><div class="line">        <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">    }</div><div class="line">  </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMove</span>(RecyclerView recyclerView, ViewHolder viewHolder, </div><div class="line">            ViewHolder target) {</div><div class="line">        mAdapter.onItemMove(viewHolder.getAdapterPosition(), target.getAdapterPosition());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">  </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwiped</span>(ViewHolder viewHolder, <span class="keyword">int</span> direction) {</div><div class="line">        mAdapter.onItemDismiss(viewHolder.getAdapterPosition());</div><div class="line">    }</div><div class="line">  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Callback准备好了之后，我们就可以创建我们的ItemTouchHelper并调用<strong>attachToRecyclerView(RecyclerView)</strong> 了（参见<a href="https://gist.github.com/iPaulPro/2216ea5e14818056cfcc#file-mainfragment-java" target="_blank" rel="external">MainFragment.java</a>）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ItemTouchHelper.Callback callback = </div><div class="line">    <span class="keyword">new</span> SimpleItemTouchHelperCallback(adapter);</div><div class="line">ItemTouchHelper touchHelper = <span class="keyword">new</span> ItemTouchHelper(callback);</div><div class="line">touchHelper.attachToRecyclerView(recyclerView);</div></pre></td></tr></table></figure>

<p>运行之后，你可以看到如下的效果：<br><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/2.gif" alt=""></p>
<h3 id="结束语">结束语</h3>
<p>这是一个ItemTouchHelper的简单实现。但是已经阐明了在RecyclerView上实现拖动排序与滑动删除时根本不需要第三方库的。在下一部分中，我们将对被拖动或者滑动的item做更多外观上的控制。</p>
<h3 id="源代码">源代码</h3>
<p>我在github上创建了一个覆盖这个系列文章的项目：<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo" target="_blank" rel="external">Android-ItemTouchHelper-Demo</a>。第一次提交的代码和这部分相对应的，也有点第二部分的内容。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>英文原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf" target="_blank" rel="external">Drag and Swipe with RecyclerView </a><br>翻译: <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0630/3123.html" target="_blank" rel="external">RecyclerView的拖动和滑动 第一部分 ：基本的ItemTouchHelper示例</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a><br>另一个翻译: <a href="https://github.com/bboyfeiyu/android-tech-frontier/blob/master/issue-18/%E6%8B%96%E6%8B%BDRecyclerView.md" target="_blank" rel="external">拖拽RecyclerView</a> by <a href="https://github.com/objectlife" target="_blank" rel="external">objectlife</a></p>
<p><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/1.gif" alt=""><br>在安卓中，有许多关于如何使用RecyclerView实现<strong>“drag &amp; drop”</strong> 与 <strong>“wipe-to-dismiss”</strong>的教程，库和例子。即使现在已经有了新的，更优的实现方式，大多数仍然是使用老旧的<a href="http://developer.android.com/guide/topics/ui/drag-drop.html" target="_blank" rel="external">View.OnDragListener</a>以及Roman Nurik在<a href="https://github.com/romannurik/Android-SwipeToDismiss" target="_blank" rel="external">SwipeToDismiss</a>中所使用的方法。很少有人使用新的api，反而要么经常依赖于<code>GestureDetectors</code>和<code>onInterceptTouchEvent</code>，要么实现方式很复杂。实际上，在RecyclerView上添加拖动特性有一个非常简单的方法。这个方法只需要一个类，并且它也是Android 兼容包的一部分，它就是：</p>
<h4 style="text-align: center;"><a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" data-href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" class="markup--anchor markup--h4-anchor" rel="external" target="_blank">ItemTouchHelper</a></h4>

<p>ItemTouchHelper是一个强大的工具，它处理好了关于在RecyclerView上添加拖动排序与滑动删除的所有事情。它是RecyclerView.ItemDecoration的子类，也就是说它可以轻易的添加到几乎所有的LayoutManager和Adapter中。它还可以和现有的item动画一起工作，提供受类型限制的拖放动画等等，</p>
<p>这篇文章中，我会演示一个ItemTouchHelper的简单实现，然后在这个系列文章的后面部分，我们将拓展范围，探索一些新的特性。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://colobu.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RecyclerView的拖动和滑动 第二部分 ：拖块，Grid以及自定义动画]]></title>
    <link href="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-2/"/>
    <id>http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-2/</id>
    <published>2015-09-16T01:57:50.000Z</published>
    <updated>2015-09-16T02:27:31.650Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-6a6f0c422efd" target="_blank" rel="external">Drag and Swipe with RecyclerView Part Two: Handles, Grids, and Custom Animations </a><br>翻译：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a> </p>
<p>在<a href="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/" target="_blank" rel="external">第一部分</a>，我们介绍了<a href="http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" target="_blank" rel="external">ItemTouchHelper</a>，以及<a href="http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html" target="_blank" rel="external">ItemTouchHelper.Callback</a> 的实现，在线性列表（RecyclerView）中添加基本的拖拽&amp;拖放与滑动删除。本文将在前文例子的基础上扩展，增加对grid布局的支持，处理拖拽的初始化，提示被选中的view，同时自定义滑动的动画。<br><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-2/1.gif" alt=""><br><a id="more"></a></p>
<h3 id="拖块">拖块</h3>
<p>当设计一个支持拖拽与拖放的列表的时候，通常都会包含一个提示可以触摸拖动的东西。它对于用户发现此功能与软件的易用性都是有帮助的，并且Material指南也<a href="http://www.google.com/design/spec/components/lists-controls.html#lists-controls-types-of-list-controls" target="_blank" rel="external">推荐 </a>在列表处于“编辑模式”的时候这样做。让我们的例子包含一个这样的滑块也相当简单。<br><img src="2.png" alt=""></p>
<p>首先，修改item的布局（item_main.xml）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">FrameLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/item"</span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"?listPreferredItemHeight"</span></div><div class="line">    <span class="attribute">android:clickable</span>=<span class="value">"true"</span></div><div class="line">    <span class="attribute">android:focusable</span>=<span class="value">"true"</span></div><div class="line">    <span class="attribute">android:foreground</span>=<span class="value">"?selectableItemBackground"</span>&gt;</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="title">TextView</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/text"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"center_vertical"</span></div><div class="line">        <span class="attribute">android:layout_marginLeft</span>=<span class="value">"16dp"</span></div><div class="line">        <span class="attribute">android:textAppearance</span>=<span class="value">"?android:attr/textAppearanceMedium"</span> /&gt;</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="title">ImageView</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/handle"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"?listPreferredItemHeight"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"center_vertical|right"</span></div><div class="line">        <span class="attribute">android:scaleType</span>=<span class="value">"center"</span></div><div class="line">        <span class="attribute">android:src</span>=<span class="value">"@drawable/ic_reorder_grey_500_24dp"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p>用于拖拽的图标可以在<a href="https://github.com/google/material-design-icons/blob/master/action/svg/production/ic_reorder_24px.svg" target="_blank" rel="external">Material Design Icons</a>里面找到，使用<a href="https://github.com/konifar/android-material-design-icon-generator-plugin" target="_blank" rel="external">Android Material Design 图标生成插件</a>来添加。</p>
<p>就如上篇文章简要提到的，你可以使用ItemTouchHelper.startDrag(ViewHolder) 开始一个拖拽。因此我们需要更改ViewHolder，让它包含这个拖拽图标，同时设置一个简单的触摸事件 listener来触发startDrag()的调用。</p>
<p>我们需要一个传递event up 的interface：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnStartDragListener</span> </span>{</div><div class="line"> </div><div class="line">    <span class="javadoc">/**</span></div><div class="line">     * Called when a view is requesting a start of a drag.</div><div class="line">     *</div><div class="line">     *<span class="javadoctag"> @param</span> viewHolder The holder of the view to drag.</div><div class="line">     */</div><div class="line">    <span class="keyword">void</span> onStartDrag(RecyclerView.ViewHolder viewHolder);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后，在<strong>ItemViewHolder</strong>中初始化拖拽图标的视图：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> ImageView handleView;</div><div class="line"><span class="keyword">public</span> <span class="title">ItemViewHolder</span>(View itemView) {</div><div class="line">    <span class="keyword">super</span>(itemView);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    handleView = (ImageView) itemView.findViewById(R.id.handle);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>并且更新<strong>RecyclerListAdapter</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OnStartDragListener mDragStartListener;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="title">RecyclerListAdapter</span>(OnStartDragListener dragStartListener) {</div><div class="line">    mDragStartListener = dragStartListener;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">}</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span>(<span class="keyword">final</span> ItemViewHolder holder, </div><div class="line">        <span class="keyword">int</span> position) {</div><div class="line">    <span class="comment">// ...    holder.handleView.setOnTouchListener(new OnTouchListener() {</span></div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span>(View v, MotionEvent event) {</div><div class="line">            <span class="keyword">if</span> (MotionEventCompat.getActionMasked(event) == </div><div class="line">                    MotionEvent.ACTION_DOWN) {</div><div class="line">                mDragStartListener.onStartDrag(holder);</div><div class="line">            }</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        }</div><div class="line">    });</div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在完整的RecyclerListAdapter类是<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/blob/001dcdc99f75f77a431fe5c303be54ab45cd9a32/app/src/main/java/co/paulburke/android/itemtouchhelperdemo/RecyclerListAdapter.java" target="_blank" rel="external">这样</a>的。</p>
<p>剩下的事情就是在Fragment中添加OnStartDragListener：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerListFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> </span></div><div class="line">        <span class="title">OnStartDragListener</span> {</div><div class="line">     </div><div class="line">    <span class="comment">// ...    @Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span>(View view, Bundle icicle) {</div><div class="line">        <span class="keyword">super</span>.onViewCreated(view, icicle);</div><div class="line"> </div><div class="line">        RecyclerListAdapter a = <span class="keyword">new</span> RecyclerListAdapter(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    }    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartDrag</span>(RecyclerView.ViewHolder viewHolder) {</div><div class="line">        mItemTouchHelper.startDrag(viewHolder);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>完整的RecyclerListFragment类现在是<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/blob/001dcdc99f75f77a431fe5c303be54ab45cd9a32/app/src/main/java/co/paulburke/android/itemtouchhelperdemo/RecyclerListFragment.java" target="_blank" rel="external">这样</a>的。现在运行一下，你应该可以通过触摸这个拖拽图标来开始拖拽操作了<br><img src="3.gif" alt=""></p>
<h3 id="提示被选中的View">提示被选中的View</h3>
<p>在我们上面描述的基础案例中，没有在视觉上暗示被拖拽的item被选中了。显然，这不是被期望的，不过这也很好解决。实际上，在ItemTouchHelper的帮助下，只要你的View Holder item 设置了背景，这种效果自然就可以得到。在Lollipop或者更高版本，Item 的深度（elevation）在拖拽和滑动期间会上升；在早起版本，滑动的时候是简单的淡化（fade）效果。</p>
<p>要在我们现有的例子中看到这种效果，只需添加一个背景到<a href="https://gist.github.com/iPaulPro/3b1742403ea6f27abbb4" target="_blank" rel="external">item_main.xml</a>的根FrameLayout，或者在<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/blob/b6d2464c45d8b504dbc17c473cdca271ded2bd80/app/src/main/java/co/paulburke/android/itemtouchhelperdemo/RecyclerListAdapter.java" target="_blank" rel="external">RecyclerListAdapter.ItemViewHolder</a>的构造函数中设置一个。效果如下：<br><img src="4.gif" alt=""></p>
<p>看起来不错，但是我们希望得到更多的控制。其中一种办法就是在它被选择或者被清除的时候让你的View Holder去处理这些变化。为此，可以使用ItemTouchHelper.Callback提供的两个回调方法。</p>
<ul>
<li><strong>onSelectedChanged(ViewHolder, int)</strong>: 在每次View Holder的状态变成拖拽 (ACTION_STATE_DRAG) 或者 滑动 (ACTION_STATE_SWIPE)的时候被调用。这是把你的item view变成激活状态的最佳地点。</li>
<li><strong>clearView(RecyclerView, ViewHolder)</strong> 在一个view被拖拽然后被放开的时候被调用，同时也会在滑动被取消或者完成ACTION_STATE_IDLE)的时候被调用。这里是恢复item view idle状态的典型地方。</li>
</ul>
<p>我们只需要把这些东西结合在一起就行了。<br>首先，为View Holder创建一个interface：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="javadoc">/**</span></div><div class="line"> * Notifies a View Holder of relevant callbacks from </div><div class="line"> * {@link ItemTouchHelper.Callback}.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemTouchHelperViewHolder</span> </span>{</div><div class="line"> </div><div class="line">    <span class="javadoc">/**</span></div><div class="line">     * Called when the {@link ItemTouchHelper} first registers an </div><div class="line">     * item as being moved or swiped.</div><div class="line">     * Implementations should update the item view to indicate </div><div class="line">     * it's active state.</div><div class="line">     */</div><div class="line">    <span class="keyword">void</span> onItemSelected();</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="javadoc">/**</span></div><div class="line">     * Called when the {@link ItemTouchHelper} has completed the </div><div class="line">     * move or swipe, and the active item state should be cleared.</div><div class="line">     */</div><div class="line">    <span class="keyword">void</span> onItemClear();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后，让SimpleItemTouchHelperCallback触发各自的回调：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSelectedChanged</span>(RecyclerView.ViewHolder viewHolder, </div><div class="line">        <span class="keyword">int</span> actionState) {</div><div class="line">   <span class="comment">// We only want the active item</span></div><div class="line">   <span class="keyword">if</span> (actionState != ItemTouchHelper.ACTION_STATE_IDLE) {</div><div class="line">        <span class="keyword">if</span> (viewHolder <span class="keyword">instanceof</span> ItemTouchHelperViewHolder) {</div><div class="line">            ItemTouchHelperViewHolder itemViewHolder = </div><div class="line">                    (ItemTouchHelperViewHolder) viewHolder;</div><div class="line">            itemViewHolder.onItemSelected();</div><div class="line">        }</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="keyword">super</span>.onSelectedChanged(viewHolder, actionState);</div><div class="line">}</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearView</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder) {</div><div class="line">    <span class="keyword">super</span>.clearView(recyclerView, viewHolder);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (viewHolder <span class="keyword">instanceof</span> ItemTouchHelperViewHolder) {</div><div class="line">        ItemTouchHelperViewHolder itemViewHolder = </div><div class="line">                (ItemTouchHelperViewHolder) viewHolder;</div><div class="line">        itemViewHolder.onItemClear();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在剩下的事情就是让RecyclerListAdapter.ItemViewHolder实现ItemTouchHelperViewHolder:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span></div><div class="line">        <span class="keyword">implements</span> <span class="title">ItemTouchHelperViewHolder</span> {</div><div class="line"> </div><div class="line">    <span class="comment">// ...    @Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span>() {</div><div class="line">        itemView.setBackgroundColor(Color.LTGRAY);</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClear</span>() {</div><div class="line">        itemView.setBackgroundColor(<span class="number">0</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在本例子中，我们简单的在item激活的时候添加了一个灰色背景，在被清除的时候移除了这个灰色背景。如果你的ItemTouchHelper和Adapter是在一起的，你可以</p>
<p>不这样设置，直接在 ItemTouchHelper.Callback中切换view的状态。</p>
<h3 id="Grid_布局">Grid 布局</h3>
<p>如果你想用GridLayoutManager来修改这个项目，你会发现不能正常工作。原因和解决办法都很简单：我们必须告诉ItemTouchHelper我们想支持向左拖动和向右拖动。在<strong>SimpleItemTouchHelperCallback</strong>中，我们已经指明了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder) {</div><div class="line">    <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;</div><div class="line">    <span class="keyword">int</span> swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;</div><div class="line">    <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>要支持grid布局，唯一需要的修改是向dragFlags中添加left和 right方向。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> dragFlags = ItemTouchHelper.UP   | ItemTouchHelper.DOWN | </div><div class="line">                ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT;</div></pre></td></tr></table></figure>

<p>但是，对于grid而言，滑动删除不是非常自然的设计，因此你可能需要这样来去掉此功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder) {</div><div class="line">    <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN | </div><div class="line">                    ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT;</div><div class="line">    <span class="keyword">int</span> swipeFlags = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>可以查看 <a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/blob/d164fba0f27c8aa38cfa7dbd4bc74d53dea44605/app/src/main/java/co/paulburke/android/itemtouchhelperdemo/RecyclerGridFragment.java" target="_blank" rel="external">RecyclerGridFragment</a> 来了解GridLayoutManager的例子。下面是运行效果：<br><img src="5.gif" alt=""></p>
<h3 id="自定义滑动动画">自定义滑动动画</h3>
<p>ItemTouchHelper.Callback 提供了非常方便的方法来控制拖拽和滑动期间的view动画。因为ItemTouchHelper其实是一个<a href="http://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemDecoration.html" target="_blank" rel="external">RecyclerView.ItemDecoration</a>，我可以<br>用同样的方式进行view的绘制。</p>
<p>在后面的部分，我们将更深入的讨论这个问题，但是这里也给出一个简单的例子，重写默认的滑动动画，显示线性淡化效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChildDraw</span>(Canvas c, RecyclerView recyclerView, </div><div class="line">        ViewHolder viewHolder, <span class="keyword">float</span> dX, <span class="keyword">float</span> dY, </div><div class="line">        <span class="keyword">int</span> actionState, <span class="keyword">boolean</span> isCurrentlyActive) {</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (actionState == ItemTouchHelper.ACTION_STATE_SWIPE) {</div><div class="line">        <span class="keyword">float</span> width = (<span class="keyword">float</span>) viewHolder.itemView.getWidth();</div><div class="line">        <span class="keyword">float</span> alpha = <span class="number">1.0</span>f - Math.abs(dX) / width;</div><div class="line">        viewHolder.itemView.setAlpha(alpha);</div><div class="line">        viewHolder.itemView.setTranslationX(dX);    </div><div class="line">    } <span class="keyword">else</span> {</div><div class="line">        <span class="keyword">super</span>.onChildDraw(c, recyclerView, viewHolder, dX, dY, </div><div class="line">                actionState, isCurrentlyActive);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>dX</strong> 与 <strong>dY</strong>参数代表目前被选择view 的移动距离，其中：</p>
<ul>
<li><strong>-1.0f</strong> is a full ItemTouchHelper.END to ItemTouchHelper.STARTswipe</li>
<li><strong>1.0f </strong> is a full ItemTouchHelper.START to ItemTouchHelper.END swipe</li>
</ul>
<p>为了不漏掉我们没有处理的actionState，记住务必调用super方法，这样其他的默认动画才会运行。</p>
<p>接下来的部分我们将讲解如何控制拖拽时候的绘制。</p>
<h3 id="结束语">结束语</h3>
<p>我们刚刚谈到了通过自定义ItemTouchHelper所能做的事情，这部分比较有趣。我也希望能在这部分中讲更多内容，但是考虑到文章的长度，我决定分开来写。第三部分会很快出来。</p>
<p>GitHub项目比我们的文章先更新，如果你不想看教程，直接看代码上的变化也行。</p>
<h3 id="源码">源码</h3>
<p>这个系列文章包含相应GitHub项目，<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/" target="_blank" rel="external">Android-ItemTouchHelper-Demo</a>。这部分提交的代码是从<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/commit/ef8f149d2299bf57c2f5450aea75dc19b099bdee" target="_blank" rel="external">f8f149 </a>到 <a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/commit/d164fba0f27c8aa38cfa7dbd4bc74d53dea44605" target="_blank" rel="external">d164fba</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-6a6f0c422efd" target="_blank" rel="external">Drag and Swipe with RecyclerView Part Two: Handles, Grids, and Custom Animations </a><br>翻译：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a> </p>
<p>在<a href="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/" target="_blank" rel="external">第一部分</a>，我们介绍了<a href="http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" target="_blank" rel="external">ItemTouchHelper</a>，以及<a href="http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html" target="_blank" rel="external">ItemTouchHelper.Callback</a> 的实现，在线性列表（RecyclerView）中添加基本的拖拽&amp;拖放与滑动删除。本文将在前文例子的基础上扩展，增加对grid布局的支持，处理拖拽的初始化，提示被选中的view，同时自定义滑动的动画。<br><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-2/1.gif" alt=""><br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://colobu.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ember.js 技巧、诀窍和最佳实践]]></title>
    <link href="http://colobu.com/2014/09/26/Emberjs-tips-tricks-and-best-practices/"/>
    <id>http://colobu.com/2014/09/26/Emberjs-tips-tricks-and-best-practices/</id>
    <published>2014-09-26T00:57:33.000Z</published>
    <updated>2015-07-31T13:28:02.198Z</updated>
    <content type="html"><![CDATA[<p>Ember.js是一款用来创建炫酷的Web应用程序的JavaScript MV* 框架。 正像AngularJS，Backbone.js一样正在广泛的应用于现代的Web开发中, 知名用户包括 Yahoo!, Groupon, 和 ZenDesk.<br>总的来说， Ember.js还在推广之中， 国内使用它做开发的还比较少， 官方的文档也不是很完备。 所以这篇文章记录了我使用Ember中收集的一些技巧，诀窍和最佳实践， 并且会不断的更新。</p>
<p>想了解Ember.js和其它JavaScript框架的区别， 可以看这篇文章: <a href="http://www.airpair.com/js/javascript-framework-comparison" target="_blank" rel="external">AngularJS vs. Backbone.js vs. Ember.js</a>。<br><a id="more"></a></p>
<h1 id="通用">通用</h1>
<h3 id="_核心概念"><i class="fa fa-lightbulb-o"></i>  核心概念</h3>
<p><strong>Template</strong>： describes the user interface of your application by Handlebars。<br><strong>Router</strong>： The router translates a URL into a series of nested templates, each backed by a model.<br><strong>Route</strong>: A route is an object that tells the template which model it should display.<br><strong>Model</strong>： A model is an object that stores persistent state.<br><strong>Controller</strong>： A controller is an object that stores application state. A template can optionally have a controller in addition to a model, and can retrieve properties from both.<br><strong>Component</strong>： A component is a custom HTML tag whose behavior you implement using JavaScript and whose appearance you describe using Handlebars templates. </p>
<h3 id="_命名约定"><i class="fa fa-lightbulb-o"></i>  命名约定</h3>
<p>Ember.js 由Yehuda Katz创建, 他还是jQuery, Ruby on Rails 和 SproutCore核心开发组的成员。 就像Katz其它项目一样， 命名约定(convention over configuration)被广泛使用。<br>你可以查看这篇文章了解Ember.js的命名： <a href="http://colobu.com/2014/09/10/ember-naming-conventions/" target="_blank" rel="external">Ember命名规则</a></p>
<h3 id="_带Binding后缀的属性自动转为Ember-Binding对象"><i class="fa fa-lightbulb-o"></i>  带<code>Binding</code>后缀的属性自动转为<code>Ember.Binding</code>对象</h3>
<p><code>valueBinding: &quot;MyApp.someController.title&quot;</code> will create a binding from MyApp.someController.title to the value property of your object instance automatically. Now the two values will be kept in sync.</p>
<p>单向绑定: <code>bigTitlesBinding: Ember.Binding.oneWay(&quot;MyApp.preferencesController.bigTitles&quot;)</code></p>
<h3 id="View_vs-_Component">View vs. Component</h3>
<p>一句话， 尽量使用Component而不是View</p>
<blockquote>
<p>Contrarily to Ember views, an Ember component is not connected to a related Ember Controller, since it is self contained, in which regards both the data and events that it handles. In this sense, components are easier to reuse in different places of the application, as well as in different applications.<br><a href="http://raulbrito.github.io/articles/thoughts-on-ember-views-vs-components/" target="_blank" rel="external">http://raulbrito.github.io/articles/thoughts-on-ember-views-vs-components/</a></p>
</blockquote>
<h1 id="Controller">Controller</h1>
<h3 id="_转到其它页面"><i class="fa fa-lightbulb-o"></i>  转到其它页面</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">aController.transitionToRoute(<span class="string">'blogPosts'</span>);</div><div class="line">aController.transitionToRoute(<span class="string">'blogPosts.recentEntries'</span>);</div><div class="line">aController.transitionToRoute(<span class="string">'blogPost'</span>, aPost);</div><div class="line">aController.transitionToRoute(<span class="string">'blogPost'</span>, <span class="number">1</span>);</div></pre></td></tr></table></figure>

<p>转到指定的url在测试和调试的时候也可以使用，正式产品中还少用到。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">aController.transitionToRoute(<span class="string">'/'</span>);</div><div class="line">aController.transitionToRoute(<span class="string">'/blog/post/1/comment/13'</span>);</div></pre></td></tr></table></figure>



<h3 id="_访问其它Controller-_needs属性"><i class="fa fa-lightbulb-o"></i>  访问其它Controller. <code>needs</code>属性</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">App.CommentsController = Ember.ArrayController.extend({</div><div class="line">  needs: [<span class="string">'post'</span>],</div><div class="line">  postTitle: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> currentPost = <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'controllers.post'</span>); <span class="comment">// instance of App.PostController</span></div><div class="line">    <span class="keyword">return</span> currentPost.<span class="keyword">get</span>(<span class="string">'title'</span>);</div><div class="line">  }.property(<span class="string">'controllers.post.title'</span>)</div><div class="line">});</div></pre></td></tr></table></figure>

<p><code>needs</code>定义为此controller要访问的其它controllers的数组。<br>嵌套的controller也可以访问：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">App.CommentsNewController = Ember.ObjectController.extend({</div><div class="line">});</div><div class="line">App.IndexController = Ember.ObjectController.extend({</div><div class="line">  needs: [<span class="string">'commentsNew'</span>]</div><div class="line">});</div><div class="line"><span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'controllers.commentsNew'</span>); <span class="comment">// instance of App.CommentsNewController</span></div></pre></td></tr></table></figure>

<h3 id="_使用send调用定义的action"><i class="fa fa-lightbulb-o"></i>  使用<code>send</code>调用定义的<code>action</code></h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">App.WelcomeRoute = Ember.Route.extend({</div><div class="line">  actions: {</div><div class="line">    playTheme: <span class="keyword">function</span>() {</div><div class="line">       this.send(<span class="string">'playMusic'</span>, <span class="string">'theme.mp3'</span>);</div><div class="line">    },</div><div class="line">    playMusic: <span class="keyword">function</span>(track) {</div><div class="line">      // <span class="keyword">...</span></div><div class="line">    }</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_主动触发property变动事件"><i class="fa fa-lightbulb-o"></i>  主动触发property变动事件</h3>
<p><code>propertyDidChange</code>, <code>propertyWillChange</code> 即使你没有调用<code>get</code>或<code>set</code>也能触发事件。</p>
<h1 id="Route">Route</h1>
<h3 id="_一些钩子hook"><i class="fa fa-lightbulb-o"></i>  一些钩子<code>hook</code></h3>
<ul>
<li>activate Router进入此route时</li>
<li>beforeModel 在model之前调用</li>
<li>model 获取model数据</li>
<li>afterModel 当model获取到。 主要获取model时使用的是async/promise语法。</li>
<li>renderTemplate 渲染模版的钩子</li>
<li>setupController 为当前route设置钩子</li>
</ul>
<h3 id="_controllerFor"><i class="fa fa-lightbulb-o"></i>  <code>controllerFor</code></h3>
<p>在route中得到其它的controller对象。参数为the name of the route or controller。</p>
<h3 id="_modelFor得到父Route的model"><i class="fa fa-lightbulb-o"></i>  <code>modelFor</code>得到父Route的model</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">App.Router.map(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">this</span>.resource(<span class="string">'post'</span>, { path: <span class="string">'/post/:post_id'</span> }, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">this</span>.resource(<span class="string">'comments'</span>);</div><div class="line">    });</div><div class="line">});</div><div class="line"></div><div class="line">App.CommentsRoute = Ember.Route.extend({</div><div class="line">    afterModel: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">this</span>.<span class="keyword">set</span>(<span class="string">'post'</span>, <span class="keyword">this</span>.modelFor(<span class="string">'post'</span>));</div><div class="line">    }</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_transitionTo,_intermediateTransitionTo"><i class="fa fa-lightbulb-o"></i>  <code>transitionTo</code>, <code>intermediateTransitionTo</code></h3>
<p>跳转到另外的route. The route may be either a single route or route path:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.transitionTo(<span class="string">'blogPosts'</span>);</div><div class="line"><span class="keyword">this</span>.transitionTo(<span class="string">'blogPosts.recentEntries'</span>);</div><div class="line"><span class="keyword">this</span>.transitionTo(<span class="string">'blogPost'</span>, aPost);</div><div class="line"><span class="keyword">this</span>.transitionTo(<span class="string">'blogPost'</span>, <span class="number">1</span>);</div></pre></td></tr></table></figure>

<h3 id="_refresh_刷新本route及子route的model"><i class="fa fa-lightbulb-o"></i>  <code>refresh</code> 刷新本route及子route的model</h3>
<h3 id="_渲染非默认的模版"><i class="fa fa-lightbulb-o"></i>   渲染非默认的模版</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">App.PostsRoute = Ember.Route.extend({</div><div class="line">  renderTemplate: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">this</span>.render(<span class="string">'favoritePost'</span>);</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<h1 id="Model">Model</h1>
<h3 id="_使用Ember-Object的extend定义新类"><i class="fa fa-lightbulb-o"></i>  使用<code>Ember.Object</code>的<code>extend</code>定义新类</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">App.Person = Ember.Object.extend({</div><div class="line">  say: <span class="function"><span class="keyword">function</span><span class="params">(thing)</span> </span>{</div><div class="line">    alert(thing);</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<p><code>_super()</code>父类的方法。</p>
<p>创建实例: <code>var person = App.Person.create();</code></p>
<h3 id="_计算属性Computed_Properties"><i class="fa fa-lightbulb-o"></i>  计算属性Computed Properties</h3>
<p>computed properties let you declare functions as properties.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">App.Person = Ember.Object.extend({</div><div class="line">  <span class="comment">// these will be supplied by `create`</span></div><div class="line">  firstName: <span class="literal">null</span>,</div><div class="line">  lastName: <span class="literal">null</span>,</div><div class="line"></div><div class="line">  fullName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'firstName'</span>) + <span class="string">' '</span> + <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'lastName'</span>);</div><div class="line">  }.property(<span class="string">'firstName'</span>, <span class="string">'lastName'</span>)</div><div class="line">});</div><div class="line"></div><div class="line"><span class="keyword">var</span> ironMan = App.Person.create({</div><div class="line">  firstName: <span class="string">"Tony"</span>,</div><div class="line">  lastName:  <span class="string">"Stark"</span></div><div class="line">});</div><div class="line"></div><div class="line">ironMan.<span class="keyword">get</span>(<span class="string">'fullName'</span>); <span class="comment">// "Tony Stark"</span></div></pre></td></tr></table></figure>

<p>设置计算属性：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">App.Person = Ember.Object.extend({</div><div class="line">  firstName: <span class="literal">null</span>,</div><div class="line">  lastName: <span class="literal">null</span>,</div><div class="line"></div><div class="line">  fullName: <span class="function"><span class="keyword">function</span><span class="params">(key, value, previousValue)</span> </span>{</div><div class="line">    <span class="comment">// setter</span></div><div class="line">    <span class="keyword">if</span> (arguments.length &gt; <span class="number">1</span>) {</div><div class="line">      <span class="keyword">var</span> nameParts = value.split(/\s+/);</div><div class="line">      <span class="keyword">this</span>.<span class="keyword">set</span>(<span class="string">'firstName'</span>, nameParts[<span class="number">0</span>]);</div><div class="line">      <span class="keyword">this</span>.<span class="keyword">set</span>(<span class="string">'lastName'</span>,  nameParts[<span class="number">1</span>]);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// getter</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'firstName'</span>) + <span class="string">' '</span> + <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'lastName'</span>);</div><div class="line">  }.property(<span class="string">'firstName'</span>, <span class="string">'lastName'</span>)</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_@each计算"><i class="fa fa-lightbulb-o"></i>  <code>@each</code>计算</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">App.TodosController = Ember.Controller.extend({</div><div class="line">  todos: [</div><div class="line">    Ember.Object.create({ isDone: <span class="literal">true</span> }),</div><div class="line">    Ember.Object.create({ isDone: <span class="literal">false</span> }),</div><div class="line">    Ember.Object.create({ isDone: <span class="literal">true</span> })</div><div class="line">  ],</div><div class="line"></div><div class="line">  remaining: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> todos = <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'todos'</span>);</div><div class="line">    <span class="keyword">return</span> todos.filterBy(<span class="string">'isDone'</span>, <span class="literal">false</span>).<span class="keyword">get</span>(<span class="string">'length'</span>);</div><div class="line">  }.property(<span class="string">'todos.@each.isDone'</span>)</div><div class="line">});</div></pre></td></tr></table></figure>

<p>数组元素的每一个更新 （CUD或者数组重新被赋值）都会触发重新计算。</p>
<h3 id="_observers_是同步的"><i class="fa fa-lightbulb-o"></i>  <code>observers</code> 是同步的</h3>
<p>运行一次<code>Ember.run.once</code></p>
<p>Observers 在对象初始化之前不会被触发。如果想init时被触发，加上<code>.on(\&#39;init\&#39;)</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">App.Person = Ember.Object.extend({</div><div class="line">  init: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">this</span>.<span class="keyword">set</span>(<span class="string">'salutation'</span>, <span class="string">"Mr/Ms"</span>);</div><div class="line">  },</div><div class="line"></div><div class="line">  salutationDidChange: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="comment">// some side effect of salutation changing</span></div><div class="line">  }.observes(<span class="string">'salutation'</span>).on(<span class="string">'init'</span>)</div><div class="line">});</div></pre></td></tr></table></figure>

<p>增加observer:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">person.addObserver(<span class="string">'fullName'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// deal with the change</span></div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_Ember-computed(&#39;aaa&#39;,_function(){}),_Ember-observer(&#39;aaa&#39;,_function_()_{})"><i class="fa fa-lightbulb-o"></i>  <code>Ember.computed(&#39;aaa&#39;, function(){})</code>, <code>Ember.observer(&#39;aaa&#39;, function () {})</code></h3>
<p>可以写为 <code>function(){}.property(&#39;aaaa&#39;)</code>, <code>function(){}.observers(&#39;aaa&#39;)</code></p>
<h3 id="_reopen覆盖"><i class="fa fa-lightbulb-o"></i>  <code>reopen</code>覆盖</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">Person</span><span class="class">.reopen</span>(<span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">isPerson</span>:<span class="value"> true,</span></span></div><div class="line">  say: <span class="function">function</span>(thing) {</div><div class="line">    this._<span class="function">super</span>(thing + <span class="string">"!"</span>);</div><div class="line">  <span class="rule">}</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>Person.create().get(&#39;isPerson&#39;) // true</p>
<h3 id="_架构"><i class="fa fa-lightbulb-o"></i>  架构</h3>
<p><img src="http://emberjs.com/images/guides/models/finding-unloaded-record-step1-diagram.png" alt=""></p>
<h3 id="_Store"><i class="fa fa-lightbulb-o"></i>  Store</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">App.Store = DS.Store.<span class="built_in">extend</span>();</div><div class="line">App.register(<span class="string">'store:main'</span>, App.Store);</div><div class="line">App.inject(<span class="string">'view'</span>, <span class="string">'store'</span>, <span class="string">'store:main'</span>);</div></pre></td></tr></table></figure>

<h3 id="_model_和_record"><i class="fa fa-lightbulb-o"></i>  model 和 record</h3>
<p>record是model的一个实例</p>
<h3 id="_adapter"><i class="fa fa-lightbulb-o"></i>  adapter</h3>
<p>负责将record和数据持久化后台结合起来。<br><code>DS.RESTAdapter</code>, <code>FixtureAdapter</code></p>
<h3 id="_Serializer"><i class="fa fa-lightbulb-o"></i>  Serializer</h3>
<p>A serializer is responsible for turning a raw JSON payload returned from your server into a record object.<br>负责将一个纯的JSON转换成record对象。</p>
<h3 id="_属性定义时，attr()类型可以不设置"><i class="fa fa-lightbulb-o"></i>  属性定义时，<code>attr()</code>类型可以不设置</h3>
<p>后台服务器返回啥就是啥。也可以指定类型。类型只能是<code>string</code>,<code>number</code>,<code>boolean</code>和<code>date</code>。<br>Date遵循 ISO 8601. 例如: 2014-05-27T12:54:01。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">firstName</span>: <span class="string">attr(),</span></div><div class="line"><span class="attribute">lastName</span>: <span class="string">attr(),</span></div><div class="line"><span class="attribute">birthday</span>: <span class="string">DS.attr('date')</span></div></pre></td></tr></table></figure>

<h3 id="_One-to-One,_One-to-Many和Many-to-Many-_hasMany"><i class="fa fa-lightbulb-o"></i>  One-to-One, One-to-Many和Many-to-Many. hasMany</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">App.User = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  profile:</span> <span class="literal">DS</span>.belongsTo(<span class="string">'profile'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line">App.Profile = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  user:</span> <span class="literal">DS</span>.belongsTo(<span class="string">'user'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line">App.Post = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  comments:</span> <span class="literal">DS</span>.hasMany(<span class="string">'comment'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line">App.Comment = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  post:</span> <span class="literal">DS</span>.belongsTo(<span class="string">'post'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line">App.Post = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  tags:</span> <span class="literal">DS</span>.hasMany(<span class="string">'tag'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line">App.Tag = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  posts:</span> <span class="literal">DS</span>.hasMany(<span class="string">'post'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line">var belongsTo = <span class="literal">DS</span>.belongsTo,</div><div class="line">    hasMany = <span class="literal">DS</span>.hasMany<span class="comment">;</span></div><div class="line"></div><div class="line">App.Comment = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  onePost:</span> belongsTo(<span class="string">'post'</span>),</div><div class="line"><span class="label">  twoPost:</span> belongsTo(<span class="string">'post'</span>),</div><div class="line"><span class="label">  redPost:</span> belongsTo(<span class="string">'post'</span>),</div><div class="line"><span class="label">  bluePost:</span> belongsTo(<span class="string">'post'</span>)</div><div class="line">})<span class="comment">;</span></div><div class="line"></div><div class="line"></div><div class="line">App.Post = <span class="literal">DS</span>.Model.extend({</div><div class="line"><span class="label">  comments:</span> hasMany(<span class="string">'comment'</span>, {</div><div class="line"><span class="label">    inverse:</span> <span class="string">'redPost'</span></div><div class="line">  })</div><div class="line">})</div></pre></td></tr></table></figure>

<h3 id="_增删改查"><i class="fa fa-lightbulb-o"></i>  增删改查</h3>
<ol>
<li>createRecord</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> store = <span class="keyword">this</span>.store;</div><div class="line"></div><div class="line"><span class="keyword">var</span> post = store.createRecord(<span class="string">'post'</span>, {</div><div class="line">  title: <span class="string">'Rails is Omakase'</span>,</div><div class="line">  body: <span class="string">'Lorem ipsum'</span></div><div class="line">});</div><div class="line"></div><div class="line">store.find(<span class="string">'user'</span>, <span class="number">1</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(user)</span> </span>{</div><div class="line">  post.<span class="keyword">set</span>(<span class="string">'author'</span>, user);</div><div class="line">});</div></pre></td></tr></table></figure>

<ol>
<li>deleteRecord/save 或者 destroyRecord<br>store.find(&#39;post&#39;, 1).then(function (post) {<br>post.deleteRecord();<br>post.get(&#39;isDeleted&#39;); // =&gt; true<br>post.save(); // =&gt; DELETE to /posts/1<br>});</li>
</ol>
<p>// OR<br>store.find(&#39;post&#39;, 2).then(function (post) {<br>  post.destroyRecord(); // =&gt; DELETE to /posts/2<br>});</p>
<ol>
<li>push到store的缓存</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.store.<span class="keyword">push</span>(<span class="string">'album'</span>, {</div><div class="line">      id: <span class="number">1</span>,</div><div class="line">      title: <span class="string">"Fewer Moving Parts"</span>,</div><div class="line">      artist: <span class="string">"David Bazan"</span>,</div><div class="line">      songCount: <span class="number">10</span></div><div class="line">    });</div></pre></td></tr></table></figure>

<ol>
<li>save</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> onSuccess = <span class="function"><span class="keyword">function</span><span class="params">(post)</span> </span>{</div><div class="line">  <span class="keyword">self</span>.transitionToRoute(<span class="string">'posts.show'</span>, post);</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">var</span> onFail = <span class="function"><span class="keyword">function</span><span class="params">(post)</span> </span>{</div><div class="line">  <span class="comment">// deal with the failure here</span></div><div class="line">};</div><div class="line"></div><div class="line">post.save().then(onSuccess, onFail);</div></pre></td></tr></table></figure>

<ol>
<li>find<br>根据参数内部用<code>find</code>,<code>findAll</code>和<code>findQuery</code>实现。</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="reserved">var</span> posts = <span class="keyword">this</span>.store.find(<span class="string">'post'</span>); <span class="regexp">//</span><span class="function"> =&gt;</span> GET /posts</div><div class="line"><span class="reserved">var</span> posts = <span class="keyword">this</span>.store.all(<span class="string">'post'</span>); <span class="regexp">//</span><span class="function"> =&gt;</span> <span class="literal">no</span> network request</div><div class="line"><span class="reserved">var</span> aSinglePost = <span class="keyword">this</span>.store.find(<span class="string">'post'</span>, <span class="number">1</span>); <span class="regexp">//</span><span class="function"> =&gt;</span> GET /posts/<span class="number">1</span></div><div class="line"><span class="reserved">var</span> peters = <span class="keyword">this</span>.store.find(<span class="string">'person'</span>, { <span class="attribute">name</span>: <span class="string">"Peter"</span> }); <span class="regexp">//</span><span class="function"> =&gt;</span> GET to /persons?name=<span class="string">'Peter'</span></div></pre></td></tr></table></figure>

<h3 id="_model的一些方法"><i class="fa fa-lightbulb-o"></i>  model的一些方法</h3>
<p><code>incrementProperty</code><br><code>changedAttributes</code><br><code>
</code></p>
<h3 id="_Adapter的_URL_Conventions"><i class="fa fa-lightbulb-o"></i>  Adapter的 URL Conventions</h3>
<table>
<thead>
<tr>
<th>Action</th>
<th>HTTP Verb</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td>Find</td>
<td>GET</td>
<td>/people/123</td>
</tr>
<tr>
<td>Find All</td>
<td>GET</td>
<td>/people</td>
</tr>
<tr>
<td>Update</td>
<td>PUT</td>
<td>/people/123</td>
</tr>
<tr>
<td>Create</td>
<td>POST</td>
<td>/people</td>
</tr>
<tr>
<td>Delete</td>
<td>DELETE</td>
<td>/people/123</td>
</tr>
</tbody>
</table>
<h3 id="_namespace"><i class="fa fa-lightbulb-o"></i>  namespace</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="filename">App.ApplicationAdapter = DS.RESTAdapter.extend({</span></div><div class="line">  namespace: <span class="string">'api/1'</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>Requests for <code>App.Person</code> would now target <code>/api/1/people/1</code>.</p>
<h3 id="_normalizeHash"><i class="fa fa-lightbulb-o"></i>  normalizeHash</h3>
<p>如果想将JSON中的<code>lastNameOfPerson</code>关联model的<code>lastName</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">App.Person = DS.Model.extend({</div><div class="line">  lastName: DS.attr(<span class="string">'string'</span>)</div><div class="line">});</div><div class="line"></div><div class="line">App.PersonSerializer = DS.RESTSerializer.extend({</div><div class="line">  normalizeHash: {</div><div class="line">    lastNameOfPerson: <span class="function"><span class="keyword">function</span><span class="params">(hash)</span> </span>{</div><div class="line">      hash.lastName = hash.lastNameOfPerson;</div><div class="line">      <span class="keyword">delete</span> hash.lastNameOfPerson;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> hash;</div><div class="line">    }</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_Adapter的其它属性"><i class="fa fa-lightbulb-o"></i>  Adapter的其它属性</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">App.ApplicationAdapter = DS.RESTAdapter.extend({</div><div class="line">  <span class="keyword">namespace</span>: 'api/<span class="number">1</span>'</div><div class="line">});</div><div class="line"></div><div class="line">App.ApplicationAdapter = DS.RESTAdapter.extend({</div><div class="line">  host: 'https:<span class="comment">//api.example.com'</span></div><div class="line">});</div><div class="line"></div><div class="line">App.ApplicationAdapter = DS.RESTAdapter.extend({</div><div class="line">  pathForType: <span class="keyword">function</span>(<span class="class"><span class="keyword">type</span>) {</span></div><div class="line">    <span class="keyword">return</span> Ember.String.underscore(<span class="class"><span class="keyword">type</span>);</span></div><div class="line">  }</div><div class="line">});</div><div class="line"></div><div class="line">MyCustomAdapterAdapter = DS.RESTAdapter.extend({</div><div class="line">  defaultSerializer: '-<span class="keyword">default</span>'</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_定制Transformations"><i class="fa fa-lightbulb-o"></i>  定制Transformations</h3>
<p>除了内建类型<code>string</code>, <code>number</code>, <code>boolean</code>, and <code>date</code>，你可以定义新类型。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">App.CoordinatePointTransform = DS.Transform.extend({</div><div class="line">  serialize: function(<span class="keyword">value</span>) {</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">value</span>.<span class="keyword">get</span>(<span class="string">'x'</span>), <span class="keyword">value</span>.<span class="keyword">get</span>(<span class="string">'y'</span>)];</div><div class="line">  },</div><div class="line">  deserialize: function(<span class="keyword">value</span>) {</div><div class="line">    <span class="keyword">return</span> Ember.create({ x: <span class="keyword">value</span>[<span class="number">0</span>], y: <span class="keyword">value</span>[<span class="number">1</span>] });</div><div class="line">  }</div><div class="line">});</div><div class="line"></div><div class="line">App.Cursor = DS.Model.extend({</div><div class="line">  position: DS.attr(<span class="string">'coordinatePoint'</span>)</div><div class="line">});</div></pre></td></tr></table></figure>

<p>数组类型</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">App.ArrayTransform = DS.Transform.extend({</div><div class="line"></div><div class="line">    deserialize: <span class="function"><span class="keyword">function</span> <span class="params">(serialized)</span> </span>{</div><div class="line"><span class="pi">        'use strict'</span>;</div><div class="line">        <span class="keyword">return</span> Ember.A(serialized);</div><div class="line">    },</div><div class="line"></div><div class="line">    serialize: <span class="function"><span class="keyword">function</span> <span class="params">(deserialized)</span> </span>{</div><div class="line"><span class="pi">        'use strict'</span>;</div><div class="line">        <span class="keyword">return</span> deserialized ? deserialized.toArray() : [];</div><div class="line">    }</div><div class="line">});</div></pre></td></tr></table></figure>

<h1 id="View">View</h1>
<h3 id="_定义view"><i class="fa fa-lightbulb-o"></i>  定义view</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php"></span></span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">view</span> </span><span class="string">"clickable"</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">This is a clickable area!</div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">view</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"></div><div class="line">App.ClickableView = Ember.View.extend({</div><div class="line">  click: <span class="function"><span class="keyword">function</span><span class="params">(evt)</span> </span>{</div><div class="line">    this.get(<span class="string">'controller'</span>).send(<span class="string">'turnItUp'</span>, <span class="number">11</span>);</div><div class="line">  }</div><div class="line">});</div><div class="line"></div><div class="line">App.PlaybackController = Ember.ObjectController.extend({</div><div class="line">  actions: {</div><div class="line">    turnItUp: <span class="function"><span class="keyword">function</span><span class="params">(level)</span></span>{</div><div class="line">      <span class="comment">//Do your thing</span></div><div class="line">    }</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_定制view元素"><i class="fa fa-lightbulb-o"></i>  定制view元素</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="filename">App.MyView = Ember.View.extend({</span></div><div class="line">  tagName: <span class="string">'span'</span></div><div class="line">});</div><div class="line"></div><div class="line"><span class="filename">App.MyView = Ember.View.extend({</span></div><div class="line">  classNames: [<span class="string">'my-view'</span>]</div><div class="line">});</div><div class="line"></div><div class="line"><span class="filename">App.MyView = Ember.View.extend({</span></div><div class="line">  classNameBindings: [<span class="string">'isUrgent'</span>],</div><div class="line">  isUrgent: true</div><div class="line">});</div><div class="line"></div><div class="line">&lt;div class=<span class="string">"ember-view is-urgent"</span>&gt;</div><div class="line"></div><div class="line"><span class="filename">App.MyView = Ember.View.extend({</span></div><div class="line">  classNameBindings: [<span class="string">'isUrgent:urgent'</span>],</div><div class="line">  isUrgent: true</div><div class="line">});</div><div class="line"></div><div class="line"><span class="filename">App.MyView = Ember.View.extend({</span></div><div class="line">  classNameBindings: [<span class="string">'isEnabled:enabled:disabled'</span>],</div><div class="line">  isEnabled: false</div><div class="line">});</div><div class="line"></div><div class="line"><span class="filename">App.MyView = Ember.View.extend({</span></div><div class="line">  tagName: <span class="string">'a'</span>,</div><div class="line">  attributeBindings: [<span class="string">'href'</span>],</div><div class="line">  href: <span class="string">"http://emberjs.com"</span></div><div class="line">});</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php"></span></span></span><span class="expression">{{<span class="variable"><span class="keyword">view</span></span> <span class="string">"info"</span> <span class="variable">tagName</span>=<span class="string">"span"</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"><span class="expression">{{<span class="variable"><span class="keyword">view</span></span> <span class="string">"info"</span> <span class="variable">id</span>=<span class="string">"info-view"</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"><span class="expression">{{<span class="variable"><span class="keyword">view</span></span> <span class="string">"alert"</span> <span class="variable">classBinding</span>=<span class="string">"isUrgent priority"</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div></pre></td></tr></table></figure>

<h3 id="_内建的view"><i class="fa fa-lightbulb-o"></i>  内建的view</h3>
<ul>
<li>Ember.Checkbox</li>
<li>Ember.TextField</li>
<li>Ember.TextArea</li>
<li>Ember.Select</li>
</ul>
<h1 id="Template">Template</h1>
<h1 id="数据枚举_Ember-Enumerable">数据枚举 Ember.Enumerable</h1>
<h3 id="_forEach"><i class="fa fa-lightbulb-o"></i>  <code>forEach</code></h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].forEach(<span class="function"><span class="keyword">function</span><span class="params">(item)</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(item);</div><div class="line">  <span class="built_in">console</span>.log(item, <span class="keyword">this</span>.indexOf(item));</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_可枚举的类型"><i class="fa fa-lightbulb-o"></i>  可枚举的类型</h3>
<ul>
<li>Array： 实现纯javascript Array并且实现 Enumerable interface</li>
<li>Ember.ArrayController</li>
<li>Ember.Set</li>
</ul>
<h3 id="_toArray()得到纯javascript数组"><i class="fa fa-lightbulb-o"></i>  <code>toArray()</code>得到纯javascript数组</h3>
<h3 id="_firstObject,_lastObject"><i class="fa fa-lightbulb-o"></i>  <code>firstObject</code>, <code>lastObject</code></h3>
<h3 id="_MAP"><i class="fa fa-lightbulb-o"></i>  MAP</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> words = [<span class="string">"goodbye"</span>, <span class="string">"cruel"</span>, <span class="string">"world"</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> emphaticWords = words.map(<span class="function"><span class="keyword">function</span><span class="params">(item)</span> </span>{</div><div class="line">  <span class="keyword">return</span> item + <span class="string">"!"</span>;</div><div class="line">});</div><div class="line"><span class="comment">// ["goodbye!", "cruel!", "world!"]</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hawaii = Ember.<span class="built_in">Object</span>.create({</div><div class="line">  capital: <span class="string">"Honolulu"</span></div><div class="line">});</div><div class="line"></div><div class="line"><span class="keyword">var</span> california = Ember.<span class="built_in">Object</span>.create({</div><div class="line">  capital: <span class="string">"Sacramento"</span></div><div class="line">});</div><div class="line"></div><div class="line"><span class="keyword">var</span> states = [hawaii, california];</div><div class="line"></div><div class="line">states.mapBy(<span class="string">'capital'</span>);</div><div class="line"><span class="comment">//=&gt; ["Honolulu", "Sacramento"]</span></div></pre></td></tr></table></figure>

<h3 id="_filter"><i class="fa fa-lightbulb-o"></i>  filter</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"></div><div class="line">arr.filter(<span class="function"><span class="keyword">function</span><span class="params">(item, index, self)</span> </span>{</div><div class="line">  <span class="keyword">if</span> (item &lt; <span class="number">4</span>) { <span class="keyword">return</span> <span class="literal">true</span>; }</div><div class="line">})</div><div class="line"></div><div class="line"><span class="comment">// returns [1,2,3]</span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Todo = Ember.<span class="built_in">Object</span>.extend({</div><div class="line">  title: <span class="literal">null</span>,</div><div class="line">  isDone: <span class="literal">false</span></div><div class="line">});</div><div class="line"></div><div class="line">todos = [</div><div class="line">  Todo.create({ title: <span class="string">'Write code'</span>, isDone: <span class="literal">true</span> }),</div><div class="line">  Todo.create({ title: <span class="string">'Go to sleep'</span> })</div><div class="line">];</div><div class="line"></div><div class="line">todos.filterBy(<span class="string">'isDone'</span>, <span class="literal">true</span>);</div><div class="line"></div><div class="line"><span class="comment">// returns an Array containing only items with `isDone == true`</span></div></pre></td></tr></table></figure>

<h3 id="_Aggregate"><i class="fa fa-lightbulb-o"></i>  Aggregate</h3>
<p><code>every</code>和<code>some</code>判断集合所有元素或者部分元素是否满足条件。<br>也可以</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">people.isEvery(<span class="string">'isHappy'</span>, <span class="literal">true</span>) // <span class="literal">false</span></div><div class="line">people.isAny(<span class="string">'isHappy'</span>, <span class="literal">true</span>)  // <span class="literal">true</span></div></pre></td></tr></table></figure>

<h1 id="Helper">Helper</h1>
<p><strong> bind class </strong><br>class可以是</p>
<ul>
<li>a string return value of an object&#39;s property. <code>&lt;img \{\{bind-attr \class=&quot;view.someProperty}}&gt;</code></li>
<li>a boolean return value of an object&#39;s property. true插入类名， false移除类名或替换类名 <code>&lt;img \{\{bind-attr \class=&quot;view.someBool:class-name-if-true&quot;}}&gt;</code> <code>&lt;img \{\{bind-attr \class=&quot;view.someBool:class-name-if-true:class-name-if-false&quot;}}&gt;</code></li>
<li>a hard-coded value <code>&lt;img \{\{bind-attr \class=&quot;:class-name-to-always-apply&quot;}}&gt;</code></li>
</ul>
<p>复合型: <code>&lt;img \{\{bind-attr \class=&quot;:class-name-to-always-apply view.someBool:class-name-if-true view.someProperty&quot;}}&gt;</code></p>
<h3 id="_each_helper"><i class="fa fa-lightbulb-o"></i>  <code>each</code> helper</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php">Developers = [{name: <span class="string">'Yehuda'</span>},{name: <span class="string">'Tom'</span>}, {name: <span class="string">'Paul'</span>}];</span></span></span></div><div class="line"></div><div class="line"><span class="expression">{{<span class="begin-block">#<span class="keyword">each</span> Developers</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">  <span class="expression">{{<span class="variable">name</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">each</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"></div><div class="line"><span class="expression">{{<span class="begin-block">#<span class="keyword">each</span> person <span class="keyword">in</span> Developers</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">  <span class="expression">{{<span class="variable">person.name</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">each</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"></div><div class="line"><span class="expression">{{<span class="begin-block">#<span class="keyword">each</span> DeveloperNames</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">  <span class="expression">{{<span class="variable">this</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">each</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div></pre></td></tr></table></figure>

<p>集合为空时使用<code>\{\{#each}}</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php"></span></span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">each</span> person <span class="keyword">in</span> Developers</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">  <span class="expression">{{<span class="variable">person.name</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"><span class="expression">{{<span class="variable"><span class="keyword">else</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">  &lt;p&gt;Sorry, nobody is available <span class="keyword">for</span> this task.&lt;/p&gt;</div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">each</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div></pre></td></tr></table></figure>

<p>指定渲染用的view</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php"></span></span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">view</span> App.MyView </span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">  <span class="expression">{{<span class="variable"><span class="keyword">each</span></span> <span class="variable"><span class="keyword">view</span>.items</span> <span class="variable">itemView</span>\<span class="variable">class</span>=<span class="string">"App.AnItemView"</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">view</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div></pre></td></tr></table></figure>

<p>默认遍历controller的属性，可以指定<code>itemController</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php">App.DeveloperController = Ember.ObjectController.extend({</span></span></span></div><div class="line">  isAvailableForHire: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> !this.get(<span class="string">'model.isEmployed'</span>) && this.get(<span class="string">'model.isSeekingWork'</span>);</div><div class="line">  }.property(<span class="string">'isEmployed'</span>, <span class="string">'isSeekingWork'</span>)</div><div class="line">})</div><div class="line"></div><div class="line"></div><div class="line"><span class="expression">{{<span class="begin-block">#<span class="keyword">each</span> person <span class="keyword">in</span> developers itemController</span>=<span class="string">"developer"</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">  <span class="expression">{{<span class="variable">person.name</span>}}</span><span class="xml"><span class="tag"><span class="php"> </span></span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">if</span> person.isAvailableForHire</span>}}</span><span class="xml"><span class="tag"><span class="php">Hire me!</span></span></span><span class="expression">{{<span class="end-block">/<span class="keyword">if</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">each</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div></pre></td></tr></table></figure>

<h3 id="_if-else"><i class="fa fa-lightbulb-o"></i>  if-else</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php"></span></span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">if</span> message.isTypeSuccess</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">	......</div><div class="line"> <span class="expression">{{<span class="variable"><span class="keyword">else</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">	......</div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">if</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div></pre></td></tr></table></figure>

<p>另外还提供了<code>unless</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php"></span></span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">unless</span> hasPaid</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">  You owe: $<span class="expression">{{<span class="variable">total</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">unless</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div></pre></td></tr></table></figure>

<h3 id="_outlet"><i class="fa fa-lightbulb-o"></i>  <code>outlet</code></h3>
<p>一个模版占位符。<br>或</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php"></span></span></span><span class="expression">{{<span class="variable"><span class="keyword">outlet</span></span> '<span class="variable">favoritePost</span>'}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"><span class="expression">{{<span class="variable"><span class="keyword">outlet</span></span> '<span class="variable">posts</span>'}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"></div><div class="line">App.PostsRoute = Ember.Route.extend({</div><div class="line">  renderTemplate: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    this.render(<span class="string">'favoritePost'</span>, { outlet: <span class="string">'favoritePost'</span> });</div><div class="line">    this.render(<span class="string">'posts'</span>, { outlet: <span class="string">'posts'</span> });</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php"></span></span></span><span class="expression">{{<span class="variable"><span class="keyword">outlet</span></span> <span class="variable"><span class="keyword">view</span></span>='<span class="variable">sectionContainer</span>'}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"></div><div class="line">App.SectionContainer = Ember.ContainerView.extend({</div><div class="line">  tagName: <span class="string">'section'</span>,</div><div class="line">  classNames: [<span class="string">'special'</span>]</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="_partial_渲染另外一个页面而不改变上下文"><i class="fa fa-lightbulb-o"></i>  <code>partial</code> 渲染另外一个页面而不改变上下文</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php"></span></span></span><span class="expression">{{<span class="variable">foo</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"><span class="expression">{{<span class="variable">partial</span> <span class="string">"nav"</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div></pre></td></tr></table></figure>

<h3 id="_render_使用包含的上下文"><i class="fa fa-lightbulb-o"></i>  <code>render</code> 使用包含的上下文</h3>
<p>{{render &quot;navigation&quot;}}</p>
<p>Calling {{render}} from within a template will insert another template that matches the provided name. The inserted template will access its properties on its own controller (rather than the controller of the parent template).</p>
<h3 id="_view"><i class="fa fa-lightbulb-o"></i>  <code>view</code></h3>
<p>{{view}} inserts a new instance of an Ember.View into a template passing its options to the Ember.View&#39;s create method and using the supplied block as the view&#39;s own template.</p>
<h3 id="_view,_partial和render的区别"><i class="fa fa-lightbulb-o"></i>  <code>view</code>, <code>partial</code>和<code>render</code>的区别</h3>
<p><strong>General</strong></p>
<table>
<thead>
<tr>
<th>Helper</th>
<th>Template</th>
<th>Model</th>
<th>View</th>
<th>Controller</th>
</tr>
</thead>
<tbody>
<tr>
<td>{{partial}}</td>
<td>Specified Template</td>
<td>Current Model</td>
<td>Current View</td>
<td>Current Controller</td>
</tr>
<tr>
<td>{{view}}</td>
<td>View&#39;s Template</td>
<td>Current Model</td>
<td>Specified View</td>
<td>Current Controller</td>
</tr>
<tr>
<td>{{render}}</td>
<td>View&#39;s Template</td>
<td>Specified Model</td>
<td>Specified View</td>
<td>Specified Controller</td>
</tr>
</tbody>
</table>
<p><strong>Specific</strong></p>
<table>
<thead>
<tr>
<th>Helper</th>
<th>Template</th>
<th>Model</th>
<th>View</th>
<th>Controller</th>
</tr>
</thead>
<tbody>
<tr>
<td>{{partial &quot;author&quot;}}</td>
<td>author.hbs</td>
<td>Post</td>
<td>App.PostView</td>
<td>App.PostController</td>
</tr>
<tr>
<td>{{view &quot;author&quot;}}</td>
<td>author.hbs</td>
<td>Post</td>
<td>App.AuthorView</td>
<td>App.PostController</td>
</tr>
<tr>
<td>{{render &quot;author&quot; author}}</td>
<td>author.hbs</td>
<td>Author</td>
<td>App.AuthorView     App.AuthorController</td>
</tr>
</tbody>
</table>
<h3 id="_with_changes_scope,_as"><i class="fa fa-lightbulb-o"></i>  <code>with</code> changes scope, <code>as</code></h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php"></span></span></span><span class="expression">{{<span class="begin-block">#<span class="keyword">with</span> person</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">  Welcome back, &lt;b&gt;<span class="expression">{{<span class="variable">firstName</span>}}</span><span class="xml"><span class="tag"><span class="php"> </span></span></span><span class="expression">{{<span class="variable">lastName</span>}}</span><span class="xml"><span class="tag"><span class="php">&lt;/b&gt;!</span></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">with</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div></pre></td></tr></table></figure>

<h3 id="_link-to"><i class="fa fa-lightbulb-o"></i>  <code>link-to</code></h3>
<p><code>link-to (routeName, context, options) String</code><br>提供tagName: <code>\{\{#link-to &#39;photoGallery&#39; tagName=&quot;li&quot;}}  Great Hamster Photos\{\{/link-to}}</code><br>自动添加<code>\class=&quot;active&quot;</code><br>指定model: <code>\{\{#link-to &#39;photoGallery&#39; aPhoto}}  \{\{aPhoto.title}}\{\{/link-to}}</code>,  for dynamic segments或者多个model或者model id: <code>\{\{#link-to &#39;photoGallery&#39; aPhotoId}}  \{\{aPhoto.title}}\{\{/link-to}}</code></p>
<h3 id="_input"><i class="fa fa-lightbulb-o"></i>  <code>input</code></h3>
<p><code>\{\{input type=&quot;text&quot; value=firstName disabled=entryNotAllowed size=&quot;50&quot;}}</code><br>支持action: <code>\{\{input action=&quot;submit&quot;}}</code><br>支持的actions: <code>enter</code> <code>insert-newline</code> <code>escape-press</code> <code>focus-\in</code> <code>focus-out</code> <code>key-press</code> 如<code>\{\{input focus-\in=&quot;alertMessage&quot;}}</code></p>
<p>checkbox: <code>\{\{input type=&quot;checkbox&quot; name=&quot;isAdmin&quot;}}</code></p>
<h3 id="_自定义helper"><i class="fa fa-lightbulb-o"></i>  自定义<code>helper</code></h3>
<p><strong>简单语法</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Ember.Handlebars.helper(<span class="string">'highlight'</span>, <span class="function"><span class="keyword">function</span><span class="params">(value, options)</span> </span>{</div><div class="line">  <span class="keyword">var</span> escaped = Handlebars.Utils.escapeExpression(value);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Ember.Handlebars.SafeString(<span class="string">'&lt;span \class="highlight"&gt;'</span> + escaped + <span class="string">'&lt;/span&gt;'</span>);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>使用<code>\{\{highlight name}}</code></p>
<p><strong>依赖参数</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Ember.Handlebars.helper(<span class="string">'fullName'</span>, <span class="function"><span class="keyword">function</span><span class="params">(person)</span> </span>{</div><div class="line">  <span class="keyword">return</span> person.<span class="keyword">get</span>(<span class="string">'firstName'</span>) + <span class="string">' '</span> + person.<span class="keyword">get</span>(<span class="string">'lastName'</span>);</div><div class="line">}, <span class="string">'firstName'</span>, <span class="string">'lastName'</span>);</div></pre></td></tr></table></figure>

<p>使用{{fullName person}}</p>
<p><strong>定制view helper</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Ember.Handlebars.helper(<span class="string">'calendar'</span>, App.CalendarView);</div></pre></td></tr></table></figure>

<p>使用<code>\{\{calendar}}</code>或者<code>\{\{view &quot;calendar&quot;}}</code></p>
<h1 id="Component">Component</h1>
<h3 id="_HTML代码代替hbs模版"><i class="fa fa-lightbulb-o"></i>  HTML代码代替hbs模版</h3>
<p>在Component和View的实现时，可以直接使用<code>Ember.Handlebars.compile</code>直接写HTML代码，不用定义一个hbs模版文件。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>: <span class="type">Ember</span>.<span class="type">Handlebars</span>.compile(<span class="string">"Greetings {{name}}"</span>)</div></pre></td></tr></table></figure>

<h3 id="_定义组件"><i class="fa fa-lightbulb-o"></i>  定义组件</h3>
<ol>
<li>template必须以<code>components/</code>开头。比如组件<code>0</code>的模版为<code>components/blog-post</code></li>
<li>组件名必须包含破折号dash 。<code>blog-post</code>合法但是<code>post</code>不合法。</li>
<li>继承<code>Ember.Component</code>或子类。 <code>blog-post</code>的类为<code>App.BlogPostComponent</code></li>
</ol>
<h3 id="组件的钩子(Hook)函数">组件的钩子(Hook)函数</h3>
<h3 id="_传给组件参数"><i class="fa fa-lightbulb-o"></i>  传给组件参数</h3>
<p><code>\{\{blog-post title=name}}</code>, name是外部对象的属性<br>一句话<code>componentProperty=outerProperty</code></p>
<h3 id="_定制组件的属性"><i class="fa fa-lightbulb-o"></i>  定制组件的属性</h3>
<p>类似view。 </p>
<h3 id="_从组件发送action给其它应用"><i class="fa fa-lightbulb-o"></i>  从组件发送action给其它应用</h3>
<p>When a component is used inside a template, it has the ability to send actions to that template&#39;s controller and routes. These allow the component to inform the application when important events, such as the user clicking a particular element in a component, occur.<br>组件<code>\{\{my-button action=&quot;showUser&quot;}}</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">App.MyButtonComponent = Ember.Component.extend({</div><div class="line">  click: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">this</span>.sendAction();</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<p>`this.sendAction(&#39;action&#39;, param1, param2);</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">App.ConfirmButtonComponent = Ember.Component.extend({</div><div class="line">  actions: {</div><div class="line">    showConfirmation: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">this</span>.toggleProperty(<span class="string">'isShowingConfirmation'</span>); </div><div class="line">    },</div><div class="line"></div><div class="line">    confirm: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">this</span>.toggleProperty(<span class="string">'isShowingConfirmation'</span>);</div><div class="line">      <span class="keyword">this</span>.sendAction(<span class="string">'deleteAction'</span>, <span class="keyword">this</span>.<span class="keyword">get</span>(<span class="string">'param'</span>));</div><div class="line">    }</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php"></span></span></span><span class="expression">{{! <span class="variable">templates</span><span class="end-block">/components</span><span class="end-block">/confirm-button.handlebars </span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"></div><div class="line"><span class="expression">{{<span class="begin-block">#<span class="keyword">if</span> isShowingConfirmation</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">  &lt;button <span class="expression">{{<span class="variable"><span class="keyword">action</span></span> <span class="string">"confirm"</span>}}</span><span class="xml"><span class="tag"><span class="php">&gt;Click again to confirm&lt;/button&gt;</span></span></span></div><div class="line"><span class="expression">{{<span class="variable"><span class="keyword">else</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">  &lt;button <span class="expression">{{<span class="variable"><span class="keyword">action</span></span> <span class="string">"showConfirmation"</span>}}</span><span class="xml"><span class="tag"><span class="php">&gt;</span></span></span><span class="expression">{{<span class="variable">title</span>}}</span><span class="xml"><span class="tag"><span class="php">&lt;/button&gt;</span></span></span></div><div class="line"><span class="expression">{{<span class="end-block">/<span class="keyword">if</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="php"></span></span></span><span class="expression">{{! <span class="variable">index.handlebars</span> }}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line"></div><div class="line">    <span class="expression">{{<span class="begin-block">#<span class="keyword">each</span> todo <span class="keyword">in</span> todos</span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div><div class="line">      &lt;p&gt;<span class="expression">{{<span class="variable">todo.title</span>}}</span><span class="xml"><span class="tag"><span class="php"> </span></span></span><span class="expression">{{<span class="variable">confirm-button</span> <span class="variable">title</span>=<span class="string">"Delete"</span> <span class="variable">deleteAction</span>=<span class="string">"deleteTodo"</span> <span class="variable">param</span>=<span class="variable">todo</span>}}</span><span class="xml"><span class="tag"><span class="php">&lt;/p&gt;</span></span></span></div><div class="line">    <span class="expression">{{<span class="end-block">/<span class="keyword">each</span></span>}}</span><span class="xml"><span class="tag"><span class="php"></span></span></span></div></pre></td></tr></table></figure>

<p>多action: <code>\{\{user-form submit=&quot;createUser&quot; cancel=&quot;cancelUserCreation&quot;}}</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Ember.js是一款用来创建炫酷的Web应用程序的JavaScript MV* 框架。 正像AngularJS，Backbone.js一样正在广泛的应用于现代的Web开发中, 知名用户包括 Yahoo!, Groupon, 和 ZenDesk.<br>总的来说， Ember.js还在推广之中， 国内使用它做开发的还比较少， 官方的文档也不是很完备。 所以这篇文章记录了我使用Ember中收集的一些技巧，诀窍和最佳实践， 并且会不断的更新。</p>
<p>想了解Ember.js和其它JavaScript框架的区别， 可以看这篇文章: <a href="http://www.airpair.com/js/javascript-framework-comparison" target="_blank" rel="external">AngularJS vs. Backbone.js vs. Ember.js</a>。<br>]]>
    
    </summary>
    
      <category term="Ember" scheme="http://colobu.com/tags/Ember/"/>
    
      <category term="前端开发" scheme="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
