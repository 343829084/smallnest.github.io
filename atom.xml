<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[鸟窝]]></title>
  <subtitle><![CDATA[大道至简 Simplicity is the ultimate form of sophistication]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://colobu.com/"/>
  <updated>2015-10-14T07:25:26.761Z</updated>
  <id>http://colobu.com/</id>
  
  <author>
    <name><![CDATA[smallnest]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[创建超小的Golang docker 镜像]]></title>
    <link href="http://colobu.com/2015/10/12/create-minimal-golang-docker-images/"/>
    <id>http://colobu.com/2015/10/12/create-minimal-golang-docker-images/</id>
    <published>2015-10-12T04:21:19.000Z</published>
    <updated>2015-10-14T07:24:18.212Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.docker.io/" target="_blank" rel="external">Docker</a>是PaaS供应商dotCloud开源的一个基于LXC 的高级容器引擎，源代码托管在 GitHub 上, 基于Go语言开发并遵从Apache 2.0协议开源。正如DockerPool在免费Docker电子书<a href="http://dockerpool.com/static/books/docker_practice/index.html" target="_blank" rel="external">Docker —— 从入门到实践</a>中这样提到的：</p>
<blockquote>
<p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p>
<p>首先，Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。 其次，Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器。</p>
<p>容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而Docker 只需要启动 10 个隔离的应用即可。</p>
</blockquote>
<p>Docker让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架包括系统。</p>
<a id="more"></a>
<p>本文不会介绍Docker原理和操作，而是介绍如何使用Docker创建一个Golang应用程序的镜像，这样我们就可以在其它机器上运行这个镜像。<br>本文参考了很多的文章，这些文章列在了本文的底部。</p>
<h3 id="编写一个Golang服务器">编写一个Golang服务器</h3>
<p>这里我在研究<a href="https://github.com/fvbock/endless" target="_blank" rel="external">endless</a>库的时候写了一个测试程序，就用它来测试一下docker镜像的创建。<br>endless可以允许我们在重启网络服务器的时候零时间宕机， 英语是graceful restart,我称之为无缝重启。<br>服务器监听4242端口，顺便使用raymond模版引擎替换golang自带的模版引擎，采用bone这个高性能的mux库。<br>代码如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"flag"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"net/http"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"syscall"</span></div><div class="line">	<span class="string">"github.com/aymerick/raymond"</span></div><div class="line">	<span class="string">"github.com/fvbock/endless"</span></div><div class="line">	<span class="string">"github.com/go-zoo/bone"</span></div><div class="line">)</div><div class="line"><span class="keyword">var</span> (</div><div class="line">	<span class="comment">//homeTpl, _ = raymond.ParseFile("home.hbs")</span></div><div class="line">	homeTpl = raymond.MustParse(<span class="string">`&lt;html&gt;</span></div><div class="line">	&lt;head&gt;</div><div class="line">	  &lt;title&gt;test&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">	&lt;div class="entry"&gt;</div><div class="line">	  &lt;h1&gt;&lt;/h1&gt;</div><div class="line">	  &lt;div class="body"&gt;</div><div class="line">	    </div><div class="line">	  &lt;/div&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">	&lt;/html&gt;</div><div class="line">`)</div><div class="line">)</div><div class="line"><span class="keyword">func</span> homeHandler(rw http.ResponseWriter, req *http.Request) {</div><div class="line">	ctx := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">string</span>{<span class="string">"greet"</span>: <span class="string">"hello"</span>, <span class="string">"name"</span>: <span class="string">"world"</span>}</div><div class="line">	result := homeTpl.MustExec(ctx)</div><div class="line">	rw.Write([]<span class="typename">byte</span>(result))</div><div class="line">}</div><div class="line"><span class="keyword">func</span> varHandler(rw http.ResponseWriter, req *http.Request) {</div><div class="line">	varr := bone.GetValue(req, <span class="string">"var"</span>)</div><div class="line">	test := bone.GetValue(req, <span class="string">"test"</span>)</div><div class="line"></div><div class="line">	rw.Write([]<span class="typename">byte</span>(varr + <span class="string">" "</span> + test))</div><div class="line">}</div><div class="line"><span class="keyword">func</span> Handler404(rw http.ResponseWriter, req *http.Request) {</div><div class="line">	rw.Write([]<span class="typename">byte</span>(<span class="string">"These are not resources you're looking for ..."</span>))</div><div class="line">}</div><div class="line"><span class="keyword">func</span> restartHandler(rw http.ResponseWriter, req *http.Request) {</div><div class="line">	syscall.Kill(syscall.Getppid(), syscall.SIGHUP)</div><div class="line">	rw.Write([]<span class="typename">byte</span>(<span class="string">"restarted"</span>))</div><div class="line">}</div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	flag.Parse()</div><div class="line">	mux := bone.New()</div><div class="line">	<span class="comment">// Custom 404</span></div><div class="line">	mux.NotFoundFunc(Handler404)</div><div class="line">	<span class="comment">// Handle with any http method, Handle takes http.Handler as argument.</span></div><div class="line">	mux.Handle(<span class="string">"/index"</span>, http.HandlerFunc(homeHandler))</div><div class="line">	mux.Handle(<span class="string">"/index/:var/info/:test"</span>, http.HandlerFunc(varHandler))</div><div class="line">	<span class="comment">// Get, Post etc... takes http.HandlerFunc as argument.</span></div><div class="line">	mux.Post(<span class="string">"/home"</span>, http.HandlerFunc(homeHandler))</div><div class="line">	mux.Get(<span class="string">"/home/:var"</span>, http.HandlerFunc(varHandler))</div><div class="line">	mux.GetFunc(<span class="string">"/test/*"</span>, <span class="keyword">func</span>(rw http.ResponseWriter, req *http.Request) {</div><div class="line">		rw.Write([]<span class="typename">byte</span>(req.RequestURI))</div><div class="line">	})</div><div class="line">	mux.Get(<span class="string">"/restart"</span>, http.HandlerFunc(restartHandler))</div><div class="line">	err := endless.ListenAndServe(<span class="string">":4242"</span>, mux)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		log.Fatalln(err)</div><div class="line">	}</div><div class="line">	log.Println(<span class="string">"Server on 4242 stopped"</span>)</div><div class="line">	os.Exit<span class="number">(0</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Golang镜像">Golang镜像</h3>
<p>Docker官方提供了Golang各版本的镜像： <a href="https://hub.docker.com/_/golang/" target="_blank" rel="external">Official Repository - golang</a>.<br>它包含了Golang的编译和运行时环境。最简单的使用方法就是在你的<code>Dockerfile</code>文件中加入</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FROM golan<span class="variable">g:1</span>.<span class="number">3</span>-onbuild</div></pre></td></tr></table></figure>

<p>这个镜像包含了多个<code>ONBUILD</code>触发器。你可以编译和运行你的镜像：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker build -t my-golang-app .</div><div class="line">$ docker run -it --rm --name my-running-app my-golang-app</div></pre></td></tr></table></figure>

<h3 id="为编译好的Golang应用创建小的镜像">为编译好的Golang应用创建小的镜像</h3>
<p>上面的Golang容器相当的大，因为它包含了Golang的编译和运行环境。<br>官方网站上列出了镜像的大小：</p>
<blockquote>
<p>golang:1.5.1-onbuild</p>
<p>$ docker pull library/golang@sha256:f938465579d1cde302a447fef237a5a45d7e96609b97c83b9144446615ad9e72</p>
<p>  Total Virtual Size: 709.5 MB (709470237 bytes)<br>   Total v2 Content-Length: 247.0 MB (246986021 bytes)</p>
</blockquote>
<p>实际上我们并不需要那么多的软件，因为我们的Golang应用程序是预先编译好的，而不是在Golang容器中现场编译运行，因此我们不需要Golang的编译环境等。如果你查看golang:1.5的Dockerfile,会发现它基于buildpack-deps:jessie-scm，会安装GCC及一堆的build工具，下载Go的发布文件并安装。基本上这些对于我们来说并不需要。我们需要的是：</p>
<blockquote>
<p>一个可以运行我们编译好的Golang应用的镜像。</p>
</blockquote>
<p>我们可以从<code>scratch</code>镜像创建。<br><code>scratch</code>镜像是一个空的镜像文件，特别适合创建超级小的镜像。<br><code>Dockerfile</code>文件如下：</p>
<figure class="highlight dockfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> scratch</div><div class="line">ADD main /</div><div class="line">CMD [<span class="string">"/main"</span>]</div></pre></td></tr></table></figure>

<p>运行<br>输出如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># docker build -t example-scratch .</div><div class="line">Sending build context to Docker daemon 8.054 MB</div><div class="line">Step 0 : FROM scratch</div><div class="line"> -<span class="ruby"><span class="input"><span class="prompt">--&gt;</span> </span></span></div><div class="line">Step 1 : ADD main /</div><div class="line"> -<span class="ruby"><span class="input"><span class="prompt">--&gt;</span> <span class="number">4</span>ad02fa47a7d</span></span></div><div class="line"></div><div class="line">Removing intermediate container d64080c4b42f</div><div class="line">Step 2 : CMD /main</div><div class="line"> -<span class="ruby"><span class="input"><span class="prompt">--&gt;</span> <span class="constant">Running</span> in <span class="number">5</span>d9a08c3a20e</span></span></div><div class="line"> -<span class="ruby"><span class="input"><span class="prompt">--&gt;</span> <span class="number">5</span>c29c8249678</span></span></div><div class="line">Removing intermediate container 5d9a08c3a20e</div><div class="line">Successfully built 5c29c8249678</div></pre></td></tr></table></figure>

<p>这样镜像就创建成功了，查看一下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root<span class="variable">@localhost</span> work]<span class="comment"># docker images</span></div><div class="line"><span class="constant">REPOSITORY</span>          <span class="constant">TAG</span>                 <span class="constant">IMAGE</span> <span class="constant">ID</span>            <span class="constant">CREATED</span>             <span class="constant">VIRTUAL</span> <span class="constant">SIZE</span></div><div class="line">example-scratch     latest              <span class="number">5</span>c29c8249678        <span class="number">3</span> minutes ago       <span class="number">8.052</span> <span class="constant">MB</span></div></pre></td></tr></table></figure>

<p>只有8M左右，非常的小。</p>
<p>但是运行这个镜像，容器无法创建：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker run -it -p 4242:4242 example-scratch</span></div><div class="line">no such <span class="built_in">file</span> <span class="operator">or</span> <span class="built_in">directory</span></div><div class="line">Error response <span class="built_in">from</span> daemon: Cannot start container <span class="number">79</span>bb9fb62788b4a8c1487695a3219ddf3aa85bde2bc44473838f6f4d1583a204: [<span class="number">8</span>] System error: no such <span class="built_in">file</span> <span class="operator">or</span> <span class="built_in">directory</span></div></pre></td></tr></table></figure>

<p>原因是我们的main文件生成的时候依赖的一些库如libc还是动态链接的，但是scratch 镜像完全是空的，什么东西也不包含，所以生成main时候要按照下面的方式生成，使生成的main静态链接所有的库：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">CGO_ENABLED=</span><span class="number">0</span> <span class="variable">GOOS=</span>linux go build -a -installsuffix cgo -o main .</div></pre></td></tr></table></figure>

<p>然后重新生成镜像并运行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># docker build -t example-scratch .</span></div><div class="line"><span class="preprocessor"># docker run -it -p 4242:4242 example-scratch</span></div></pre></td></tr></table></figure>

<p>容器运行成功，在浏览器中访问<a href="http://宿主IP:4242/index成功返回结果" target="_blank" rel="external">http://宿主IP:4242/index成功返回结果</a></p>
<h3 id="发布">发布</h3>
<p>可以方便的将刚才的镜像发布到docker.io上。<br>首先将刚才的镜像打tag:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># docker images</span></div><div class="line">REPOSITORY         <span class="constant"> TAG </span>               <span class="constant"> IMAGE </span>ID           <span class="constant"> CREATED </span>           <span class="constant"> VIRTUAL </span>SIZE</div><div class="line">example-scratch     latest              <span class="number">2</span>ea4bbfd67dc        <span class="number">10</span> minutes ago      <span class="number">8.01</span> MB</div><div class="line"><span class="preprocessor"># docker tag 2ea4bbfd67dc smallnest/example-scratch</span></div><div class="line"><span class="preprocessor"># docker images</span></div><div class="line">REPOSITORY                 <span class="constant"> TAG </span>               <span class="constant"> IMAGE </span>ID           <span class="constant"> CREATED </span>           <span class="constant"> VIRTUAL </span>SIZE</div><div class="line">smallnest/example-scratch   latest              <span class="number">2</span>ea4bbfd67dc        <span class="number">10</span> minutes ago      <span class="number">8.01</span> MB</div><div class="line">example-scratch             latest              <span class="number">2</span>ea4bbfd67dc        <span class="number">10</span> minutes ago      <span class="number">8.01</span> MB</div></pre></td></tr></table></figure>

<p>运行<code>docker login</code>登录，然后运行下面的命令push到docker.io上。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push smallnest/example-scratch</div></pre></td></tr></table></figure>

<p>访问 <a href="https://hub.docker.com/r/smallnest/example-scratch/" target="_blank" rel="external">https://hub.docker.com/r/smallnest/example-scratch/</a> 可以看到刚刚push的这个镜像，这样我们就可以pull到其它机器上运行了。</p>
<h3 id="参考文档">参考文档</h3>
<ol>
<li><a href="https://blog.golang.org/docker" target="_blank" rel="external">https://blog.golang.org/docker</a></li>
<li><a href="https://hub.docker.com/_/golang/" target="_blank" rel="external">https://hub.docker.com/_/golang/</a></li>
<li><a href="https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/" target="_blank" rel="external">https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/</a></li>
<li><a href="https://medium.com/@kelseyhightower/optimizing-docker-images-for-static-binaries-b5696e26eb07" target="_blank" rel="external">https://medium.com/@kelseyhightower/optimizing-docker-images-for-static-binaries-b5696e26eb07</a></li>
<li><a href="http://www.iron.io/blog/2015/07/an-easier-way-to-create-tiny-golang-docker-images.html" target="_blank" rel="external">http://www.iron.io/blog/2015/07/an-easier-way-to-create-tiny-golang-docker-images.html</a></li>
<li><a href="https://labs.ctl.io/small-docker-images-for-go-apps/" target="_blank" rel="external">https://labs.ctl.io/small-docker-images-for-go-apps/</a></li>
<li><a href="http://dockerpool.com/static/books/docker_practice/introduction/why.html" target="_blank" rel="external">http://dockerpool.com/static/books/docker_practice/introduction/why.html</a></li>
<li><a href="https://docs.docker.com/installation/centos/" target="_blank" rel="external">https://docs.docker.com/installation/centos/</a></li>
<li><a href="http://segmentfault.com/a/1190000002766882" target="_blank" rel="external">http://segmentfault.com/a/1190000002766882</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.docker.io/" target="_blank" rel="external">Docker</a>是PaaS供应商dotCloud开源的一个基于LXC 的高级容器引擎，源代码托管在 GitHub 上, 基于Go语言开发并遵从Apache 2.0协议开源。正如DockerPool在免费Docker电子书<a href="http://dockerpool.com/static/books/docker_practice/index.html" target="_blank" rel="external">Docker —— 从入门到实践</a>中这样提到的：</p>
<blockquote>
<p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p>
<p>首先，Docker 容器的启动可以在秒级实现，这相比传统的虚拟机方式要快得多。 其次，Docker 对系统资源的利用率很高，一台主机上可以同时运行数千个 Docker 容器。</p>
<p>容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。传统虚拟机方式运行 10 个不同的应用就要起 10 个虚拟机，而Docker 只需要启动 10 个隔离的应用即可。</p>
</blockquote>
<p>Docker让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是,他们不依赖于任何语言、框架包括系统。</p>
]]>
    
    </summary>
    
      <category term="Docker" scheme="http://colobu.com/tags/Docker/"/>
    
      <category term="Go" scheme="http://colobu.com/tags/Go/"/>
    
      <category term="Docker" scheme="http://colobu.com/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux Signal及Golang中的信号处理]]></title>
    <link href="http://colobu.com/2015/10/09/Linux-Signals/"/>
    <id>http://colobu.com/2015/10/09/Linux-Signals/</id>
    <published>2015-10-09T07:21:28.000Z</published>
    <updated>2015-10-09T09:03:54.100Z</updated>
    <content type="html"><![CDATA[<p>信号(Signal)是Linux, 类Unix和其它POSIX兼容的操作系统中用来进程间通讯的一种方式。一个信号就是一个异步的通知，发送给某个进程，或者同进程的某个线程，告诉它们某个事件发生了。<br>当信号发送到某个进程中时，操作系统会中断该进程的正常流程，并进入相应的信号处理函数执行操作，完成后再回到中断的地方继续执行。<br>如果目标进程先前注册了某个信号的处理程序(signal handler),则此处理程序会被调用，否则缺省的处理程序被调用。</p>
<a id="more"></a>
<h3 id="发送信号">发送信号</h3>
<p><em>kill</em> <strong>系统调用(system call)</strong>可以用来发送一个特定的信号给进程。<br><em>kill</em> <strong>命令</strong>允许用户发送一个特定的信号给进程。<br><em>raise</em> <strong>库函数</strong>可以发送特定的信号给当前进程。</p>
<p>在Linux下运行<code>man kill</code>可以查看此命令的介绍和用法。</p>
<blockquote>
<p>The command <strong>kill</strong> sends the specified signal to the specified process or process group.  If no signal is specified, the TERM signal is sent.  The TERM signal will kill processes which do not catch  this  signal.   For  other  processes, it may be necessary to use the KILL (9) signal, since this signal cannot be caught.</p>
<p>Most  modern  shells  have  a  builtin kill function, with a usage rather similar to that of the command described here. The &#39;-a&#39; and &#39;-p&#39; options, and the possibility to specify pids by command name is a local extension.</p>
<p>If sig is 0, then no signal is sent, but error checking is still performed.</p>
</blockquote>
<p>一些异常比如除以0或者 segmentation violation 相应的会产生<code>SIGFPE</code>和<code>SIGSEGV</code>信号，缺省情况下导致core dump和程序退出。<br>内核在某些情况下发送信号，比如在进程往一个已经关闭的管道写数据时会产生<code>SIGPIPE</code>信号。<br>在进程的终端敲入特定的组合键也会导致系统发送某个特定的信号给此进程：</p>
<ul>
<li>Ctrl-C 发送 INT signal (SIGINT)，通常导致进程结束</li>
<li>Ctrl-Z 发送 TSTP signal (SIGTSTP); 通常导致进程挂起(suspend)</li>
<li>Ctrl-\ 发送 QUIT signal (SIGQUIT); 通常导致进程结束 和 dump core.</li>
<li>Ctrl-T (不是所有的UNIX都支持) 发送INFO signal (SIGINFO); 导致操作系统显示此运行命令的信息</li>
</ul>
<p><code>kill -9 pid</code> 会发送 <code>SIGKILL</code>信号给进程。</p>
<h3 id="处理信号">处理信号</h3>
<p>Signal handler可以通过<code>signal()</code>系统调用进行设置。如果没有设置，缺省的handler会被调用，当然进程也可以设置忽略此信号。<br>有两种信号不能被拦截和处理: <code>SIGKILL</code>和<code>SIGSTOP</code>。</p>
<p>当接收到信号时，进程会根据信号的响应动作执行相应的操作，信号的响应动作有以下几种：</p>
<ul>
<li>中止进程(Term)</li>
<li>忽略信号(Ign)</li>
<li>中止进程并保存内存信息(Core)</li>
<li>停止进程(Stop)</li>
<li>继续运行进程(Cont)</li>
</ul>
<p>用户可以通过<code>signal</code>或<code>sigaction</code>函数修改信号的响应动作（也就是常说的“注册信号”）。另外，在多线程中，各线程的信号响应动作都是相同的，不能对某个线程设置独立的响应动作。</p>
<h3 id="信号类型">信号类型</h3>
<p>个平台的信号定义或许有些不同。下面列出了POSIX中定义的信号。<br>Linux 使用34-64信号用作实时系统中。<br>命令<code>man 7 signal</code>提供了官方的信号介绍。</p>
<p>在POSIX.1-1990标准中定义的信号列表</p>
<table><thead><tr><th>信号</th><th>值</th><th>动作</th><th>说明</th></tr></thead><tbody><tr><td>SIGHUP</td><td>1</td><td>Term</td><td>终端控制进程结束(终端连接断开)</td></tr><tr><td>SIGINT</td><td>2</td><td>Term</td><td>用户发送INTR字符(Ctrl+C)触发</td></tr><tr><td>SIGQUIT</td><td>3</td><td>Core</td><td>用户发送QUIT字符(Ctrl+/)触发</td></tr><tr><td>SIGILL</td><td>4</td><td>Core</td><td>非法指令(程序错误、试图执行数据段、栈溢出等)</td></tr><tr><td>SIGABRT</td><td>6</td><td>Core</td><td>调用abort函数触发</td></tr><tr><td>SIGFPE</td><td>8</td><td>Core</td><td>算术运行错误(浮点运算错误、除数为零等)</td></tr><tr><td>SIGKILL</td><td>9</td><td>Term</td><td>无条件结束程序(不能被捕获、阻塞或忽略)</td></tr><tr><td>SIGSEGV</td><td>11</td><td>Core</td><td>无效内存引用(试图访问不属于自己的内存空间、对只读内存空间进行写操作)</td></tr><tr><td>SIGPIPE</td><td>13</td><td>Term</td><td>消息管道损坏(FIFO/Socket通信时，管道未打开而进行写操作)</td></tr><tr><td>SIGALRM</td><td>14</td><td>Term</td><td>时钟定时信号</td></tr><tr><td>SIGTERM</td><td>15</td><td>Term</td><td>结束程序(可以被捕获、阻塞或忽略)</td></tr><tr><td>SIGUSR1</td><td>30,10,16</td><td>Term</td><td>用户保留</td></tr><tr><td>SIGUSR2</td><td>31,12,17</td><td>Term</td><td>用户保留</td></tr><tr><td>SIGCHLD</td><td>20,17,18</td><td>Ign</td><td>子进程结束(由父进程接收)</td></tr><tr><td>SIGCONT</td><td>19,18,25</td><td>Cont</td><td>继续执行已经停止的进程(不能被阻塞)</td></tr><tr><td>SIGSTOP</td><td>17,19,23</td><td>Stop</td><td>停止进程(不能被捕获、阻塞或忽略)</td></tr><tr><td>SIGTSTP</td><td>18,20,24</td><td>Stop</td><td>停止进程(可以被捕获、阻塞或忽略)</td></tr><tr><td>SIGTTIN</td><td>21,21,26</td><td>Stop</td><td>后台程序从终端中读取数据时触发</td></tr><tr><td>SIGTTOU</td><td>22,22,27</td><td>Stop</td><td>后台程序向终端中写数据时触发</td></tr></tbody></table> 

<p>在SUSv2和POSIX.1-2001标准中的信号列表:</p>
<table><thead><tr><th>信号</th><th>值</th><th>动作</th><th>说明</th></tr></thead><tbody><tr><td>SIGTRAP</td><td>5</td><td>Core</td><td>Trap指令触发(如断点，在调试器中使用)</td></tr><tr><td>SIGBUS</td><td>0,7,10</td><td>Core</td><td>非法地址(内存地址对齐错误)</td></tr><tr><td>SIGPOLL</td><td></td><td>Term</td><td>Pollable event (Sys V). Synonym for SIGIO</td></tr><tr><td>SIGPROF</td><td>27,27,29</td><td>Term</td><td>性能时钟信号(包含系统调用时间和进程占用CPU的时间)</td></tr><tr><td>SIGSYS</td><td>12,31,12</td><td>Core</td><td>无效的系统调用(SVr4)</td></tr><tr><td>SIGURG</td><td>16,23,21</td><td>Ign</td><td>有紧急数据到达Socket(4.2BSD)</td></tr><tr><td>SIGVTALRM</td><td>26,26,28</td><td>Term</td><td>虚拟时钟信号(进程占用CPU的时间)(4.2BSD)</td></tr><tr><td>SIGXCPU</td><td>24,24,30</td><td>Core</td><td>超过CPU时间资源限制(4.2BSD)</td></tr><tr><td>SIGXFSZ</td><td>25,25,31</td><td>Core</td><td>超过文件大小资源限制(4.2BSD)</td></tr></tbody></table>

<h3 id="Go中的Signal发送和处理">Go中的Signal发送和处理</h3>
<p>有时候我们想在Go程序中处理Signal信号，比如收到<code>SIGTERM</code>信号后优雅的关闭程序(参看下一节的应用)。<br>Go信号通知机制可以通过往一个channel中发送<code>os.Signal</code>实现。<br>首先我们创建一个os.Signal channel，然后使用<code>signal.Notify</code>注册要接收的信号。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"os"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"os/signal"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"syscall"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line"></div><div class="line">    <span class="comment">// Go signal notification works by sending `os.Signal`</span></div><div class="line">    <span class="comment">// values on a channel. We'll create a channel to</span></div><div class="line">    <span class="comment">// receive these notifications (we'll also make one to</span></div><div class="line">    <span class="comment">// notify us when the program can exit).</span></div><div class="line">    sigs := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal,<span class="number"> 1</span>)</div><div class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">bool</span>,<span class="number"> 1</span>)</div><div class="line"></div><div class="line">    <span class="comment">// `signal.Notify` registers the given channel to</span></div><div class="line">    <span class="comment">// receive notifications of the specified signals.</span></div><div class="line">    signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)</div><div class="line"></div><div class="line">    <span class="comment">// This goroutine executes a blocking receive for</span></div><div class="line">    <span class="comment">// signals. When it gets one it'll print it out</span></div><div class="line">    <span class="comment">// and then notify the program that it can finish.</span></div><div class="line">    <span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">        sig := &lt;-sigs</div><div class="line">        fmt.Println()</div><div class="line">        fmt.Println(sig)</div><div class="line">        done &lt;- <span class="constant">true</span></div><div class="line">    }()</div><div class="line"></div><div class="line">    <span class="comment">// The program will wait here until it gets the</span></div><div class="line">    <span class="comment">// expected signal (as indicated by the goroutine</span></div><div class="line">    <span class="comment">// above sending a value on `done`) and then exit.</span></div><div class="line">    fmt.Println(<span class="string">"awaiting signal"</span>)</div><div class="line">    &lt;-done</div><div class="line">    fmt.Println(<span class="string">"exiting"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>go run main.go</code>执行这个程序，敲入ctrl-C会发送<code>SIGINT</code>信号。 此程序接收到这个信号后会打印退出。</p>
<h3 id="Go网络服务器如果无缝重启">Go网络服务器如果无缝重启</h3>
<p>Go很适合编写服务器端的网络程序。DevOps经常会遇到的一个情况是升级系统或者重新加载配置文件，在这种情况下我们需要重启此网络程序，如果网络程序暂停的时间较长，则给客户的感觉很不好。<br>如何实现优雅地重启一个Go网络程序呢。主要要解决两个问题：</p>
<ol>
<li>进程重启不需要关闭监听的端口</li>
<li>既有请求应当完全处理或者超时</li>
</ol>
<p><a href="http://twitter.com/humblehack" target="_blank" rel="external">@humblehack</a> 在他的文章<a href="http://grisha.org/blog/2014/06/03/graceful-restart-in-golang/" target="_blank" rel="external">Graceful Restart in Golang</a>中提供了一种方式，而<a href="https://github.com/fvbock" target="_blank" rel="external">Florian von Bock</a>根据此思路实现了一个框架<a href="https://github.com/fvbock/endless" target="_blank" rel="external">endless</a>。<br>此框架使用起来超级简单:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">err := endless.ListenAndServe(<span class="string">"localhost:4242"</span>, mux)</div></pre></td></tr></table></figure>

<p>只需替换 <code>http.ListenAndServe</code> 和 <code>http.ListenAndServeTLS</code>。</p>
<p>它会监听这些信号： <code>syscall.SIGHUP</code>, <code>syscall.SIGUSR1</code>, <code>syscall.SIGUSR2</code>, <code>syscall.SIGINT</code>, <code>syscall.SIGTERM</code>, 和 <code>syscall.SIGTSTP</code>。</p>
<p>此文章提到的思路是：</p>
<ol>
<li>通过<code>exec.Command</code> fork一个新的进程，同时继承当前进程的打开的文件(输入输出，socket等)</li>
</ol>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">file := netListener.File() <span class="comment">// this returns a Dup()</span></div><div class="line">path := <span class="string">"/path/to/executable"</span></div><div class="line">args := []<span class="typename">string</span>{</div><div class="line">    <span class="string">"-graceful"</span>}</div><div class="line"></div><div class="line">cmd := exec.Command(path, args...)</div><div class="line">cmd.Stdout = os.Stdout</div><div class="line">cmd.Stderr = os.Stderr</div><div class="line">cmd.ExtraFiles = []*os.File{file}</div><div class="line"></div><div class="line">err := cmd.Start()</div><div class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">    log.Fatalf(<span class="string">"gracefulRestart: Failed to launch, error: %v"</span>, err)</div><div class="line">}</div></pre></td></tr></table></figure>

<ol>
<li>子进程初始化<br>网络程序的启动代码</li>
</ol>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">server := &http.Server{Addr: <span class="string">"0.0.0.0:8888"</span>}</div><div class="line"></div><div class="line"> <span class="keyword">var</span> gracefulChild <span class="typename">bool</span></div><div class="line"> <span class="keyword">var</span> l net.Listever</div><div class="line"> <span class="keyword">var</span> err error</div><div class="line"></div><div class="line"> flag.BoolVar(&gracefulChild, <span class="string">"graceful"</span>, <span class="constant">false</span>, <span class="string">"listen on fd open 3 (internal use only)"</span>)</div><div class="line"></div><div class="line"> <span class="keyword">if</span> gracefulChild {</div><div class="line">     log.Print(<span class="string">"main: Listening to existing file descriptor 3."</span>)</div><div class="line">     f := os.NewFile<span class="number">(3</span>, <span class="string">""</span>)</div><div class="line">     l, err = net.FileListener(f)</div><div class="line"> } <span class="keyword">else</span> {</div><div class="line">     log.Print(<span class="string">"main: Listening on a new file descriptor."</span>)</div><div class="line">     l, err = net.Listen(<span class="string">"tcp"</span>, server.Addr)</div><div class="line"> }</div></pre></td></tr></table></figure>

<ol>
<li>父进程停止</li>
</ol>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> gracefulChild {</div><div class="line">    parent := syscall.Getppid()</div><div class="line">    log.Printf(<span class="string">"main: Killing parent pid: %v"</span>, parent)</div><div class="line">    syscall.Kill(parent, syscall.SIGTERM)</div><div class="line">}</div><div class="line"></div><div class="line">server.Serve(l)</div></pre></td></tr></table></figure>

<p>同时他还提供的如何处理已经正在处理的请求。可以查看它的文章了解详细情况。</p>
<p>因此，处理特定的信号可以实现程序无缝的重启。</p>
<h3 id="参考资料">参考资料</h3>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Unix_signal" target="_blank" rel="external">https://en.wikipedia.org/wiki/Unix_signal</a></li>
<li><a href="http://hutaow.com/blog/2013/10/19/linux-signal/" target="_blank" rel="external">http://hutaow.com/blog/2013/10/19/linux-signal/</a></li>
<li><a href="http://www.ucs.cam.ac.uk/docs/course-notes/unix-courses/Building/files/signals.pdf" target="_blank" rel="external">http://www.ucs.cam.ac.uk/docs/course-notes/unix-courses/Building/files/signals.pdf</a></li>
<li><a href="https://golang.org/pkg/os/signal/" target="_blank" rel="external">https://golang.org/pkg/os/signal/</a></li>
<li><a href="https://gobyexample.com/signals" target="_blank" rel="external">https://gobyexample.com/signals</a></li>
<li><a href="http://grisha.org/blog/2014/06/03/graceful-restart-in-golang/" target="_blank" rel="external">http://grisha.org/blog/2014/06/03/graceful-restart-in-golang/</a></li>
<li><a href="https://fitstar.github.io/falcore/hot_restart.html" target="_blank" rel="external">https://fitstar.github.io/falcore/hot_restart.html</a></li>
<li><a href="https://github.com/rcrowley/goagain" target="_blank" rel="external">https://github.com/rcrowley/goagain</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>信号(Signal)是Linux, 类Unix和其它POSIX兼容的操作系统中用来进程间通讯的一种方式。一个信号就是一个异步的通知，发送给某个进程，或者同进程的某个线程，告诉它们某个事件发生了。<br>当信号发送到某个进程中时，操作系统会中断该进程的正常流程，并进入相应的信号处理函数执行操作，完成后再回到中断的地方继续执行。<br>如果目标进程先前注册了某个信号的处理程序(signal handler),则此处理程序会被调用，否则缺省的处理程序被调用。</p>
]]>
    
    </summary>
    
      <category term="Linux" scheme="http://colobu.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[交叉编译Go程序]]></title>
    <link href="http://colobu.com/2015/09/28/go-cross-compiling/"/>
    <id>http://colobu.com/2015/09/28/go-cross-compiling/</id>
    <published>2015-09-28T06:10:33.000Z</published>
    <updated>2015-10-10T02:31:17.119Z</updated>
    <content type="html"><![CDATA[<p>Go 1.5以前，交叉编译程序还是有一点麻烦的，你需要<a href="http://dave.cheney.net/2013/07/09/an-introduction-to-cross-compilation-with-go-1-1" target="_blank" rel="external">massive scripts t</a>来编译和宿主机器不同的程序。</p>
<p>正如<a href="http://dave.cheney.net/2015/03/03/cross-compilation-just-got-a-whole-lot-better-in-go-1-5" target="_blank" rel="external"> comes with support for all architectures built in</a>文章中介绍的， Go 1.5可就简单的多了，你只需设置 <strong>GOOS</strong> 和 <strong>GOARCH </strong> 两个环境变量就能生成所需平台的Go程序。</p>
<p>比如使用下面的代码测试：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"runtime"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    fmt.Printf(<span class="string">"OS: %s\nArchitecture: %s\n"</span>, runtime.GOOS, runtime.GOARCH)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>编译它： <code>$ GOOS=darwin GOARCH=386 go build test.go</code><br>就可以生成运行在<code>OS X</code>上的程序。<br><a id="more"></a></p>
<p>可用的OS和ARCH的值如下：</p>
<table cellpadding="0"><tbody><tr><th width="50"></th><th align="left" width="100"><code>$GOOS</code></th><th align="left" width="100"><code>$GOARCH</code></th></tr><tr><td></td><td><code>darwin</code></td><td><code>386</code></td></tr><tr><td></td><td><code>darwin</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>darwin</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>darwin</code></td><td><code>arm64</code></td></tr><tr><td></td><td><code>dragonfly</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>freebsd</code></td><td><code>386</code></td></tr><tr><td></td><td><code>freebsd</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>freebsd</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>386</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>arm64</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>ppc64</code></td></tr><tr><td></td><td><code>linux</code></td><td><code>ppc64le</code></td></tr><tr><td></td><td><code>netbsd</code></td><td><code>386</code></td></tr><tr><td></td><td><code>netbsd</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>netbsd</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>openbsd</code></td><td><code>386</code></td></tr><tr><td></td><td><code>openbsd</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>openbsd</code></td><td><code>arm</code></td></tr><tr><td></td><td><code>plan9</code></td><td><code>386</code></td></tr><tr><td></td><td><code>plan9</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>solaris</code></td><td><code>amd64</code></td></tr><tr><td></td><td><code>windows</code></td><td><code>386</code></td></tr><tr><td></td><td><code>windows</code></td><td><code>amd64</code></td></tr></tbody></table>

<p>不同的操作系统下的库可能有不同的实现， 比如<a href="https://golang.org/src/syscall/" target="_blank" rel="external">syscall</a>库。go build没有内置的<code>#define</code>或者预处理器之类的处理平台相关的代码取舍， 而是采用tag和文件后缀的方式实现。<br><strong>tag方式</strong><br>tag遵循一下规则</p>
<ol>
<li>a build tag is evaluated as the OR of space-separated options</li>
<li>each option evaluates as the AND of its comma-separated terms</li>
<li>each term is an alphanumeric word or, preceded by !, its negation</li>
</ol>
<p>在文件的头部增加tag:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// +build darwin freebsd netbsd openbsd</span></div></pre></td></tr></table></figure>

<p>可以有多个tag,之间是<strong>AND</strong>的关系</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// +build linux darwin</span></div><div class="line"><span class="comment">// +build 386</span></div></pre></td></tr></table></figure>

<p>注意tag和package中间需要有空行分隔，下面的例子是不对的:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// +build !linux</span></div><div class="line"><span class="keyword">package</span> mypkg <span class="comment">// wrong</span></div></pre></td></tr></table></figure>

<p><strong>文件后缀方式</strong><br>以<em>_$GOOS.go</em>为后缀的文件只在此平台上编译，其它平台上编译时就当此文件不存在。完整的后缀如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_<span class="variable">$GOOS_</span><span class="variable">$GOARCH</span>.go</div></pre></td></tr></table></figure>

<p>如syscall_linux_amd64.go,syscall_windows_386.go,syscall_windows.go等。</p>
<h4 id="参考文档">参考文档</h4>
<ol>
<li><a href="http://golangcookbook.com/chapters/running/cross-compiling/" target="_blank" rel="external">http://golangcookbook.com/chapters/running/cross-compiling/</a></li>
<li><a href="http://dave.cheney.net/2013/07/09/an-introduction-to-cross-compilation-with-go-1-1" target="_blank" rel="external">http://dave.cheney.net/2013/07/09/an-introduction-to-cross-compilation-with-go-1-1</a></li>
<li><a href="http://dave.cheney.net/2015/03/03/cross-compilation-just-got-a-whole-lot-better-in-go-1-5" target="_blank" rel="external">http://dave.cheney.net/2015/03/03/cross-compilation-just-got-a-whole-lot-better-in-go-1-5</a></li>
<li><a href="https://golang.org/doc/install/source#environment" target="_blank" rel="external">https://golang.org/doc/install/source#environment</a></li>
<li><a href="http://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool" target="_blank" rel="external">http://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Go 1.5以前，交叉编译程序还是有一点麻烦的，你需要<a href="http://dave.cheney.net/2013/07/09/an-introduction-to-cross-compilation-with-go-1-1" target="_blank" rel="external">massive scripts t</a>来编译和宿主机器不同的程序。</p>
<p>正如<a href="http://dave.cheney.net/2015/03/03/cross-compilation-just-got-a-whole-lot-better-in-go-1-5" target="_blank" rel="external"> comes with support for all architectures built in</a>文章中介绍的， Go 1.5可就简单的多了，你只需设置 <strong>GOOS</strong> 和 <strong>GOARCH </strong> 两个环境变量就能生成所需平台的Go程序。</p>
<p>比如使用下面的代码测试：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"runtime"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    fmt.Printf(<span class="string">"OS: %s\nArchitecture: %s\n"</span>, runtime.GOOS, runtime.GOARCH)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>编译它： <code>$ GOOS=darwin GOARCH=386 go build test.go</code><br>就可以生成运行在<code>OS X</code>上的程序。<br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[几种Go序列化库的性能比较]]></title>
    <link href="http://colobu.com/2015/09/28/Golang-Serializer-Benchmark-Comparison/"/>
    <id>http://colobu.com/2015/09/28/Golang-Serializer-Benchmark-Comparison/</id>
    <published>2015-09-28T05:39:23.000Z</published>
    <updated>2015-09-28T06:03:08.306Z</updated>
    <content type="html"><![CDATA[<p>序列化库在网络传输，RPC，数据库访问等环境中经常用到，它的性能的好坏直接影响着整个产品的性能。<br>本文列出了几种高性能的Go语言的序列化库，并通过一个简单的无循环引用的数据结构测试它们的性能。<br>测试代码: <a href="https://github.com/smallnest/gosercomp" target="_blank" rel="external">gosercomp at github</a><br><a id="more"></a></p>
<h3 id="测试的_Serializers">测试的 Serializers</h3>
<p>以golang自带的<em>encoding/json</em>和<em>encoding/xml</em>为基准，测试以下性能比较好的几种序列化库。</p>
<ul>
<li><a href="http://golang.org/pkg/encoding/json/" target="_blank" rel="external">encoding/json</a></li>
<li><a href="http://golang.org/pkg/encoding/xml/" target="_blank" rel="external">encoding/xml</a></li>
<li><a href="http://github.com/youtube/vitess/go/bson" target="_blank" rel="external">github.com/youtube/vitess/go/bson</a></li>
<li><a href="http://github.com/philhofer/msgp" target="_blank" rel="external">github.com/philhofer/msgp</a></li>
<li><a href="http://github.com/golang/protobuf" target="_blank" rel="external">github.com/golang/protobuf</a></li>
<li><a href="http://github.com/gogo/protobuf" target="_blank" rel="external">github.com/gogo/protobuf</a></li>
<li><a href="http://github.com/google/flatbuffers" target="_blank" rel="external">github.com/google/flatbuffers</a></li>
</ul>
<h3 id="排除的_Serializers">排除的 Serializers</h3>
<p>基于 alecthomas 已有的<a href="https://github.com/alecthomas/go_serialization_benchmarks" target="_blank" rel="external">测试</a>，下面的库由于性能的原因没有进行测试。</p>
<ul>
<li><a href="http://golang.org/pkg/encoding/gob/" target="_blank" rel="external">encoding/gob</a></li>
<li><a href="http://github.com/alecthomas/binary" target="_blank" rel="external">github.com/alecthomas/binary</a></li>
<li><a href="http://github.com/davecgh/go-xdr/xdr" target="_blank" rel="external">github.com/davecgh/go-xdr/xdr</a></li>
<li><a href="http://github.com/ugorji/go/codec" target="_blank" rel="external">github.com/ugorji/go/codec</a></li>
<li><a href="http://labix.org/v2/mgo/bson" target="_blank" rel="external">labix.org/v2/mgo/bson</a></li>
<li><a href="http://github.com/DeDiS/protobuf" target="_blank" rel="external">github.com/DeDiS/protobuf</a></li>
<li><a href="http://gopkg.in/vmihailenco/msgpack.v2" target="_blank" rel="external">gopkg.in/vmihailenco/msgpack.v2</a></li>
</ul>
<h3 id="测试环境">测试环境</h3>
<p>对于<code>github.com/youtube/vitess/go/bson</code>，你可能需要安装 <code>goimports</code>和<code>codegen</code>:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/youtube/vitess/<span class="keyword">go</span>/bson</div><div class="line"><span class="keyword">go</span> get golang.org/x/tools/cmd/goimports</div><div class="line"><span class="keyword">go</span> get github.com/youtube/vitess/tree/master/<span class="keyword">go</span>/cmd/bsongen</div><div class="line">bsongen -file data.<span class="keyword">go</span> -o bson_data.<span class="keyword">go</span> -<span class="keyword">type</span> ColorGroup</div></pre></td></tr></table></figure>

<p>对于 <code>MessagePack</code>，你需要安装库以及利用<code>go generate</code>生成相关的类:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/tinylib/msgp</div><div class="line"><span class="keyword">go</span> generate</div></pre></td></tr></table></figure>

<p>对于<code>ProtoBuf</code>,你需要安装<a href="https://github.com/google/protobuf/releases" target="_blank" rel="external">protoc编译器</a>，以及protoc库以及生成相关的类：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/golang/protobuf</div><div class="line"><span class="keyword">go</span> generate</div></pre></td></tr></table></figure>

<p>对于<code>gogo/protobuf</code>,你需要安装库以及生成相关的类：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/gogo/protobuf/gogoproto</div><div class="line"><span class="keyword">go</span> get github.com/gogo/protobuf/protoc-gen-gofast</div><div class="line"><span class="keyword">go</span> generate</div></pre></td></tr></table></figure>

<p>对于<code>flatbuffers</code>,你需要安装<a href="https://github.com/google/flatbuffers/releases" target="_blank" rel="external">flatbuffers编译器</a>, 以及flatbuffers库：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">github.com/google/flatbuffers/<span class="keyword">go</span></div><div class="line"><span class="keyword">go</span> generate</div></pre></td></tr></table></figure>

<p>事实上，这里通过<code>go generate</code>生成相关的类，你也可以通过命令行生成，请参考<code>data.go</code>中的注释。</p>
<p>运行下面的命令测试:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">go test -bench</span>=<span class="string">.</span></div></pre></td></tr></table></figure>

<h3 id="测试数据">测试数据</h3>
<p>所有的测试基于以下的struct,自动生成的struct， 比如protobuf也和此结构基本一致。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ColorGroup <span class="keyword">struct</span> {</div><div class="line">	ID     <span class="typename">int</span> <span class="string">`json:"id" xml:"id,attr""`</span></div><div class="line">	Name   <span class="typename">string</span> <span class="string">`json:"name" xml:"name"`</span></div><div class="line">	Colors []<span class="typename">string</span> <span class="string">`json:"colors" xml:"colors"`</span></div><div class="line">}</div></pre></td></tr></table></figure>


<h3 id="性能测试结果">性能测试结果</h3>
<figure class="highlight csv"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="header">benchmark _name                               iter                 time/iter </span></div><div class="line">------------------------------------------------------------------------------</div><div class="line">BenchmarkMarshalByJson-4                      1000000              1877 ns/op</div><div class="line">BenchmarkUnmarshalByJson-4                    300000               4099 ns/op</div><div class="line"></div><div class="line">BenchmarkMarshalByXml-4                       200000               8315 ns/op</div><div class="line">BenchmarkUnmarshalByXml-4                     100000               26627 ns/op</div><div class="line"></div><div class="line">BenchmarkMarshalByBson-4                      500000               3518 ns/op</div><div class="line">BenchmarkUnmarshalByBson-4                    1000000              1778 ns/op</div><div class="line"></div><div class="line">BenchmarkMarshalByMsgp-4                      5000000              292 ns/op</div><div class="line">BenchmarkUnmarshalByMsgp-4                    3000000              543 ns/op</div><div class="line"></div><div class="line">BenchmarkMarshalByProtoBuf-4                  1000000              1011 ns/op</div><div class="line">BenchmarkUnmarshalByProtoBuf-4                1000000              1750 ns/op</div><div class="line"></div><div class="line">BenchmarkMarshalByGogoProtoBuf-4              5000000              220 ns/op</div><div class="line">BenchmarkUnmarshalByGogoProtoBuf-4            2000000              901 ns/op</div><div class="line"></div><div class="line">BenchmarkMarshalByFlatBuffers-4               3000000              566 ns/op</div><div class="line">BenchmarkUnmarshalByFlatBuffers-4             50000000             9.54 ns/op</div><div class="line">BenchmarUmByFlatBuffers<span class="emphasis">_withFields-4          3000000              554 ns/op</span></div></pre></td></tr></table></figure>

<p>多次测试结果差不多。<br>从结果上上来看， <strong>MessagePack</strong> , <strong>gogo/protobuf</strong> ,和 <strong>flatbuffers</strong> 差不多，这三个优秀的库在序列化和反序列化上各有千秋，而且都是跨语言的。<br>从便利性上来讲，你可以选择 <strong>MessagePack</strong> 和 <strong>gogo/protobuf</strong> 都可以，两者都有大厂在用。<br><strong>flatbuffers</strong> 有点反人类，因为它的操作很底层，而且从结果上来看，序列化的性能要差一点。但是它有一个好处，那就是如果你只需要特定的字段，<br>你无须将所有的字段都反序列化。从结果上看，不反序列化字段每个调用只用了9.54纳秒，这是因为字段只有在被访问的时候才从byte数组转化为相应的类型。<br>因此在特殊的场景下，它可以提高N被的性能。但是序列化的代码的面相太难看了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>序列化库在网络传输，RPC，数据库访问等环境中经常用到，它的性能的好坏直接影响着整个产品的性能。<br>本文列出了几种高性能的Go语言的序列化库，并通过一个简单的无循环引用的数据结构测试它们的性能。<br>测试代码: <a href="https://github.com/smallnest/gosercomp" target="_blank" rel="external">gosercomp at github</a><br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go 反射的规则]]></title>
    <link href="http://colobu.com/2015/09/23/laws-of-goang-reflection/"/>
    <id>http://colobu.com/2015/09/23/laws-of-goang-reflection/</id>
    <published>2015-09-23T06:56:44.000Z</published>
    <updated>2015-09-23T08:04:05.931Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="http://blog.golang.org/laws-of-reflection" target="_blank" rel="external">The Laws of Reflection</a><br>翻译: <a href="http://mikespook.com/2011/09/%E5%8F%8D%E5%B0%84%E7%9A%84%E8%A7%84%E5%88%99/" target="_blank" rel="external">反射的规则</a> by <a href="http://mikespook.com/author/mikespook/" target="_blank" rel="external">mikespook</a> 转载时略作修改</p>
<h3 id="反射的规则">反射的规则</h3>
<p>在运行时反射是程序检查其所拥有的结构，尤其是类型的一种能力；这是元编程的一种形式。它同时也是造成混淆的重要来源。</p>
<p>在这篇文章中将试图明确解释在 Go 中的反射是如何工作的。每个语言的反射模型都不同（同时许多语言根本不支持反射）。不过这篇文章是关于 Go 的，因此接下来的内容“反射”这一词表示“在 Go 中的反射”。<br><a id="more"></a></p>
<h3 id="类型_Types_和接口_Interfaces">类型 Types 和接口 Interfaces</h3>
<p>由于反射构建于类型系统之上，就从复习一下 Go 中的类型开始吧。<br>Go 是静态类型的。每一个变量有一个静态的类型，也就是说，有一个已知类型并且在编译时就确定下来了：<em>int</em>，<em>float32</em>，<em>MyType</em>，<em>[]byte</em> 等等。如果定义</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> MyInt <span class="typename">int</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> i <span class="typename">int</span></div><div class="line"><span class="keyword">var</span> j MyInt</div></pre></td></tr></table></figure>

<p>那么<em> i</em> 的类型为 <em>int</em> 而<em>j</em> 的类型为 <em>MyInt</em>。即使变量<em> i</em> 和 <em>j</em> 有相同的底层类型，它们仍然是有不同的静态类型的。未经转换是不能相互直接赋值的。</p>
<p>在类型中有一个重要的类别就是接口类型，表达了固定的一个方法集合。一个接口变量可以存储任意实际值（非接口），只要这个值直线了接口的方法。众所周知的一个例子就是<em> is io.Reade</em>r 和 <em>io.Writer</em>，来自 <a href="http://golang.org/pkg/io/" target="_blank" rel="external">io 包</a>的类型 <em>Reader</em> 和 <em>Writer</em>：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Reader is the interface that wraps the basic Read method.</span></div><div class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> {</div><div class="line">    Read(p []<span class="typename">byte</span>) (n <span class="typename">int</span>, err error)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// Writer is the interface that wraps the basic Write method.</span></div><div class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> {</div><div class="line">    Write(p []<span class="typename">byte</span>) (n <span class="typename">int</span>, err error)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>任何用这个声明实现了 <em>Read</em>（或 <em>Write</em>）方法的类型，可以说它实现了 <em>io.Reader</em>（或 <em>io.Writer</em>）。基于本讨论来说，这意味着 <em>io.Reader</em> 类型的变量可以保存任意值，只要这个值的类型实现了 Read 方法：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> r io.Reader</div><div class="line">r = os.Stdin</div><div class="line">r = bufio.NewReader(r)</div><div class="line">r = <span class="built_in">new</span>(bytes.Buffer)</div><div class="line"><span class="comment">// and so on</span></div></pre></td></tr></table></figure>

<p>有一个事情是一定要明确的，不论 <em>r</em> 保存了什么值，<em>r</em> 的类型总是<em> io.Reader</em>：Go 是静态类型，而 <em>r</em> 的静态类型是 <em>io.Reader</em>。</p>
<p>接口类型的一个极端重要的例子是空接口： <code>interface{}</code>, 它表示空的方法集合，由于任何值都有另个或者多个方法，所以任何值都可以满足它。</p>
<p>也有人说 Go 的接口是动态类型的，不过这是一种误解。它们是静态类型的：接口类型的变量总是具有相同的静态类型，即使在运行时存储在接口变量中的值可能会改变类型，该值将始终满足该接口。</p>
<p>对于所有这些都必须严谨的对待，因为反射和接口密切相关。</p>
<h3 id="接口的表现representation">接口的表现representation</h3>
<p>Russ Cox 已经写了一篇详细介绍 Go 中接口值表现的<a href="http://research.swtch.com/2009/12/go-data-structures-interfaces.html" target="_blank" rel="external">文章</a>。所以无需在这里重复整个故事了，不过简单的总结还是必要的。</p>
<p>接口类型的变量存储了两个内容：赋值给变量实际的值和这个值的类型描述。更准确的说，值是底层实现了接口的实际数据项目，而类型描述了这个项目完整的类型。例如下面，</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> r io.Reader</div><div class="line">tty, err := os.OpenFile(<span class="string">"/dev/tty"</span>, os.O_RDWR,<span class="number"> 0</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">    <span class="keyword">return</span> <span class="constant">nil</span>, err</div><div class="line">}</div><div class="line">r = tty</div></pre></td></tr></table></figure>

<p><em>r</em> 包含的是 <em>(value, type)</em> 对，如 <em>(tty, </em>os.File)<em>。注意类型 </em>os.File<em> 除了 </em>Read<em> 方法还实现了其他方法：尽管接口值仅仅提供了访问 </em>Read* 方法的可能，但是内部包含了这个值的完整的类型信息。这也就是为什么可以这样做：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> w io.Writer</div><div class="line">w = r.(io.Writer)</div></pre></td></tr></table></figure>

<p>在这个赋值中的表达式是一个类型断言：它断言 <em>r</em> 内部项的同时也实现了 <em>io.Writer</em>，因此可以赋值它到 <em>w</em>。在赋值之后，<em>w</em> 将会包含 <em>(tty, </em>os.File)<em>。跟在 </em>r* 中保存的一致。接口的静态类型决定了哪个方法可以通过接口变量调用，即便内部实际的值可能有一个更大的方法集。</p>
<p>接下来，可以这样做：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> empty <span class="keyword">interface</span>{}</div><div class="line">empty = w</div></pre></td></tr></table></figure>

<p>而空接口值 <em>e</em> 也将包含同样的 <em>(tty, </em>os.File)*。这很方便：空接口可以保存任何值同时保留关于那个值的所有信息。</p>
<p>（这里无需类型断言，因为 <em>w</em> 是肯定满足空接口的。在这个例子中，将一个值从 <em>Reader</em> 变为 <em>Writer</em>，由于 <em>Writer</em> 的方法不是 <em>Reader</em> 的子集，所以就必须明确使用类型断言。）</p>
<p>一个很重要的细节是接口内部的对总是 (value, 实际类型) 的格式，而不会有 (value, 接口类型) 的格式。接口不能保存接口值。</p>
<p>现在准备好来反射了。</p>
<h3 id="反射的第一条规则">反射的第一条规则</h3>
<p><strong>1 从接口值到反射对象的反射</strong></p>
<p>在基本的层面上，反射只是一个检查存储在接口变量中的类型和值的算法。从头说起，在 reflect 包中有两个类型需要了解：<code>Type</code> 和 <code>Value</code>。这两个类型使得可以访问接口变量的内容，还有两个简单的函数，<code>reflect.TypeOf</code> 和 <code>reflect.ValueOf</code>，从接口值中分别获取 <code>reflect.Type</code> 和 <code>reflect.Value</code>。（同样，从 <code>reflect.Value</code> 也很容易能够获得 <code>reflect.Type</code>，不过这里让 <code>Value</code> 和 <code>Type</code> 在概念上分离了。）</p>
<p>从 <code>TypeOf</code> 开始：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"reflect"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    <span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">    fmt.Println(<span class="string">"type:"</span>, reflect.TypeOf(x))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这个程序打印</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span>: <span class="typename">float64</span></div></pre></td></tr></table></figure>

<p>接口在哪里呢，读者可能会对此有疑虑，看起来程序传递了一个 <em>float64</em> 类型的变量 <em>x</em>，而不是一个接口值，到 <code>reflect.TypeOf</code>。但是，它确实就在那里：如同 <em>godoc</em> 报告的那样，<code>reflect.TypeOf</code> 的声明包含了空接口：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// TypeOf returns the reflection Type of the value in the interface{}.</span></div><div class="line"><span class="keyword">func</span> TypeOf(i <span class="keyword">interface</span>{}) Type</div></pre></td></tr></table></figure>

<p>当调用 <em>reflect.TypeOf(x)</em> 的时候，<em>x</em> 首先存储于一个作为参数传递的空接口中；<em>reflect.TypeOf</em> 解包这个空接口来还原类型信息。<br><em>reflect.ValueOf</em> 函数，当然就是还原那个值（从这里开始将会略过那些概念示例，而聚焦于可执行的代码）：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">fmt.Println(<span class="string">"value:"</span>, reflect.ValueOf(x))</div></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">value: &lt;<span class="typename">float64</span> Value&gt;</div></pre></td></tr></table></figure>

<p><em>reflect.Type</em> 和 <em>reflect.Value</em> 都有许多方法用于检查和操作它们。一个重要的例子是 <em>Value</em> 有一个 <em>Type</em> 方法返回 <em>reflect.Value</em> 的 <em>Type</em>。另一个是 <em>Type</em> 和 <em>Value </em>都有 <em>Kind</em> 方法返回一个常量来表示类型：<em>Uint</em>、<em>Float64</em>、<em>Slice</em> 等等。同样 <em>Value</em> 有叫做 <em>Int</em> 和 <em>Float</em> 的方法可以获取存储在内部的值（跟 <em>int64</em> 和 <em>float64</em> 一样）：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">v := reflect.ValueOf(x)</div><div class="line">fmt.Println(<span class="string">"type:"</span>, v.Type())</div><div class="line">fmt.Println(<span class="string">"kind is float64:"</span>, v.Kind() == reflect.Float64)</div><div class="line">fmt.Println(<span class="string">"value:"</span>, v.Float())</div></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span>: <span class="typename">float64</span></div><div class="line">kind is <span class="typename">float64</span>: <span class="constant">true</span></div><div class="line">value:<span class="number"> 3.4</span></div></pre></td></tr></table></figure>

<p>同时也有类似 <em>SetInt</em> 和 <em>SetFloat</em> 的方法，不过在使用它们之前需要理解可设置性，这部分的主题在下面的第三条规则中讨论。</p>
<p>反射库有着若干特性值得特别说明。首先，为了保持 API 的简洁，“获取者”和“设置者”用 <em>Value</em> 的最宽泛的类型来处理值：例如，<em>int64</em> 可用于所有带符号整数。也就是说 <em>Value</em> 的 <em>Int</em> 方法返回一个 <em>int64</em>，而 <em>SetInt</em> 值接受一个<em> int64</em>；所以可能必须转换到实际的类型：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">uint8</span> = <span class="string">'x'</span></div><div class="line">v := reflect.ValueOf(x)</div><div class="line">fmt.Println(<span class="string">"type:"</span>, v.Type())                            <span class="comment">// uint8.</span></div><div class="line">fmt.Println(<span class="string">"kind is uint8: "</span>, v.Kind() == reflect.Uint8) <span class="comment">// true.</span></div><div class="line">x = <span class="typename">uint8</span>(v.Uint())                                       <span class="comment">// v.Uint returns a uint64.</span></div></pre></td></tr></table></figure>

<p>第二个特性是反射对象的 <code>Kind</code> 描述了底层类型，而不是静态类型。如果一个反射对象包含了用户定义的整数类型的值，就像</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> MyInt <span class="typename">int</span></div><div class="line"><span class="keyword">var</span> x MyInt =<span class="number"> 7</span></div><div class="line">v := reflect.ValueOf(x)</div></pre></td></tr></table></figure>

<p><em>v</em> 的 <code>Kind</code> 仍然是 <em>reflect.Int</em>，尽管<em> x </em>的静态类型是 <em>MyInt</em>，而不是 <em>int</em>。换句话说，<code>Kind</code> 无法从 <em>MyInt</em> 中区分 <em>int</em>，而 <code>Type</code> 可以。</p>
<h3 id="反射的第二条规则">反射的第二条规则</h3>
<p><strong>2 从反射对象到接口值的反射</strong><br>如同物理中的反射，在 Go 中的反射也存在它自己的镜像。<br>从 <em>reflect.Value</em> 可以使用<em> Interface</em> 方法还原接口值；方法打包类型和值信息到接口表达中，并返回这个结果：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Interface returns v's value as an interface{}.</span></div><div class="line"><span class="keyword">func</span> (v Value) Interface() <span class="keyword">interface</span>{}</div></pre></td></tr></table></figure>

<p>因此可以这样：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">y := v.Interface().(<span class="typename">float64</span>) <span class="comment">// y 将为类型 float64。</span></div><div class="line">fmt.Println(y)</div></pre></td></tr></table></figure>

<p>通过反射对象 <em>v</em> 可以打印 <em>float64</em> 的表达值。</p>
<p>然而，还可以做得更好。<em>fmt.Println，fmt.Printf</em> 和其他的打印方法都是以一个空接口值作为参数的，由 <em>fmt</em> 包在内部解包的方式就像之前的例子一样。因此正确的打印 <em>reflect.Value </em>内容的方法就是将 <em>Interface</em> 方法的结果传递给格式化打印：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fmt.Println(v.Interface())</div></pre></td></tr></table></figure>

<p>（为什么不是 <em>fmt.Println(v)</em>？因为 <em>v</em> 是一个 <em>reflect.Value</em>；这里希望是它保存的实际的值。）由于值是 <em>float64</em>，如果需要的话，甚至可以使用浮点格式化：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fmt.Printf(<span class="string">"value is %7.1e\n"</span>, v.Interface())</div></pre></td></tr></table></figure>

<p>然后就得到这个</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3.4e+00</div></pre></td></tr></table></figure>

<p>再次强调，对于 <em>v.Interface()</em> 无需类型断言其为 <em>float64</em>；空接口值在内部有实际值的类型信息，而 <em>Printf</em> 会发现它。</p>
<p>简单来说，<em>Interface</em> 方法是 <em>ValueOf</em> 函数的镜像，除了返回值总是静态类型 <em>interface{}</em>。</p>
<p>回顾：反射可以从接口值得到反射对象，也可以反过来。</p>
<h3 id="反射的第三条规则">反射的第三条规则</h3>
<p><strong>3 要想修改反射对象，其值必须可设置</strong><br>第三条规则是最为精细和迷惑的，但是如果从第一个规则开始，还是足以让人明白的。</p>
<p>这里有一些不能工作的代码，值得学习。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">v := reflect.ValueOf(x)</div><div class="line">v.SetFloat<span class="number">(7.1</span>) <span class="comment">// Error: will panic.</span></div></pre></td></tr></table></figure>

<p>如果运行这个代码，它报出神秘的 panic 消息</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">panic: reflect.Value.SetFloat <span class="keyword">using</span> unaddressable <span class="keyword">value</span></div></pre></td></tr></table></figure>

<p>问题不在于值 <em>7.1</em> 不能地址化；在于 <em>v</em> 不可设置。设置性是反射值的一个属性，并不是所有的反射值有它。</p>
<p>值的 <code>CanSet</code> 方法提供了值的设置性；在这个例子中，</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">v := reflect.ValueOf(x)</div><div class="line">fmt.Println(<span class="string">"settability of v:"</span> , v.CanSet())</div></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">settability <span class="keyword">of</span> v: <span class="literal">false</span></div></pre></td></tr></table></figure>

<p>对不可设置值调用 <code>Set</code> 方法会有错误。但是什么是设置性？<br>设置性有一点点像地址化，但是更严格。这是用于创建反射对象的时候，能够修改实际存储的属性。设置性用于决定反射对象是否保存原始项目。当这样</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">v := reflect.ValueOf(x)</div></pre></td></tr></table></figure>

<p>就传递了一个 <em>x</em> 的副本到 <em>reflect.ValueOf</em>，所以接口值作为 <em>reflect.ValueOf</em> 参数创建了 <em>x</em> 的副本，而不是 <em>x</em> 本身。因此，如果语句</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v.SetFloat<span class="number">(7.1</span>)</div></pre></td></tr></table></figure>

<p>允许执行，虽然 <em> v</em>  看起来是从 <em> x </em> 创建的，它也无法更新 <em> x</em> 。反之，如果在反射值内部允许更新 <em> x </em> 的副本，那么 <em> x</em>  本身不会收到影响。这会造成混淆，并且毫无意义，因此这是非法的，而设置性是用于解决这个问题的属性。<br>这很神奇？其实不是。这实际上是一个常见的非同寻常的情况。考虑传递 x 到函数：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f(x)</div></pre></td></tr></table></figure>

<p>由于传递的是 x 的值的副本，而不是 x 本身，所以并不期望 f 可以修改 x。如果想要 f 直接修改 x，必须向函数传递 x 的地址（也就是，指向 x 的指针）：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f(&x)</div></pre></td></tr></table></figure>

<p>这是清晰且熟悉的，而反射通过同样的途径工作。如果希望通过反射来修改 <em>x</em>，必须向反射库提供一个希望修改的值的指针。</p>
<p>来试试吧。首先像平常那样初始化 <em>x</em>，然后创建指向它的反射值，叫做 <em>p</em>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="typename">float64</span> =<span class="number"> 3.4</span></div><div class="line">p := reflect.ValueOf(&x) <span class="comment">// Note: take the address of x.</span></div><div class="line">fmt.Println(<span class="string">"type of p:"</span>, p.Type())</div><div class="line">fmt.Println(<span class="string">"settability of p:"</span>, p.CanSet())</div></pre></td></tr></table></figure>


<p>这样输出为</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> of p: *<span class="typename">float64</span></div><div class="line">settability of p: <span class="constant">false</span></div></pre></td></tr></table></figure>

<p>反射对象<em> p</em> 并不是可设置的，但是我们不是想设置 <em>p</em>，而是 <em>p。为了获得 </em>p<em> 指向的内容，调用值上的 <code>Elem</code> 方法，从指针间接指向，然后保存反射值的结果叫做 </em>v*：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v := p.Elem()</div><div class="line">fmt.Println(<span class="string">"settability of v:"</span>, v.CanSet())</div></pre></td></tr></table></figure>

<p>现在 v 是可设置的反射对象，如同示例的输出，</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">settability of v: <span class="constant">true</span></div></pre></td></tr></table></figure>

<p>而由于它来自 <em>x</em>，最终可以使用 <em>v.SetFloat</em> 来修改 <em>x </em>的值：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">v.SetFloat<span class="number">(7.1</span>)</div><div class="line">fmt.Println(v.Interface())</div><div class="line">fmt.Println(x)</div></pre></td></tr></table></figure>

<p>得到期望的输出</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">7.1</div><div class="line">7.1</div></pre></td></tr></table></figure>

<p>反射可能很难理解，但是语言做了它应该做的，尽管底层的实现被反射的 <em>Type</em> 和 <em>Value</em> 隐藏了。务必记得反射值需要某些内容的地址来修改它指向的东西。</p>
<h3 id="结构体">结构体</h3>
<p>在之前的例子中<em>v</em> 本身不是指针，它只是从一个指针中获取的。这种情况更加常见的是当使用反射修改结构体的字段的时候。也就是当有结构体的地址的时候，可以修改它的字段。</p>
<p>这里有一个分析结构值 <em>t</em> 的简单例子。由于希望等下对结构体进行修改，所以从它的地址创建了反射对象。设置了 <em>typeOfT</em> 为其类型，然后用直接的方法调用来遍历其字段（参考 <a href="http://golang.org/pkg/reflect/" target="_blank" rel="external">reflect 包</a>了解更多信息）。注意从结构类型中解析了字段名字，但是字段本身是原始的 <em>reflect.Value</em> 对象。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> {</div><div class="line">    A <span class="typename">int</span></div><div class="line">    B <span class="typename">string</span></div><div class="line">}</div><div class="line">t := T<span class="number">{23</span>, <span class="string">"skidoo"</span>}</div><div class="line">s := reflect.ValueOf(&t).Elem()</div><div class="line">typeOfT := s.Type()</div><div class="line"><span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt; s.NumField(); i++ {</div><div class="line">    f := s.Field(i)</div><div class="line">    fmt.Printf(<span class="string">"%d: %s %s = %v\n"</span>, i,</div><div class="line">        typeOfT.Field(i).Name, f.Type(), f.Interface())</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这个程序的输出是</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">0</span>: <span class="string">A int = 23</span></div><div class="line"><span class="attribute">1</span>: <span class="string">B string = skidoo</span></div></pre></td></tr></table></figure>

<p>这里还有一个关于设置性的要点：<em>T</em> 的字段名要大写（可导出），因为只有可导出的字段是可设置的。</p>
<p>由于 <em>s</em> 包含可设置的反射对象，所以可以修改结构体的字段。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s.Field<span class="number">(0</span>).SetInt<span class="number">(77</span>)</div><div class="line">s.Field<span class="number">(1</span>).SetString(<span class="string">"Sunset Strip"</span>)</div><div class="line">fmt.Println(<span class="string">"t is now"</span>, t)</div></pre></td></tr></table></figure>

<p>这里是结果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">t <span class="keyword">is</span> <span class="keyword">now</span> {77 Sunset Strip}</div></pre></td></tr></table></figure>

<p>如果修改程序使得 <em>s</em> 创建于 <em>t</em>，而不是 <em>&amp;t</em>，调用 <code>SetInt</code> 和 <code>SetString</code> 会失败，因为 <em>t</em> 的字段不可设置。</p>
<h3 id="总结">总结</h3>
<p>再次提示，反射的规则如下：</p>
<ul>
<li>从接口值到反射对象的反射。</li>
<li>从反射对象到接口值的反射。</li>
<li>为了修改反射对象，其值必须可设置。</li>
</ul>
<p>一旦理解了 Go 中的反射的这些规则，就会变得容易使用了，虽然它仍然很微妙。这是一个强大的工具，除非真得有必要，否则应当避免使用或小心使用。</p>
<p>还有大量的关于反射的内容没有涉及到——channel 上的发送和接收、分配内存、使用 slice 和 map、调用方法和函数——但是这篇文章已经够长了。这些话题将会在以后的文章中逐一讲解。</p>
<p><em>Rob Pike 撰写，2011年9月</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="http://blog.golang.org/laws-of-reflection" target="_blank" rel="external">The Laws of Reflection</a><br>翻译: <a href="http://mikespook.com/2011/09/%E5%8F%8D%E5%B0%84%E7%9A%84%E8%A7%84%E5%88%99/" target="_blank" rel="external">反射的规则</a> by <a href="http://mikespook.com/author/mikespook/" target="_blank" rel="external">mikespook</a> 转载时略作修改</p>
<h3 id="反射的规则">反射的规则</h3>
<p>在运行时反射是程序检查其所拥有的结构，尤其是类型的一种能力；这是元编程的一种形式。它同时也是造成混淆的重要来源。</p>
<p>在这篇文章中将试图明确解释在 Go 中的反射是如何工作的。每个语言的反射模型都不同（同时许多语言根本不支持反射）。不过这篇文章是关于 Go 的，因此接下来的内容“反射”这一词表示“在 Go 中的反射”。<br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[goreq: 极简单的流式golang http client]]></title>
    <link href="http://colobu.com/2015/09/21/goreq-A-simplified-golang-http-client/"/>
    <id>http://colobu.com/2015/09/21/goreq-A-simplified-golang-http-client/</id>
    <published>2015-09-21T06:27:09.000Z</published>
    <updated>2015-09-21T08:49:25.503Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/smallnest/goreq" target="_blank" rel="external">goreq</a>是一个极其简单的流式golang http client。它是我寻找类似Java OKHttp库的golang http client库时创建的。<br>最原始的代码fork自<a href="https://github.com/parnurzeal/gorequest" target="_blank" rel="external">gorequest</a>，它实现了Node.js库<a href="https://github.com/visionmedia/superagent" target="_blank" rel="external">SuperAgent</a>类似的功能。但是gorequest有一些bug没有fix，用户也提出了一些新的特性没有支持。<br>我重构了代码，更正了一些bug，增加了新的特性，尤其是POST BODY现在可以支持任意类型， 不再局限于json或者form字符串格式。 因为改动比较大，不好提交pull requests,干脆创建了一个新的轮子。这就是这个项目的最初目的。</p>
<p>比如下面调用baidu API根据IP地址获取地理信息的例子：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">headers := <span class="string">`{"User-Agent":"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",</span></div><div class="line">		"Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",</div><div class="line">		"Referer":"http://developer.baidu.com/map/index.php?title=webapi/ip-api"}`</div><div class="line">	</div><div class="line">_, body, _ := goreq.New().SetHeaders(headers).Get(<span class="string">"http://api.map.baidu.com/location/ip?ak=E4805d16520de693a3fe707cdc962045&ip=202.198.16.3&coor=bd09ll"</span>).End()</div></pre></td></tr></table></figure>

<a id="more"></a>
<h3 id="支持的HTTP_METHOD">支持的HTTP METHOD</h3>
<p>支持 <strong>GET, POST, HEAD, PUT, DELETE, PATCH</strong> 等http method,而且都想HTTP GET一样简单， 比如下面的HTTP PUT:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_, body, _ := goreq.New().Put(<span class="string">"http://httpbin.org/put"</span>).SendRawString(<span class="string">"hello world"</span>).End()</div><div class="line"><span class="built_in">println</span>(body)</div></pre></td></tr></table></figure>

<p>输出结果:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  "<span class="attribute">args</span>": <span class="value">{}</span>,</div><div class="line">  "<span class="attribute">data</span>": <span class="value"><span class="string">"hello world"</span></span>,</div><div class="line">  "<span class="attribute">files</span>": <span class="value">{}</span>,</div><div class="line">  "<span class="attribute">form</span>": <span class="value">{}</span>,</div><div class="line">  "<span class="attribute">headers</span>": <span class="value">{</span></div><div class="line">    "<span class="attribute">Accept-Encoding</span>": <span class="value"><span class="string">"gzip"</span></span>,</div><div class="line">    "<span class="attribute">Content-Length</span>": <span class="value"><span class="string">"11"</span></span>,</div><div class="line">    "<span class="attribute">Content-Type</span>": <span class="value"><span class="string">"text/plain"</span></span>,</div><div class="line">    "<span class="attribute">Host</span>": <span class="value"><span class="string">"httpbin.org"</span></span>,</div><div class="line">    "<span class="attribute">User-Agent</span>": <span class="value"><span class="string">"Go-http-client/1.1"</span></span></div><div class="line">  },</div><div class="line">  "<span class="attribute">json</span>": <span class="value"><span class="literal">null</span></span>,</div><div class="line">  "<span class="attribute">origin</span>": <span class="value"><span class="string">"117.121.34.13"</span></span>,</div><div class="line">  "<span class="attribute">url</span>": <span class="value"><span class="string">"http://httpbin.org/put"</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Request_Body及Header">Request Body及Header</h3>
<p>发送一个JSON格式的内容也很简单， 你可以传入一个struct, GoReq自动将它转为一个JSON字符串。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_, body, _ := goreq.New().Put(<span class="string">"http://httpbin.org/put"</span>).SendMapString(<span class="string">"name=Baymax&password=12345678"</span>).End()</div></pre></td></tr></table></figure>

<p>注意在这种情况下(设置了body，未设置Content-Type)， Content-Type为<code>application/json</code>。<br>甚至你可以传递一个查询字符串：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_, body, _ := goreq.New().Put(<span class="string">"http://httpbin.org/put"</span>).ContentType(<span class="string">"json"</span>).SendMapString(<span class="string">"name=Baymax&password=12345678"</span>).End()</div></pre></td></tr></table></figure>

<p>注意在这种情况下(设置了body，未设置Content-Type)， Content-Type为<code>application/x-www-form-urlencoded</code>。所以这里显示地设置为&quot;application/json&quot;</p>
<h3 id="Proxy和超时">Proxy和超时</h3>
<p>可以为读写设置一个超时时间：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_, _, err := goreq.New().Get(<span class="string">"http://httpbin.org//delay/100"</span>).Timeout<span class="number">(10</span> * time.Second).End()</div><div class="line"><span class="built_in">println</span>(err<span class="number">[0</span>].Error())</div></pre></td></tr></table></figure>

<h3 id="Basic_Auth">Basic Auth</h3>
<p>GoReq支持Basic Auth身份验证:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_, body, _ := goreq.New().Get(<span class="string">"http://httpbin.org/basic-auth/Baymax/12345678"</span>).SetBasicAuth(<span class="string">"Baymax"</span>, <span class="string">"12345678"</span>).End()</div></pre></td></tr></table></figure>

<p>更多的例子和文档请查看 <a href="http://godoc.org/github.com/smallnest/goreq" target="_blank" rel="external">godoc</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/smallnest/goreq" target="_blank" rel="external">goreq</a>是一个极其简单的流式golang http client。它是我寻找类似Java OKHttp库的golang http client库时创建的。<br>最原始的代码fork自<a href="https://github.com/parnurzeal/gorequest" target="_blank" rel="external">gorequest</a>，它实现了Node.js库<a href="https://github.com/visionmedia/superagent" target="_blank" rel="external">SuperAgent</a>类似的功能。但是gorequest有一些bug没有fix，用户也提出了一些新的特性没有支持。<br>我重构了代码，更正了一些bug，增加了新的特性，尤其是POST BODY现在可以支持任意类型， 不再局限于json或者form字符串格式。 因为改动比较大，不好提交pull requests,干脆创建了一个新的轮子。这就是这个项目的最初目的。</p>
<p>比如下面调用baidu API根据IP地址获取地理信息的例子：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">headers := <span class="string">`{"User-Agent":"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0",</span></div><div class="line">		"Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",</div><div class="line">		"Referer":"http://developer.baidu.com/map/index.php?title=webapi/ip-api"}`</div><div class="line">	</div><div class="line">_, body, _ := goreq.New().SetHeaders(headers).Get(<span class="string">"http://api.map.baidu.com/location/ip?ak=E4805d16520de693a3fe707cdc962045&ip=202.198.16.3&coor=bd09ll"</span>).End()</div></pre></td></tr></table></figure>

]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RecyclerView的拖动和滑动 第二部分 ：拖块，Grid以及自定义动画]]></title>
    <link href="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-2/"/>
    <id>http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-2/</id>
    <published>2015-09-16T01:57:50.000Z</published>
    <updated>2015-09-16T02:27:31.650Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-6a6f0c422efd" target="_blank" rel="external">Drag and Swipe with RecyclerView Part Two: Handles, Grids, and Custom Animations </a><br>翻译：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a> </p>
<p>在<a href="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/" target="_blank" rel="external">第一部分</a>，我们介绍了<a href="http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" target="_blank" rel="external">ItemTouchHelper</a>，以及<a href="http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html" target="_blank" rel="external">ItemTouchHelper.Callback</a> 的实现，在线性列表（RecyclerView）中添加基本的拖拽&amp;拖放与滑动删除。本文将在前文例子的基础上扩展，增加对grid布局的支持，处理拖拽的初始化，提示被选中的view，同时自定义滑动的动画。<br><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-2/1.gif" alt=""><br><a id="more"></a></p>
<h3 id="拖块">拖块</h3>
<p>当设计一个支持拖拽与拖放的列表的时候，通常都会包含一个提示可以触摸拖动的东西。它对于用户发现此功能与软件的易用性都是有帮助的，并且Material指南也<a href="http://www.google.com/design/spec/components/lists-controls.html#lists-controls-types-of-list-controls" target="_blank" rel="external">推荐 </a>在列表处于“编辑模式”的时候这样做。让我们的例子包含一个这样的滑块也相当简单。<br><img src="2.png" alt=""></p>
<p>首先，修改item的布局（item_main.xml）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">FrameLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/item"</span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"?listPreferredItemHeight"</span></div><div class="line">    <span class="attribute">android:clickable</span>=<span class="value">"true"</span></div><div class="line">    <span class="attribute">android:focusable</span>=<span class="value">"true"</span></div><div class="line">    <span class="attribute">android:foreground</span>=<span class="value">"?selectableItemBackground"</span>&gt;</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="title">TextView</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/text"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"center_vertical"</span></div><div class="line">        <span class="attribute">android:layout_marginLeft</span>=<span class="value">"16dp"</span></div><div class="line">        <span class="attribute">android:textAppearance</span>=<span class="value">"?android:attr/textAppearanceMedium"</span> /&gt;</div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="title">ImageView</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/handle"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"?listPreferredItemHeight"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"center_vertical|right"</span></div><div class="line">        <span class="attribute">android:scaleType</span>=<span class="value">"center"</span></div><div class="line">        <span class="attribute">android:src</span>=<span class="value">"@drawable/ic_reorder_grey_500_24dp"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p>用于拖拽的图标可以在<a href="https://github.com/google/material-design-icons/blob/master/action/svg/production/ic_reorder_24px.svg" target="_blank" rel="external">Material Design Icons</a>里面找到，使用<a href="https://github.com/konifar/android-material-design-icon-generator-plugin" target="_blank" rel="external">Android Material Design 图标生成插件</a>来添加。</p>
<p>就如上篇文章简要提到的，你可以使用ItemTouchHelper.startDrag(ViewHolder) 开始一个拖拽。因此我们需要更改ViewHolder，让它包含这个拖拽图标，同时设置一个简单的触摸事件 listener来触发startDrag()的调用。</p>
<p>我们需要一个传递event up 的interface：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnStartDragListener</span> </span>{</div><div class="line"> </div><div class="line">    <span class="javadoc">/**</span></div><div class="line">     * Called when a view is requesting a start of a drag.</div><div class="line">     *</div><div class="line">     *<span class="javadoctag"> @param</span> viewHolder The holder of the view to drag.</div><div class="line">     */</div><div class="line">    <span class="keyword">void</span> onStartDrag(RecyclerView.ViewHolder viewHolder);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后，在<strong>ItemViewHolder</strong>中初始化拖拽图标的视图：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> ImageView handleView;</div><div class="line"><span class="keyword">public</span> <span class="title">ItemViewHolder</span>(View itemView) {</div><div class="line">    <span class="keyword">super</span>(itemView);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    handleView = (ImageView) itemView.findViewById(R.id.handle);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>并且更新<strong>RecyclerListAdapter</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> OnStartDragListener mDragStartListener;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="title">RecyclerListAdapter</span>(OnStartDragListener dragStartListener) {</div><div class="line">    mDragStartListener = dragStartListener;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">}</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span>(<span class="keyword">final</span> ItemViewHolder holder, </div><div class="line">        <span class="keyword">int</span> position) {</div><div class="line">    <span class="comment">// ...    holder.handleView.setOnTouchListener(new OnTouchListener() {</span></div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span>(View v, MotionEvent event) {</div><div class="line">            <span class="keyword">if</span> (MotionEventCompat.getActionMasked(event) == </div><div class="line">                    MotionEvent.ACTION_DOWN) {</div><div class="line">                mDragStartListener.onStartDrag(holder);</div><div class="line">            }</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        }</div><div class="line">    });</div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在完整的RecyclerListAdapter类是<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/blob/001dcdc99f75f77a431fe5c303be54ab45cd9a32/app/src/main/java/co/paulburke/android/itemtouchhelperdemo/RecyclerListAdapter.java" target="_blank" rel="external">这样</a>的。</p>
<p>剩下的事情就是在Fragment中添加OnStartDragListener：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerListFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> </span></div><div class="line">        <span class="title">OnStartDragListener</span> {</div><div class="line">     </div><div class="line">    <span class="comment">// ...    @Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span>(View view, Bundle icicle) {</div><div class="line">        <span class="keyword">super</span>.onViewCreated(view, icicle);</div><div class="line"> </div><div class="line">        RecyclerListAdapter a = <span class="keyword">new</span> RecyclerListAdapter(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    }    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartDrag</span>(RecyclerView.ViewHolder viewHolder) {</div><div class="line">        mItemTouchHelper.startDrag(viewHolder);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>完整的RecyclerListFragment类现在是<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/blob/001dcdc99f75f77a431fe5c303be54ab45cd9a32/app/src/main/java/co/paulburke/android/itemtouchhelperdemo/RecyclerListFragment.java" target="_blank" rel="external">这样</a>的。现在运行一下，你应该可以通过触摸这个拖拽图标来开始拖拽操作了<br><img src="3.gif" alt=""></p>
<h3 id="提示被选中的View">提示被选中的View</h3>
<p>在我们上面描述的基础案例中，没有在视觉上暗示被拖拽的item被选中了。显然，这不是被期望的，不过这也很好解决。实际上，在ItemTouchHelper的帮助下，只要你的View Holder item 设置了背景，这种效果自然就可以得到。在Lollipop或者更高版本，Item 的深度（elevation）在拖拽和滑动期间会上升；在早起版本，滑动的时候是简单的淡化（fade）效果。</p>
<p>要在我们现有的例子中看到这种效果，只需添加一个背景到<a href="https://gist.github.com/iPaulPro/3b1742403ea6f27abbb4" target="_blank" rel="external">item_main.xml</a>的根FrameLayout，或者在<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/blob/b6d2464c45d8b504dbc17c473cdca271ded2bd80/app/src/main/java/co/paulburke/android/itemtouchhelperdemo/RecyclerListAdapter.java" target="_blank" rel="external">RecyclerListAdapter.ItemViewHolder</a>的构造函数中设置一个。效果如下：<br><img src="4.gif" alt=""></p>
<p>看起来不错，但是我们希望得到更多的控制。其中一种办法就是在它被选择或者被清除的时候让你的View Holder去处理这些变化。为此，可以使用ItemTouchHelper.Callback提供的两个回调方法。</p>
<ul>
<li><strong>onSelectedChanged(ViewHolder, int)</strong>: 在每次View Holder的状态变成拖拽 (ACTION_STATE_DRAG) 或者 滑动 (ACTION_STATE_SWIPE)的时候被调用。这是把你的item view变成激活状态的最佳地点。</li>
<li><strong>clearView(RecyclerView, ViewHolder)</strong> 在一个view被拖拽然后被放开的时候被调用，同时也会在滑动被取消或者完成ACTION_STATE_IDLE)的时候被调用。这里是恢复item view idle状态的典型地方。</li>
</ul>
<p>我们只需要把这些东西结合在一起就行了。<br>首先，为View Holder创建一个interface：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="javadoc">/**</span></div><div class="line"> * Notifies a View Holder of relevant callbacks from </div><div class="line"> * {@link ItemTouchHelper.Callback}.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemTouchHelperViewHolder</span> </span>{</div><div class="line"> </div><div class="line">    <span class="javadoc">/**</span></div><div class="line">     * Called when the {@link ItemTouchHelper} first registers an </div><div class="line">     * item as being moved or swiped.</div><div class="line">     * Implementations should update the item view to indicate </div><div class="line">     * it's active state.</div><div class="line">     */</div><div class="line">    <span class="keyword">void</span> onItemSelected();</div><div class="line"> </div><div class="line"> </div><div class="line">    <span class="javadoc">/**</span></div><div class="line">     * Called when the {@link ItemTouchHelper} has completed the </div><div class="line">     * move or swipe, and the active item state should be cleared.</div><div class="line">     */</div><div class="line">    <span class="keyword">void</span> onItemClear();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后，让SimpleItemTouchHelperCallback触发各自的回调：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSelectedChanged</span>(RecyclerView.ViewHolder viewHolder, </div><div class="line">        <span class="keyword">int</span> actionState) {</div><div class="line">   <span class="comment">// We only want the active item</span></div><div class="line">   <span class="keyword">if</span> (actionState != ItemTouchHelper.ACTION_STATE_IDLE) {</div><div class="line">        <span class="keyword">if</span> (viewHolder <span class="keyword">instanceof</span> ItemTouchHelperViewHolder) {</div><div class="line">            ItemTouchHelperViewHolder itemViewHolder = </div><div class="line">                    (ItemTouchHelperViewHolder) viewHolder;</div><div class="line">            itemViewHolder.onItemSelected();</div><div class="line">        }</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="keyword">super</span>.onSelectedChanged(viewHolder, actionState);</div><div class="line">}</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearView</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder) {</div><div class="line">    <span class="keyword">super</span>.clearView(recyclerView, viewHolder);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (viewHolder <span class="keyword">instanceof</span> ItemTouchHelperViewHolder) {</div><div class="line">        ItemTouchHelperViewHolder itemViewHolder = </div><div class="line">                (ItemTouchHelperViewHolder) viewHolder;</div><div class="line">        itemViewHolder.onItemClear();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在剩下的事情就是让RecyclerListAdapter.ItemViewHolder实现ItemTouchHelperViewHolder:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span></div><div class="line">        <span class="keyword">implements</span> <span class="title">ItemTouchHelperViewHolder</span> {</div><div class="line"> </div><div class="line">    <span class="comment">// ...    @Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span>() {</div><div class="line">        itemView.setBackgroundColor(Color.LTGRAY);</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClear</span>() {</div><div class="line">        itemView.setBackgroundColor(<span class="number">0</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在本例子中，我们简单的在item激活的时候添加了一个灰色背景，在被清除的时候移除了这个灰色背景。如果你的ItemTouchHelper和Adapter是在一起的，你可以</p>
<p>不这样设置，直接在 ItemTouchHelper.Callback中切换view的状态。</p>
<h3 id="Grid_布局">Grid 布局</h3>
<p>如果你想用GridLayoutManager来修改这个项目，你会发现不能正常工作。原因和解决办法都很简单：我们必须告诉ItemTouchHelper我们想支持向左拖动和向右拖动。在<strong>SimpleItemTouchHelperCallback</strong>中，我们已经指明了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder) {</div><div class="line">    <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;</div><div class="line">    <span class="keyword">int</span> swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;</div><div class="line">    <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>要支持grid布局，唯一需要的修改是向dragFlags中添加left和 right方向。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> dragFlags = ItemTouchHelper.UP   | ItemTouchHelper.DOWN | </div><div class="line">                ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT;</div></pre></td></tr></table></figure>

<p>但是，对于grid而言，滑动删除不是非常自然的设计，因此你可能需要这样来去掉此功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder) {</div><div class="line">    <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN | </div><div class="line">                    ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT;</div><div class="line">    <span class="keyword">int</span> swipeFlags = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>可以查看 <a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/blob/d164fba0f27c8aa38cfa7dbd4bc74d53dea44605/app/src/main/java/co/paulburke/android/itemtouchhelperdemo/RecyclerGridFragment.java" target="_blank" rel="external">RecyclerGridFragment</a> 来了解GridLayoutManager的例子。下面是运行效果：<br><img src="5.gif" alt=""></p>
<h3 id="自定义滑动动画">自定义滑动动画</h3>
<p>ItemTouchHelper.Callback 提供了非常方便的方法来控制拖拽和滑动期间的view动画。因为ItemTouchHelper其实是一个<a href="http://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemDecoration.html" target="_blank" rel="external">RecyclerView.ItemDecoration</a>，我可以<br>用同样的方式进行view的绘制。</p>
<p>在后面的部分，我们将更深入的讨论这个问题，但是这里也给出一个简单的例子，重写默认的滑动动画，显示线性淡化效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChildDraw</span>(Canvas c, RecyclerView recyclerView, </div><div class="line">        ViewHolder viewHolder, <span class="keyword">float</span> dX, <span class="keyword">float</span> dY, </div><div class="line">        <span class="keyword">int</span> actionState, <span class="keyword">boolean</span> isCurrentlyActive) {</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (actionState == ItemTouchHelper.ACTION_STATE_SWIPE) {</div><div class="line">        <span class="keyword">float</span> width = (<span class="keyword">float</span>) viewHolder.itemView.getWidth();</div><div class="line">        <span class="keyword">float</span> alpha = <span class="number">1.0</span>f - Math.abs(dX) / width;</div><div class="line">        viewHolder.itemView.setAlpha(alpha);</div><div class="line">        viewHolder.itemView.setTranslationX(dX);    </div><div class="line">    } <span class="keyword">else</span> {</div><div class="line">        <span class="keyword">super</span>.onChildDraw(c, recyclerView, viewHolder, dX, dY, </div><div class="line">                actionState, isCurrentlyActive);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>dX</strong> 与 <strong>dY</strong>参数代表目前被选择view 的移动距离，其中：</p>
<ul>
<li><strong>-1.0f</strong> is a full ItemTouchHelper.END to ItemTouchHelper.STARTswipe</li>
<li><strong>1.0f </strong> is a full ItemTouchHelper.START to ItemTouchHelper.END swipe</li>
</ul>
<p>为了不漏掉我们没有处理的actionState，记住务必调用super方法，这样其他的默认动画才会运行。</p>
<p>接下来的部分我们将讲解如何控制拖拽时候的绘制。</p>
<h3 id="结束语">结束语</h3>
<p>我们刚刚谈到了通过自定义ItemTouchHelper所能做的事情，这部分比较有趣。我也希望能在这部分中讲更多内容，但是考虑到文章的长度，我决定分开来写。第三部分会很快出来。</p>
<p>GitHub项目比我们的文章先更新，如果你不想看教程，直接看代码上的变化也行。</p>
<h3 id="源码">源码</h3>
<p>这个系列文章包含相应GitHub项目，<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/" target="_blank" rel="external">Android-ItemTouchHelper-Demo</a>。这部分提交的代码是从<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/commit/ef8f149d2299bf57c2f5450aea75dc19b099bdee" target="_blank" rel="external">f8f149 </a>到 <a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/commit/d164fba0f27c8aa38cfa7dbd4bc74d53dea44605" target="_blank" rel="external">d164fba</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-6a6f0c422efd" target="_blank" rel="external">Drag and Swipe with RecyclerView Part Two: Handles, Grids, and Custom Animations </a><br>翻译：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a> </p>
<p>在<a href="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/" target="_blank" rel="external">第一部分</a>，我们介绍了<a href="http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" target="_blank" rel="external">ItemTouchHelper</a>，以及<a href="http://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html" target="_blank" rel="external">ItemTouchHelper.Callback</a> 的实现，在线性列表（RecyclerView）中添加基本的拖拽&amp;拖放与滑动删除。本文将在前文例子的基础上扩展，增加对grid布局的支持，处理拖拽的初始化，提示被选中的view，同时自定义滑动的动画。<br><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-2/1.gif" alt=""><br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://colobu.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RecyclerView的拖动和滑动 第一部分 ：基本的ItemTouchHelper示例]]></title>
    <link href="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/"/>
    <id>http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/</id>
    <published>2015-09-16T01:31:27.000Z</published>
    <updated>2015-09-16T01:58:29.467Z</updated>
    <content type="html"><![CDATA[<p>英文原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf" target="_blank" rel="external">Drag and Swipe with RecyclerView </a><br>翻译: <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0630/3123.html" target="_blank" rel="external">RecyclerView的拖动和滑动 第一部分 ：基本的ItemTouchHelper示例</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a><br>另一个翻译: <a href="https://github.com/bboyfeiyu/android-tech-frontier/blob/master/issue-18/%E6%8B%96%E6%8B%BDRecyclerView.md" target="_blank" rel="external">拖拽RecyclerView</a> by <a href="https://github.com/objectlife" target="_blank" rel="external">objectlife</a></p>
<p><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/1.gif" alt=""><br>在安卓中，有许多关于如何使用RecyclerView实现<strong>“drag &amp; drop”</strong> 与 <strong>“wipe-to-dismiss”</strong>的教程，库和例子。即使现在已经有了新的，更优的实现方式，大多数仍然是使用老旧的<a href="http://developer.android.com/guide/topics/ui/drag-drop.html" target="_blank" rel="external">View.OnDragListener</a>以及Roman Nurik在<a href="https://github.com/romannurik/Android-SwipeToDismiss" target="_blank" rel="external">SwipeToDismiss</a>中所使用的方法。很少有人使用新的api，反而要么经常依赖于<code>GestureDetectors</code>和<code>onInterceptTouchEvent</code>，要么实现方式很复杂。实际上，在RecyclerView上添加拖动特性有一个非常简单的方法。这个方法只需要一个类，并且它也是Android 兼容包的一部分，它就是：</p>
<h4 style="text-align: center;"><a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" data-href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" class="markup--anchor markup--h4-anchor" rel="external" target="_blank">ItemTouchHelper</a></h4>

<p>ItemTouchHelper是一个强大的工具，它处理好了关于在RecyclerView上添加拖动排序与滑动删除的所有事情。它是RecyclerView.ItemDecoration的子类，也就是说它可以轻易的添加到几乎所有的LayoutManager和Adapter中。它还可以和现有的item动画一起工作，提供受类型限制的拖放动画等等，</p>
<p>这篇文章中，我会演示一个ItemTouchHelper的简单实现，然后在这个系列文章的后面部分，我们将拓展范围，探索一些新的特性。<br><a id="more"></a></p>
<h3 id="跳过开头部分">跳过开头部分</h3>
<p>只对完整源码感兴趣？直接跳到github： <a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo" target="_blank" rel="external">Android-ItemTouchHelper-Demo</a>。第一次提交的代码和本文的内容相对应。 在这里下载<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo/releases" target="_blank" rel="external">demo apk</a> 。</p>
<h3 id="设置">设置</h3>
<p>第一件事是RecyclerView的基本设置，修改build.gradle，添加RecyclerView的依赖。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:22.2.0'</span></div></pre></td></tr></table></figure>

<p>ItemTouchHelper可以与几乎任意的RecyclerView.Adapter 和 LayoutManager使用，但是本文建立了几个基本的文件，可以在Gist上找到：<br><a href="https://gist.github.com/iPaulPro/2216ea5e14818056cfcc" target="_blank" rel="external">https://gist.github.com/iPaulPro/2216ea5e14818056cfcc</a></p>
<h3 id="使用_ItemTouchHelper_和_ItemTouchHelper-Callback">使用 ItemTouchHelper 和 ItemTouchHelper.Callback</h3>
<p>要使用ItemTouchHelper，你需要创建一个<a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.Callback.html" target="_blank" rel="external">ItemTouchHelper.Callback</a>。这个接口可以让你监听“move”与 “swipe”事件。这里还是控制view被选中的状态以及重写默认动画的地方。如果你只是想要一个基本的实现，有一个帮助类可以使用：<a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.SimpleCallback.html" target="_blank" rel="external">SimpleCallback</a>,但是为了了解其工作机制，我们还是自己实现。</p>
<p>启用基本的拖动排序与滑动删除需要重写的主要回调方法是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getMovementFlags(RecyclerView, ViewHolder)</div><div class="line">onMove(RecyclerView, ViewHolder, ViewHolder)</div><div class="line">onSwiped(ViewHolder, <span class="keyword">int</span>)</div></pre></td></tr></table></figure>

<p>我也需要两个帮助方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">isLongPressDragEnabled()</div><div class="line">isItemViewSwipeEnabled()</div></pre></td></tr></table></figure>

<p>我们将一一解答上面的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder) {</div><div class="line">    <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;</div><div class="line">    <span class="keyword">int</span> swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;</div><div class="line">    <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>ItemTouchHelper可以让你轻易得到一个事件的方向。你需要重写<strong>getMovementFlags()</strong>方法来指定可以支持的拖放和滑动的方向。使用<strong>helperItemTouchHelper.makeMovementFlags(int, int)</strong>来构造返回的flag。这里我们启用了上下左右两种方向。注：上下为拖动（drag），左右为滑动（swipe）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLongPressDragEnabled</span>() {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>ItemTouchHelper可以用于没有滑动的拖动操作（或者反过来），你必须指明你到底要支持哪一种。要支持长按RecyclerView item进入拖动操作，你必须在<strong>isLongPressDragEnabled()</strong>方法中返回true。或者，也可以调用<strong>ItemTouchHelper.startDrag(RecyclerView.ViewHolder) </strong>方法来开始一个拖动。这会在后面讲到。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isItemViewSwipeEnabled</span>() {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>而要在view任意位置触摸事件发生时启用滑动操作，则直接在<strong>isItemViewSwipeEnabled()</strong>中返回true就可以了。或者，你也主动调用<strong>ItemTouchHelper.startSwipe(RecyclerView.ViewHolder) </strong>来开始滑动操作。</p>
<p>接下来的两个是<strong>onMove()</strong>和<strong>onSwiped()</strong>，用于通知底层数据的更新。首先我们创建一个可以将这些回调方法传递出去的接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemTouchHelperAdapter</span> </span>{</div><div class="line"> </div><div class="line">    <span class="keyword">void</span> onItemMove(<span class="keyword">int</span> fromPosition, <span class="keyword">int</span> toPosition);</div><div class="line"> </div><div class="line">    <span class="keyword">void</span> onItemDismiss(<span class="keyword">int</span> position);</div><div class="line">}</div></pre></td></tr></table></figure>

<p><a href="https://gist.github.com/iPaulPro/5d43325ac7ae579760a9" target="_blank" rel="external">ItemTouchHelperAdapter.java Gist</a></p>
<p>以本例来说，最简单的方法就是在我们的<strong>RecyclerListAdapter</strong> 中实现这个listener。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerListAdapter</span> <span class="keyword">extends</span> </span></div><div class="line">        <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">ItemViewHolder</span>&gt; </div><div class="line">        <span class="keyword">implements</span> <span class="title">ItemTouchHelperAdapter</span> {<span class="comment">// ... code from gist</span></div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemDismiss</span>(<span class="keyword">int</span> position) {</div><div class="line">    mItems.remove(position);</div><div class="line">    notifyItemRemoved(position);</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemMove</span>(<span class="keyword">int</span> from, <span class="keyword">int</span> to) {</div><div class="line">    Collections.swap(mItems, from, to);</div><div class="line">    notifyItemMoved(from, to);</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>notifyItemRemoved()</strong>和 <strong>notifyItemMoved()</strong>的调用非常重要，有了它们Adapter才能知道发生了改变。同时还需要注意的是每当一个view切换到了一个新的索引时，我们都需要改变item的位置，<strong>而不是在拖动事件结束的时候</strong>。</p>
<p>现在我们回来创建我们的<strong>SimpleItemTouchHelperCallback</strong>，我们仍然需要重写<strong>onMove()</strong> 和 <strong>onSwiped()</strong>。</p>
<p>首先我们添加一个构造函数以及一个引用adapter的成员变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ItemTouchHelperAdapter mAdapter;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="title">SimpleItemTouchHelperCallback</span>(</div><div class="line">        ItemTouchHelperAdapter adapter) {</div><div class="line">    mAdapter = adapter;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后重写剩下的事件同时通知adapter：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMove</span>(RecyclerView recyclerView, </div><div class="line">        RecyclerView.ViewHolder viewHolder, </div><div class="line">        RecyclerView.ViewHolder target) {</div><div class="line">    mAdapter.onItemMove(viewHolder.getAdapterPosition(), </div><div class="line">            target.getAdapterPosition());</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">}</div><div class="line"><span class="annotation">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwiped</span>(RecyclerView.ViewHolder viewHolder, </div><div class="line">        <span class="keyword">int</span> direction) {</div><div class="line">    mAdapter.onItemDismiss(viewHolder.getAdapterPosition());</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这样Callback类大致如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleItemTouchHelperCallback</span> <span class="keyword">extends</span> <span class="title">ItemTouchHelper</span>.<span class="title">Callback</span> </span>{</div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ItemTouchHelperAdapter mAdapter;</div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="title">SimpleItemTouchHelperCallback</span>(ItemTouchHelperAdapter adapter) {</div><div class="line">        mAdapter = adapter;</div><div class="line">    }</div><div class="line">     </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLongPressDragEnabled</span>() {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">  </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isItemViewSwipeEnabled</span>() {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">  </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMovementFlags</span>(RecyclerView recyclerView, ViewHolder viewHolder) {</div><div class="line">        <span class="keyword">int</span> dragFlags = ItemTouchHelper.UP | ItemTouchHelper.DOWN;</div><div class="line">        <span class="keyword">int</span> swipeFlags = ItemTouchHelper.START | ItemTouchHelper.END;</div><div class="line">        <span class="keyword">return</span> makeMovementFlags(dragFlags, swipeFlags);</div><div class="line">    }</div><div class="line">  </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMove</span>(RecyclerView recyclerView, ViewHolder viewHolder, </div><div class="line">            ViewHolder target) {</div><div class="line">        mAdapter.onItemMove(viewHolder.getAdapterPosition(), target.getAdapterPosition());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    }</div><div class="line">  </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSwiped</span>(ViewHolder viewHolder, <span class="keyword">int</span> direction) {</div><div class="line">        mAdapter.onItemDismiss(viewHolder.getAdapterPosition());</div><div class="line">    }</div><div class="line">  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Callback准备好了之后，我们就可以创建我们的ItemTouchHelper并调用<strong>attachToRecyclerView(RecyclerView)</strong> 了（参见<a href="https://gist.github.com/iPaulPro/2216ea5e14818056cfcc#file-mainfragment-java" target="_blank" rel="external">MainFragment.java</a>）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ItemTouchHelper.Callback callback = </div><div class="line">    <span class="keyword">new</span> SimpleItemTouchHelperCallback(adapter);</div><div class="line">ItemTouchHelper touchHelper = <span class="keyword">new</span> ItemTouchHelper(callback);</div><div class="line">touchHelper.attachToRecyclerView(recyclerView);</div></pre></td></tr></table></figure>

<p>运行之后，你可以看到如下的效果：<br><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/2.gif" alt=""></p>
<h3 id="结束语">结束语</h3>
<p>这是一个ItemTouchHelper的简单实现。但是已经阐明了在RecyclerView上实现拖动排序与滑动删除时根本不需要第三方库的。在下一部分中，我们将对被拖动或者滑动的item做更多外观上的控制。</p>
<h3 id="源代码">源代码</h3>
<p>我在github上创建了一个覆盖这个系列文章的项目：<a href="https://github.com/iPaulPro/Android-ItemTouchHelper-Demo" target="_blank" rel="external">Android-ItemTouchHelper-Demo</a>。第一次提交的代码和这部分相对应的，也有点第二部分的内容。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>英文原文：<a href="https://medium.com/@ipaulpro/drag-and-swipe-with-recyclerview-b9456d2b1aaf" target="_blank" rel="external">Drag and Swipe with RecyclerView </a><br>翻译: <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0630/3123.html" target="_blank" rel="external">RecyclerView的拖动和滑动 第一部分 ：基本的ItemTouchHelper示例</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a><br>另一个翻译: <a href="https://github.com/bboyfeiyu/android-tech-frontier/blob/master/issue-18/%E6%8B%96%E6%8B%BDRecyclerView.md" target="_blank" rel="external">拖拽RecyclerView</a> by <a href="https://github.com/objectlife" target="_blank" rel="external">objectlife</a></p>
<p><img src="http://colobu.com/2015/09/16/Drag-and-Swipe-with-RecyclerView-1/1.gif" alt=""><br>在安卓中，有许多关于如何使用RecyclerView实现<strong>“drag &amp; drop”</strong> 与 <strong>“wipe-to-dismiss”</strong>的教程，库和例子。即使现在已经有了新的，更优的实现方式，大多数仍然是使用老旧的<a href="http://developer.android.com/guide/topics/ui/drag-drop.html" target="_blank" rel="external">View.OnDragListener</a>以及Roman Nurik在<a href="https://github.com/romannurik/Android-SwipeToDismiss" target="_blank" rel="external">SwipeToDismiss</a>中所使用的方法。很少有人使用新的api，反而要么经常依赖于<code>GestureDetectors</code>和<code>onInterceptTouchEvent</code>，要么实现方式很复杂。实际上，在RecyclerView上添加拖动特性有一个非常简单的方法。这个方法只需要一个类，并且它也是Android 兼容包的一部分，它就是：</p>
<h4 style="text-align: center;"><a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" data-href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" class="markup--anchor markup--h4-anchor" rel="external" target="_blank">ItemTouchHelper</a></h4>

<p>ItemTouchHelper是一个强大的工具，它处理好了关于在RecyclerView上添加拖动排序与滑动删除的所有事情。它是RecyclerView.ItemDecoration的子类，也就是说它可以轻易的添加到几乎所有的LayoutManager和Adapter中。它还可以和现有的item动画一起工作，提供受类型限制的拖放动画等等，</p>
<p>这篇文章中，我会演示一个ItemTouchHelper的简单实现，然后在这个系列文章的后面部分，我们将拓展范围，探索一些新的特性。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://colobu.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在RecyclerView上使用布局动画]]></title>
    <link href="http://colobu.com/2015/09/16/layout-animations-on-recyclerview/"/>
    <id>http://colobu.com/2015/09/16/layout-animations-on-recyclerview/</id>
    <published>2015-09-16T01:05:23.000Z</published>
    <updated>2015-09-17T03:28:20.922Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://antonioleiva.com/layout-animations-on-recyclerview/" target="_blank" rel="external">Layout animations on RecyclerView </a><br>翻译: <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0915/3462.html" target="_blank" rel="external">在RecyclerView上使用布局动画（Layout animation）</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a><br>本文可以结合 Android LayoutAnimation使用及扩展  一起阅读。</p>
<p>自动Material Design出现以来，我对一些视频中演示的网格铺开动画感到惊讶。这是一种斜对角线动画，让activity从上到下从左到右铺开。非常漂亮。<br><img src="http://colobu.com/2015/09/16/layout-animations-on-recyclerview/1.png" alt=""><br>我一直试图尝试所有能得到那种效果的方法。一种办法是，使用RecyclerView::notifyItemInserted()方法，这是很多人都提到的办法。但是这个方法没有提供太多控制动画顺序的方法，因此看起来并不是一个好办法。另一个就是在onBind()中必要的时候对每个元素使用动画，这也的确可行。但是那样的话代码就比较脆弱和过于侵入性（我们是在adapter中添加的动画）。要让它恰当的工作比较困难。<br><img src="2.png" alt=""><br><a id="more"></a></p>
<h3 id="布局动画">布局动画</h3>
<p>最后，解决的办法居然比想象的简单。我得承认我很少用 布局动画（layout animation），因此我没能立即想到这个办法。但是在寻找答案的过程中，我发现了这个非常棒的代码： <a href="https://gist.github.com/Musenkishi/8df1ab549857756098ba" target="_blank" rel="external">gist from Musenkishi</a> ，它给我指明了解决方法。这里的问题是RecyclerView默认并没有使用 layout animation，但是这个代码可以让它能像GridView那样使用GridLayoutAnimation。我们提到的gist是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright (C) 2014 Freddie (Musenkishi) Lust-Hed</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *      http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line">  </div><div class="line"><span class="keyword">package</span> com.musenkishi.gists.view;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.GridLayoutManager;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"><span class="keyword">import</span> android.view.animation.GridLayoutAnimationController;</div><div class="line"> </div><div class="line"><span class="javadoc">/**</span></div><div class="line"> * An extension of RecyclerView, focused more on resembling a GridView.</div><div class="line"> * Unlike {@link android.support.v7.widget.RecyclerView}, this view can handle</div><div class="line"> * {@code &lt;gridLayoutAnimation&gt;} as long as you provide it a</div><div class="line"> * {@link android.support.v7.widget.GridLayoutManager} in</div><div class="line"> * {@code setLayoutManager(LayoutManager layout)}.</div><div class="line"> *</div><div class="line"> * Created by Freddie (Musenkishi) Lust-Hed.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GridRecyclerView</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span> </span>{</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="title">GridRecyclerView</span>(Context context) {</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="title">GridRecyclerView</span>(Context context, AttributeSet attrs) {</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="title">GridRecyclerView</span>(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle) {</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLayoutManager</span>(LayoutManager layout) {</div><div class="line">        <span class="keyword">if</span> (layout <span class="keyword">instanceof</span> GridLayoutManager){</div><div class="line">            <span class="keyword">super</span>.setLayoutManager(layout);</div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(<span class="string">"You should only use a GridLayoutManager with GridRecyclerView."</span>);</div><div class="line">        }</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachLayoutAnimationParameters</span>(View child, ViewGroup.LayoutParams params, <span class="keyword">int</span> index, <span class="keyword">int</span> count) {</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (getAdapter() != <span class="keyword">null</span> && getLayoutManager() <span class="keyword">instanceof</span> GridLayoutManager){</div><div class="line"> </div><div class="line">            GridLayoutAnimationController.AnimationParameters animationParams =</div><div class="line">                    (GridLayoutAnimationController.AnimationParameters) params.layoutAnimationParameters;</div><div class="line"> </div><div class="line">            <span class="keyword">if</span> (animationParams == <span class="keyword">null</span>) {</div><div class="line">                animationParams = <span class="keyword">new</span> GridLayoutAnimationController.AnimationParameters();</div><div class="line">                params.layoutAnimationParameters = animationParams;</div><div class="line">            }</div><div class="line"> </div><div class="line">            <span class="keyword">int</span> columns = ((GridLayoutManager) getLayoutManager()).getSpanCount();</div><div class="line"> </div><div class="line">            animationParams.count = count;</div><div class="line">            animationParams.index = index;</div><div class="line">            animationParams.columnsCount = columns;</div><div class="line">            animationParams.rowsCount = count / columns;</div><div class="line"> </div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> invertedIndex = count - <span class="number">1</span> - index;</div><div class="line">            animationParams.column = columns - <span class="number">1</span> - (invertedIndex % columns);</div><div class="line">            animationParams.row = animationParams.rowsCount - <span class="number">1</span> - invertedIndex / columns;</div><div class="line"> </div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">            <span class="keyword">super</span>.attachLayoutAnimationParameters(child, params, index, count);</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="配置布局动画">配置布局动画</h3>
<p>布局动画好的一面就是我们可以使用xml来定义与部署它们，因此我们的代码不会被动画穿插。我们只需用相应的布局动画定义xml。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">gridLayoutAnimation</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attribute">android:columnDelay</span>=<span class="value">"15%"</span></div><div class="line">    <span class="attribute">android:rowDelay</span>=<span class="value">"15%"</span></div><div class="line">    <span class="attribute">android:animation</span>=<span class="value">"@anim/slide_in_bottom"</span></div><div class="line">    <span class="attribute">android:animationOrder</span>=<span class="value">"normal"</span></div><div class="line">    <span class="attribute">android:direction</span>=<span class="value">"top_to_bottom|left_to_right"</span>/&gt;</div></pre></td></tr></table></figure>

<p>我们可以根据自己的喜好来自定义动画：</p>
<ul>
<li><strong>columnDelay / rowDelay</strong>:  行元素与列元素在动画时的延迟时间百分数。这样我们才能让下一行下一列view一个接一个的动画，而不是一起动画。</li>
<li><strong>animation: view</strong>: 出现在屏幕上的动画，我使用的是从底部滑出的动画。</li>
<li><strong>animationOrder</strong>: 可以是 normal, reverse 或者 random.</li>
<li><strong>direction</strong>: 指定item如何 基于列延迟显示出来，可取值：top_to_bottom, left_to_right,bottom_to_top,right_to_left。</li>
</ul>
<p>这里是slide 动画的xml代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">translate</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">           <span class="attribute">android:interpolator</span>=<span class="value">"@android:anim/decelerate_interpolator"</span></div><div class="line">           <span class="attribute">android:fromYDelta</span>=<span class="value">"100%p"</span> <span class="attribute">android:toYDelta</span>=<span class="value">"0"</span></div><div class="line">           <span class="attribute">android:duration</span>=<span class="value">"@android:integer/config_mediumAnimTime"</span>/&gt;</div></pre></td></tr></table></figure>

<h3 id="调整动画的时机">调整动画的时机</h3>
<p>如果你执行现在的代码，你会发现app打开的同时布局动画也在执行，因此你其实看不到什么效果。对于Lollipop 之前的设备你没什么办法，没有有效的方法可以知道进入动画何时完成（至少我不知道）。但是从Lollipop 开始，我们可以使用onEnterAnimationComplete来检查。因此在onCreate中，如果SDK 版本旧于Lollipop，RecyclerView直接落定：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) {</div><div class="line">    setRecyclerAdapter(recyclerView);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在Lollipop 或者更新设备，onEnterAnimationComplete会被调用。这是落定RecyclerView与请求新的布局动画的时机：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEnterAnimationComplete</span>() {</div><div class="line">    <span class="keyword">super</span>.onEnterAnimationComplete();</div><div class="line">    setRecyclerAdapter(recyclerView);</div><div class="line">    recyclerView.scheduleLayoutAnimation();</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="总结">总结</h3>
<p>你可以轻易调整此布局动画来产生别的进入动画。可以尝试弄弄动画设置看看能得到些什么效果。<br>本例子的代码在Github的  <a href="https://github.com/antoniolg/MaterializeYourApp" target="_blank" rel="external">Materialize your App repository</a> 。</p>
<p><strong>更多资料</strong></p>
<ol>
<li><a href="https://github.com/wasabeef/recyclerview-animators" target="_blank" rel="external">recyclerview-animators</a></li>
<li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0630/3123.html" target="_blank" rel="external">RecyclerView的拖动和滑动 第一部分 ：基本的ItemTouchHelper示例</a></li>
<li><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0724/3219.html" target="_blank" rel="external">RecyclerView的拖动和滑动 第二部分 ：拖块，Grid以及自定义动画</a></p>
</li>
<li><p><a href=""></a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://antonioleiva.com/layout-animations-on-recyclerview/" target="_blank" rel="external">Layout animations on RecyclerView </a><br>翻译: <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0915/3462.html" target="_blank" rel="external">在RecyclerView上使用布局动画（Layout animation）</a> by <a href="http://www.jcodecraeer.com" target="_blank" rel="external">泡在网上的日子</a><br>本文可以结合 Android LayoutAnimation使用及扩展  一起阅读。</p>
<p>自动Material Design出现以来，我对一些视频中演示的网格铺开动画感到惊讶。这是一种斜对角线动画，让activity从上到下从左到右铺开。非常漂亮。<br><img src="http://colobu.com/2015/09/16/layout-animations-on-recyclerview/1.png" alt=""><br>我一直试图尝试所有能得到那种效果的方法。一种办法是，使用RecyclerView::notifyItemInserted()方法，这是很多人都提到的办法。但是这个方法没有提供太多控制动画顺序的方法，因此看起来并不是一个好办法。另一个就是在onBind()中必要的时候对每个元素使用动画，这也的确可行。但是那样的话代码就比较脆弱和过于侵入性（我们是在adapter中添加的动画）。要让它恰当的工作比较困难。<br><img src="2.png" alt=""><br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://colobu.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android实现波浪效果 - WaveView]]></title>
    <link href="http://colobu.com/2015/09/15/android-waveview/"/>
    <id>http://colobu.com/2015/09/15/android-waveview/</id>
    <published>2015-09-15T05:28:39.000Z</published>
    <updated>2015-09-15T06:49:06.990Z</updated>
    <content type="html"><![CDATA[<p>先上效果图<br><img src="http://colobu.com/2015/09/15/android-waveview/screenshot.gif" alt="WaveView截图"></p>
<h2 id="实现">实现</h2>
<h3 id="WaveView的属性">WaveView的属性</h3>
<p><img src="http://colobu.com/2015/09/15/android-waveview/terms.png" alt="WaveView的属性"></p>
<dl><br>    <dt>Wate Level(水位)</dt><br>    <dd>波浪静止时水面距离底部的高度</dd><br>    <dt>Amplitude(振幅)</dt><br>    <dd>波浪垂直振动时偏离水面的最大距离</dd><br>    <dt>Wave Length(波长)</dt><br>    <dd>一个完整的波浪的水平长度</dd><br>    <dt>Wave Shift(偏移)</dt><br>    <dd>波浪相对于初始位置的水平偏移</dd><br></dl>

<a id="more"></a>
<h3 id="实现思路">实现思路</h3>
<p>设想我们有一个画好波形的图片，那么我们只需要用这张图片填充（X轴方向重复，Y轴方向延伸）整个View，然后水平移动图片，就可以得到波浪效果了。</p>
<p>所以要做的事很简单：绘制一个波形图，填充到View里，移动波形图。</p>
<p><strong>1. 绘制初始波形</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createShader</span>() {</div><div class="line">    ...</div><div class="line"></div><div class="line">    Bitmap bitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">    Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);</div><div class="line"></div><div class="line">    <span class="comment">// Draw default waves into the bitmap</span></div><div class="line">    <span class="comment">// y=Asin(ωx+φ)+h</span></div><div class="line">    <span class="keyword">float</span> waveX1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> wave2Shift = mDefaultWaveLength / <span class="number">4</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> endX = getWidth();</div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> endY = getHeight();</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (waveX1 &lt; endX) {</div><div class="line">        <span class="keyword">double</span> wx = waveX1 * mDefaultAngularFrequency;</div><div class="line">        <span class="keyword">int</span> startY = (<span class="keyword">int</span>) (mDefaultWaterLevel + mDefaultAmplitude * Math.sin(wx));</div><div class="line"></div><div class="line">        <span class="comment">// draw bottom wave with the alpha 40</span></div><div class="line">        canvas.drawLine(waveX1, startY, waveX1, endY, wavePaint1);</div><div class="line">        <span class="comment">// draw top wave with the alpha 60</span></div><div class="line">        <span class="keyword">float</span> waveX2 = (waveX1 + wave2Shift) % endX;</div><div class="line">        canvas.drawLine(waveX2, startY, waveX2, endY, wavePaint2);</div><div class="line"></div><div class="line">        waveX1++;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// use the bitamp to create the shader</span></div><div class="line">    mWaveShader = <span class="keyword">new</span> BitmapShader(bitmap, Shader.TileMode.REPEAT, Shader.TileMode.CLAMP);</div><div class="line">    mViewPaint.setShader(mWaveShader);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>首先一个长宽恰等于WaveView的Bitmap：<code>Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888)</code>。</p>
<p>在Bitmap中使用默认的属性绘制出初始波形。初始波形的属性：Wate Level(水位)为WaveView高度的1/2；Amplitude(振幅)为WaveView高度的1/20；Wave Length(波长)等于WaveView的宽度。</p>
<p>绘制好的初始波形是下面这个样子：</p>
<p><img src="http://colobu.com/2015/09/15/android-waveview/default-wave.png" alt="初始波形"></p>
<p>代码第 9 ~ 27 行进行初始波形的绘制。波形由wave1和wave2两个波组成，wave2就是wave1向左偏移1/4的wave length，所以不需要重复计算。</p>
<p>最后把这个Bitmap设置成为Paint的Shader。设置Shader相当于设定画笔的形状，使用设置了Shader的Paint绘制图形时，实际上是在使用Bitmap填充绘制的区域。X轴的填充方式为<code>TileMode.REPEAT</code>，即重复填充；Y轴的填充方式为<code>TileMode.CLAMP</code>，即使用边缘的色值延伸填充。</p>
<p><strong>2. 调整Bitmap的大小并填充到WaveView</strong></p>
<p>有了初始波形，当WaveView的属性改变时，只需要对初始波形进行相应的拉伸/压缩和位移就可以得到用户想要的波形。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sacle shader according to mWaveLengthRatio and mAmplitudeRatio</span></div><div class="line"><span class="comment">// this decides the size(mWaveLengthRatio for width, mAmplitudeRatio for height) of waves</span></div><div class="line">mShaderMatrix.setScale(</div><div class="line">        mWaveLengthRatio / DEFAULT_WAVE_LENGTH_RATIO,</div><div class="line">        mAmplitudeRatio / DEFAULT_AMPLITUDE_RATIO,</div><div class="line">        <span class="number">0</span>,</div><div class="line">        mDefaultWaterLevel);</div><div class="line"><span class="comment">// translate shader according to mWaveShiftRatio and mWaterLevelRatio this decides the start position(mWaveShiftRatio for x, mWaterLevelRatio for </span></div><div class="line"><span class="comment">// this decides the start position(mWaveShiftRatio for x, mWaterLevelRatio for y) of waves</span></div><div class="line">mShaderMatrix.postTranslate(</div><div class="line">        mWaveShiftRatio * getWidth(),</div><div class="line">        (DEFAULT_WATER_LEVEL_RATIO - mWaterLevelRatio) * getHeight());</div><div class="line"></div><div class="line"><span class="comment">// assign matrix to invalidate the shader</span></div><div class="line">mWaveShader.setLocalMatrix(mShaderMatrix);</div><div class="line"></div><div class="line"><span class="keyword">float</span> radius = getWidth() / <span class="number">2</span>f</div><div class="line">        - (mBorderPaint == <span class="keyword">null</span> ? <span class="number">0</span>f : mBorderPaint.getStrokeWidth());</div><div class="line">canvas.drawCircle(getWidth() / <span class="number">2</span>f, getHeight() / <span class="number">2</span>f, radius, mViewPaint);</div></pre></td></tr></table></figure>

<p>代码 3 ~ 6 行对Shader进行拉伸/压缩，10 ~ 12 行对Shader进行水平/竖直平移。</p>
<p>代码 17 ~ 19 行用Shader填充成想要的形状。</p>
<p><strong>3. 动画</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// horizontal animation.</span></div><div class="line"><span class="comment">// wave waves infinitely.</span></div><div class="line">ObjectAnimator waveShiftAnim = ObjectAnimator.ofFloat(</div><div class="line">        mWaveView, <span class="string">"waveShiftRatio"</span>, <span class="number">0</span>f, <span class="number">1</span>f);</div><div class="line">waveShiftAnim.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">waveShiftAnim.setDuration(<span class="number">1000</span>);</div><div class="line">waveShiftAnim.setInterpolator(<span class="keyword">new</span> LinearInterpolator());</div><div class="line">animators.add(waveShiftAnim);</div><div class="line"></div><div class="line"><span class="comment">// vertical animation.</span></div><div class="line"><span class="comment">// water level increases from 0 to center of WaveView</span></div><div class="line">ObjectAnimator waterLevelAnim = ObjectAnimator.ofFloat(</div><div class="line">        mWaveView, <span class="string">"waterLevelRatio"</span>, <span class="number">0</span>f, <span class="number">0.5</span>f);</div><div class="line">waterLevelAnim.setDuration(<span class="number">10000</span>);</div><div class="line">waterLevelAnim.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());</div><div class="line">animators.add(waterLevelAnim);</div><div class="line"></div><div class="line"><span class="comment">// amplitude animation.</span></div><div class="line"><span class="comment">// wave grows big then grows small, repeatedly</span></div><div class="line">ObjectAnimator amplitudeAnim = ObjectAnimator.ofFloat(</div><div class="line">        mWaveView, <span class="string">"amplitudeRatio"</span>, <span class="number">0</span>f, <span class="number">0.05</span>f);</div><div class="line">amplitudeAnim.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">amplitudeAnim.setRepeatMode(ValueAnimator.REVERSE);</div><div class="line">amplitudeAnim.setDuration(<span class="number">5000</span>);</div><div class="line">amplitudeAnim.setInterpolator(<span class="keyword">new</span> LinearInterpolator());</div><div class="line">animators.add(amplitudeAnim);</div></pre></td></tr></table></figure>

<p>代码 3 ~ 8 行让波形一直向右移动，效果就是波形一直在波动。</p>
<p>代码 12 ~ 16 行让水位从0逐渐涨到WaveView高度的一半。</p>
<p>代码 20 ~ 26 行波浪的大小从大变小，再从小变大。</p>
<hr>
<h2 id="源代码">源代码</h2>
<p>代码在github：<a href="https://github.com/gelitenight/WaveView" target="_blank" rel="external">WaveView</a></p>
<blockquote>
<p>本文遵循“<a href="http://creativecommons.org/licenses/by-nc-sa/3.0/deed.zh" target="_blank" rel="external">署名-非商业性使用-相同方式共享</a>”的创作共同协议，欢迎转载，转载时请注明作者和出处。<br>作者: <a href="mailto:gelitenight@gmail.com" target="_blank" rel="external">gelitenight</a><br>出处: <a href="http://gelitenight.github.io/wave-view/" target="_blank" rel="external">http://gelitenight.github.io/wave-view/</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>先上效果图<br><img src="http://colobu.com/2015/09/15/android-waveview/screenshot.gif" alt="WaveView截图"></p>
<h2 id="实现">实现</h2>
<h3 id="WaveView的属性">WaveView的属性</h3>
<p><img src="http://colobu.com/2015/09/15/android-waveview/terms.png" alt="WaveView的属性"></p>
<dl><br>    <dt>Wate Level(水位)</dt><br>    <dd>波浪静止时水面距离底部的高度</dd><br>    <dt>Amplitude(振幅)</dt><br>    <dd>波浪垂直振动时偏离水面的最大距离</dd><br>    <dt>Wave Length(波长)</dt><br>    <dd>一个完整的波浪的水平长度</dd><br>    <dt>Wave Shift(偏移)</dt><br>    <dd>波浪相对于初始位置的水平偏移</dd><br></dl>

]]>
    
    </summary>
    
      <category term="Android" scheme="http://colobu.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在@Value注解中为String类型的字段设置null值]]></title>
    <link href="http://colobu.com/2015/09/09/set-null-for-a-string-property-by-Value/"/>
    <id>http://colobu.com/2015/09/09/set-null-for-a-string-property-by-Value/</id>
    <published>2015-09-09T06:36:34.000Z</published>
    <updated>2015-09-09T07:17:50.141Z</updated>
    <content type="html"><![CDATA[<p>在Spring中可以使用<code>@Value</code>为<code>field</code>、<code>method</code>、<code>method/constructor</code>的参数设置缺省值。<br>但是，如果如何为一个字符串类型的字段设置null值呢？<br>下面的方法统统不对：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   <span class="annotation">@Value</span>(<span class="string">"${app.name1:}"</span>)</div><div class="line">   <span class="keyword">private</span> String name1;</div><div class="line">   </div><div class="line"><span class="annotation">@Value</span>(<span class="string">"${app.name2:''}"</span>)</div><div class="line">   <span class="keyword">private</span> String name2;</div><div class="line">   </div><div class="line"><span class="annotation">@Value</span>(<span class="string">"${app.name3:null}"</span>)</div><div class="line"><span class="keyword">private</span> String name3;</div></pre></td></tr></table></figure>

<a id="more"></a>
<h3 id="@Value">@Value</h3>
<p>我们先来看看<code>@Value</code>注解的使用方法。它主要用来为 <em>字段</em> 或者 <em>方法</em>/<em>构造函数</em>的参数 注入值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public static class FieldValueTestBean</div><div class="line"></div><div class="line">    @Value("#{ systemProperties[''user.region''] ?: 'zh_CN'" }")</div><div class="line">    private String defaultLocale;</div><div class="line">	</div><div class="line">	@Value("${user.name}")</div><div class="line">    private String userName;</div><div class="line"></div><div class="line">    public void setDefaultLocale(String defaultLocale) {</div><div class="line">        this.defaultLocale = defaultLocale;</div><div class="line">    }</div><div class="line"></div><div class="line">    public String getDefaultLocale() {</div><div class="line">        return this.defaultLocale;</div><div class="line">    }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>还可以放在方法上:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyValueTestBean</span></span></div><div class="line"></div><div class="line">    <span class="title">private</span> <span class="title">String</span> <span class="title">defaultLocale</span>;</div><div class="line"></div><div class="line">    <span class="annotation">@Value</span>(<span class="string">"#{ systemProperties[''user.region''] }"</span>)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultLocale</span>(String defaultLocale) {</div><div class="line">        <span class="keyword">this</span>.defaultLocale = defaultLocale;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String <span class="title">getDefaultLocale</span>() {</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.defaultLocale;</div><div class="line">    }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>甚至构造函数上:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class MovieRecommender {</div><div class="line"></div><div class="line">    private String defaultLocale;</div><div class="line"></div><div class="line">    private CustomerPreferenceDao customerPreferenceDao;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    public MovieRecommender(CustomerPreferenceDao customerPreferenceDao,</div><div class="line">            @Value("#{systemProperties[''user.country'']}") String defaultLocale) {</div><div class="line">        this.customerPreferenceDao = customerPreferenceDao;</div><div class="line">        this.defaultLocale = defaultLocale;</div><div class="line">    }</div><div class="line"></div><div class="line">    // ...</div><div class="line">}</div></pre></td></tr></table></figure>

<p>它支持两种表达方式：</p>
<ul>
<li>PlaceHolder方式。 默认使用 <code>${...}</code>方式,大括号内的placeholder。</li>
<li>Spring Expression Language方式。 格式为<code>#{...}</code>, 括号内的Spring EL表达式。 具体参考可以查看 <a href="http://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/htmlsingle/#expressions-language-ref" target="_blank" rel="external">Spring Language Reference</a></li>
</ul>
<h4 id="缺省值">缺省值</h4>
<p>如果没有placeholder或者表达式为空，我们可以提供一个缺省值。</p>
<ol>
<li><strong>PlaceHolder方式</strong></li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$<span class="rules">{<span class="rule"><span class="attribute">property</span>:<span class="value">default value</span></span></span>}</div></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Value</span>(<span class="string">"${mongodb.url:127.0.0.1}"</span>)</div><div class="line"><span class="keyword">private</span> String mongodbUrl;</div><div class="line"></div><div class="line"><span class="annotation">@Value</span>(<span class="string">"#{'${mongodb.url:172.0.0.1}'}"</span>) <span class="comment">//混合模式</span></div><div class="line"><span class="keyword">private</span> String mongodbUrl;</div><div class="line"></div><div class="line"><span class="annotation">@Value</span>(<span class="string">"#{config['mongodb.url']?:'127.0.0.1'}"</span>) <span class="comment">//混合模式+缺省值</span></div><div class="line"><span class="keyword">private</span> String mongodbUrl;</div></pre></td></tr></table></figure>

<p><em>本例子摘自: <a href="http://www.mkyong.com/spring3/spring-value-default-value/" target="_blank" rel="external">mkyong</a></em></p>
<ol>
<li>Spring EL方式</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#{<span class="ruby"><span class="symbol">expression?:</span>default value}</span></div></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Value</span>(<span class="string">"#{systemProperties['zookeeper.url'] ?: localhost:2181}"</span>)</div><div class="line"><span class="keyword">private</span> String zookeeperUrl;</div><div class="line"></div><div class="line"><span class="annotation">@Value</span>(<span class="string">"#{config['mongodb.url'] ?: '127.0.0.1:27017'}"</span>) </div><div class="line"><span class="keyword">private</span> String mongodbUrl;	</div><div class="line"></div><div class="line"><span class="annotation">@Value</span>(<span class="string">"#{user.age ?: 18}"</span>)</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</div></pre></td></tr></table></figure>

<h3 id="字符串null">字符串null</h3>
<p>如果配置的属性，我们希望设置一个null的缺省值，改怎么做呢？<br>两种方式：</p>
<ol>
<li>Spring EL方式</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Value</span>(<span class="string">"${app.name:#{null}}"</span>)</div><div class="line">    <span class="keyword">private</span> String name;</div></pre></td></tr></table></figure>

<ol>
<li>PlaceHolder方式<br>这种方式需要为<code>PlaceholderConfigurerSupport</code>或它的子类设置属性<code>nullValue</code>， 比如：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">placeholderConfigurer.setNullValue(<span class="string">"@null"</span>);</div></pre></td></tr></table></figure>

<p>这样字符串<code>@null</code>就代表null对象。<br>你可以</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="annotation">@Value</span>(<span class="string">"${app.name:@null}"</span>)</div><div class="line"> <span class="keyword">private</span> String name;</div></pre></td></tr></table></figure>

<p>也可以在属性文件中设置:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.<span class="variable">name=</span>@<span class="constant">null</span></div></pre></td></tr></table></figure>

<h3 id="完整的测试代码">完整的测试代码</h3>
<ul>
<li>App.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.colobu.spring;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line"></div><div class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"application.xml"</span>);</div><div class="line"></div><div class="line">        HelloService service = (HelloService)ctx.getBean(<span class="string">"helloService"</span>);</div><div class="line">        service.test();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>AppConfig.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.colobu.spring;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.PropertySourcesPlaceholderConfigurer;</div><div class="line"></div><div class="line"><span class="annotation">@PropertySource</span>(<span class="string">"classpath:/application.properties"</span>)</div><div class="line"><span class="annotation">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>{</div><div class="line"></div><div class="line"></div><div class="line">    <span class="annotation">@Bean</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  PropertySourcesPlaceholderConfigurer <span class="title">propertySourcesPlaceholderConfigurer</span>() <span class="keyword">throws</span> Exception {</div><div class="line">        PropertySourcesPlaceholderConfigurer placeholderConfigurer = <span class="keyword">new</span> PropertySourcesPlaceholderConfigurer();</div><div class="line">        placeholderConfigurer.setNullValue(<span class="string">"@null"</span>);</div><div class="line">        <span class="keyword">return</span> placeholderConfigurer;</div><div class="line">    }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>HelloService.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.colobu.spring;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</div><div class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</div><div class="line"></div><div class="line"><span class="annotation">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>{</div><div class="line"></div><div class="line">    <span class="annotation">@Value</span>(<span class="string">"${app.count}"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</div><div class="line">    <span class="annotation">@Value</span>(<span class="string">"${app.name1:abcd}"</span>)</div><div class="line">    <span class="keyword">private</span> String name1;</div><div class="line">    <span class="annotation">@Value</span>(<span class="string">"${app.name2:`abcd`}"</span>)</div><div class="line">    <span class="keyword">private</span> String name2;</div><div class="line">    <span class="annotation">@Value</span>(<span class="string">"${app.name3}"</span>)</div><div class="line">    <span class="keyword">private</span> String name3;</div><div class="line">    <span class="annotation">@Value</span>(<span class="string">"${app.enable}"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> appEnable;</div><div class="line">    <span class="annotation">@Value</span>(<span class="string">"${app.name4:}"</span>)</div><div class="line">    <span class="keyword">private</span> String name4;</div><div class="line">    <span class="annotation">@Value</span>(<span class="string">"${app.name5:''}"</span>)</div><div class="line">    <span class="keyword">private</span> String name5;</div><div class="line">    <span class="annotation">@Value</span>(<span class="string">"${app.name6:@null}"</span>)</div><div class="line">    <span class="keyword">private</span> String name6;</div><div class="line">    <span class="annotation">@Value</span>(<span class="string">"${app.name7:#{null}}"</span>)</div><div class="line">    <span class="keyword">private</span> String name7;</div><div class="line"></div><div class="line">    <span class="annotation">@PostConstruct</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span>() {</div><div class="line">        System.out.println(<span class="string">"start"</span>);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span>(){</div><div class="line">        System.out.println(<span class="string">"num="</span> + num);</div><div class="line">        System.out.println(<span class="string">"appEnable="</span> + appEnable);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"name1="</span> + name1);</div><div class="line">        System.out.println(<span class="string">"name2="</span> + name2);</div><div class="line">        System.out.println(<span class="string">"name3 ="</span> + name3);</div><div class="line">        System.out.println(<span class="string">"name4 ="</span> + name4);</div><div class="line">        System.out.println(<span class="string">"name5 = "</span> + name5);</div><div class="line">        System.out.println(<span class="string">"name6 = "</span> + name6);</div><div class="line">        System.out.println(<span class="string">"name7 = "</span> + name7);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@PreDestroy</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span>(){</div><div class="line">        System.out.println(<span class="string">"stop"</span>);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>application.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attribute">xmlns:context</span>=<span class="value">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attribute">xmlns:util</span>=<span class="value">"http://www.springframework.org/schema/util"</span></div><div class="line">       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></div><div class="line">				            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</div><div class="line">				            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd"</div><div class="line">       <span class="attribute">default-autowire</span>=<span class="value">"byType"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">context:annotation-config</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"com.colobu.spring"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">util:properties</span> <span class="attribute">id</span>=<span class="value">"configProperties"</span> <span class="attribute">location</span>=<span class="value">"classpath:application.properties"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">context:property-placeholder</span> <span class="attribute">properties-ref</span>=<span class="value">"configProperties"</span> <span class="attribute">ignore-resource-not-found</span>=<span class="value">"true"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></div></pre></td></tr></table></figure>

<ul>
<li>application.properties</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.<span class="variable">count=</span><span class="number">0</span></div><div class="line">app.<span class="variable">name3=</span>@<span class="constant">null</span></div><div class="line">app.<span class="variable">enable=</span><span class="constant">false</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>在Spring中可以使用<code>@Value</code>为<code>field</code>、<code>method</code>、<code>method/constructor</code>的参数设置缺省值。<br>但是，如果如何为一个字符串类型的字段设置null值呢？<br>下面的方法统统不对：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   <span class="annotation">@Value</span>(<span class="string">"${app.name1:}"</span>)</div><div class="line">   <span class="keyword">private</span> String name1;</div><div class="line">   </div><div class="line"><span class="annotation">@Value</span>(<span class="string">"${app.name2:''}"</span>)</div><div class="line">   <span class="keyword">private</span> String name2;</div><div class="line">   </div><div class="line"><span class="annotation">@Value</span>(<span class="string">"${app.name3:null}"</span>)</div><div class="line"><span class="keyword">private</span> String name3;</div></pre></td></tr></table></figure>

]]>
    
    </summary>
    
      <category term="Spring" scheme="http://colobu.com/tags/Spring/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何编写Go代码]]></title>
    <link href="http://colobu.com/2015/09/07/How-to-Write-Go-Code/"/>
    <id>http://colobu.com/2015/09/07/How-to-Write-Go-Code/</id>
    <published>2015-09-07T06:30:58.000Z</published>
    <updated>2015-10-14T07:23:45.936Z</updated>
    <content type="html"><![CDATA[<p>官方原文: <a href="https://golang.org/doc/code.html" target="_blank" rel="external">How to Write Go Code</a>,<br>根据最新官方文档翻译。翻译参考<a href="http://www.cnblogs.com/wang_yb/" target="_blank" rel="external">wang_yb</a>的<a href="http://www.cnblogs.com/wang_yb/p/4333331.html" target="_blank" rel="external">如何写 go 代码 </a>。<br>因为官方文档有更新，我根据新版本的文档重新进行了翻译。</p>
<p>本文演示如何开发一个简单的 go package, 以及 <a href="https://golang.org/cmd/go/" target="_blank" rel="external">go tool</a> 的使用方法,<br>即获取(fetch), 编译(build), 安装(install) go package 的标准方法和命令.</p>
<p><em>go</em> tool 需要你按照一定的标准来组织代码. 请仔细阅读本文.<br>它介绍了用来构建和运行 Go 程序的最简单方法.</p>
<p>介绍本文的视频参照: <a href="https://www.youtube.com/watch?v=XCsL89YtqCs。" target="_blank" rel="external">https://www.youtube.com/watch?v=XCsL89YtqCs。</a><br><a id="more"></a></p>
<h2 id="代码组织">代码组织</h2>
<h3 id="工作区Workspace">工作区Workspace</h3>
<p><em>go</em> tool 是设计用来和公共仓库的开源代码一起工作的.<br>即使你不需要发布你的代码, go tool 的工作模型也同样适用于你.</p>
<p>Go 代码必须保存在 <em>工作区</em> 中, 工作区 就是一个特定的目录结构, 根目录下有如下3个目录:</p>
<ul>
<li><em>src</em> 目录: 存放 go 源码文件, 按 package 来组织 (一个 package 一个文件夹)</li>
<li><em>pkg</em> 目录: 存放 package 对象</li>
<li><em>bin</em> 目录: 存放可执行的命令command</li>
</ul>
<p><em>go</em> tool 编译 <em>src</em> 下的文件, 并将编译好的二进制文件分别放入 <em>pkg</em> 或者 <em>bin</em> 文件夹中.<br><em>src</em> 目录可以包含多个 版本控制仓库(比如 Git 或 Mercurial), 用来管理代码的开发.</p>
<p>一个实际的工作区的目录结构如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">bin/</div><div class="line">    hello                          # <span class="keyword">command</span> <span class="built_in">executable</span></div><div class="line">    outyet                         # <span class="keyword">command</span> <span class="built_in">executable</span></div><div class="line">pkg/</div><div class="line">    linux_amd64/</div><div class="line">        github.<span class="keyword">com</span>/golang/example/</div><div class="line">            stringutil.<span class="keyword">a</span>           # package object</div><div class="line">src/</div><div class="line">    github.<span class="keyword">com</span>/golang/example/</div><div class="line">        .git/                      # Git repository metadata</div><div class="line">	hello/</div><div class="line">	    hello.<span class="keyword">go</span>               # <span class="keyword">command</span> <span class="keyword">source</span></div><div class="line">	outyet/</div><div class="line">	    main.<span class="keyword">go</span>                # <span class="keyword">command</span> <span class="keyword">source</span></div><div class="line">	    main_test.<span class="keyword">go</span>           # test <span class="keyword">source</span></div><div class="line">	stringutil/</div><div class="line">	    <span class="built_in">reverse</span>.<span class="keyword">go</span>             # package <span class="keyword">source</span></div><div class="line">	    reverse_test.<span class="keyword">go</span>        # test <span class="keyword">source</span></div></pre></td></tr></table></figure>

<p>这个工作区包含一个仓库(<em>example</em>),由两个命令组成(<em>hello</em>和<em>outyet</em>)，以及一个库(<em>stringutil</em>)。</p>
<p>一个典型的工作区可能包含很多源码库，这些源码库包含着N多的<em>package</em>和<em>command</em>。大部分的Go程序员会将他们的源码和依赖放在一个单一的工作区中。</p>
<p>命令Command和库libraries由各种source package编译而来。我们稍后再介绍<a href="">它</a>。</p>
<h3 id="GOPATH_环境变量">GOPATH 环境变量</h3>
<p><code>GOPATH</code> 环境变量指向你的 <em>工作区</em> 的位置. 这是你开发 Go 代码时唯一需要设置的环境变量.</p>
<p>开始开发时, 创建 工作区 的文件夹, 并设置对应的 <code>GOPATH</code> 环境变量.<br>你的 工作区 可以是任意文件夹, 本文中使用的路径是 <code>$HOME/work</code><br>注意 不要把 <code>GOPATH</code> 设置为 go 的安装路径. (另一种常用设置方式是设置<code>GOPATH=$HOME</code>)</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir <span class="variable">$HOME</span>/work</div><div class="line">$ <span class="keyword">export</span> GOPATH=<span class="variable">$HOME</span>/work</div></pre></td></tr></table></figure>

<p>为了方便编译出的命令的执行, 将上面的 bin 目录加入到 PATH:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin</div></pre></td></tr></table></figure>

<p>想了解更多设置GOPATH 环境变量的知识，可以查看<a href="https://golang.org/cmd/go/#hdr-GOPATH_environment_variable" target="_blank" rel="external">go help gopath</a></p>
<h3 id="Package路径">Package路径</h3>
<p>标准库中的 package 只要使用短路径即可, 比如 &quot;fmt&quot;, &quot;net/http&quot;。<br>对于自己的 package, 必须选一个基本路径以防止以后和标准库, 或者其他第三方的库产生冲突。<br>如果你的代码保存在某个代码仓库, 那么就可以使用那个代码仓库的根目录作为你的 package 的基本路径。<br>比如, 你有个 github 的账户在 <code>github.com/user</code>, 就可以使用 <code>github.com/user</code> 作为你的基本路径。</p>
<p><strong>注意</strong> 在能够正确编译代码之前, 你并不需要发布你的代码到远程的代码仓库。<br>但是如果有一天你发布代码的话, 组织好你的代码是个好习惯。<br>实际上, 你可以使用任意的路径名称, 只要它在 go 标准库和庞大的 go 生态系统中是唯一的。<br>我们使用 &quot;github.com/user&quot; 作为基本路径, 然后在工作区中创建文件夹来保存代码:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p <span class="variable">$GOPATH</span>/src/github.com/user</div></pre></td></tr></table></figure>

<h3 id="第一个_Go_程序">第一个 Go 程序</h3>
<p>为了编译和运行一个简单的 GO 程序, 首先要确定 package 路径(这里使用 <em>github.com/user/hello</em>),<br>并且在工作区中创建对应 package 文件夹.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir <span class="variable">$GOPATH</span>/src/github.com/user/hello</div></pre></td></tr></table></figure>

<p>下一步, 在上面文件夹中创建 hello.go 文件, 文件内容如下:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	fmt.Printf(<span class="string">"Hello, world.\n"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>然后, 可以通过 go tool 来编译和安装上面的 hello 程序。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go install github.com/user/hello</div></pre></td></tr></table></figure>

<p><strong>注意</strong> 你可以在任何路径下运行上述命令, go tool 会根据 GOPATH 环境变量来从工作区中查找 github.com/user/hello。<br>如果在 package 所在文件夹中运行 go install, 也可以省略 package 路径。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/user/hello</div><div class="line">$ go install</div></pre></td></tr></table></figure>

<p>上面的命令编译了 hello 命令, 并产生此命令的二进制可执行文件。<br>然后将二进制文件 hello 安装到了 工作区 的 bin 文件夹下(Windows 下是 hello.exe)<br>在我们的例子中, 就是 $GOPATH/bin/hello, 即 $HOME/work/bin/hello。</p>
<p>go tool 只有在出错时才会输出信息, 如果上面的 go 命令没有输出就说明执行成功了.<br>然后, 就可以在命令行中运行这个命令了.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="variable">$GOPATH</span>/bin/hello</div><div class="line">Hello, world.</div></pre></td></tr></table></figure>

<p>或者, 如果你将 $GOPATH/bin 加入到 PATH 中了的话, 也可以执行执行 hello 命令。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hello</div></pre></td></tr></table></figure>

<p>如果你使用了代码版本管理工具, 正好可以初始化你的仓库, 添加文件, 并 commit 你的第一个改变。<br>当然这个步骤是可选的, 写 go 代码并不强制要求使用代码版本管理工具。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/user/hello</div><div class="line">$ git init</div><div class="line">Initialized empty Git repository <span class="keyword">in</span> /home/user/work/src/github.com/user/hello/.git/</div><div class="line">$ git add hello.go</div><div class="line">$ git commit -m <span class="string">"initial commit"</span></div><div class="line">[master (root-commit) <span class="number">0</span>b4507d] initial commit</div><div class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</div><div class="line">  create mode <span class="number">100644</span> hello.go</div></pre></td></tr></table></figure>

<p>你可以把发布这个仓库作为练习题。</p>
<h3 id="第一个Go库">第一个Go库</h3>
<p>让我们来写一个库, 并将之用于上面的 hello 程序中.<br>同样, 首先确定 package 路径 (这里使用 github.com/user/stringutil), 并创建对应的文件夹。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir <span class="variable">$GOPATH</span>/src/github.com/user/stringutil</div></pre></td></tr></table></figure>

<p>接着, 创建文件 <em>reverse.go</em>, 内容如下:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Package stringutil contains utility functions for working with strings.</span></div><div class="line"><span class="keyword">package</span> stringutil</div><div class="line"></div><div class="line"><span class="comment">// Reverse returns its argument string reversed rune-wise left to right.</span></div><div class="line"><span class="keyword">func</span> Reverse(s <span class="typename">string</span>) <span class="typename">string</span> {</div><div class="line">	r := []<span class="typename">rune</span>(s)</div><div class="line">	<span class="keyword">for</span> i, j :=<span class="number"> 0</span>, <span class="built_in">len</span>(r<span class="number">)-1</span>; i &lt; <span class="built_in">len</span>(r)<span class="number">/2</span>; i, j = i<span class="number">+1</span>, j<span class="number">-1</span> {</div><div class="line">		r[i], r[j] = r[j], r[i]</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> <span class="typename">string</span>(r)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>用 go build 来编译此 package:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go build github.com/user/stringutil</div></pre></td></tr></table></figure>

<p>或者在 package 的目录下, 直接运行 go build</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go build</div></pre></td></tr></table></figure>

<p>上面的命令不会产生输出文件。 为了生成输出文件, 必须使用 <code>go install</code> 命令, 它会在 pkg 文件夹下生成 package 对象.<br>stringutil package 编译成功之后, 修改之前的 hello.go 文件:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/user/stringutil"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	fmt.Printf(stringutil.Reverse(<span class="string">"!oG ,olleH"</span>))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>无论用 go tool 安装 package 对象还是 二进制文件, 它都会安装所有的依赖.<br>所以当你安装 hello 程序时,</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go install github.com/user/hello</div></pre></td></tr></table></figure>

<p>stringutil package 也会被自动安装.</p>
<p>运行新的 hello 程序, 可以看到如下输出:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hello</div><div class="line">Hello, Go!</div></pre></td></tr></table></figure>

<p>经过上面的步骤, 你的 工作区应该像下面这样:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">bin/</div><div class="line">    hello                 # <span class="keyword">command</span> <span class="built_in">executable</span></div><div class="line">pkg/</div><div class="line">    linux_amd64/          # this will reflect your OS <span class="built_in">and</span> architecture</div><div class="line">        github.<span class="keyword">com</span>/user/</div><div class="line">            stringutil.<span class="keyword">a</span>  # package object</div><div class="line">src/</div><div class="line">    github.<span class="keyword">com</span>/user/</div><div class="line">        hello/</div><div class="line">            hello.<span class="keyword">go</span>      # <span class="keyword">command</span> <span class="keyword">source</span></div><div class="line">        stringutil/</div><div class="line">            <span class="built_in">reverse</span>.<span class="keyword">go</span>    # package <span class="keyword">source</span></div></pre></td></tr></table></figure>

<p><strong>注意</strong> go install 将 stringutil.a 放进了 pkg/linux_amd64 文件夹下与源码对应的目录中。<br>以后, go tool 就可以找到这个 package, 从而判断是否需要重新编译。<br>linux_amd64 是表示当前使用的系统, 它的目的是为了区分交叉编译出的其他平台的 package。</p>
<p>Go 编译出的二进制文件都是静态链接的, 所以上面的 bin/hello 在执行时并不需要 linux_amd64/go-files/stringutil.a 文件。</p>
<h3 id="Package_name">Package name</h3>
<p>go 代码文件的第一行必须是:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> name</div></pre></td></tr></table></figure>

<p>这里的 name 作为 package 的默认名称, 让其他 package import 的时候用.(同个 package 中的所有文件必须使用相同的 name)。<br>Go 约定 package name 是 import path 中最后一部分。<br>也就是说, 如果一个 package 被引用时写成 &quot;crypto/rot13&quot;, 那么这个 package 的 name 就是 rot13。</p>
<p>编译为可执行文件的代码的 package name 必须是 main。</p>
<p>连接进同一个二进制文件的package name 不一定要唯一, 只要 pakage 的 import path 是唯一的就行。<br>也就是上面的 crypto/rot13 必须唯一, 但是可以有 another-crypto/rot13。</p>
<p>Go 的命名规则可以参考: [Effective Go](<a href="http://golang.org/doc/effective_go.html#names）" target="_blank" rel="external">http://golang.org/doc/effective_go.html#names）</a></p>
<h2 id="测试">测试</h2>
<p>Go 中包含一个轻量级的测试框架, 由 <code>go test</code> 命令和 <code>testing package</code> 组成。</p>
<p>测试文件的名称以 <code>_test.go</code> 结尾, 其中包含格式如 <code>func TestXXXX(t *testing.T)</code>的函数。<br>测试框架会执行每个这样的函数, 如果函数中调用了 <code>t.Error</code> 或者 <code>t.Fail</code>, 就认为测试失败。</p>
<p>给上面的 package <em>stringutil</em> 增加测试文件, 路径: <em>$GOPATH/src/github.com/user/stringutil/reverse_test.go</em> , 内容如下:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> stringutil</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"testing"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> TestReverse(t *testing.T) {</div><div class="line">	cases := []<span class="keyword">struct</span> {</div><div class="line">		in, want <span class="typename">string</span></div><div class="line">	}{</div><div class="line">		{<span class="string">"Hello, world"</span>, <span class="string">"dlrow ,olleH"</span>},</div><div class="line">		{<span class="string">"Hello, 世界"</span>, <span class="string">"界世 ,olleH"</span>},</div><div class="line">		{<span class="string">""</span>, <span class="string">""</span>},</div><div class="line">	}</div><div class="line">	<span class="keyword">for</span> _, c := <span class="keyword">range</span> cases {</div><div class="line">		got := Reverse(c.in)</div><div class="line">		<span class="keyword">if</span> got != c.want {</div><div class="line">			t.Errorf(<span class="string">"Reverse(%q) == %q, want %q"</span>, c.in, got, c.want)</div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>运行测试的方法如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ go test github.com/user/stringutil</div><div class="line">ok  	github.com/user/stringutil <span class="number">0.165</span>s</div></pre></td></tr></table></figure>

<p>或者进入到 package stringutil 的目录中后, 直接运行:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ go test</div><div class="line">ok  	github.com/user/stringutil <span class="number">0.165</span>s</div></pre></td></tr></table></figure>

<p>通过 <a href="https://golang.org/cmd/go/#hdr-Test_packages" target="_blank" rel="external">go help test</a> 或者 <a href="http://golang.org/pkg/testing/" target="_blank" rel="external">http://golang.org/pkg/testing/</a> 来进一步 GO 的测试框架。</p>
<h2 id="远程_package">远程 package</h2>
<p>Go 的 <em>import path</em> 指示如何从版本管理系统(Git 或者 Mercurial) 中获取 package 的源码。go tool 可以利用这个特性来自动获取远程仓库的代码。<br>比如, 下面的例子中使用的代码同时也保存在 github 上(<a href="http://github.com/golang/example)。" target="_blank" rel="external">http://github.com/golang/example)。</a><br>如果你在代码中 import 了上面这个远程的 package, 那么 go get 命令会自动 获取, 编译, 安装这个 package。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ go get github.com/golang/example/hello</div><div class="line">$ <span class="variable">$GOPATH</span>/bin/hello</div><div class="line">Hello, Go examples!</div></pre></td></tr></table></figure>

<p>如果工作区中没有指定的 package,<code>go get</code> 命令会把这个 package 下载到 GOPATH 中定义的第一个工作区中。<br>(如果这个package已经存在，<code>go get</code>会跳过获取这一步，执行<code>go install</code>相同的行为)</p>
<p>上面的 go get 命令执行之后, 文件夹结构大致如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">bin/</div><div class="line">    hello                           # <span class="keyword">command</span> <span class="built_in">executable</span></div><div class="line">pkg/</div><div class="line">    linux_amd64/</div><div class="line">        github.<span class="keyword">com</span>/golang/example/</div><div class="line">            stringutil.<span class="keyword">a</span>            # package object</div><div class="line">        github.<span class="keyword">com</span>/user/</div><div class="line">            stringutil.<span class="keyword">a</span>            # package object</div><div class="line">src/</div><div class="line">    github.<span class="keyword">com</span>/golang/example/</div><div class="line">	.git/                       # Git repository metadata</div><div class="line">        hello/</div><div class="line">            hello.<span class="keyword">go</span>                # <span class="keyword">command</span> <span class="keyword">source</span></div><div class="line">        stringutil/</div><div class="line">            <span class="built_in">reverse</span>.<span class="keyword">go</span>              # package <span class="keyword">source</span></div><div class="line">            reverse_test.<span class="keyword">go</span>         # test <span class="keyword">source</span></div><div class="line">    github.<span class="keyword">com</span>/user/</div><div class="line">        hello/</div><div class="line">            hello.<span class="keyword">go</span>                # <span class="keyword">command</span> <span class="keyword">source</span></div><div class="line">        stringutil/</div><div class="line">            <span class="built_in">reverse</span>.<span class="keyword">go</span>              # package <span class="keyword">source</span></div><div class="line">            reverse_test.<span class="keyword">go</span>         # test <span class="keyword">source</span></div></pre></td></tr></table></figure>

<p>github.com 上的 hello 程序依赖同一个仓库中的 package stringutil,<br>即 github.com 上的 hello.go 中引用了 github.com 上的 package stringutil, 所以, go get 命令也下载, 编译, 安装了 stringutil 模块。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import <span class="string">"github.com/golang/example/stringutil"</span></div></pre></td></tr></table></figure>

<p>这个特性可以让你的 go package 很容易的被别人使用.<br><a href="https://golang.org/wiki/Projects" target="_blank" rel="external">Go Wiki</a> 和 <a href="https://godoc.org/" target="_blank" rel="external">godoc.org</a> 上列出了很多第三方 Go 工程。<br>关于使用 go tool 来使用远程仓库的更多信息, 请参考: <a href="https://golang.org/cmd/go/#hdr-Remote_import_paths" target="_blank" rel="external">go help importpath</a></p>
<h2 id="下一步">下一步</h2>
<ul>
<li>订阅 <a href="https://groups.google.com/group/golang-announce" target="_blank" rel="external">golang-announce</a> 邮件列表来了解最新的 Go release 信息</li>
<li>将 <a href="https://golang.org/doc/effective_go.html" target="_blank" rel="external">Effective Go</a> 作为参考资料来编写整洁, 地道的 Go 代码</li>
<li>通过 <a href="https://tour.golang.org/" target="_blank" rel="external">A Tour of Go </a> 来完成一次 go 的旅行</li>
<li>访问 <a href="https://golang.org/doc/#articles" target="_blank" rel="external">documentation page</a> 来了解一系列关于Go语言的有深度的文章, 以及 Go 库和工具.</li>
</ul>
<h2 id="寻求帮助">寻求帮助</h2>
<ul>
<li>寻求实时帮助, 可以使用 <a href="http://freenode.net/" target="_blank" rel="external">FreeNode</a> 的IRC server #go-nuts</li>
<li>Go 语言官方邮件列表 <a href="https://groups.google.com/forum/#!forum/golang-nuts" target="_blank" rel="external">Go Nuts</a></li>
<li>汇报 Go 语言的 bug 请使用 <a href="http://golang.org/issue" target="_blank" rel="external">Go issue tracker</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>官方原文: <a href="https://golang.org/doc/code.html" target="_blank" rel="external">How to Write Go Code</a>,<br>根据最新官方文档翻译。翻译参考<a href="http://www.cnblogs.com/wang_yb/" target="_blank" rel="external">wang_yb</a>的<a href="http://www.cnblogs.com/wang_yb/p/4333331.html" target="_blank" rel="external">如何写 go 代码 </a>。<br>因为官方文档有更新，我根据新版本的文档重新进行了翻译。</p>
<p>本文演示如何开发一个简单的 go package, 以及 <a href="https://golang.org/cmd/go/" target="_blank" rel="external">go tool</a> 的使用方法,<br>即获取(fetch), 编译(build), 安装(install) go package 的标准方法和命令.</p>
<p><em>go</em> tool 需要你按照一定的标准来组织代码. 请仔细阅读本文.<br>它介绍了用来构建和运行 Go 程序的最简单方法.</p>
<p>介绍本文的视频参照: <a href="https://www.youtube.com/watch?v=XCsL89YtqCs。" target="_blank" rel="external">https://www.youtube.com/watch?v=XCsL89YtqCs。</a><br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go的50度灰：Golang新开发者要注意的陷阱和常见错误]]></title>
    <link href="http://colobu.com/2015/09/07/gotchas-and-common-mistakes-in-go-golang/"/>
    <id>http://colobu.com/2015/09/07/gotchas-and-common-mistakes-in-go-golang/</id>
    <published>2015-09-07T03:28:54.000Z</published>
    <updated>2015-10-14T07:24:04.833Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/" target="_blank" rel="external">50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs</a><br>翻译: <a href="http://www.shwley.com/index.php/archives/80/" target="_blank" rel="external">Go的50度灰：新Golang开发者要注意的陷阱、技巧和常见错误</a>, 译者: <a href="http://www.shwley.com/index.php/author/1/" target="_blank" rel="external">影风LEY </a></p>
<p>Go是一门简单有趣的语言，但与其他语言类似，它会有一些技巧。。。这些技巧的绝大部分并不是Go的缺陷造成的。如果你以前使用的是其他语言，那么这其中的有些错误就是很自然的陷阱。其它的是由错误的假设和缺少细节造成的。</p>
<p>如果你花时间学习这门语言，阅读官方说明、wiki、邮件列表讨论、大量的优秀博文和Rob Pike的展示，以及源代码，这些技巧中的绝大多数都是显而易见的。尽管不是每个人都是以这种方式开始学习的，但也没关系。如果你是Go语言新人，那么这里的信息将会节约你大量的调试代码的时间。<br><a id="more"></a></p>
<h2 id="初级">初级</h2>
<h3 id="开大括号不能放在单独的一行">开大括号不能放在单独的一行</h3>
<p>在大多数其他使用大括号的语言中，你需要选择放置它们的位置。Go的方式不同。你可以为此感谢下自动分号的注入（没有预读）。是的，Go中也是有分号的：-）<br>失败的例子：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main()  </div><div class="line">{ <span class="comment">//error, can't have the opening brace on a separate line</span></div><div class="line">    fmt.Println(<span class="string">"hello there!"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>编译错误：</p>
<blockquote>
<p>/tmp/sandbox826898458/main.go:6: syntax error: unexpected semicolon or newline before {</p>
</blockquote>
<p>有效的例子：</p>
<figure class="highlight golang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    fmt.Println(<span class="string">"works!"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="未使用的变量">未使用的变量</h3>
<p>如果你有未使用的变量，代码将编译失败。当然也有例外。在函数内一定要使用声明的变量，但未使用的全局变量是没问题的。<br>如果你给未使用的变量分配了一个新的值，代码还是会编译失败。你需要在某个地方使用这个变量，才能让编译器愉快的编译。<br>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">var</span> gvar <span class="typename">int</span> <span class="comment">//not an error</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> one <span class="typename">int</span>   <span class="comment">//error, unused variable</span></div><div class="line">    two :=<span class="number"> 2</span>      <span class="comment">//error, unused variable</span></div><div class="line">    <span class="keyword">var</span> three <span class="typename">int</span> <span class="comment">//error, even though it's assigned 3 on the next line</span></div><div class="line">    three =<span class="number"> 3</span>     </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Errors:</p>
<blockquote>
<p>/tmp/sandbox473116179/main.go:6: one declared and not used<br>/tmp/sandbox473116179/main.go:7: two declared and not used<br>/tmp/sandbox473116179/main.go:8: three declared and not used</p>
</blockquote>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> one <span class="typename">int</span></div><div class="line">    _ = one</div><div class="line"></div><div class="line">    two :=<span class="number"> 2</span> </div><div class="line">    fmt.Println(two)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> three <span class="typename">int</span> </div><div class="line">    three =<span class="number"> 3</span></div><div class="line">    one = three</div><div class="line"></div><div class="line">    <span class="keyword">var</span> four <span class="typename">int</span></div><div class="line">    four = four</div><div class="line">}</div></pre></td></tr></table></figure>

<p>另一个选择是注释掉或者移除未使用的变量 ：-）</p>
<h3 id="未使用的Imports">未使用的Imports</h3>
<p>如果你引入一个包，而没有使用其中的任何函数、接口、结构体或者变量的话，代码将会编译失败。<br>你可以使用<a href="https://godoc.org/golang.org/x/tools/cmd/goimports" target="_blank" rel="external">goimports</a>来增加引入或者移除未使用的引用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> golang.org/<span class="keyword">x</span>/tools/cmd/goimports</div></pre></td></tr></table></figure>

<p>如果你真的需要引入的包，你可以添加一个下划线标记符，_，来作为这个包的名字，从而避免编译失败。下滑线标记符用于引入，但不使用。</p>
<p>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Errors:</p>
<blockquote>
<p>/tmp/sandbox627475386/main.go:4: imported and not used: &quot;fmt&quot;<br>/tmp/sandbox627475386/main.go:5: imported and not used: &quot;log&quot;<br>/tmp/sandbox627475386/main.go:6: imported and not used: &quot;time&quot;</p>
</blockquote>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    _ <span class="string">"fmt"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> _ = log.Println</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    _ = time.Now</div><div class="line">}</div></pre></td></tr></table></figure>

<p>另一个选择是移除或者注释掉未使用的imports ：-）</p>
<h3 id="简式的变量声明仅可以在函数内部使用">简式的变量声明仅可以在函数内部使用</h3>
<p>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line">myvar :=<span class="number"> 1</span> <span class="comment">//error</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Error:</p>
<blockquote>
<p>/tmp/sandbox265716165/main.go:3: non-declaration statement outside function body</p>
</blockquote>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">var</span> myvar =<span class="number"> 1</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="使用简式声明重复声明变量">使用简式声明重复声明变量</h3>
<p>你不能在一个单独的声明中重复声明一个变量，但在多变量声明中这是允许的，其中至少要有一个新的声明变量。<br>重复变量需要在相同的代码块内，否则你将得到一个隐藏变量。<br>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    one :=<span class="number"> 0</span></div><div class="line">    one :=<span class="number"> 1</span> <span class="comment">//error</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Error:</p>
<blockquote>
<p>/tmp/sandbox706333626/main.go:5: no new variables on left side of :=</p>
</blockquote>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    one :=<span class="number"> 0</span></div><div class="line">    one, two :=<span class="number"> 1</span><span class="number">,2</span></div><div class="line"></div><div class="line">    one,two = two,one</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="偶然的变量隐藏Accidental_Variable_Shadowing">偶然的变量隐藏Accidental Variable Shadowing</h3>
<p>短式变量声明的语法如此的方便（尤其对于那些使用过动态语言的开发者而言），很容易让人把它当成一个正常的分配操作。如果你在一个新的代码块中犯了这个错误，将不会出现编译错误，但你的应用将不会做你所期望的事情。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x :=<span class="number"> 1</span></div><div class="line">    fmt.Println(x)     <span class="comment">//prints 1</span></div><div class="line">    {</div><div class="line">        fmt.Println(x) <span class="comment">//prints 1</span></div><div class="line">        x :=<span class="number"> 2</span></div><div class="line">        fmt.Println(x) <span class="comment">//prints 2</span></div><div class="line">    }</div><div class="line">    fmt.Println(x)     <span class="comment">//prints 1 (bad if you need 2)</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>即使对于经验丰富的Go开发者而言，这也是一个非常常见的陷阱。这个坑很容易挖，但又很难发现。</p>
<p>你可以使用 <a href="http://godoc.org/golang.org/x/tools/cmd/vet" target="_blank" rel="external">vet</a>命令来发现一些这样的问题。 默认情况下， <code>vet</code>不会执行这样的检查，你需要设置<code>-shadow</code>参数：<br><code>go tool vet -shadow your_file.go</code>。</p>
<h3 id="不使用显式类型，无法使用“nil”来初始化变量">不使用显式类型，无法使用“nil”来初始化变量</h3>
<p><code>nil</code>标志符用于表示interface、函数、maps、slices和channels的“零值”。如果你不指定变量的类型，编译器将无法编译你的代码，因为它猜不出具体的类型。<br>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> x = <span class="constant">nil</span> <span class="comment">//error</span></div><div class="line"></div><div class="line">    _ = x</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Error:</p>
<blockquote>
<p>/tmp/sandbox188239583/main.go:4: use of untyped nil</p>
</blockquote>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> x <span class="keyword">interface</span>{} = <span class="constant">nil</span></div><div class="line"></div><div class="line">    _ = x</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="使用“nil”_Slices_and_Maps">使用“nil” Slices and Maps</h3>
<p>在一个<code>nil</code>的slice中添加元素是没问题的，但对一个map做同样的事将会生成一个运行时的panic。</p>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> s []<span class="typename">int</span></div><div class="line">    s = <span class="built_in">append</span>(s<span class="number">,1</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> m <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span></div><div class="line">    m[<span class="string">"one"</span>] =<span class="number"> 1</span> <span class="comment">//error</span></div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Map的容量">Map的容量</h3>
<p>你可以在map创建时指定它的容量，但你无法在map上使用cap()函数。</p>
<p>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span><span class="number">,99</span>)</div><div class="line">    <span class="built_in">cap</span>(m) <span class="comment">//error</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Error:</p>
<blockquote>
<p>/tmp/sandbox326543983/main.go:5: invalid argument m (type map[string]int) for cap</p>
</blockquote>
<h3 id="字符串不会为nil">字符串不会为<code>nil</code></h3>
<p>这对于经常使用<code>nil</code>分配字符串变量的开发者而言是个需要注意的地方。</p>
<p>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> x <span class="typename">string</span> = <span class="constant">nil</span> <span class="comment">//error</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> x == <span class="constant">nil</span> { <span class="comment">//error</span></div><div class="line">        x = <span class="string">"default"</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Errors:</p>
<blockquote>
<p>/tmp/sandbox630560459/main.go:4: cannot use nil as type string in assignment /tmp/sandbox630560459/main.go:6: invalid operation: x == nil (mismatched types string and nil)</p>
</blockquote>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> x <span class="typename">string</span> <span class="comment">//defaults to "" (zero value)</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> x == <span class="string">""</span> {</div><div class="line">        x = <span class="string">"default"</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Array函数的参数">Array函数的参数</h3>
<p>如果你是一个C或则C++开发者，那么数组对你而言就是指针。当你向函数中传递数组时，函数会参照相同的内存区域，这样它们就可以修改原始的数据。Go中的数组是数值，因此当你向函数中传递数组时，函数会得到原始数组数据的一份复制。如果你打算更新数组的数据，这将会是个问题。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x := <span class="number">[3</span>]<span class="typename">int</span><span class="number">{1</span><span class="number">,2</span><span class="number">,3</span>}</div><div class="line"></div><div class="line">    <span class="keyword">func</span>(arr <span class="number">[3</span>]<span class="typename">int</span>) {</div><div class="line">        arr<span class="number">[0</span>] =<span class="number"> 7</span></div><div class="line">        fmt.Println(arr) <span class="comment">//prints [7 2 3]</span></div><div class="line">    }(x)</div><div class="line"></div><div class="line">    fmt.Println(x) <span class="comment">//prints [1 2 3] (not ok if you need [7 2 3])</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果你需要更新原始数组的数据，你可以使用数组指针类型。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x := <span class="number">[3</span>]<span class="typename">int</span><span class="number">{1</span><span class="number">,2</span><span class="number">,3</span>}</div><div class="line"></div><div class="line">    <span class="keyword">func</span>(arr *<span class="number">[3</span>]<span class="typename">int</span>) {</div><div class="line">        (*arr)<span class="number">[0</span>] =<span class="number"> 7</span></div><div class="line">        fmt.Println(arr) <span class="comment">//prints &[7 2 3]</span></div><div class="line">    }(&x)</div><div class="line"></div><div class="line">    fmt.Println(x) <span class="comment">//prints [7 2 3]</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>另一个选择是使用slice。即使你的函数得到了slice变量的一份拷贝，它依旧会参照原始的数据。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x := []<span class="typename">int</span><span class="number">{1</span><span class="number">,2</span><span class="number">,3</span>}</div><div class="line"></div><div class="line">    <span class="keyword">func</span>(arr []<span class="typename">int</span>) {</div><div class="line">        arr<span class="number">[0</span>] =<span class="number"> 7</span></div><div class="line">        fmt.Println(arr) <span class="comment">//prints [7 2 3]</span></div><div class="line">    }(x)</div><div class="line"></div><div class="line">    fmt.Println(x) <span class="comment">//prints [7 2 3]</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="在Slice和Array使用“range”语句时的出现的不希望得到的值">在Slice和Array使用“range”语句时的出现的不希望得到的值</h3>
<p>如果你在其他的语言中使用“for-in”或者“foreach”语句时会发生这种情况。Go中的“range”语法不太一样。它会得到两个值：第一个值是元素的索引，而另一个值是元素的数据。<br>Bad:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x := []<span class="typename">string</span>{<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>}</div><div class="line"></div><div class="line">    <span class="keyword">for</span> v := <span class="keyword">range</span> x {</div><div class="line">        fmt.Println(v) <span class="comment">//prints 0, 1, 2</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Good:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x := []<span class="typename">string</span>{<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>}</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> x {</div><div class="line">        fmt.Println(v) <span class="comment">//prints a, b, c</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Slices和Arrays是一维的">Slices和Arrays是一维的</h3>
<p>看起来Go好像支持多维的Array和Slice，但不是这样的。尽管可以创建数组的数组或者切片的切片。对于依赖于动态多维数组的数值计算应用而言，Go在性能和复杂度上还相距甚远。</p>
<p>你可以使用纯一维数组、“独立”切片的切片，“共享数据”切片的切片来构建动态的多维数组。</p>
<p>如果你使用纯一维的数组，你需要处理索引、边界检查、当数组需要变大时的内存重新分配。</p>
<p>使用“独立”slice来创建一个动态的多维数组需要两步。首先，你需要创建一个外部的slice。然后，你需要分配每个内部的slice。内部的slice相互之间独立。你可以增加减少它们，而不会影响其他内部的slice。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x :=<span class="number"> 2</span></div><div class="line">    y :=<span class="number"> 4</span></div><div class="line"></div><div class="line">    table := <span class="built_in">make</span>([][]<span class="typename">int</span>,x)</div><div class="line">    <span class="keyword">for</span> i:= <span class="keyword">range</span> table {</div><div class="line">        table[i] = <span class="built_in">make</span>([]<span class="typename">int</span>,y)</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>使用“共享数据”slice的slice来创建一个动态的多维数组需要三步。首先，你需要创建一个用于存放原始数据的数据“容器”。然后，你再创建外部的slice。最后，通过重新切片原始数据slice来初始化各个内部的slice。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    h, w :=<span class="number"> 2</span>,<span class="number"> 4</span></div><div class="line"></div><div class="line">    raw := <span class="built_in">make</span>([]<span class="typename">int</span>,h*w)</div><div class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> raw {</div><div class="line">        raw[i] = i</div><div class="line">    }</div><div class="line">    fmt.Println(raw,&raw<span class="number">[4</span>])</div><div class="line">    <span class="comment">//prints: [0 1 2 3 4 5 6 7] &lt;ptr_addr_x&gt;</span></div><div class="line"></div><div class="line">    table := <span class="built_in">make</span>([][]<span class="typename">int</span>,h)</div><div class="line">    <span class="keyword">for</span> i:= <span class="keyword">range</span> table {</div><div class="line">        table[i] = raw[i*w:i*w + w]</div><div class="line">    }</div><div class="line"></div><div class="line">    fmt.Println(table,&table<span class="number">[1</span>]<span class="number">[0</span>])</div><div class="line">    <span class="comment">//prints: [[0 1 2 3] [4 5 6 7]] &lt;ptr_addr_x&gt;</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>关于多维array和slice已经有了专门申请，但现在看起来这是个低优先级的特性。</p>
<h3 id="访问不存在的Map_Keys">访问不存在的Map Keys</h3>
<p>这对于那些希望得到“nil”标示符的开发者而言是个技巧（和其他语言中做的一样）。如果对应的数据类型的“零值”是“nil”，那返回的值将会是“nil”，但对于其他的数据类型是不一样的。检测对应的“零值”可以用于确定map中的记录是否存在，但这并不总是可信（比如，如果在二值的map中“零值”是false，这时你要怎么做）。检测给定map中的记录是否存在的最可信的方法是，通过map的访问操作，检查第二个返回的值。</p>
<p>Bad:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">string</span>{<span class="string">"one"</span>:<span class="string">"a"</span>,<span class="string">"two"</span>:<span class="string">""</span>,<span class="string">"three"</span>:<span class="string">"c"</span>}</div><div class="line"></div><div class="line">    <span class="keyword">if</span> v := x[<span class="string">"two"</span>]; v == <span class="string">""</span> { <span class="comment">//incorrect</span></div><div class="line">        fmt.Println(<span class="string">"no entry"</span>)</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Good:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">string</span>{<span class="string">"one"</span>:<span class="string">"a"</span>,<span class="string">"two"</span>:<span class="string">""</span>,<span class="string">"three"</span>:<span class="string">"c"</span>}</div><div class="line"></div><div class="line">    <span class="keyword">if</span> _,ok := x[<span class="string">"two"</span>]; !ok {</div><div class="line">        fmt.Println(<span class="string">"no entry"</span>)</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Strings无法修改">Strings无法修改</h3>
<p>尝试使用索引操作来更新字符串变量中的单个字符将会失败。string是只读的byte slice（和一些额外的属性）。如果你确实需要更新一个字符串，那么使用byte slice，并在需要时把它转换为string类型。</p>
<p>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x := <span class="string">"text"</span></div><div class="line">    x<span class="number">[0</span>] = <span class="string">'T'</span></div><div class="line"></div><div class="line">    fmt.Println(x)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Error:</p>
<blockquote>
<p>/tmp/sandbox305565531/main.go:7: cannot assign to x[0]</p>
</blockquote>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x := <span class="string">"text"</span></div><div class="line">    xbytes := []<span class="typename">byte</span>(x)</div><div class="line">    xbytes<span class="number">[0</span>] = <span class="string">'T'</span></div><div class="line"></div><div class="line">    fmt.Println(<span class="typename">string</span>(xbytes)) <span class="comment">//prints Text</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>需要注意的是：这并不是在文字string中更新字符的正确方式，因为给定的字符可能会存储在多个byte中。如果你确实需要更新一个文字string，先把它转换为一个rune slice。即使使用rune slice，单个字符也可能会占据多个rune，比如当你的字符有特定的重音符号时就是这种情况。这种复杂又模糊的“字符”本质是Go字符串使用byte序列表示的原因。</p>
<h3 id="String和Byte_Slice之间的转换">String和Byte Slice之间的转换</h3>
<p>当你把一个字符串转换为一个<code>byte slice</code>（或者反之）时，你就得到了一个原始数据的完整拷贝。这和其他语言中cast操作不同，也和新的<code>slice</code>变量指向原始<code>byte</code> slice使用的相同数组时的重新slice操作不同。</p>
<p>Go在<code>[]byte</code>到<code>string</code>和<code>string</code>到<code>[]byte</code>的转换中确实使用了一些优化来避免额外的分配（在todo列表中有更多的优化）。</p>
<p>第一个优化避免了当<code>[]byte</code> keys用于在<code>map[string]</code>集合中查询时的额外分配:<code>m[string(key)]</code>。</p>
<p>第二个优化避免了字符串转换为<code>[]byte</code>后在<code>for range</code>语句中的额外分配：<code>for i,v := range []byte(str) {...}</code>。</p>
<h3 id="String和索引操作">String和索引操作</h3>
<p>字符串上的索引操作返回一个byte值，而不是一个字符（和其他语言中的做法一样）。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x := <span class="string">"text"</span></div><div class="line">    fmt.Println(x<span class="number">[0</span>]) <span class="comment">//print 116</span></div><div class="line">    fmt.Printf(<span class="string">"%T"</span>,x<span class="number">[0</span>]) <span class="comment">//prints uint8</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果你需要访问特定的字符串“字符”（unicode编码的points/runes），使用for range。官方的“unicode/utf8”包和实验中的utf8string包（golang.org/x/exp/utf8string）也可以用。utf8string包中包含了一个很方便的At()方法。把字符串转换为rune的切片也是一个选项。</p>
<h3 id="字符串不总是UTF8文本">字符串不总是UTF8文本</h3>
<p>字符串的值不需要是UTF8的文本。它们可以包含任意的字节。只有在string literal使用时，字符串才会是UTF8。即使之后它们可以使用转义序列来包含其他的数据。</p>
<p>为了知道字符串是否是UTF8，你可以使用“unicode/utf8”包中的ValidString()函数。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"unicode/utf8"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data1 := <span class="string">"ABC"</span></div><div class="line">    fmt.Println(utf8.ValidString(data1)) <span class="comment">//prints: true</span></div><div class="line"></div><div class="line">    data2 := <span class="string">"A\xfeC"</span></div><div class="line">    fmt.Println(utf8.ValidString(data2)) <span class="comment">//prints: false</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="字符串的长度">字符串的长度</h3>
<p>让我们假设你是Python开发者，你有下面这段代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data = <span class="string">u'♥'</span>  </div><div class="line">print(len(data)) <span class="comment">#prints: 1</span></div></pre></td></tr></table></figure>

<p>当把它转换为Go代码时，你可能会大吃一惊。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := <span class="string">"♥"</span></div><div class="line">    fmt.Println(<span class="built_in">len</span>(data)) <span class="comment">//prints: 3</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>内建的<code>len()</code>函数返回byte的数量，而不是像Python中计算好的unicode字符串中字符的数量。</p>
<p>要在Go中得到相同的结果，可以使用“unicode/utf8”包中的<code>RuneCountInString()</code>函数。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"unicode/utf8"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := <span class="string">"♥"</span></div><div class="line">    fmt.Println(utf8.RuneCountInString(data)) <span class="comment">//prints: 1</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>理论上说<code>RuneCountInString()</code>函数并不返回字符的数量，因为单个字符可能占用多个rune。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"unicode/utf8"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := <span class="string">"é"</span></div><div class="line">    fmt.Println(<span class="built_in">len</span>(data))                    <span class="comment">//prints: 3</span></div><div class="line">    fmt.Println(utf8.RuneCountInString(data)) <span class="comment">//prints: 2</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="在多行的Slice、Array和Map语句中遗漏逗号">在多行的Slice、Array和Map语句中遗漏逗号</h3>
<p>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x := []<span class="typename">int</span>{</div><div class="line">   <span class="number"> 1</span>,</div><div class="line">   <span class="number"> 2</span> <span class="comment">//error</span></div><div class="line">    }</div><div class="line">    _ = x</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Errors:</p>
<blockquote>
<p>/tmp/sandbox367520156/main.go:6: syntax error: need trailing comma before newline in composite literal /tmp/sandbox367520156/main.go:8: non-declaration statement outside function body /tmp/sandbox367520156/main.go:9: syntax error: unexpected }</p>
</blockquote>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    x := []<span class="typename">int</span>{</div><div class="line">   <span class="number"> 1</span>,</div><div class="line">   <span class="number"> 2</span>,</div><div class="line">    }</div><div class="line">    x = x</div><div class="line"></div><div class="line">    y := []<span class="typename">int</span><span class="number">{3</span><span class="number">,4</span>,} <span class="comment">//no error</span></div><div class="line">    y = y</div><div class="line">}</div></pre></td></tr></table></figure>

<p>当你把声明折叠到单行时，如果你没加末尾的逗号，你将不会得到编译错误。</p>
<h3 id="log-Fatal和log-Panic不仅仅是Log">log.Fatal和log.Panic不仅仅是Log</h3>
<p>Logging库一般提供不同的log等级。与这些logging库不同，Go中log包在你调用它的<code>Fatal*()</code>和<code>Panic*()</code>函数时，可以做的不仅仅是log。当你的应用调用这些函数时，Go也将会终止应用 :-)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"log"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    log.Fatalln(<span class="string">"Fatal Level: log entry"</span>) <span class="comment">//app exits here</span></div><div class="line">    log.Println(<span class="string">"Normal Level: log entry"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="内建的数据结构操作不是同步的">内建的数据结构操作不是同步的</h3>
<p>即使Go本身有很多特性来支持并发，并发安全的数据集合并不是其中之一 :-)确保数据集合以原子的方式更新是你的职责。Goroutines和channels是实现这些原子操作的推荐方式，但你也可以使用“sync”包，如果它对你的应用有意义的话。</p>
<h3 id="String在“range”语句中的迭代值">String在“range”语句中的迭代值</h3>
<p>索引值（“range”操作返回的第一个值）是返回的第二个值的当前“字符”（unicode编码的point/rune）的第一个byte的索引。它不是当前“字符”的索引，这与其他语言不同。注意真实的字符可能会由多个rune表示。如果你需要处理字符，确保你使用了“norm”包（golang.org/x/text/unicode/norm）。</p>
<p>string变量的<code>for range</code>语句将会尝试把数据翻译为UTF8文本。对于它无法理解的任何byte序列，它将返回0xfffd runes（即unicode替换字符），而不是真实的数据。如果你任意（非UTF8文本）的数据保存在string变量中，确保把它们转换为byte slice，以得到所有保存的数据。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := <span class="string">"A\xfe\x02\xff\x04"</span></div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data {</div><div class="line">        fmt.Printf(<span class="string">"%#x "</span>,v)</div><div class="line">    }</div><div class="line">    <span class="comment">//prints: 0x41 0xfffd 0x2 0xfffd 0x4 (not ok)</span></div><div class="line"></div><div class="line">    fmt.Println()</div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> []<span class="typename">byte</span>(data) {</div><div class="line">        fmt.Printf(<span class="string">"%#x "</span>,v)</div><div class="line">    }</div><div class="line">    <span class="comment">//prints: 0x41 0xfe 0x2 0xff 0x4 (good)</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="对Map使用“for_range”语句迭代">对Map使用“for range”语句迭代</h3>
<p>如果你希望以某个顺序（比如，按key值排序）的方式得到元素，就需要这个技巧。每次的map迭代将会生成不同的结果。Go的runtime有心尝试随机化迭代顺序，但并不总会成功，这样你可能得到一些相同的map迭代结果。所以如果连续看到5个相同的迭代结果，不要惊讶。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    m := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span>{<span class="string">"one"</span><span class="number">:1</span>,<span class="string">"two"</span><span class="number">:2</span>,<span class="string">"three"</span><span class="number">:3</span>,<span class="string">"four"</span><span class="number">:4</span>}</div><div class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> m {</div><div class="line">        fmt.Println(k,v)</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>而且如果你使用Go的游乐场（<a href="https://play.golang.org/)，你将总会得到同样的结果，因为除非你修改代码，否则它不会重新编译代码。" target="_blank" rel="external">https://play.golang.org/)，你将总会得到同样的结果，因为除非你修改代码，否则它不会重新编译代码。</a></p>
<h3 id="&quot;switch&quot;声明中的失效行为">&quot;switch&quot;声明中的失效行为</h3>
<p>在“switch”声明语句中的“case”语句块在默认情况下会break。这和其他语言中的进入下一个“next”代码块的默认行为不同。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    isSpace := <span class="keyword">func</span>(ch <span class="typename">byte</span>) <span class="typename">bool</span> {</div><div class="line">        <span class="keyword">switch</span>(ch) {</div><div class="line">        <span class="keyword">case</span> <span class="string">' '</span>: <span class="comment">//error</span></div><div class="line">        <span class="keyword">case</span> <span class="string">'\t'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="constant">true</span></div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="constant">false</span></div><div class="line">    }</div><div class="line"></div><div class="line">    fmt.Println(isSpace(<span class="string">'\t'</span>)) <span class="comment">//prints true (ok)</span></div><div class="line">    fmt.Println(isSpace(<span class="string">' '</span>))  <span class="comment">//prints false (not ok)</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>你可以通过在每个“case”块的结尾使用“fallthrough”，来强制“case”代码块进入。你也可以重写switch语句，来使用“case”块中的表达式列表。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    isSpace := <span class="keyword">func</span>(ch <span class="typename">byte</span>) <span class="typename">bool</span> {</div><div class="line">        <span class="keyword">switch</span>(ch) {</div><div class="line">        <span class="keyword">case</span> <span class="string">' '</span>, <span class="string">'\t'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="constant">true</span></div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="constant">false</span></div><div class="line">    }</div><div class="line"></div><div class="line">    fmt.Println(isSpace(<span class="string">'\t'</span>)) <span class="comment">//prints true (ok)</span></div><div class="line">    fmt.Println(isSpace(<span class="string">' '</span>))  <span class="comment">//prints true (ok)</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="自增和自减">自增和自减</h3>
<p>许多语言都有自增和自减操作。不像其他语言，Go不支持前置版本的操作。你也无法在表达式中使用这两个操作符。<br>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := []<span class="typename">int</span><span class="number">{1</span><span class="number">,2</span><span class="number">,3</span>}</div><div class="line">    i :=<span class="number"> 0</span></div><div class="line">    ++i <span class="comment">//error</span></div><div class="line">    fmt.Println(data[i++]) <span class="comment">//error</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Errors:</p>
<blockquote>
<p>/tmp/sandbox101231828/main.go:8: syntax error: unexpected ++ /tmp/sandbox101231828/main.go:9: syntax error: unexpected ++, expecting :</p>
</blockquote>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := []<span class="typename">int</span><span class="number">{1</span><span class="number">,2</span><span class="number">,3</span>}</div><div class="line">    i :=<span class="number"> 0</span></div><div class="line">    i++</div><div class="line">    fmt.Println(data[i])</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="按位NOT操作">按位NOT操作</h3>
<p>许多语言使用 <code>~</code>作为一元的NOT操作符（即按位补足），但Go为了这个重用了XOR操作符（^）。</p>
<p>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    fmt.Println(<span class="number">~2</span>) <span class="comment">//error</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Error:</p>
<blockquote>
<p>/tmp/sandbox965529189/main.go:6: the bitwise complement operator is ^</p>
</blockquote>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> d <span class="typename">uint8</span> =<span class="number"> 2</span></div><div class="line">    fmt.Printf(<span class="string">"%08b\n"</span>,^d)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Go依旧使用<code>^</code>作为XOR的操作符，这可能会让一些人迷惑。</p>
<p>如果你愿意，你可以使用一个二元的XOR操作（如， 0x02 XOR 0xff）来表示一个一元的NOT操作（如，NOT 0x02）。这可以解释为什么<code>^</code>被重用来表示一元的NOT操作。</p>
<p>Go也有特殊的‘AND NOT’按位操作（<code>&amp;^</code>），这也让NOT操作更加的让人迷惑。这看起来需要特殊的特性/hack来支持 <code>A AND (NOT B)</code>，而无需括号。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> a <span class="typename">uint8</span> =<span class="number"> 0</span>x82</div><div class="line">    <span class="keyword">var</span> b <span class="typename">uint8</span> =<span class="number"> 0</span>x02</div><div class="line">    fmt.Printf(<span class="string">"%08b [A]\n"</span>,a)</div><div class="line">    fmt.Printf(<span class="string">"%08b [B]\n"</span>,b)</div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"%08b (NOT B)\n"</span>,^b)</div><div class="line">    fmt.Printf(<span class="string">"%08b ^ %08b = %08b [B XOR 0xff]\n"</span>,b<span class="number">,0</span>xff,b ^<span class="number"> 0</span>xff)</div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"%08b ^ %08b = %08b [A XOR B]\n"</span>,a,b,a ^ b)</div><div class="line">    fmt.Printf(<span class="string">"%08b & %08b = %08b [A AND B]\n"</span>,a,b,a & b)</div><div class="line">    fmt.Printf(<span class="string">"%08b &^%08b = %08b [A 'AND NOT' B]\n"</span>,a,b,a &^ b)</div><div class="line">    fmt.Printf(<span class="string">"%08b&(^%08b)= %08b [A AND (NOT B)]\n"</span>,a,b,a & (^b))</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="操作优先级的差异">操作优先级的差异</h3>
<p>除了”bit clear“操作（<code>&amp;^</code>），Go也一个与许多其他语言共享的标准操作符的集合。尽管操作优先级并不总是一样。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    fmt.Printf(<span class="string">"0x2 & 0x2 + 0x4 -&gt; %#x\n"</span><span class="number">,0</span>x2 &<span class="number"> 0</span>x2 +<span class="number"> 0</span>x4)</div><div class="line">    <span class="comment">//prints: 0x2 & 0x2 + 0x4 -&gt; 0x6</span></div><div class="line">    <span class="comment">//Go:    (0x2 & 0x2) + 0x4</span></div><div class="line">    <span class="comment">//C++:    0x2 & (0x2 + 0x4) -&gt; 0x2</span></div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"0x2 + 0x2 &lt;&lt; 0x1 -&gt; %#x\n"</span><span class="number">,0</span>x2 +<span class="number"> 0</span>x2 &lt;&lt;<span class="number"> 0</span>x1)</div><div class="line">    <span class="comment">//prints: 0x2 + 0x2 &lt;&lt; 0x1 -&gt; 0x6</span></div><div class="line">    <span class="comment">//Go:     0x2 + (0x2 &lt;&lt; 0x1)</span></div><div class="line">    <span class="comment">//C++:   (0x2 + 0x2) &lt;&lt; 0x1 -&gt; 0x8</span></div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"0xf | 0x2 ^ 0x2 -&gt; %#x\n"</span><span class="number">,0</span>xf |<span class="number"> 0</span>x2 ^<span class="number"> 0</span>x2)</div><div class="line">    <span class="comment">//prints: 0xf | 0x2 ^ 0x2 -&gt; 0xd</span></div><div class="line">    <span class="comment">//Go:    (0xf | 0x2) ^ 0x2</span></div><div class="line">    <span class="comment">//C++:    0xf | (0x2 ^ 0x2) -&gt; 0xf</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="未导出的结构体不会被编码">未导出的结构体不会被编码</h3>
<p>以小写字母开头的结构体将不会被（json、xml、gob等）编码，因此当你编码这些未导出的结构体时，你将会得到零值。</p>
<p>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"encoding/json"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> MyData <span class="keyword">struct</span> {  </div><div class="line">    One <span class="typename">int</span></div><div class="line">    two <span class="typename">string</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    in := MyData<span class="number">{1</span>,<span class="string">"two"</span>}</div><div class="line">    fmt.Printf(<span class="string">"%#v\n"</span>,in) <span class="comment">//prints main.MyData{One:1, two:"two"}</span></div><div class="line"></div><div class="line">    encoded,_ := json.Marshal(in)</div><div class="line">    fmt.Println(<span class="typename">string</span>(encoded)) <span class="comment">//prints {"One":1}</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">var</span> out MyData</div><div class="line">    json.Unmarshal(encoded,&out)</div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"%#v\n"</span>,out) <span class="comment">//prints main.MyData{One:1, two:""}</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="有活动的Goroutines下的应用退出">有活动的Goroutines下的应用退出</h3>
<p>应用将不会等待所有的goroutines完成。这对于初学者而言是个很常见的错误。每个人都是以某个程度开始，因此如果犯了初学者的错误也没神马好丢脸的 :-)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    workerCount :=<span class="number"> 2</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt; workerCount; i++ {</div><div class="line">        <span class="keyword">go</span> doit(i)</div><div class="line">    }</div><div class="line">    time.Sleep<span class="number">(1</span> * time.Second)</div><div class="line">    fmt.Println(<span class="string">"all done!"</span>)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> doit(workerId <span class="typename">int</span>) {  </div><div class="line">    fmt.Printf(<span class="string">"[%v] is running\n"</span>,workerId)</div><div class="line">    time.Sleep<span class="number">(3</span> * time.Second)</div><div class="line">    fmt.Printf(<span class="string">"[%v] is done\n"</span>,workerId)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>你将会看到：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="number">0</span>] <span class="keyword">is</span> <span class="property">running</span> </div><div class="line">[<span class="number">1</span>] <span class="keyword">is</span> <span class="property">running</span> </div><div class="line">all done!</div></pre></td></tr></table></figure>

<p>一个最常见的解决方法是使用“WaitGroup”变量。它将会让主goroutine等待所有的worker goroutine完成。如果你的应用有长时运行的消息处理循环的worker，你也将需要一个方法向这些goroutine发送信号，让它们退出。你可以给各个worker发送一个“kill”消息。另一个选项是关闭一个所有worker都接收的channel。这是一次向所有goroutine发送信号的简单方式。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"sync"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> wg sync.WaitGroup</div><div class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>{})</div><div class="line">    workerCount :=<span class="number"> 2</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt; workerCount; i++ {</div><div class="line">        wg.Add<span class="number">(1</span>)</div><div class="line">        <span class="keyword">go</span> doit(i,done,wg)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="built_in">close</span>(done)</div><div class="line">    wg.Wait()</div><div class="line">    fmt.Println(<span class="string">"all done!"</span>)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> doit(workerId <span class="typename">int</span>,done &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>{},wg sync.WaitGroup) {  </div><div class="line">    fmt.Printf(<span class="string">"[%v] is running\n"</span>,workerId)</div><div class="line">    <span class="keyword">defer</span> wg.Done()</div><div class="line">    &lt;- done</div><div class="line">    fmt.Printf(<span class="string">"[%v] is done\n"</span>,workerId)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果你运行这个应用，你将会看到：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">0</span>] <span class="keyword">is</span> <span class="property">running</span> </div><div class="line">[<span class="number">0</span>] <span class="keyword">is</span> done </div><div class="line">[<span class="number">1</span>] <span class="keyword">is</span> <span class="property">running</span> </div><div class="line">[<span class="number">1</span>] <span class="keyword">is</span> done</div></pre></td></tr></table></figure>

<p>看起来所有的worker在主goroutine退出前都完成了。棒！然而，你也将会看到这个：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">fatal</span> <span class="built_in">error</span>: all goroutines are asleep - deadlock!</div></pre></td></tr></table></figure>

<p>这可不太好 :-) 发送了神马？为什么会出现死锁？worker退出了，它们也执行了<code>wg.Done()</code>。应用应该没问题啊。</p>
<p>死锁发生是因为各个worker都得到了原始的“WaitGroup”变量的一个拷贝。当worker执行<code>wg.Done()</code>时，并没有在主goroutine上的“WaitGroup”变量上生效。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"sync"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> wg sync.WaitGroup</div><div class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>{})</div><div class="line">    wq := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>{})</div><div class="line">    workerCount :=<span class="number"> 2</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt; workerCount; i++ {</div><div class="line">        wg.Add<span class="number">(1</span>)</div><div class="line">        <span class="keyword">go</span> doit(i,wq,done,&wg)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt; workerCount; i++ {</div><div class="line">        wq &lt;- i</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="built_in">close</span>(done)</div><div class="line">    wg.Wait()</div><div class="line">    fmt.Println(<span class="string">"all done!"</span>)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> doit(workerId <span class="typename">int</span>, wq &lt;-<span class="keyword">chan</span> <span class="keyword">interface</span>{},done &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>{},wg *sync.WaitGroup) {  </div><div class="line">    fmt.Printf(<span class="string">"[%v] is running\n"</span>,workerId)</div><div class="line">    <span class="keyword">defer</span> wg.Done()</div><div class="line">    <span class="keyword">for</span> {</div><div class="line">        <span class="keyword">select</span> {</div><div class="line">        <span class="keyword">case</span> m := &lt;- wq:</div><div class="line">            fmt.Printf(<span class="string">"[%v] m =&gt; %v\n"</span>,workerId,m)</div><div class="line">        <span class="keyword">case</span> &lt;- done:</div><div class="line">            fmt.Printf(<span class="string">"[%v] is done\n"</span>,workerId)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在它会如预期般工作 :-)</p>
<h3 id="向无缓存的Channel发送消息，只要目标接收者准备好就会立即返回">向无缓存的Channel发送消息，只要目标接收者准备好就会立即返回</h3>
<p>发送者将不会被阻塞，除非消息正在被接收者处理。根据你运行代码的机器的不同，接收者的goroutine可能会或者不会有足够的时间，在发送者继续执行前处理消息。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">string</span>)</div><div class="line"></div><div class="line">    <span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">        <span class="keyword">for</span> m := <span class="keyword">range</span> ch {</div><div class="line">            fmt.Println(<span class="string">"processed:"</span>,m)</div><div class="line">        }</div><div class="line">    }()</div><div class="line"></div><div class="line">    ch &lt;- <span class="string">"cmd.1"</span></div><div class="line">    ch &lt;- <span class="string">"cmd.2"</span> <span class="comment">//won't be processed</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="向已关闭的Channel发送会引起Panic">向已关闭的Channel发送会引起Panic</h3>
<p>从一个关闭的channel接收是安全的。在接收状态下的<code>ok</code>的返回值将被设置为<code>false</code>，这意味着没有数据被接收。如果你从一个有缓存的channel接收，你将会首先得到缓存的数据，一旦它为空，返回的<code>ok</code>值将变为<code>false</code>。</p>
<p>向关闭的channel中发送数据会引起panic。这个行为有文档说明，但对于新的Go开发者的直觉不同，他们可能希望发送行为与接收行为很像。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)</div><div class="line">    <span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt;<span class="number"> 3</span>; i++ {</div><div class="line">        <span class="keyword">go</span> <span class="keyword">func</span>(idx <span class="typename">int</span>) {</div><div class="line">            ch &lt;- (idx +<span class="number"> 1</span>) *<span class="number"> 2</span></div><div class="line">        }(i)</div><div class="line">    }</div><div class="line">    </div><div class="line">    <span class="comment">//get the first result</span></div><div class="line">    fmt.Println(&lt;-ch)</div><div class="line">    <span class="built_in">close</span>(ch) <span class="comment">//not ok (you still have other senders)</span></div><div class="line">    <span class="comment">//do other work</span></div><div class="line">    time.Sleep<span class="number">(2</span> * time.Second)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>根据不同的应用，修复方法也将不同。可能是很小的代码修改，也可能需要修改应用的设计。无论是哪种方法，你都需要确保你的应用不会向关闭的channel中发送数据。</p>
<p>上面那个有bug的例子可以通过使用一个特殊的废弃的channel来向剩余的worker发送不再需要它们的结果的信号来修复。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)</div><div class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>{})</div><div class="line">    <span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt;<span class="number"> 3</span>; i++ {</div><div class="line">        <span class="keyword">go</span> <span class="keyword">func</span>(idx <span class="typename">int</span>) {</div><div class="line">            <span class="keyword">select</span> {</div><div class="line">            <span class="keyword">case</span> ch &lt;- (idx +<span class="number"> 1</span>) *<span class="number"> 2</span>: fmt.Println(idx,<span class="string">"sent result"</span>)</div><div class="line">            <span class="keyword">case</span> &lt;- done: fmt.Println(idx,<span class="string">"exiting"</span>)</div><div class="line">            }</div><div class="line">        }(i)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">//get first result</span></div><div class="line">    fmt.Println(<span class="string">"result:"</span>,&lt;-ch)</div><div class="line">    <span class="built_in">close</span>(done)</div><div class="line">    <span class="comment">//do other work</span></div><div class="line">    time.Sleep<span class="number">(3</span> * time.Second)</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="使用&quot;nil&quot;_Channels">使用&quot;nil&quot; Channels</h3>
<p>在一个<code>nil</code>的channel上发送和接收操作会被永久阻塞。这个行为有详细的文档解释，但它对于新的Go开发者而言是个惊喜。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="typename">int</span></div><div class="line">    <span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt;<span class="number"> 3</span>; i++ {</div><div class="line">        <span class="keyword">go</span> <span class="keyword">func</span>(idx <span class="typename">int</span>) {</div><div class="line">            ch &lt;- (idx +<span class="number"> 1</span>) *<span class="number"> 2</span></div><div class="line">        }(i)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">//get first result</span></div><div class="line">    fmt.Println(<span class="string">"result:"</span>,&lt;-ch)</div><div class="line">    <span class="comment">//do other work</span></div><div class="line">    time.Sleep<span class="number">(2</span> * time.Second)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果运行代码你将会看到一个runtime错误：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">fatal</span> <span class="built_in">error</span>: all goroutines are asleep - deadlock!</div></pre></td></tr></table></figure>

<p>这个行为可以在<code>select</code>声明中用于动态开启和关闭<code>case</code>代码块的方法。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span>  </div><div class="line"><span class="keyword">import</span> <span class="string">"time"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    inch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)</div><div class="line">    outch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">int</span>)</div><div class="line"></div><div class="line">    <span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">        <span class="keyword">var</span> in &lt;- <span class="keyword">chan</span> <span class="typename">int</span> = inch</div><div class="line">        <span class="keyword">var</span> out <span class="keyword">chan</span> &lt;- <span class="typename">int</span></div><div class="line">        <span class="keyword">var</span> val <span class="typename">int</span></div><div class="line">        <span class="keyword">for</span> {</div><div class="line">           <span class="keyword">select</span> {</div><div class="line">            <span class="keyword">case</span> out &lt;- val:</div><div class="line">                out = <span class="constant">nil</span></div><div class="line">                in = inch</div><div class="line">            <span class="keyword">case</span> val = &lt;- in:</div><div class="line">                out = outch</div><div class="line">                in = <span class="constant">nil</span></div><div class="line">            }</div><div class="line">        }</div><div class="line">    }()</div><div class="line"></div><div class="line">    <span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">        <span class="keyword">for</span> r := <span class="keyword">range</span> outch {</div><div class="line">            fmt.Println(<span class="string">"result:"</span>,r)</div><div class="line">        }</div><div class="line">    }()</div><div class="line"></div><div class="line">    time.Sleep<span class="number">(0</span>)</div><div class="line">    inch &lt;-<span class="number"> 1</span></div><div class="line">    inch &lt;-<span class="number"> 2</span></div><div class="line">    time.Sleep<span class="number">(3</span> * time.Second)</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="传值方法的接收者无法修改原有的值">传值方法的接收者无法修改原有的值</h3>
<p>方法的接收者就像常规的函数参数。如果声明为值，那么你的函数/方法得到的是接收者参数的拷贝。这意味着对接收者所做的修改将不会影响原有的值，除非接收者是一个map或者slice变量，而你更新了集合中的元素，或者你更新的域的接收者是指针。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> {  </div><div class="line">    num <span class="typename">int</span></div><div class="line">    key *<span class="typename">string</span></div><div class="line">    items <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">bool</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (this *data) pmethod() {  </div><div class="line">    this.num =<span class="number"> 7</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (this data) vmethod() {  </div><div class="line">    this.num =<span class="number"> 8</span></div><div class="line">    *this.key = <span class="string">"v.key"</span></div><div class="line">    this.items[<span class="string">"vmethod"</span>] = <span class="constant">true</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    key := <span class="string">"key.1"</span></div><div class="line">    d := data<span class="number">{1</span>,&key,<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">bool</span>)}</div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"num=%v key=%v items=%v\n"</span>,d.num,*d.key,d.items)</div><div class="line">    <span class="comment">//prints num=1 key=key.1 items=map[]</span></div><div class="line"></div><div class="line">    d.pmethod()</div><div class="line">    fmt.Printf(<span class="string">"num=%v key=%v items=%v\n"</span>,d.num,*d.key,d.items) </div><div class="line">    <span class="comment">//prints num=7 key=key.1 items=map[]</span></div><div class="line"></div><div class="line">    d.vmethod()</div><div class="line">    fmt.Printf(<span class="string">"num=%v key=%v items=%v\n"</span>,d.num,*d.key,d.items)</div><div class="line">    <span class="comment">//prints num=7 key=v.key items=map[vmethod:true]</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="中级">中级</h2>
<h3 id="关闭HTTP的响应">关闭HTTP的响应</h3>
<p>当你使用标准http库发起请求时，你得到一个http的响应变量。如果你不读取响应主体，你依旧需要关闭它。注意对于空的响应你也一定要这么做。对于新的Go开发者而言，这个很容易就会忘掉。</p>
<p>一些新的Go开发者确实尝试关闭响应主体，但他们在错误的地方做。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"io/ioutil"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    resp, err := http.Get(<span class="string">"https://api.ipify.org?format=json"</span>)</div><div class="line">    <span class="keyword">defer</span> resp.Body.Close()<span class="comment">//not ok</span></div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    }</div><div class="line"></div><div class="line">    body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    }</div><div class="line"></div><div class="line">    fmt.Println(<span class="typename">string</span>(body))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这段代码对于成功的请求没问题，但如果http的请求失败，<code>resp</code>变量可能会是<code>nil</code>，这将导致一个<code>runtime panic</code>。</p>
<p>最常见的关闭响应主体的方法是在http响应的错误检查后调用<code>defer</code>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"io/ioutil"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    resp, err := http.Get(<span class="string">"https://api.ipify.org?format=json"</span>)</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">defer</span> resp.Body.Close()<span class="comment">//ok, most of the time :-)</span></div><div class="line">    body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    }</div><div class="line"></div><div class="line">    fmt.Println(<span class="typename">string</span>(body))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>大多数情况下，当你的http响应失败时，<code>resp</code>变量将为<code>nil</code>，而<code>err</code>变量将是<code>non-nil</code>。然而，当你得到一个重定向的错误时，两个变量都将是<code>non-nil</code>。这意味着你最后依然会内存泄露。</p>
<p>通过在http响应错误处理中添加一个关闭<code>non-nil</code>响应主体的的调用来修复这个问题。另一个方法是使用一个<code>defer</code>调用来关闭所有失败和成功的请求的响应主体。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"io/ioutil"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    resp, err := http.Get(<span class="string">"https://api.ipify.org?format=json"</span>)</div><div class="line">    <span class="keyword">if</span> resp != <span class="constant">nil</span> {</div><div class="line">        <span class="keyword">defer</span> resp.Body.Close()</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    }</div><div class="line"></div><div class="line">    body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    }</div><div class="line"></div><div class="line">    fmt.Println(<span class="typename">string</span>(body))</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>resp.Body.Close()</code>的原始实现也会读取并丢弃剩余的响应主体数据。这确保了http的链接在keepalive http连接行为开启的情况下，可以被另一个请求复用。最新的http客户端的行为是不同的。现在读取并丢弃剩余的响应数据是你的职责。如果你不这么做，http的连接可能会关闭，而无法被重用。这个小技巧应该会写在Go 1.5的文档中。</p>
<p>如果http连接的重用对你的应用很重要，你可能需要在响应处理逻辑的后面添加像下面的代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">_, err </span>=<span class="string"> io.Copy(ioutil.Discard, resp.Body)</span></div></pre></td></tr></table></figure>

<p>如果你不立即读取整个响应将是必要的，这可能在你处理json API响应时会发生：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">json</span>.<span class="type">NewDecoder</span>(resp.<span class="type">Body</span>).<span class="type">Decode</span>(&<span class="typedef"><span class="keyword">data</span>)</span></div></pre></td></tr></table></figure>

<h3 id="关闭HTTP的连接">关闭HTTP的连接</h3>
<p>一些HTTP服务器保持会保持一段时间的网络连接（根据HTTP 1.1的说明和服务器端的“keep-alive”配置）。默认情况下，标准http库只在目标HTTP服务器要求关闭时才会关闭网络连接。这意味着你的应用在某些条件下消耗完sockets/file的描述符。</p>
<p>你可以通过设置请求变量中的<code>Close</code>域的值为<code>true</code>，来让http库在请求完成时关闭连接。</p>
<p>另一个选项是添加一个<code>Connection</code>的请求头，并设置为<code>close</code>。目标HTTP服务器应该也会响应一个<code>Connection: close</code>的头。当http库看到这个响应头时，它也将会关闭连接。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"io/ioutil"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    req, err := http.NewRequest(<span class="string">"GET"</span>,<span class="string">"http://golang.org"</span>,<span class="constant">nil</span>)</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    }</div><div class="line"></div><div class="line">    req.Close = <span class="constant">true</span></div><div class="line">    <span class="comment">//or do this:</span></div><div class="line">    <span class="comment">//req.Header.Add("Connection", "close")</span></div><div class="line"></div><div class="line">    resp, err := http.DefaultClient.Do(req)</div><div class="line">    <span class="keyword">if</span> resp != <span class="constant">nil</span> {</div><div class="line">        <span class="keyword">defer</span> resp.Body.Close()</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    }</div><div class="line"></div><div class="line">    body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    }</div><div class="line"></div><div class="line">    fmt.Println(<span class="built_in">len</span>(<span class="typename">string</span>(body)))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>你也可以取消http的全局连接复用。你将需要为此创建一个自定义的http传输配置。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"io/ioutil"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    tr := &http.Transport{DisableKeepAlives: <span class="constant">true</span>}</div><div class="line">    client := &http.Client{Transport: tr}</div><div class="line"></div><div class="line">    resp, err := client.Get(<span class="string">"http://golang.org"</span>)</div><div class="line">    <span class="keyword">if</span> resp != <span class="constant">nil</span> {</div><div class="line">        <span class="keyword">defer</span> resp.Body.Close()</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    }</div><div class="line"></div><div class="line">    fmt.Println(resp.StatusCode)</div><div class="line"></div><div class="line">    body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    }</div><div class="line"></div><div class="line">    fmt.Println(<span class="built_in">len</span>(<span class="typename">string</span>(body)))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果你向同一个HTTP服务器发送大量的请求，那么把保持网络连接的打开是没问题的。然而，如果你的应用在短时间内向大量不同的HTTP服务器发送一两个请求，那么在引用收到响应后立刻关闭网络连接是一个好主意。增加打开文件的限制数可能也是个好主意。当然，正确的选择源自于应用。</p>
<h3 id="比较Structs,_Arrays,_Slices,_and_Maps">比较Structs, Arrays, Slices, and Maps</h3>
<p>如果结构体中的各个元素都可以用你可以使用等号来比较的话，那就可以使用相号, ==，来比较结构体变量。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> {  </div><div class="line">    num <span class="typename">int</span></div><div class="line">    fp <span class="typename">float32</span></div><div class="line">    <span class="built_in">complex</span> <span class="typename">complex64</span></div><div class="line">    str <span class="typename">string</span></div><div class="line">    char <span class="typename">rune</span></div><div class="line">    yes <span class="typename">bool</span></div><div class="line">    events &lt;-<span class="keyword">chan</span> <span class="typename">string</span></div><div class="line">    handler <span class="keyword">interface</span>{}</div><div class="line">    ref *<span class="typename">byte</span></div><div class="line">    raw <span class="number">[10</span>]<span class="typename">byte</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    v1 := data{}</div><div class="line">    v2 := data{}</div><div class="line">    fmt.Println(<span class="string">"v1 == v2:"</span>,v1 == v2) <span class="comment">//prints: v1 == v2: true</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果结构体中的元素无法比较，那使用等号将导致编译错误。注意数组仅在它们的数据元素可比较的情况下才可以比较。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> {  </div><div class="line">    num <span class="typename">int</span>                <span class="comment">//ok</span></div><div class="line">    checks <span class="number">[10</span>]<span class="keyword">func</span>() <span class="typename">bool</span> <span class="comment">//not comparable</span></div><div class="line">    doit <span class="keyword">func</span>() <span class="typename">bool</span>       <span class="comment">//not comparable</span></div><div class="line">    m <span class="keyword">map</span>[<span class="typename">string</span>] <span class="typename">string</span>   <span class="comment">//not comparable</span></div><div class="line">    bytes []<span class="typename">byte</span>           <span class="comment">//not comparable</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    v1 := data{}</div><div class="line">    v2 := data{}</div><div class="line">    fmt.Println(<span class="string">"v1 == v2:"</span>,v1 == v2)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Go确实提供了一些助手函数，用于比较那些无法使用等号比较的变量。</p>
<p>最常用的方法是使用reflect包中的<code>DeepEqual()</code>函数。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"reflect"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> {  </div><div class="line">    num <span class="typename">int</span>                <span class="comment">//ok</span></div><div class="line">    checks <span class="number">[10</span>]<span class="keyword">func</span>() <span class="typename">bool</span> <span class="comment">//not comparable</span></div><div class="line">    doit <span class="keyword">func</span>() <span class="typename">bool</span>       <span class="comment">//not comparable</span></div><div class="line">    m <span class="keyword">map</span>[<span class="typename">string</span>] <span class="typename">string</span>   <span class="comment">//not comparable</span></div><div class="line">    bytes []<span class="typename">byte</span>           <span class="comment">//not comparable</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    v1 := data{}</div><div class="line">    v2 := data{}</div><div class="line">    fmt.Println(<span class="string">"v1 == v2:"</span>,reflect.DeepEqual(v1,v2)) <span class="comment">//prints: v1 == v2: true</span></div><div class="line"></div><div class="line">    m1 := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">string</span>{<span class="string">"one"</span>: <span class="string">"a"</span>,<span class="string">"two"</span>: <span class="string">"b"</span>}</div><div class="line">    m2 := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">string</span>{<span class="string">"two"</span>: <span class="string">"b"</span>, <span class="string">"one"</span>: <span class="string">"a"</span>}</div><div class="line">    fmt.Println(<span class="string">"m1 == m2:"</span>,reflect.DeepEqual(m1, m2)) <span class="comment">//prints: m1 == m2: true</span></div><div class="line"></div><div class="line">    s1 := []<span class="typename">int</span><span class="number">{1</span>,<span class="number"> 2</span>,<span class="number"> 3</span>}</div><div class="line">    s2 := []<span class="typename">int</span><span class="number">{1</span>,<span class="number"> 2</span>,<span class="number"> 3</span>}</div><div class="line">    fmt.Println(<span class="string">"s1 == s2:"</span>,reflect.DeepEqual(s1, s2)) <span class="comment">//prints: s1 == s2: true</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>除了很慢（这个可能会也可能不会影响你的应用），<code>DeepEqual()</code>也有其他自身的技巧。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"reflect"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> b1 []<span class="typename">byte</span> = <span class="constant">nil</span></div><div class="line">    b2 := []<span class="typename">byte</span>{}</div><div class="line">    fmt.Println(<span class="string">"b1 == b2:"</span>,reflect.DeepEqual(b1, b2)) <span class="comment">//prints: b1 == b2: false</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>DeepEqual()</code>不会认为空的<code>slice</code>与“nil”的<code>slice</code>相等。这个行为与你使用<code>bytes.Equal()</code>函数的行为不同。<code>bytes.Equal()</code>认为“nil”和空的slice是相等的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"bytes"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> b1 []<span class="typename">byte</span> = <span class="constant">nil</span></div><div class="line">    b2 := []<span class="typename">byte</span>{}</div><div class="line">    fmt.Println(<span class="string">"b1 == b2:"</span>,bytes.Equal(b1, b2)) <span class="comment">//prints: b1 == b2: true</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>DeepEqual()</code>在比较slice时并不总是完美的。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"reflect"</span></div><div class="line">    <span class="string">"encoding/json"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> str <span class="typename">string</span> = <span class="string">"one"</span></div><div class="line">    <span class="keyword">var</span> in <span class="keyword">interface</span>{} = <span class="string">"one"</span></div><div class="line">    fmt.Println(<span class="string">"str == in:"</span>,str == in,reflect.DeepEqual(str, in)) </div><div class="line">    <span class="comment">//prints: str == in: true true</span></div><div class="line"></div><div class="line">    v1 := []<span class="typename">string</span>{<span class="string">"one"</span>,<span class="string">"two"</span>}</div><div class="line">    v2 := []<span class="keyword">interface</span>{}{<span class="string">"one"</span>,<span class="string">"two"</span>}</div><div class="line">    fmt.Println(<span class="string">"v1 == v2:"</span>,reflect.DeepEqual(v1, v2)) </div><div class="line">    <span class="comment">//prints: v1 == v2: false (not ok)</span></div><div class="line"></div><div class="line">    data := <span class="keyword">map</span>[<span class="typename">string</span>]<span class="keyword">interface</span>{}{</div><div class="line">        <span class="string">"code"</span>:<span class="number"> 200</span>,</div><div class="line">        <span class="string">"value"</span>: []<span class="typename">string</span>{<span class="string">"one"</span>,<span class="string">"two"</span>},</div><div class="line">    }</div><div class="line">    encoded, _ := json.Marshal(data)</div><div class="line">    <span class="keyword">var</span> decoded <span class="keyword">map</span>[<span class="typename">string</span>]<span class="keyword">interface</span>{}</div><div class="line">    json.Unmarshal(encoded, &decoded)</div><div class="line">    fmt.Println(<span class="string">"data == decoded:"</span>,reflect.DeepEqual(data, decoded)) </div><div class="line">    <span class="comment">//prints: data == decoded: false (not ok)</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果你的<code>byte slice</code>（或者字符串）中包含文字数据，而当你要不区分大小写形式的值时（在使用<code>==</code>，<code>bytes.Equal()</code>，或者<code>bytes.Compare()</code>），你可能会尝试使用“bytes”和“string”包中的<code>ToUpper()</code>或者<code>ToLower()</code>函数。对于英语文本，这么做是没问题的，但对于许多其他的语言来说就不行了。这时应该使用<code>strings.EqualFold()</code>和<code>bytes.EqualFold()</code>。</p>
<p>如果你的byte slice中包含需要验证用户数据的隐私信息（比如，加密哈希、tokens等），不要使用<code>reflect.DeepEqual()</code>、<code>bytes.Equal()</code>，或者<code>bytes.Compare()</code>，因为这些函数将会让你的应用易于被定时攻击。为了避免泄露时间信息，使用&#39;crypto/subtle&#39;包中的函数（即，<code>subtle.ConstantTimeCompare()</code>）。</p>
<h3 id="从Panic中恢复">从Panic中恢复</h3>
<p><code>recover()</code>函数可以用于获取/拦截<code>panic</code>。仅当在一个<code>defer</code>函数中被完成时，调用<code>recover()</code>将会完成这个小技巧。</p>
<p>Incorrect:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="built_in">recover</span>() <span class="comment">//doesn't do anything</span></div><div class="line">    <span class="built_in">panic</span>(<span class="string">"not good"</span>)</div><div class="line">    <span class="built_in">recover</span>() <span class="comment">//won't be executed :)</span></div><div class="line">    fmt.Println(<span class="string">"ok"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">defer</span> <span class="keyword">func</span>() {</div><div class="line">        fmt.Println(<span class="string">"recovered:"</span>,<span class="built_in">recover</span>())</div><div class="line">    }()</div><div class="line"></div><div class="line">    <span class="built_in">panic</span>(<span class="string">"not good"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>recover()</code>的调用仅当它在<code>defer</code>函数中被直接调用时才有效。</p>
<p>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> doRecover() {  </div><div class="line">    fmt.Println(<span class="string">"recovered =&gt;"</span>,<span class="built_in">recover</span>()) <span class="comment">//prints: recovered =&gt; &lt;nil&gt;</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">defer</span> <span class="keyword">func</span>() {</div><div class="line">        doRecover() <span class="comment">//panic is not recovered</span></div><div class="line">    }()</div><div class="line"></div><div class="line">    <span class="built_in">panic</span>(<span class="string">"not good"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="在Slice,_Array,_and_Map_&quot;range&quot;语句中更新引用元素的值">在Slice, Array, and Map &quot;range&quot;语句中更新引用元素的值</h3>
<p>在“range”语句中生成的数据的值是真实集合元素的拷贝。它们不是原有元素的引用。<br>这意味着更新这些值将不会修改原来的数据。同时也意味着使用这些值的地址将不会得到原有数据的指针。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := []<span class="typename">int</span><span class="number">{1</span><span class="number">,2</span><span class="number">,3</span>}</div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data {</div><div class="line">        v *=<span class="number"> 10</span> <span class="comment">//original item is not changed</span></div><div class="line">    }</div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"data:"</span>,data) <span class="comment">//prints data: [1 2 3]</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果你需要更新原有集合中的数据，使用索引操作符来获得数据。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := []<span class="typename">int</span><span class="number">{1</span><span class="number">,2</span><span class="number">,3</span>}</div><div class="line">    <span class="keyword">for</span> i,_ := <span class="keyword">range</span> data {</div><div class="line">        data[i] *=<span class="number"> 10</span></div><div class="line">    }</div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"data:"</span>,data) <span class="comment">//prints data: [10 20 30]</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果你的集合保存的是指针，那规则会稍有不同。<br>如果要更新原有记录指向的数据，你依然需要使用索引操作，但你可以使用for range语句中的第二个值来更新存储在目标位置的数据。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := []*<span class="keyword">struct</span>{num <span class="typename">int</span>} { <span class="number">{1</span>},<span class="number">{2</span>},<span class="number">{3</span>} }</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data {</div><div class="line">        v.num *=<span class="number"> 10</span></div><div class="line">    }</div><div class="line"></div><div class="line">    fmt.Println(data<span class="number">[0</span>],data<span class="number">[1</span>],data<span class="number">[2</span>]) <span class="comment">//prints &{10} &{20} &{30}</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="在Slice中&quot;隐藏&quot;数据">在Slice中&quot;隐藏&quot;数据</h3>
<p>当你重新划分一个slice时，新的slice将引用原有slice的数组。如果你忘了这个行为的话，在你的应用分配大量临时的slice用于创建新的slice来引用原有数据的一小部分时，会导致难以预期的内存使用。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> get() []<span class="typename">byte</span> {  </div><div class="line">    raw := <span class="built_in">make</span>([]<span class="typename">byte</span><span class="number">,10000</span>)</div><div class="line">    fmt.Println(<span class="built_in">len</span>(raw),<span class="built_in">cap</span>(raw),&raw<span class="number">[0</span>]) <span class="comment">//prints: 10000 10000 &lt;byte_addr_x&gt;</span></div><div class="line">    <span class="keyword">return</span> raw[<span class="number">:3</span>]</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := get()</div><div class="line">    fmt.Println(<span class="built_in">len</span>(data),<span class="built_in">cap</span>(data),&data<span class="number">[0</span>]) <span class="comment">//prints: 3 10000 &lt;byte_addr_x&gt;</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>为了避免这个陷阱，你需要从临时的slice中拷贝数据（而不是重新划分slice）。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> get() []<span class="typename">byte</span> {  </div><div class="line">    raw := <span class="built_in">make</span>([]<span class="typename">byte</span><span class="number">,10000</span>)</div><div class="line">    fmt.Println(<span class="built_in">len</span>(raw),<span class="built_in">cap</span>(raw),&raw<span class="number">[0</span>]) <span class="comment">//prints: 10000 10000 &lt;byte_addr_x&gt;</span></div><div class="line">    res := <span class="built_in">make</span>([]<span class="typename">byte</span><span class="number">,3</span>)</div><div class="line">    <span class="built_in">copy</span>(res,raw[<span class="number">:3</span>])</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := get()</div><div class="line">    fmt.Println(<span class="built_in">len</span>(data),<span class="built_in">cap</span>(data),&data<span class="number">[0</span>]) <span class="comment">//prints: 3 3 &lt;byte_addr_y&gt;</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Slice的数据“毁坏”">Slice的数据“毁坏”</h3>
<p>比如说你需要重新一个路径（在slice中保存）。你通过修改第一个文件夹的名字，然后把名字合并来创建新的路劲，来重新划分指向各个文件夹的路径。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"bytes"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    path := []<span class="typename">byte</span>(<span class="string">"AAAA/BBBBBBBBB"</span>)</div><div class="line">    sepIndex := bytes.IndexByte(path,<span class="string">'/'</span>)</div><div class="line">    dir1 := path[:sepIndex]</div><div class="line">    dir2 := path[sepIndex<span class="number">+1</span>:]</div><div class="line">    fmt.Println(<span class="string">"dir1 =&gt;"</span>,<span class="typename">string</span>(dir1)) <span class="comment">//prints: dir1 =&gt; AAAA</span></div><div class="line">    fmt.Println(<span class="string">"dir2 =&gt;"</span>,<span class="typename">string</span>(dir2)) <span class="comment">//prints: dir2 =&gt; BBBBBBBBB</span></div><div class="line"></div><div class="line">    dir1 = <span class="built_in">append</span>(dir1,<span class="string">"suffix"</span>...)</div><div class="line">    path = bytes.Join([][]<span class="typename">byte</span>{dir1,dir2},[]<span class="typename">byte</span>{<span class="string">'/'</span>})</div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"dir1 =&gt;"</span>,<span class="typename">string</span>(dir1)) <span class="comment">//prints: dir1 =&gt; AAAAsuffix</span></div><div class="line">    fmt.Println(<span class="string">"dir2 =&gt;"</span>,<span class="typename">string</span>(dir2)) <span class="comment">//prints: dir2 =&gt; uffixBBBB (not ok)</span></div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"new path =&gt;"</span>,<span class="typename">string</span>(path))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>结果与你想的不一样。与&quot;AAAAsuffix/BBBBBBBBB&quot;相反，你将会得到&quot;AAAAsuffix/uffixBBBB&quot;。这个情况的发生是因为两个文件夹的slice都潜在的引用了同一个原始的路径slice。这意味着原始路径也被修改了。根据你的应用，这也许会是个问题。</p>
<p>通过分配新的slice并拷贝需要的数据，你可以修复这个问题。另一个选择是使用完整的slice表达式。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"bytes"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    path := []<span class="typename">byte</span>(<span class="string">"AAAA/BBBBBBBBB"</span>)</div><div class="line">    sepIndex := bytes.IndexByte(path,<span class="string">'/'</span>)</div><div class="line">    dir1 := path[:sepIndex:sepIndex] <span class="comment">//full slice expression</span></div><div class="line">    dir2 := path[sepIndex<span class="number">+1</span>:]</div><div class="line">    fmt.Println(<span class="string">"dir1 =&gt;"</span>,<span class="typename">string</span>(dir1)) <span class="comment">//prints: dir1 =&gt; AAAA</span></div><div class="line">    fmt.Println(<span class="string">"dir2 =&gt;"</span>,<span class="typename">string</span>(dir2)) <span class="comment">//prints: dir2 =&gt; BBBBBBBBB</span></div><div class="line"></div><div class="line">    dir1 = <span class="built_in">append</span>(dir1,<span class="string">"suffix"</span>...)</div><div class="line">    path = bytes.Join([][]<span class="typename">byte</span>{dir1,dir2},[]<span class="typename">byte</span>{<span class="string">'/'</span>})</div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"dir1 =&gt;"</span>,<span class="typename">string</span>(dir1)) <span class="comment">//prints: dir1 =&gt; AAAAsuffix</span></div><div class="line">    fmt.Println(<span class="string">"dir2 =&gt;"</span>,<span class="typename">string</span>(dir2)) <span class="comment">//prints: dir2 =&gt; BBBBBBBBB (ok now)</span></div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"new path =&gt;"</span>,<span class="typename">string</span>(path))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>完整的slice表达式中的额外参数可以控制新的slice的容量。现在在那个slice后添加元素将会触发一个新的buffer分配，而不是覆盖第二个slice中的数据。</p>
<h3 id="陈旧的(Stale)Slices">陈旧的(Stale)Slices</h3>
<p>多个slice可以引用同一个数据。比如，当你从一个已有的slice创建一个新的slice时，这就会发生。如果你的应用功能需要这种行为，那么你将需要关注下“走味的”slice。</p>
<p>在某些情况下，在一个slice中添加新的数据，在原有数组无法保持更多新的数据时，将导致分配一个新的数组。而现在其他的slice还指向老的数组（和老的数据）。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    s1 := []<span class="typename">int</span><span class="number">{1</span><span class="number">,2</span><span class="number">,3</span>}</div><div class="line">    fmt.Println(<span class="built_in">len</span>(s1),<span class="built_in">cap</span>(s1),s1) <span class="comment">//prints 3 3 [1 2 3]</span></div><div class="line"></div><div class="line">    s2 := s1<span class="number">[1</span>:]</div><div class="line">    fmt.Println(<span class="built_in">len</span>(s2),<span class="built_in">cap</span>(s2),s2) <span class="comment">//prints 2 2 [2 3]</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> s2 { s2[i] +=<span class="number"> 20</span> }</div><div class="line"></div><div class="line">    <span class="comment">//still referencing the same array</span></div><div class="line">    fmt.Println(s1) <span class="comment">//prints [1 22 23]</span></div><div class="line">    fmt.Println(s2) <span class="comment">//prints [22 23]</span></div><div class="line"></div><div class="line">    s2 = <span class="built_in">append</span>(s2<span class="number">,4</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> s2 { s2[i] +=<span class="number"> 10</span> }</div><div class="line"></div><div class="line">    <span class="comment">//s1 is now "stale"</span></div><div class="line">    fmt.Println(s1) <span class="comment">//prints [1 22 23]</span></div><div class="line">    fmt.Println(s2) <span class="comment">//prints [32 33 14]</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="类型声明和方法">类型声明和方法</h3>
<p>当你通过把一个现有（非interface）的类型定义为一个新的类型时，新的类型不会继承现有类型的方法。</p>
<p>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"sync"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> myMutex sync.Mutex</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> mtx myMutex</div><div class="line">    mtx.Lock() <span class="comment">//error</span></div><div class="line">    mtx.Unlock() <span class="comment">//error  </span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Errors:</p>
<blockquote>
<p>/tmp/sandbox106401185/main.go:9: mtx.Lock undefined (type myMutex has no field or method Lock) /tmp/sandbox106401185/main.go:10: mtx.Unlock undefined (type myMutex has no field or method Unlock)</p>
</blockquote>
<p>如果你确实需要原有类型的方法，你可以定义一个新的struct类型，用匿名方式把原有类型嵌入其中。</p>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"sync"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> myLocker <span class="keyword">struct</span> {  </div><div class="line">    sync.Mutex</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> lock myLocker</div><div class="line">    lock.Lock() <span class="comment">//ok</span></div><div class="line">    lock.Unlock() <span class="comment">//ok</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>interface类型的声明也会保留它们的方法集合。<br>Works: </p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"sync"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> myLocker sync.Locker</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> lock myLocker = <span class="built_in">new</span>(sync.Mutex)</div><div class="line">    lock.Lock() <span class="comment">//ok</span></div><div class="line">    lock.Unlock() <span class="comment">//ok</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="从&quot;for_switch&quot;和&quot;for_select&quot;代码块中跳出">从&quot;for switch&quot;和&quot;for select&quot;代码块中跳出</h3>
<p>没有标签的“break”声明只能从内部的switch/select代码块中跳出来。如果无法使用“return”声明的话，那就为外部循环定义一个标签是另一个好的选择。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    loop:</div><div class="line">        <span class="keyword">for</span> {</div><div class="line">            <span class="keyword">switch</span> {</div><div class="line">            <span class="keyword">case</span> <span class="constant">true</span>:</div><div class="line">                fmt.Println(<span class="string">"breaking out..."</span>)</div><div class="line">                <span class="keyword">break</span> loop</div><div class="line">            }</div><div class="line">        }</div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"out!"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>&quot;goto&quot;声明也可以完成这个功能。。。</p>
<h3 id="&quot;for&quot;声明中的迭代变量和闭包">&quot;for&quot;声明中的迭代变量和闭包</h3>
<p>这在Go中是个很常见的技巧。for语句中的迭代变量在每次迭代时被重新使用。这就意味着你在for循环中创建的闭包（即函数字面量）将会引用同一个变量（而在那些goroutine开始执行时就会得到那个变量的值）。</p>
<p>Incorrect:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := []<span class="typename">string</span>{<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>}</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data {</div><div class="line">        <span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">            fmt.Println(v)</div><div class="line">        }()</div><div class="line">    }</div><div class="line"></div><div class="line">    time.Sleep<span class="number">(3</span> * time.Second)</div><div class="line">    <span class="comment">//goroutines print: three, three, three</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>最简单的解决方法（不需要修改goroutine）是，在for循环代码块内把当前迭代的变量值保存到一个局部变量中。</p>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := []<span class="typename">string</span>{<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>}</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data {</div><div class="line">        vcopy := v <span class="comment">//</span></div><div class="line">        <span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">            fmt.Println(vcopy)</div><div class="line">        }()</div><div class="line">    }</div><div class="line"></div><div class="line">    time.Sleep<span class="number">(3</span> * time.Second)</div><div class="line">    <span class="comment">//goroutines print: one, two, three</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>另一个解决方法是把当前的迭代变量作为匿名goroutine的参数。</p>
<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := []<span class="typename">string</span>{<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>}</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data {</div><div class="line">        <span class="keyword">go</span> <span class="keyword">func</span>(in <span class="typename">string</span>) {</div><div class="line">            fmt.Println(in)</div><div class="line">        }(v)</div><div class="line">    }</div><div class="line"></div><div class="line">    time.Sleep<span class="number">(3</span> * time.Second)</div><div class="line">    <span class="comment">//goroutines print: one, two, three</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>下面这个陷阱稍微复杂一些的版本。</p>
<p>Incorrect:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> field <span class="keyword">struct</span> {  </div><div class="line">    name <span class="typename">string</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (p *field) <span class="built_in">print</span>() {  </div><div class="line">    fmt.Println(p.name)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := []field{ {<span class="string">"one"</span>},{<span class="string">"two"</span>},{<span class="string">"three"</span>} }</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data {</div><div class="line">        <span class="keyword">go</span> v.<span class="built_in">print</span>()</div><div class="line">    }</div><div class="line"></div><div class="line">    time.Sleep<span class="number">(3</span> * time.Second)</div><div class="line">    <span class="comment">//goroutines print: three, three, three</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> field <span class="keyword">struct</span> {  </div><div class="line">    name <span class="typename">string</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (p *field) <span class="built_in">print</span>() {  </div><div class="line">    fmt.Println(p.name)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := []field{ {<span class="string">"one"</span>},{<span class="string">"two"</span>},{<span class="string">"three"</span>} }</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data {</div><div class="line">        v := v</div><div class="line">        <span class="keyword">go</span> v.<span class="built_in">print</span>()</div><div class="line">    }</div><div class="line"></div><div class="line">    time.Sleep<span class="number">(3</span> * time.Second)</div><div class="line">    <span class="comment">//goroutines print: one, two, three</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>在运行这段代码时你认为会看到什么结果？（原因是什么？）</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> field <span class="keyword">struct</span> {  </div><div class="line">    name <span class="typename">string</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (p *field) <span class="built_in">print</span>() {  </div><div class="line">    fmt.Println(p.name)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    data := []*field{ {<span class="string">"one"</span>},{<span class="string">"two"</span>},{<span class="string">"three"</span>} }</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data {</div><div class="line">        <span class="keyword">go</span> v.<span class="built_in">print</span>()</div><div class="line">    }</div><div class="line"></div><div class="line">    time.Sleep<span class="number">(3</span> * time.Second)</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Defer函数调用参数的求值">Defer函数调用参数的求值</h3>
<p>被<code>defer</code>的函数的参数会在<code>defer</code>声明时求值（而不是在函数实际执行时）。<br>Arguments for a deferred function call are evaluated when the defer statement is evaluated (not when the function is actually executing).</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> i <span class="typename">int</span> =<span class="number"> 1</span></div><div class="line"></div><div class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">"result =&gt;"</span>,<span class="keyword">func</span>() <span class="typename">int</span> { <span class="keyword">return</span> i *<span class="number"> 2</span> }())</div><div class="line">    i++</div><div class="line">    <span class="comment">//prints: result =&gt; 2 (not ok if you expected 4)</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="被Defer的函数调用执行">被Defer的函数调用执行</h3>
<p>被defer的调用会在包含的函数的末尾执行，而不是包含代码块的末尾。对于Go新手而言，一个很常犯的错误就是无法区分被defer的代码执行规则和变量作用规则。如果你有一个长时运行的函数，而函数内有一个for循环试图在每次迭代时都defer资源清理调用，那就会出现问题。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">    <span class="string">"path/filepath"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) !=<span class="number"> 2</span> {</div><div class="line">        os.Exit<span class="number">(-1</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    start, err := os.Stat(os.Args<span class="number">[1</span>])</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> || !start.IsDir(){</div><div class="line">        os.Exit<span class="number">(-1</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">var</span> targets []<span class="typename">string</span></div><div class="line">    filepath.Walk(os.Args<span class="number">[1</span>], <span class="keyword">func</span>(fpath <span class="typename">string</span>, fi os.FileInfo, err error) error {</div><div class="line">        <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">            <span class="keyword">return</span> err</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">if</span> !fi.Mode().IsRegular() {</div><div class="line">            <span class="keyword">return</span> <span class="constant">nil</span></div><div class="line">        }</div><div class="line"></div><div class="line">        targets = <span class="built_in">append</span>(targets,fpath)</div><div class="line">        <span class="keyword">return</span> <span class="constant">nil</span></div><div class="line">    })</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,target := <span class="keyword">range</span> targets {</div><div class="line">        f, err := os.Open(target)</div><div class="line">        <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">            fmt.Println(<span class="string">"bad target:"</span>,target,<span class="string">"error:"</span>,err) <span class="comment">//prints error: too many open files</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">        }</div><div class="line">        <span class="keyword">defer</span> f.Close() <span class="comment">//will not be closed at the end of this code block</span></div><div class="line">        <span class="comment">//do something with the file...</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>解决这个问题的一个方法是把代码块写成一个函数。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">    <span class="string">"path/filepath"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) !=<span class="number"> 2</span> {</div><div class="line">        os.Exit<span class="number">(-1</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    start, err := os.Stat(os.Args<span class="number">[1</span>])</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> || !start.IsDir(){</div><div class="line">        os.Exit<span class="number">(-1</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">var</span> targets []<span class="typename">string</span></div><div class="line">    filepath.Walk(os.Args<span class="number">[1</span>], <span class="keyword">func</span>(fpath <span class="typename">string</span>, fi os.FileInfo, err error) error {</div><div class="line">        <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">            <span class="keyword">return</span> err</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">if</span> !fi.Mode().IsRegular() {</div><div class="line">            <span class="keyword">return</span> <span class="constant">nil</span></div><div class="line">        }</div><div class="line"></div><div class="line">        targets = <span class="built_in">append</span>(targets,fpath)</div><div class="line">        <span class="keyword">return</span> <span class="constant">nil</span></div><div class="line">    })</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,target := <span class="keyword">range</span> targets {</div><div class="line">        <span class="keyword">func</span>() {</div><div class="line">            f, err := os.Open(target)</div><div class="line">            <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">                fmt.Println(<span class="string">"bad target:"</span>,target,<span class="string">"error:"</span>,err)</div><div class="line">                <span class="keyword">return</span></div><div class="line">            }</div><div class="line">            <span class="keyword">defer</span> f.Close() <span class="comment">//ok</span></div><div class="line">            <span class="comment">//do something with the file...</span></div><div class="line">        }()</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>另一个方法是去掉<code>defer</code>语句 :-)</p>
<h3 id="失败的类型断言">失败的类型断言</h3>
<p>失败的类型断言返回断言声明中使用的目标类型的“零值”。这在与隐藏变量混合时，会发生未知情况。</p>
<p>Incorrect:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line">func main() {  </div><div class="line">    <span class="built_in">var</span> <span class="built_in">data</span> interface{} <span class="subst">=</span> <span class="string">"great"</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="built_in">data</span>, ok <span class="subst">:=</span> <span class="built_in">data</span><span class="built_in">.</span>(int); ok {</div><div class="line">        fmt<span class="built_in">.</span>Println(<span class="string">"[is an int] value =&gt;"</span>,<span class="built_in">data</span>)</div><div class="line">    } <span class="keyword">else</span> {</div><div class="line">        fmt<span class="built_in">.</span>Println(<span class="string">"[not an int] value =&gt;"</span>,<span class="built_in">data</span>) </div><div class="line">        <span class="comment">//prints: [not an int] value =&gt; 0 (not "great")</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> data <span class="keyword">interface</span>{} = <span class="string">"great"</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> res, ok := data.(<span class="typename">int</span>); ok {</div><div class="line">        fmt.Println(<span class="string">"[is an int] value =&gt;"</span>,res)</div><div class="line">    } <span class="keyword">else</span> {</div><div class="line">        fmt.Println(<span class="string">"[not an int] value =&gt;"</span>,data) </div><div class="line">        <span class="comment">//prints: [not an int] value =&gt; great (as expected)</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="阻塞的Goroutine和资源泄露">阻塞的Goroutine和资源泄露</h3>
<p>Rob Pike在2012年的Google I/O大会上所做的“Go Concurrency Patterns”的演讲上，说道过几种基础的并发模式。从一组目标中获取第一个结果就是其中之一。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> First(query <span class="typename">string</span>, replicas ...Search) Result {  </div><div class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> Result)</div><div class="line">    searchReplica := <span class="keyword">func</span>(i <span class="typename">int</span>) { c &lt;- replicas[i](query) }</div><div class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> replicas {</div><div class="line">        <span class="keyword">go</span> searchReplica(i)</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> &lt;-c</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这个函数在每次搜索重复时都会起一个goroutine。每个goroutine把它的搜索结果发送到结果的channel中。结果channel的第一个值被返回。</p>
<p>那其他goroutine的结果会怎样呢？还有那些goroutine自身呢？</p>
<p>在<code>First()</code>函数中的结果channel是没缓存的。这意味着只有第一个goroutine返回。其他的goroutine会困在尝试发送结果的过程中。这意味着，如果你有不止一个的重复时，每个调用将会泄露资源。</p>
<p>为了避免泄露，你需要确保所有的goroutine退出。一个不错的方法是使用一个有足够保存所有缓存结果的channel。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> First(query <span class="typename">string</span>, replicas ...Search) Result {  </div><div class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> Result,<span class="built_in">len</span>(replicas))</div><div class="line">    searchReplica := <span class="keyword">func</span>(i <span class="typename">int</span>) { c &lt;- replicas[i](query) }</div><div class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> replicas {</div><div class="line">        <span class="keyword">go</span> searchReplica(i)</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> &lt;-c</div><div class="line">}</div></pre></td></tr></table></figure>

<p>另一个不错的解决方法是使用一个有default情况的select语句和一个保存一个缓存结果的channel。default情况保证了即使当结果channel无法收到消息的情况下，goroutine也不会堵塞。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> First(query <span class="typename">string</span>, replicas ...Search) Result {  </div><div class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> Result<span class="number">,1</span>)</div><div class="line">    searchReplica := <span class="keyword">func</span>(i <span class="typename">int</span>) { </div><div class="line">        <span class="keyword">select</span> {</div><div class="line">        <span class="keyword">case</span> c &lt;- replicas[i](query):</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> replicas {</div><div class="line">        <span class="keyword">go</span> searchReplica(i)</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> &lt;-c</div><div class="line">}</div></pre></td></tr></table></figure>

<p>你也可以使用特殊的取消channel来终止workers。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> First(query <span class="typename">string</span>, replicas ...Search) Result {  </div><div class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> Result)</div><div class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>{})</div><div class="line">    <span class="keyword">defer</span> <span class="built_in">close</span>(done)</div><div class="line">    searchReplica := <span class="keyword">func</span>(i <span class="typename">int</span>) { </div><div class="line">        <span class="keyword">select</span> {</div><div class="line">        <span class="keyword">case</span> c &lt;- replicas[i](query):</div><div class="line">        <span class="keyword">case</span> &lt;- done:</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> replicas {</div><div class="line">        <span class="keyword">go</span> searchReplica(i)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &lt;-c</div><div class="line">}</div></pre></td></tr></table></figure>

<p>为何在演讲中会包含这些bug？Rob Pike仅仅是不想把演示复杂化。这么作是合理的，但对于Go新手而言，可能会直接使用代码，而不去思考它可能有问题。</p>
<h2 id="高级">高级</h2>
<h3 id="使用指针接收方法的值的实例">使用指针接收方法的值的实例</h3>
<p>只要值是可取址的，那在这个值上调用指针接收方法是没问题的。换句话说，在某些情况下，你不需要在有一个接收值的方法版本。</p>
<p>然而并不是所有的变量是可取址的。Map的元素就不是。通过interface引用的变量也不是。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> {  </div><div class="line">    name <span class="typename">string</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (p *data) <span class="built_in">print</span>() {  </div><div class="line">    fmt.Println(<span class="string">"name:"</span>,p.name)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">type</span> printer <span class="keyword">interface</span> {  </div><div class="line">    <span class="built_in">print</span>()</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    d1 := data{<span class="string">"one"</span>}</div><div class="line">    d1.<span class="built_in">print</span>() <span class="comment">//ok</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> in printer = data{<span class="string">"two"</span>} <span class="comment">//error</span></div><div class="line">    in.<span class="built_in">print</span>()</div><div class="line"></div><div class="line">    m := <span class="keyword">map</span>[<span class="typename">string</span>]data {<span class="string">"x"</span>:data{<span class="string">"three"</span>}}</div><div class="line">    m[<span class="string">"x"</span>].<span class="built_in">print</span>() <span class="comment">//error</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Errors:</p>
<blockquote>
<p>/tmp/sandbox017696142/main.go:21: cannot use data literal (type data) as type printer in assignment: data does not implement printer (print method has pointer receiver)<br>/tmp/sandbox017696142/main.go:25: cannot call pointer method on m[&quot;x&quot;]<br>/tmp/sandbox017696142/main.go:25: cannot take the address of m[&quot;x&quot;]</p>
</blockquote>
<h3 id="更新Map的值">更新Map的值</h3>
<p>如果你有一个struct值的map，你无法更新单个的struct值。</p>
<p>Fails:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> {  </div><div class="line">    name <span class="typename">string</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    m := <span class="keyword">map</span>[<span class="typename">string</span>]data {<span class="string">"x"</span>:{<span class="string">"one"</span>}}</div><div class="line">    m[<span class="string">"x"</span>].name = <span class="string">"two"</span> <span class="comment">//error</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Compile Error:</p>
<blockquote>
<p>/tmp/sandbox380452744/main.go:9: cannot assign to m[&quot;x&quot;].name</p>
</blockquote>
<p>这个操作无效是因为map元素是无法取址的。</p>
<p>而让Go新手更加困惑的是slice元素是可以取址的。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> {  </div><div class="line">    name <span class="typename">string</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    s := []data one</div><div class="line">    s<span class="number">[0</span>].name = <span class="string">"two"</span> <span class="comment">//ok</span></div><div class="line">    fmt.Println(s)    <span class="comment">//prints: [{two}]</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>注意在不久之前，使用编译器之一（gccgo）是可以更新map的元素值的，但这一行为很快就被修复了 :-)它也被认为是Go 1.3的潜在特性。在那时还不是要急需支持的，但依旧在todo list中。</p>
<p>第一个有效的方法是使用一个临时变量。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> {  </div><div class="line">    name <span class="typename">string</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    m := <span class="keyword">map</span>[<span class="typename">string</span>]data {<span class="string">"x"</span>:{<span class="string">"one"</span>}}</div><div class="line">    r := m[<span class="string">"x"</span>]</div><div class="line">    r.name = <span class="string">"two"</span></div><div class="line">    m[<span class="string">"x"</span>] = r</div><div class="line">    fmt.Printf(<span class="string">"%v"</span>,m) <span class="comment">//prints: map[x:{two}]</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>另一个有效的方法是使用指针的map。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> {  </div><div class="line">    name <span class="typename">string</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    m := <span class="keyword">map</span>[<span class="typename">string</span>]*data {<span class="string">"x"</span>:{<span class="string">"one"</span>}}</div><div class="line">    m[<span class="string">"x"</span>].name = <span class="string">"two"</span> <span class="comment">//ok</span></div><div class="line">    fmt.Println(m[<span class="string">"x"</span>]) <span class="comment">//prints: &{two}</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>顺便说下，当你运行下面的代码时会发生什么？</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> {  </div><div class="line">    name <span class="typename">string</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    m := <span class="keyword">map</span>[<span class="typename">string</span>]*data {<span class="string">"x"</span>:{<span class="string">"one"</span>}}</div><div class="line">    m[<span class="string">"z"</span>].name = <span class="string">"what?"</span> <span class="comment">//???</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="&quot;nil&quot;_Interfaces和&quot;nil&quot;_Interfaces的值">&quot;nil&quot; Interfaces和&quot;nil&quot; Interfaces的值</h3>
<p>这在Go中是第二最常见的技巧，因为interface虽然看起来像指针，但并不是指针。interface变量仅在类型和值为“nil”时才为“nil”。</p>
<p>interface的类型和值会根据用于创建对应interface变量的类型和值的变化而变化。当你检查一个interface变量是否等于“nil”时，这就会导致未预期的行为。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">var</span> data *<span class="typename">byte</span></div><div class="line">    <span class="keyword">var</span> in <span class="keyword">interface</span>{}</div><div class="line"></div><div class="line">    fmt.Println(data,data == <span class="constant">nil</span>) <span class="comment">//prints: &lt;nil&gt; true</span></div><div class="line">    fmt.Println(in,in == <span class="constant">nil</span>)     <span class="comment">//prints: &lt;nil&gt; true</span></div><div class="line"></div><div class="line">    in = data</div><div class="line">    fmt.Println(in,in == <span class="constant">nil</span>)     <span class="comment">//prints: &lt;nil&gt; false</span></div><div class="line">    <span class="comment">//'data' is 'nil', but 'in' is not 'nil'</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>当你的函数返回interface时，小心这个陷阱。</p>
<p>Incorrect:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    doit := <span class="keyword">func</span>(arg <span class="typename">int</span>) <span class="keyword">interface</span>{} {</div><div class="line">        <span class="keyword">var</span> result *<span class="keyword">struct</span>{} = <span class="constant">nil</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span>(arg &gt;<span class="number"> 0</span>) {</div><div class="line">            result = &<span class="keyword">struct</span>{}{}</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">if</span> res := doit<span class="number">(-1</span>); res != <span class="constant">nil</span> {</div><div class="line">        fmt.Println(<span class="string">"good result:"</span>,res) <span class="comment">//prints: good result: &lt;nil&gt;</span></div><div class="line">        <span class="comment">//'res' is not 'nil', but its value is 'nil'</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Works:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    doit := <span class="keyword">func</span>(arg <span class="typename">int</span>) <span class="keyword">interface</span>{} {</div><div class="line">        <span class="keyword">var</span> result *<span class="keyword">struct</span>{} = <span class="constant">nil</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span>(arg &gt;<span class="number"> 0</span>) {</div><div class="line">            result = &<span class="keyword">struct</span>{}{}</div><div class="line">        } <span class="keyword">else</span> {</div><div class="line">            ret</div></pre></td></tr></table></figure>

<h3 id="栈和堆变量">栈和堆变量</h3>
<p>你并不总是知道变量是分配到栈还是堆上。在C++中，使用new创建的变量总是在堆上。在Go中，即使是使用<code>new()</code>或者<code>make()</code>函数来分配，变量的位置还是由编译器决定。编译器根据变量的大小和“泄露分析”的结果来决定其位置。这也意味着在局部变量上返回引用是没问题的，而这在C或者C++这样的语言中是不行的。</p>
<p>如果你想知道变量分配的位置，在“go build”或“go run”上传入“-m“ gc标志（即，go run -gcflags -m app.go）。</p>
<h3 id="GOMAXPROCS,_并发,_和并行">GOMAXPROCS, 并发, 和并行</h3>
<p>默认情况下，Go仅使用一个执行上下文/OS线程（在当前的版本）。这个数量可以通过设置<code>GOMAXPROCS</code>来提高。</p>
<p>一个常见的误解是，<code>GOMAXPROCS</code>表示了CPU的数量，Go将使用这个数量来运行goroutine。而<code>runtime.GOMAXPROCS()</code>函数的文档让人更加的迷茫。<code>GOMAXPROCS</code>变量描述（<a href="https://golang.org/pkg/runtime/）所讨论OS线程的内容比较好。" target="_blank" rel="external">https://golang.org/pkg/runtime/）所讨论OS线程的内容比较好。</a></p>
<p>你可以设置<code>GOMAXPROCS</code>的数量大于CPU的数量。<code>GOMAXPROCS</code>的最大值是256。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"runtime"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    fmt.Println(runtime.GOMAXPROCS<span class="number">(-1</span>)) <span class="comment">//prints: 1</span></div><div class="line">    fmt.Println(runtime.NumCPU())       <span class="comment">//prints: 1 (on play.golang.org)</span></div><div class="line">    runtime.GOMAXPROCS<span class="number">(20</span>)</div><div class="line">    fmt.Println(runtime.GOMAXPROCS<span class="number">(-1</span>)) <span class="comment">//prints: 20</span></div><div class="line">    runtime.GOMAXPROCS<span class="number">(300</span>)</div><div class="line">    fmt.Println(runtime.GOMAXPROCS<span class="number">(-1</span>)) <span class="comment">//prints: 256</span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="读写操作的重排顺序">读写操作的重排顺序</h3>
<p>Go可能会对某些操作进行重新排序，但它能保证在一个goroutine内的所有行为顺序是不变的。然而，它并不保证多goroutine的执行顺序。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"runtime"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> _ = runtime.GOMAXPROCS<span class="number">(3</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> a, b <span class="typename">int</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> u1() {  </div><div class="line">    a =<span class="number"> 1</span></div><div class="line">    b =<span class="number"> 2</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> u2() {  </div><div class="line">    a =<span class="number"> 3</span></div><div class="line">    b =<span class="number"> 4</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> p() {  </div><div class="line">    <span class="built_in">println</span>(a)</div><div class="line">    <span class="built_in">println</span>(b)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    <span class="keyword">go</span> u1()</div><div class="line">    <span class="keyword">go</span> u2()</div><div class="line">    <span class="keyword">go</span> p()</div><div class="line">    time.Sleep<span class="number">(1</span> * time.Second)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果你多运行几次上面的代码，你可能会发现a和b变量有多个不同的组合：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">1 </div><div class="line">2</div><div class="line"></div><div class="line">3 </div><div class="line">4</div><div class="line"></div><div class="line">0 </div><div class="line">2</div><div class="line"></div><div class="line">0 </div><div class="line">0</div><div class="line"></div><div class="line">1 </div><div class="line">4</div></pre></td></tr></table></figure>

<p><code>a</code>和<code>b</code>最有趣的组合式是&quot;02&quot;。这表明<code>b</code>在<code>a</code>之前更新了。</p>
<p>如果你需要在多goroutine内放置读写顺序的变化，你将需要使用channel，或者使用&quot;sync&quot;包构建合适的结构体。</p>
<h3 id="优先调度">优先调度</h3>
<p>有可能会出现这种情况，一个无耻的goroutine阻止其他goroutine运行。当你有一个不让调度器运行的for循环时，这就会发生。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    done := <span class="constant">false</span></div><div class="line"></div><div class="line">    <span class="keyword">go</span> <span class="keyword">func</span>(){</div><div class="line">        done = <span class="constant">true</span></div><div class="line">    }()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> !done {</div><div class="line">    }</div><div class="line">    fmt.Println(<span class="string">"done!"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>for循环并不需要是空的。只要它包含了不会触发调度执行的代码，就会发生这种问题。</p>
<p>调度器会在GC、“go”声明、阻塞channel操作、阻塞系统调用和lock操作后运行。它也会在非内联函数调用后执行。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    done := <span class="constant">false</span></div><div class="line"></div><div class="line">    <span class="keyword">go</span> <span class="keyword">func</span>(){</div><div class="line">        done = <span class="constant">true</span></div><div class="line">    }()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> !done {</div><div class="line">        fmt.Println(<span class="string">"not done!"</span>) <span class="comment">//not inlined</span></div><div class="line">    }</div><div class="line">    fmt.Println(<span class="string">"done!"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>要想知道你在for循环中调用的函数是否是内联的，你可以在“go build”或“go run”时传入“-m” gc标志（如， <code>go build -gcflags -m</code>）。</p>
<p>另一个选择是显式的唤起调度器。你可以使用“runtime”包中的<code>Goshed()</code>函数。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (  </div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"runtime"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {  </div><div class="line">    done := <span class="constant">false</span></div><div class="line"></div><div class="line">    <span class="keyword">go</span> <span class="keyword">func</span>(){</div><div class="line">        done = <span class="constant">true</span></div><div class="line">    }()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> !done {</div><div class="line">        runtime.Gosched()</div><div class="line">    }</div><div class="line">    fmt.Println(<span class="string">"done!"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果你看到了这里，并想留下评论或者想法，你可以在这个<a href="https://www.reddit.com/r/golang/comments/360vlb/draft_traps_gotchas_and_common_mistakes_in_go/" target="_blank" rel="external">Reddit讨论</a>里随意留言。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/" target="_blank" rel="external">50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs</a><br>翻译: <a href="http://www.shwley.com/index.php/archives/80/" target="_blank" rel="external">Go的50度灰：新Golang开发者要注意的陷阱、技巧和常见错误</a>, 译者: <a href="http://www.shwley.com/index.php/author/1/" target="_blank" rel="external">影风LEY </a></p>
<p>Go是一门简单有趣的语言，但与其他语言类似，它会有一些技巧。。。这些技巧的绝大部分并不是Go的缺陷造成的。如果你以前使用的是其他语言，那么这其中的有些错误就是很自然的陷阱。其它的是由错误的假设和缺少细节造成的。</p>
<p>如果你花时间学习这门语言，阅读官方说明、wiki、邮件列表讨论、大量的优秀博文和Rob Pike的展示，以及源代码，这些技巧中的绝大多数都是显而易见的。尽管不是每个人都是以这种方式开始学习的，但也没关系。如果你是Go语言新人，那么这里的信息将会节约你大量的调试代码的时间。<br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用LinkedHashMap实现LRU缓存]]></title>
    <link href="http://colobu.com/2015/09/07/LRU-cache-implemented-by-Java-LinkedHashMap/"/>
    <id>http://colobu.com/2015/09/07/LRU-cache-implemented-by-Java-LinkedHashMap/</id>
    <published>2015-09-07T01:17:03.000Z</published>
    <updated>2015-09-07T01:46:49.385Z</updated>
    <content type="html"><![CDATA[<p>可能很多人已经知道了这个技术，但是对于我来说，虽然使用Java十余年了，最近才了解到<code>LinkedHashMap</code>这个类。使用这个类可以方便的实现一个本地的LRU Cache类。<br><a id="more"></a><br>之所以没有关注到这个类，是因为在面对本地缓存的case时，我经常会考虑<code>guava</code>这个框架。<br>最早可以搜到的一篇关于<code>LinkedHashMap</code>实现本地缓存的文章之一是这篇: <a href="http://java-planet.blogspot.pt/2005/08/how-to-set-up-simple-lru-cache-using.html" target="_blank" rel="external">How to set up a simple LRU cache using LinkedHashMap </a>，发表于2005年。文末有附了几篇关于<code>LinkedHashMap</code>类的介绍。</p>
<p>这个类实现了Hash和双向链表两种数据结构的混合。 所以通过<code>get</code>方法可以很快的得到相应的元素，而链表结构又可以根据<code>access</code>或者<code>insert</code>进行排序。但是这种<br>方式也会有性能的损耗，因为对数据的插入需要同时更新这两个数据结构，对数据的访问在<code>accessOrder</code>情况下也会涉及数据的移动。 我们知道数据量大的情况下对链表的更改是很耗时的，所以使用的时候要仔细考量。</p>
<p>好了，下面就是一个local cache的实现,抄自 <a href="http://chriswu.me/blog/a-lru-cache-in-10-lines-of-java/" target="_blank" rel="external">A LRU Cache in 10 Lines of Java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> LRUCache&lt;K, V&gt; extends LinkedHashMap&lt;K, V&gt; {</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> cacheSize;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="title">LRUCache</span>(<span class="keyword">int</span> cacheSize) {</div><div class="line">    <span class="keyword">super</span>(<span class="number">16</span>, <span class="number">0.75</span>, <span class="keyword">true</span>);</div><div class="line">    <span class="keyword">this</span>.cacheSize = cacheSize;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span>(Map.Entry&lt;K, V&gt; eldest) {</div><div class="line">    <span class="keyword">return</span> size() &gt;= cacheSize;</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>主要实现<code>removeEldestEntry</code>方法，这个方法如果返回true,则会移除最老的数据。这只会在调用<code>put</code>或者<code>putAll</code>时发生。</p>
<p>很重要的一点， <strong>此类不是线程安全的</strong>，所以使用的时候你需要加锁。</p>
<h4 id="参考文档">参考文档</h4>
<ol>
<li><a href="http://chriswu.me/blog/a-lru-cache-in-10-lines-of-java/" target="_blank" rel="external">A LRU Cache in 10 Lines of Java</a></li>
<li><a href="http://java-planet.blogspot.pt/2005/08/how-to-set-up-simple-lru-cache-using.html" target="_blank" rel="external">How to set up a simple LRU cache using LinkedHashMap </a></li>
<li><a href="http://codereview.stackexchange.com/questions/3138/linkedhashmap-as-lru-cache" target="_blank" rel="external">LinkedHashMap as LRU cache</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html" target="_blank" rel="external">https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>可能很多人已经知道了这个技术，但是对于我来说，虽然使用Java十余年了，最近才了解到<code>LinkedHashMap</code>这个类。使用这个类可以方便的实现一个本地的LRU Cache类。<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用 CSS 实现三角形与平行四边形]]></title>
    <link href="http://colobu.com/2015/08/25/use-css-to-paint-triangle-and-parallelogram/"/>
    <id>http://colobu.com/2015/08/25/use-css-to-paint-triangle-and-parallelogram/</id>
    <published>2015-08-25T05:38:32.000Z</published>
    <updated>2015-08-25T05:49:11.517Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://jerryzou.com/posts/use-css-to-paint-triangle-and-parallelogram/?utm_source=tuicool" target="_blank" rel="external">用 CSS 实现三角形与平行四边形</a>, 作者：<a href="mailto:jerry.zry@outlook.com" target="_blank" rel="external">邹润阳</a></p>
<p>最近在逛某个技术网站的时候，感觉文章关键词上的样式好酷炫啊。于是我将那种写法照搬到了我的博客中，也许最近逛过我博客的小伙伴已经发现了它出现在哪儿了——分页的样式。来张截图：<br><img src="1.png" alt=""><br>你在首页的底部也可以看到这样一个分页栏；是不是看上去还不错？下面就来看看这是如何实现的吧~<br><a id="more"></a></p>
<h2 id="第一种方法：利用border">第一种方法：利用border</h2>
<p>第一种方法是借助border属性 hack 出三角形，然后通过一个矩形拼接两个三角形最终制造出一个平行四边形。为什么使用border可以产生三角形呢？先来看看一张图片：<br><img src="2.png" alt=""><br>看了图中的三个小图形的变化过程，你应该已经清楚了一半。其实 hack 出三角形只需要两个条件，第一，元素本身的长宽为0；其次，将不需要的部分通过 border-color 来设置隐藏。通过类似的方法，你还可以创造出梯形，上图中的三个图形的代码如下。（另附 <a href="http://codepen.io/jerryzou/pen/mJYJym" target="_blank" rel="external">CodePen 示例</a>）</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="id">#first</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">20px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">20px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">10px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-style</span>:<span class="value"> solid</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-color</span>:<span class="value"> red green blue brown</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"></div><div class="line"><span class="id">#second</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">10px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-style</span>:<span class="value"> solid</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-color</span>:<span class="value"> red green blue brown</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"></div><div class="line"><span class="id">#third</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">10px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-style</span>:<span class="value"> solid</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-color</span>:<span class="value"> red transparent transparent transparent</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>接下来就要考虑如何拼接出一个平行四边形了。在<code>border</code>法中，它由三部分组成，分别是左三角形、矩形、右三角形。如果每次绘制平行四边形都要创建三个元素显然过于麻烦了，所以在这里<code>:before</code>和<code>:after</code>伪元素是个不错的选择。下面我们实现一下这样的效果：<br><img src="3.png" alt=""></p>
<p>为了将三角形与矩形无缝拼接到一起，多处属性要保持一致，所以使用类似 Less, Sass, Stylus 等 CSS 预处理器来写这段代码会更容易维护，下面给出 Scss 版本的代码。（另附 <a href="http://codepen.io/jerryzou/pen/ZGNGWZ?editors=110" target="_blank" rel="external">CodePen 链接</a>）</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">//三角形的宽高</div><div class="line">$height: 24px;</div><div class="line">$width: 12px;</div><div class="line"></div><div class="line">//对平行四边形三部分的颜色进行赋值</div><div class="line">@mixin parallelogram-color($color) {</div><div class="line">  background: $color;</div><div class="line">  &:before { border-color: transparent $color $color transparent; }</div><div class="line">  &:after { border-color: $color transparent transparent $color; }</div><div class="line">}</div><div class="line"></div><div class="line">//单个三角形的样式</div><div class="line">@mixin triangle() {</div><div class="line">  content: '';</div><div class="line">  display: block;</div><div class="line">  width: 0;</div><div class="line">  height: 0;</div><div class="line">  position: absolute;</div><div class="line">  border-style: solid;</div><div class="line">  border-width: $height/2 $width/2;</div><div class="line">  top: 0;</div><div class="line">}</div><div class="line"></div><div class="line">//平行四边形的样式</div><div class="line">.para {</div><div class="line">  display: inline-block;</div><div class="line">  position: relative;</div><div class="line">  padding: 0 10px;</div><div class="line">  height: $height;</div><div class="line">  line-height: $height;</div><div class="line">  margin-left: $width;</div><div class="line">  color: #fff;</div><div class="line"></div><div class="line">  &:after {</div><div class="line">    @include triangle();</div><div class="line">    right: -$width;</div><div class="line">  }</div><div class="line"></div><div class="line">  &:before {</div><div class="line">    @include triangle();</div><div class="line">    left: -$width;</div><div class="line">  }</div><div class="line"></div><div class="line">  @include parallelogram-color(red);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>需要注意的是，如果通过 <code>$height</code>、<code>$width</code> 设置的三角形斜率太小或太大都有可能造成渲染出锯齿，所以使用起来要多多测试一下不同的宽高所得到的视觉效果如何。</p>
<h2 id="利用transform">利用transform</h2>
<p>使用transform来实现平行四边形的方法是我在逛<a href="http://www.alitrip.com/" target="_blank" rel="external">去啊</a>的时候看到的，效果大概是这个样子：<br><img src="4.png" alt=""></p>
<p>看到之后觉得好神奇啊，原来还可以只有平行四边形的外轮廓。（因为方法一只能创造填充效果的平行四边形）实现起来非常简单，主要是借助了<code>transform: skew(...)</code>，下面就来看看源码吧。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">.city {</div><div class="line">  display: inline-block;</div><div class="line">  padding: 5px 20px;</div><div class="line">  border: 1px solid #44a5fc;</div><div class="line">  color: #333;</div><div class="line">  transform: skew(-20deg);</div><div class="line">}</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;div class="city"&gt;上海&lt;/div&gt;</div></pre></td></tr></table></figure>

<p>于是我们得到了这样的效果：<br><img src="5.png" alt=""><br>看到图片的你一定是这样想的：<br><img src="damn.gif" alt=""><br>别着急嘛，我们的确是把整个 div 进行了歪曲，导致中间的文字也是倾斜的，而这显然不是我们所要的效果。所以我们需要加一个内层元素，并对内层元素做一次逆向的歪曲，从而得到我们想要的效果：<br><img src="6.png" alt=""><br>实现代码如下，另附 <a href="http://codepen.io/jerryzou/pen/BNeNwV?editors=110" target="_blank" rel="external">CodePen 示例</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">.city {</div><div class="line">  display: inline-block;</div><div class="line">  padding: 5px 20px;</div><div class="line">  border: 1px solid #44a5fc;</div><div class="line">  color: #333;</div><div class="line">  transform: skew(-20deg);</div><div class="line">}</div><div class="line"></div><div class="line">.city div {</div><div class="line">  transform: skew(20deg);</div><div class="line">}</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;div class="city"&gt;</div><div class="line">  &lt;div&gt;上海&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>

<h2 id="总结">总结</h2>
<p>第一种方法使用 <code>border</code> 属性 hack 出三角形，并通过对三个元素进行拼接最终实现了平行四边形；而第二种方法则通过 <code>transform: skew</code> 来得到平行四边形。总体来说，第二种方法相对于第一种代码量小得多，而且也很好理解。唯一的不足是无法构造像本站的分页中所使用的梯形。希望本文对各位有所帮助。</p>
<h3 id="UPDATE">UPDATE</h3>
<ul>
<li><strong>2015.8.18</strong>, <a href="http://weibo.com/fouber" target="_blank" rel="external">@前端农民工</a> 给出了一个 <a href="https://css-tricks.com/examples/ShapesOfCSS/" target="_blank" rel="external">CSS-Tricks</a> 的链接，是关于各种用 CSS 绘制几何图形的方法，浅显易懂，推荐大家看看！</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://jerryzou.com/posts/use-css-to-paint-triangle-and-parallelogram/?utm_source=tuicool" target="_blank" rel="external">用 CSS 实现三角形与平行四边形</a>, 作者：<a href="mailto:jerry.zry@outlook.com" target="_blank" rel="external">邹润阳</a></p>
<p>最近在逛某个技术网站的时候，感觉文章关键词上的样式好酷炫啊。于是我将那种写法照搬到了我的博客中，也许最近逛过我博客的小伙伴已经发现了它出现在哪儿了——分页的样式。来张截图：<br><img src="1.png" alt=""><br>你在首页的底部也可以看到这样一个分页栏；是不是看上去还不错？下面就来看看这是如何实现的吧~<br>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://colobu.com/tags/CSS/"/>
    
      <category term="前端开发" scheme="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[编程语言的隐藏特性]]></title>
    <link href="http://colobu.com/2015/08/24/Hidden-Features-of-Programming-Languages/"/>
    <id>http://colobu.com/2015/08/24/Hidden-Features-of-Programming-Languages/</id>
    <published>2015-08-24T05:29:05.000Z</published>
    <updated>2015-08-24T06:14:44.076Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.stackoverflow.com/" target="_blank" rel="external">StackOverflow</a>有很多有趣的问答， 其中有一些问答汇集了很多人的智慧。 其中<a href="http://stackoverflow.com/search?q=Hidden+Features&amp;s=fef2f7b8-4b25-466e-8e47-a95fbcdc5e24" target="_blank" rel="external">Hidden features of系列</a>揭示了一些语言的隐藏特性，非常的有趣， 比如Java中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Set&lt;String&gt; fruits = <span class="keyword">new</span> HashSet&lt;String&gt;() { {</div><div class="line">	add(<span class="string">"苹果"</span>);</div><div class="line">	add(<span class="string">"香蕉"</span>);</div><div class="line">	add(<span class="string">"梨"</span>);</div><div class="line">	add(<span class="string">"芒果"</span>);</div><div class="line"> } };</div></pre></td></tr></table></figure>

<p>尽管这些问答很早(自08年开始)就开始收集整理了，但是很多的答案都出人意料，并且你在教科书中是不会看到这些技巧的。<br><a id="more"></a></p>
<p>以下列出了投票最高的一些语言和工具的隐藏特性。<br><a href="http://stackoverflow.com/questions/9033/hidden-features-of-c" target="_blank" rel="external">Hidden Features of C#? </a><br><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python" target="_blank" rel="external">Hidden features of Python </a><br><a href="http://stackoverflow.com/questions/15496/hidden-features-of-java" target="_blank" rel="external">Hidden Features of Java </a><br><a href="http://stackoverflow.com/questions/61088/hidden-features-of-javascript" target="_blank" rel="external">Hidden Features of JavaScript? </a><br><a href="http://stackoverflow.com/questions/63998/hidden-features-of-ruby" target="_blank" rel="external">Hidden features of Ruby </a><br><a href="http://stackoverflow.com/questions/1025181/hidden-features-of-scala" target="_blank" rel="external">Hidden features of Scala </a><br><a href="http://stackoverflow.com/questions/54929/hidden-features-of-asp-net" target="_blank" rel="external">Hidden Features of ASP.NET</a><br><a href="http://stackoverflow.com/questions/161872/hidden-features-of-perl" target="_blank" rel="external">Hidden features of Perl? </a><br><a href="http://stackoverflow.com/questions/132241/hidden-features-of-c" target="_blank" rel="external">Hidden features of C </a><br><a href="http://stackoverflow.com/questions/954327/hidden-features-of-html" target="_blank" rel="external">Hidden features of HTML </a><br><a href="http://stackoverflow.com/questions/954327/hidden-features-of-html" target="_blank" rel="external">Hidden Features of SQL Server </a><br><a href="http://stackoverflow.com/questions/75538/hidden-features-of-c" target="_blank" rel="external">Hidden Features of C++? </a><br><a href="http://stackoverflow.com/questions/211378/hidden-features-of-bash" target="_blank" rel="external">Hidden features of Bash </a><br><a href="http://stackoverflow.com/questions/1619133/hidden-features-of-android-development" target="_blank" rel="external">Hidden features of Android development? </a><br><a href="http://stackoverflow.com/questions/146297/hidden-features-of-xcode" target="_blank" rel="external">Hidden Features of Xcode </a><br><a href="http://stackoverflow.com/questions/954894/hidden-features-of-http" target="_blank" rel="external">Hidden features of HTTP </a><br><a href="http://stackoverflow.com/questions/303512/hidden-features-of-groovy" target="_blank" rel="external">Hidden features of Groovy? </a><br><a href="http://stackoverflow.com/questions/5410191/hidden-features-of-xcode-4" target="_blank" rel="external">Hidden Features of Xcode 4</a><br><a href="http://stackoverflow.com/questions/61401/hidden-features-of-php" target="_blank" rel="external">Hidden Features of PHP? </a><br><a href="http://stackoverflow.com/questions/2524025/hidden-features-intellij-idea" target="_blank" rel="external">Hidden Features IntelliJ IDEA </a><br><a href="http://stackoverflow.com/questions/628407/hidden-features-of-css" target="_blank" rel="external">Hidden features of CSS </a><br><a href="http://stackoverflow.com/questions/1063497/hidden-features-of-erlang" target="_blank" rel="external">Hidden Features of Erlang </a><br><a href="http://stackoverflow.com/questions/245395/hidden-features-of-windows-batch-files" target="_blank" rel="external">Hidden features of Windows batch files </a><br><a href="http://stackoverflow.com/questions/2493996/hidden-features-of-clojure" target="_blank" rel="external">Hidden features of Clojure </a><br><a href="http://stackoverflow.com/questions/368858/hidden-features-of-mysql" target="_blank" rel="external">Hidden Features of MySQL </a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.stackoverflow.com/" target="_blank" rel="external">StackOverflow</a>有很多有趣的问答， 其中有一些问答汇集了很多人的智慧。 其中<a href="http://stackoverflow.com/search?q=Hidden+Features&amp;s=fef2f7b8-4b25-466e-8e47-a95fbcdc5e24" target="_blank" rel="external">Hidden features of系列</a>揭示了一些语言的隐藏特性，非常的有趣， 比如Java中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Set&lt;String&gt; fruits = <span class="keyword">new</span> HashSet&lt;String&gt;() { {</div><div class="line">	add(<span class="string">"苹果"</span>);</div><div class="line">	add(<span class="string">"香蕉"</span>);</div><div class="line">	add(<span class="string">"梨"</span>);</div><div class="line">	add(<span class="string">"芒果"</span>);</div><div class="line"> } };</div></pre></td></tr></table></figure>

<p>尽管这些问答很早(自08年开始)就开始收集整理了，但是很多的答案都出人意料，并且你在教科书中是不会看到这些技巧的。<br>]]>
    
    </summary>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gradle多渠道打包 ]]></title>
    <link href="http://colobu.com/2015/08/24/assemble-android-application-for-multiple-channels/"/>
    <id>http://colobu.com/2015/08/24/assemble-android-application-for-multiple-channels/</id>
    <published>2015-08-24T00:48:44.000Z</published>
    <updated>2015-08-24T00:57:11.220Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="http://stormzhang.com/devtools/2015/01/15/android-studio-tutorial6/" target="_blank" rel="external">Android Studio系列教程六--Gradle多渠道打包 </a>,</p>
<blockquote>
<p>美团采用了另外一种hack的方式快速为多渠道打包： <a href="http://tech.meituan.com/mt-apk-packaging.html" target="_blank" rel="external">美团Android自动化之旅—生成渠道包</a>,在META-INF文件夹下添加不同的空文件。</p>
</blockquote>
<p>由于国内Android市场众多渠道，为了统计每个渠道的下载及其它数据统计，就需要我们针对每个渠道单独打包，如果让你打几十个市场的包岂不烦死了，不过有了Gradle，这再也不是事了。<br><a id="more"></a></p>
<h3 id="友盟多渠道打包">友盟多渠道打包</h3>
<p>废话不多说，以友盟统计为例，在AndroidManifest.xml里面会有这么一段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=<span class="string">"UMENG_CHANNEL"</span></div><div class="line">    android:value=<span class="string">"Channel_ID"</span> /&gt;</div></pre></td></tr></table></figure>

<p>里面的Channel_ID就是渠道标示。我们的目标就是在编译的时候这个值能够自动变化。</p>
<ul>
<li>第一步 在AndroidManifest.xml里配置PlaceHolder</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=<span class="string">"UMENG_CHANNEL"</span></div><div class="line">    android:value=<span class="string">"${UMENG_CHANNEL_VALUE}"</span> /&gt;</div></pre></td></tr></table></figure>

<ul>
<li>第二步 在build.gradle设置productFlavors</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="title">android</span> {  </div><div class="line">    <span class="title">productFlavors</span> {</div><div class="line">        <span class="title">xiaomi</span> {</div><div class="line">            <span class="title">manifestPlaceholders</span> = [UMENG_CHANNEL_VALUE: <span class="string">"xiaomi"</span>]</div><div class="line">        }</div><div class="line">        _360 {</div><div class="line">            <span class="title">manifestPlaceholders</span> = [UMENG_CHANNEL_VALUE: <span class="string">"_360"</span>]</div><div class="line">        }</div><div class="line">        baidu {</div><div class="line">            <span class="title">manifestPlaceholders</span> = [UMENG_CHANNEL_VALUE: <span class="string">"baidu"</span>]</div><div class="line">        }</div><div class="line">        wandoujia {</div><div class="line">            <span class="title">manifestPlaceholders</span> = [UMENG_CHANNEL_VALUE: <span class="string">"wandoujia"</span>]</div><div class="line">        }</div><div class="line">    }  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>或者批量修改</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">android {  </span></span></div><div class="line">    productFlavors {</div><div class="line">        xiaomi {}</div><div class="line">        _360 {}</div><div class="line">        baidu {}</div><div class="line">        wandoujia {}</div><div class="line">    }  </div><div class="line"></div><div class="line">    productFlavors.all { </div><div class="line">        flavor -&gt; flavor.manifestPlaceholders = [<span class="constant">UMENG_CHANNEL_VALUE</span><span class="symbol">:</span> name] </div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>很简单清晰有没有？直接执行 <em>./gradlew assembleRelease</em> ， 然后就可以静静的喝杯咖啡等待打包完成吧。</p>
<h3 id="assemble结合Build_Variants来创建task">assemble结合Build Variants来创建task</h3>
<p>上一篇博客介绍了 assemble 这个命令，会结合 Build Type 创建自己的task，如:</p>
<ul>
<li>./gradlew assembleDebug*<ul>
<li>./gradlew assembleRelease*</li>
</ul>
</li>
</ul>
<p>除此之外 assemble 还能和 Product Flavor 结合创建新的任务，其实 assemble 是和 Build Variants 一起结合使用的，而 Build Variants = Build Type + Product Flavor ， 举个例子大家就明白了：</p>
<p>如果我们想打包wandoujia渠道的release版本，执行如下命令就好了：</p>
<ul>
<li>./gradlew assembleWandoujiaRelease*</li>
</ul>
<p>如果我们只打wandoujia渠道版本，则：</p>
<ul>
<li>./gradlew assembleWandoujia*</li>
</ul>
<p>此命令会生成wandoujia渠道的Release和Debug版本</p>
<p>同理我想打全部Release版本：</p>
<ul>
<li>./gradlew assembleRelease*</li>
</ul>
<p>这条命令会把Product Flavor下的所有渠道的Release版本都打出来。</p>
<p>总之，assemble 命令创建task有如下用法：</p>
<ul>
<li><strong>assemble</strong>： 允许直接构建一个Variant版本，例如assembleFlavor1Debug。</li>
<li><strong>assemble</strong>： 允许构建指定Build Type的所有APK，例如assembleDebug将会构建Flavor1Debug和Flavor2Debug两个Variant版本。</li>
<li><strong>assemble</strong>： 允许构建指定flavor的所有APK，例如assembleFlavor1将会构建Flavor1Debug和Flavor1Release两个Variant版本。</li>
</ul>
<h3 id="完整的gradle脚本">完整的gradle脚本</h3>
<p>最后福利大放送，来一份我在项目中使用的完整的gradle文件配置：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line"><span class="keyword">def</span> releaseTime() {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date().format(<span class="string">"yyyy-MM-dd"</span>, TimeZone.getTimeZone(<span class="string">"UTC"</span>))</div><div class="line">}</div><div class="line"></div><div class="line">android {</div><div class="line">    compileSdkVersion <span class="number">21</span></div><div class="line">    buildToolsVersion <span class="string">'21.1.2'</span></div><div class="line"></div><div class="line">    defaultConfig {</div><div class="line">        applicationId <span class="string">"com.boohee.*"</span></div><div class="line">        minSdkVersion <span class="number">14</span></div><div class="line">        targetSdkVersion <span class="number">21</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">        </div><div class="line">        <span class="comment">// dex突破65535的限制</span></div><div class="line">        multiDexEnabled <span class="keyword">true</span></div><div class="line">        <span class="comment">// 默认是umeng的渠道</span></div><div class="line">        manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"umeng"</span>]</div><div class="line">    }</div><div class="line"></div><div class="line">    lintOptions {</div><div class="line">        abortOnError <span class="keyword">false</span></div><div class="line">    }</div><div class="line"></div><div class="line">    signingConfigs {</div><div class="line">        debug {</div><div class="line">            <span class="comment">// No debug config</span></div><div class="line">        }</div><div class="line"></div><div class="line">        release {</div><div class="line">            storeFile <span class="keyword">file</span>(<span class="string">"../yourapp.keystore"</span>)</div><div class="line">            storePassword <span class="string">"your password"</span></div><div class="line">            keyAlias <span class="string">"your alias"</span></div><div class="line">            keyPassword <span class="string">"your password"</span></div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    buildTypes {</div><div class="line">        debug {</div><div class="line">            <span class="comment">// 显示Log</span></div><div class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"true"</span></div><div class="line"></div><div class="line">            versionNameSuffix <span class="string">"-debug"</span></div><div class="line">            minifyEnabled <span class="keyword">false</span></div><div class="line">            zipAlignEnabled <span class="keyword">false</span></div><div class="line">            shrinkResources <span class="keyword">false</span></div><div class="line">            signingConfig signingConfigs.debug</div><div class="line">        }</div><div class="line"></div><div class="line">        release {</div><div class="line">            <span class="comment">// 不显示Log</span></div><div class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"false"</span></div><div class="line"></div><div class="line">            minifyEnabled <span class="keyword">true</span></div><div class="line">            zipAlignEnabled <span class="keyword">true</span></div><div class="line">            <span class="comment">// 移除无用的resource文件</span></div><div class="line">            shrinkResources <span class="keyword">true</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">            signingConfig signingConfigs.release</div><div class="line"></div><div class="line">            applicationVariants.all { variant -&gt;</div><div class="line">                variant.outputs.<span class="keyword">each</span> { output -&gt;</div><div class="line">                    <span class="keyword">def</span> outputFile = output.outputFile</div><div class="line">                    <span class="keyword">if</span> (outputFile != <span class="keyword">null</span> && outputFile.name.endsWith(<span class="string">'.apk'</span>)) {</div><div class="line">                    	<span class="comment">// 输出apk名称为boohee_v1.0_2015-01-15_wandoujia.apk</span></div><div class="line">                        <span class="keyword">def</span> fileName = <span class="string">"boohee_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"</span></div><div class="line">                        output.outputFile = <span class="keyword">new</span> <span class="keyword">File</span>(outputFile.parent, fileName)</div><div class="line">                    }</div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// 友盟多渠道打包</span></div><div class="line">    productFlavors {</div><div class="line">        wandoujia {}</div><div class="line">        _360 {}</div><div class="line">        baidu {}</div><div class="line">        xiaomi {}</div><div class="line">        tencent {}</div><div class="line">        taobao {}</div><div class="line">        ...</div><div class="line">    }</div><div class="line"></div><div class="line">    productFlavors.all { flavor -&gt;</div><div class="line">        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> {</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:support-v4:21.0.3'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.jakewharton:butterknife:6.0.0'</span></div><div class="line">    ...</div><div class="line">}</div></pre></td></tr></table></figure>

<p>大家有问题或疑问、建议欢迎博客留言，Android Studio的教程暂且到这里结束了，相信大家基本的都已会使用了，还有其他技巧与操作靠大家自己摸索了，之后有时间也会在博客上整理下一些Tips之类的，欢迎大家关注。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="http://stormzhang.com/devtools/2015/01/15/android-studio-tutorial6/" target="_blank" rel="external">Android Studio系列教程六--Gradle多渠道打包 </a>,</p>
<blockquote>
<p>美团采用了另外一种hack的方式快速为多渠道打包： <a href="http://tech.meituan.com/mt-apk-packaging.html" target="_blank" rel="external">美团Android自动化之旅—生成渠道包</a>,在META-INF文件夹下添加不同的空文件。</p>
</blockquote>
<p>由于国内Android市场众多渠道，为了统计每个渠道的下载及其它数据统计，就需要我们针对每个渠道单独打包，如果让你打几十个市场的包岂不烦死了，不过有了Gradle，这再也不是事了。<br>]]>
    
    </summary>
    
      <category term="Gradle" scheme="http://colobu.com/tags/Gradle/"/>
    
      <category term="Android" scheme="http://colobu.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Netty 5.0 中的新变化和注意点]]></title>
    <link href="http://colobu.com/2015/08/18/netty-new-and-noteworthy-in-5-0/"/>
    <id>http://colobu.com/2015/08/18/netty-new-and-noteworthy-in-5-0/</id>
    <published>2015-08-18T03:21:16.000Z</published>
    <updated>2015-08-18T07:13:04.366Z</updated>
    <content type="html"><![CDATA[<p>本文翻译自官方文档<a href="http://netty.io/wiki/new-and-noteworthy-in-5.0.html" target="_blank" rel="external">New and noteworthy in 5.0</a>.<br>本文带你了解Netty 5.0 的值得注意的改变和新特性,帮助你将应用程序迁移到最新的版本.</p>
<p>不像 3.x 和 4.0 之间的改变那么大, 5.0 并没有很大的改变，尽管它在设计的简化性上做了一些突破. 我们尽可能平滑地使4.x转换到5.0,但是如果在迁移的过程中有问题请让我们知道.</p>
<p>其它版本之间的改变和新特性文档请看：<br><a href="/2015/08/18/netty-new-and-noteworthy-in-4-1/">Netty 4.1中的新变化和注意点</a><br><a href="/2015/08/18/netty-new-and-noteworthy-in-4-0/">Netty 4.0中的新变化和注意点</a></p>
<a id="more"></a>
<h2 id="核心改变">核心改变</h2>
<h3 id="简化_handler_类型继承关系">简化 handler 类型继承关系</h3>
<p><code>ChannelInboundHandler</code> 和 <code>ChannelOutboundHandler</code> 被合并到 <a href="http://netty.io/5.0/api/io/netty/channel/ChannelHandler.html" target="_blank" rel="external">ChannelHandler</a>. 现在ChannelHandler拥有inbound 和 outbound handler 方法.</p>
<p><code>ChannelInboundHandlerAdapter</code>, <code>ChannelOutboundHandlerAdapter</code>, 和 <code>ChannelDuplexHandlerAdapter</code> 弃用了， 被 <code>ChannelHandlerAdapter</code> 取代.</p>
<p>因为现在你无法区分一个 handler是 inbound handler 或者 outbound handler, 所以<code>CombinedChannelDuplexHandler</code> 被 <code>ChannelHandlerAppender</code>取代.</p>
<p>想了解这个改变的更多信息，请看 <a href="https://github.com/netty/netty/pull/1999" target="_blank" rel="external">pull request #1999</a>.</p>
<h3 id="channelRead0()_→_messageReceived()">channelRead0() → messageReceived()</h3>
<p>我知道，这是一个<a href="https://github.com/netty/netty/issues/1590" target="_blank" rel="external">傻傻的错误</a>. 如果你正在使用<code>SimpleChannelInboundHandler</code>, 你不得不将<code>channelRead0()</code>重命名为<code>messageReceived()</code>.</p>
<h3 id="更灵活的线程模型">更灵活的线程模型</h3>
<p>在Netty 4.x中， 每个<code>EventLoop</code>和一个固定的线程紧密耦合， 这个线程会执行它注册的channel的所有的I/O事件，以及指派给它的任务.<br>在5.0中， 一个EventLoop不再直接使用线程，而是使用一个 <code>Executor</code>. 也就是， 它使用一个 <code>Executor</code> 对象作为构造函数的参数，以前是在一个无尽的循环中拉取I/O事件， 吸纳在是每次迭代的结果是一个task，将此task提交给<code>Executor</code>执行.<br>如果没有特别指定，<code>Executor</code>默认使用 <code>ForkJoinPool</code>. <code>ForkJoinPool</code>使用thread-local 队列. 也就是说, 从线程A中提交到<code>ForkJoinPool</code>到非常可能再由线程A执行. 这提供了EventLoop高层次的thread affinity.</p>
<p>而且，程序员也可以提供他们自己的<code>Executor</code> (也叫做 thread pool) 调度 <code>EventLoop</code>. 一个场景可以证明它有用：当 Netty用作大规模的软件系统中. 假定此系统已经使用一个线程池并发地执行它的任务. Netty 4.x简单的产生大量的线程，完全不顾它是一个大规模系统的一部分. 自Netty 5.0起, 开发者可以运行 Netty 和系统的其它部分在同一个线程池中， 通过应用更好的调度策略和较少的调度开支可以潜在地提高性能. 细节讨论可以参照 <a href="https://github.com/netty/netty/issues/2250" target="_blank" rel="external">GitHub issue 2250</a>.</p>
<p>应该提到的是，这个改变不会影响<code>ChannelHandlers</code>的方式. 在开发者看来，唯一改变的是不再保证同一个 <code>ChannelHandler</code> 会被同一个线程执行. 然而可以保证的是， 它不会同时被两个或者两个以上的线程执行.此外, Netty 会负责内存可见性的问题，所以不必担心线程安全性和 ChannelHandler的<code>volatile</code>变量.</p>
<p>这个改变的另一个影响就是 <code>NioEventLoop</code>, <code>NioEventLoopGroup</code>, <code>EpollEventLoop</code> 和 <code>EpollEventLoopGroup</code> 不再使用<code>ThreadFactory</code>作为构造函数的参数. 这些构造函数现在取而代之使用<code>Executor</code> 和 <code>ExecutorFactory</code>对象.</p>
<h3 id="更好的Channel-deregister(-)">更好的<code>Channel.deregister(...)</code></h3>
<p>Netty 4.0引入了<code>Channel.deregister(...)</code>, 5.0中它的行为被更新了以便符合Netty的线程模型.<br>现在可以保证在<code>ChannelHandler</code>中提交到<code>EventLoop</code>中的所有task在Channel取消注册(deregister)前都会被EventLoop执行<br>然而<code>Channel.deregister(...)</code>保留了非阻塞的操作，所以你不得不等待 返回的<code>ChannelFuture</code>成功后才能将它安全的注册到另一个<code>EventLoop</code>.</p>
<p>当调用<code>Channel.deregister(...)</code>后任何尝试在这个<code>ChannelHandler</code>中提交新的task (Runnable 或 Callable) 到会触发 <code>RejectedExecutionException</code>. 一旦这个 <code>Channel</code>注册到另外一个<code>EventLoop</code>, 一切归于正常.</p>
<p><code>ChannelHandler</code>通过 <code>EventLoop.schedule*(...)</code>方法提交的task当Channel取消注册后会停止执行, 当Channel再次注册时这些task会自动移到新的<code>EventLoop</code>中继续执行. 这个限制只会影响在Channel取消注册时被调度的task. 那么delay的或者定期执行的task不受影响.</p>
<p>你也可以突破这个限制，尽管不被推荐.  Netty 5.0 引入了一个新的方法 <code>EventLoop.unwrap()</code>, 它返回原始的<code>EventLoop</code>并不会执行一个健全的检查. 更准确的讲， 当提交task或者调度task到 &quot;unwrapped&quot; EventLoop时, 不会保证这些task会被并发执行，调度的task也不保证自动移到新的EventLoop.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文翻译自官方文档<a href="http://netty.io/wiki/new-and-noteworthy-in-5.0.html" target="_blank" rel="external">New and noteworthy in 5.0</a>.<br>本文带你了解Netty 5.0 的值得注意的改变和新特性,帮助你将应用程序迁移到最新的版本.</p>
<p>不像 3.x 和 4.0 之间的改变那么大, 5.0 并没有很大的改变，尽管它在设计的简化性上做了一些突破. 我们尽可能平滑地使4.x转换到5.0,但是如果在迁移的过程中有问题请让我们知道.</p>
<p>其它版本之间的改变和新特性文档请看：<br><a href="/2015/08/18/netty-new-and-noteworthy-in-4-1/">Netty 4.1中的新变化和注意点</a><br><a href="/2015/08/18/netty-new-and-noteworthy-in-4-0/">Netty 4.0中的新变化和注意点</a></p>
]]>
    
    </summary>
    
      <category term="Netty" scheme="http://colobu.com/tags/Netty/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Netty 4.1中的新变化和注意点]]></title>
    <link href="http://colobu.com/2015/08/18/netty-new-and-noteworthy-in-4-1/"/>
    <id>http://colobu.com/2015/08/18/netty-new-and-noteworthy-in-4-1/</id>
    <published>2015-08-18T01:34:06.000Z</published>
    <updated>2015-08-18T03:03:07.050Z</updated>
    <content type="html"><![CDATA[<p>本文翻译自官方文档<a href="http://netty.io/wiki/new-and-noteworthy-in-4.1.html" target="_blank" rel="external">New and noteworthy in 4.1</a>，</p>
<p>本文带你了解Netty 4.0到Netty 4.1的值得注意的改变和新特性.<br><a id="more"></a></p>
<h2 id="题外话">题外话</h2>
<p>尽管我们尽量保持向下兼容，4.1 还是有一些和4.0不完全兼容的地方. 请确保使用新的Netty版本重新编译你的应用.<br>当你重新编译你的应用时，你可以能看到一些弃用警告. 请依照修改建议来更正它们, 这样当你升级到新的版本时会遇到较少的麻烦.</p>
<h2 id="核心改变">核心改变</h2>
<h3 id="Android支持">Android支持</h3>
<p>考虑到:</p>
<ul>
<li>移动设备日益强大</li>
<li>自 Ice Cream Sandwich版本后ADK中大部分NIO 和 SSLEngine的问题都被修复</li>
<li>用户很想在移动应用中重用它们的编解码器和handler</li>
</ul>
<p>我们决定官方的支持 Android (4.0 及以上版本) .<br>然而，我们并没有一个为Android提供的测试套件. 如果你发现在Android使用的问题, 请提交一个 issue. 也请考虑贡献Android的测试代码作为整个构建过程的一部分.</p>
<h3 id="ChannelHandlerContext-attr(-)_==_Channel-attr(-)"><code>ChannelHandlerContext.attr(..) == Channel.attr(..)</code></h3>
<p><a href="http://netty.io/4.1/api/io/netty/channel/Channel.html" target="_blank" rel="external">Channel</a>和 <a href="http://netty.io/4.1/api/io/netty/channel/ChannelHandlerContext.html" target="_blank" rel="external">ChannelHandlerContext</a>实现了 <a href="http://netty.io/4.1/api/io/netty/util/AttributeMap.html" target="_blank" rel="external">AttributeMap</a>接口， 允许用户附加一个或者多个属性在它们上. 有时候用户迷惑的是[<a href="http://netty.io/4.1/api/io/netty/channel/Channel.html" target="_blank" rel="external">Channel</a>和 <a href="http://netty.io/4.1/api/io/netty/channel/ChannelHandlerContext.html" target="_blank" rel="external">ChannelHandlerContext</a>用户自己的属性存储. 例如，即使你通过<code>Channel.attr(KEY_X).set(valueX)</code>设置一个属性&#39;KEY_X&#39; , 你也不会通过<code>ChannelHandlerContext.attr(KEY_X).get()</code>得到这个属性， 相反亦然. 这种行为不仅让人迷惑，而且也浪费内存.</p>
<p>为了解决这个问题, 我们决定为每个Channel在内部只保留一个map. AttributeMap总是使用<a href="http://netty.io/4.1/api/io/netty/util/AttributeKey.html" target="_blank" rel="external">AttributeKey</a> 作为它的主键. AttributeKey确保主键的唯一性, 这样每个Channel不会有多余一个的attribute map. 由于用户会将他们自己的主键定义为 <a href="http://netty.io/4.1/api/io/netty/channel/ChannelHandler.html" target="_blank" rel="external">ChannelHandler</a>的private static final 字段 , 不会有重复的键值的担忧.</p>
<h3 id="Channel-hasAttr(-)"><code>Channel.hasAttr(...)</code></h3>
<p>现在我们可以有效地检查一个属性是否存在.</p>
<h3 id="更容易更精确的追踪buffer_leak">更容易更精确的追踪buffer leak</h3>
<p>先前， 找到buffer泄漏并不容易,泄漏警告不太有帮助. 现在我们有了一个先进的泄漏报告机制，当开销增加时会被启用。(We now have an advanced leak reporting mechanism which can be enabled at the cost of increased overhead.)</p>
<p>查看<a href="https://github.com/netty/netty/wiki/Reference-counted-objects" target="_blank" rel="external">Reference counted objects</a>得到更多信息 . 这个特性太重要了，所以也被增加回 4.0.14.</p>
<h3 id="PooledByteBufAllocator作为默认的buffer_allocator"><code>PooledByteBufAllocator</code>作为默认的buffer allocator</h3>
<p>在 4.x 中,  尽管有一些功能局限性， <code>UnpooledByteBufAllocator</code> 曾是默认的allocator. 现在 <code>PooledByteBufAllocator</code> 已经使用了很长一段时间了，而且我们有了先进的buffer泄漏追踪机制，是时候把它作为默认的buffer allocator了.</p>
<p>现在<code>PooledByteBufAllocator</code> 是默认的buffer allocator.</p>
<h3 id="全局唯一的_channel_ID">全局唯一的 channel ID</h3>
<p>每个Channel都有一个唯一的ID,依据一下信息产生：</p>
<ul>
<li>MAC 地址 (EUI-48 or EUI-64), </li>
<li>进程 ID,</li>
<li><code>System#currentTimeMillis()</code></li>
<li><code>System#nanoTime()</code></li>
<li>一个随机的 32-bit integer</li>
<li>一个顺序增加的32-bit integer.</li>
</ul>
<p>Channe ID可以通过 <code>Channel.id()</code>方法得到.</p>
<h3 id="更灵活的线程模型">更灵活的线程模型</h3>
<p>一个新的<a href="http://netty.io/4.1/api/io/netty/channel/ChannelHandlerInvoker.html" target="_blank" rel="external">ChannelHandlerInvoker</a> 加入， 允许用户对哪个线程处理handler方法有更多的控制<br>作为往<a href="http://netty.io/4.1/api/io/netty/channel/ChannelPipeline.html" target="_blank" rel="external">ChannelPipeline</a>中增加<a href="http://netty.io/4.1/api/io/netty/channel/ChannelHandler.html" target="_blank" rel="external">ChannelHandler</a>时指定<a href="http://netty.io/4.1/api/io/netty/util/concurrent/EventExecutor.html" target="_blank" rel="external">EventExecutor</a>的替代，指定一个定制的<code>ChannelHandlerInvoker</code>实现可以实现更多的控制.</p>
<p>想了解更多的信息,可以参考 <a href="https://github.com/netty/netty/commit/132af3a485015ff912bd567a47881814d2ce1828" target="_blank" rel="external">commit 132af3a</a>.</p>
<h3 id="EmbeddedChannel_可用性">EmbeddedChannel 可用性</h3>
<p><a href="http://netty.io/4.1/api/io/netty/channel/embedded/EmbeddedChannel.html" target="_blank" rel="external">EmbeddedChannel</a> 的<code>readInbound()</code> 和 <code>readOutbound()</code>  返回一个 特定类型的参数， 你不必将返回值在转型， 减少了单元测试代码的啰嗦.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">EmbeddedChannel ch = ...;</div><div class="line"></div><div class="line"><span class="comment">// BEFORE:</span></div><div class="line">FullHttpRequest req = (FullHttpRequest) ch.readInbound();</div><div class="line"></div><div class="line"><span class="comment">// AFTER:</span></div><div class="line">FullHttpRequest req = ch.readInbound();</div></pre></td></tr></table></figure>

<h3 id="能够使用Executor替换ThreadFactory">能够使用<code>Executor</code>替换<code>ThreadFactory</code></h3>
<p>一些应用要求用户运行他们的任务在一个指定的<code>Executor</code>. 而4.x在创建event loop时需要用户指定的是<code>ThreadFactory</code> ，现在已经用<code>Executor</code>替换了.</p>
<p>关于这个改变的更多信息，你可以查看 <a href="https://github.com/netty/netty/pull/1762" target="_blank" rel="external">pull request #1762</a>.</p>
<h3 id="更友好的类加载器_Class_loader_friendliness">更友好的类加载器 Class loader friendliness</h3>
<p>在容器环境中一些类型如<code>AttributeKey</code>对应用程序来说不是太友好，现在没有这个问题了.</p>
<h3 id="ByteBufAllocator-calculateNewCapacity()"><code>ByteBufAllocator.calculateNewCapacity()</code></h3>
<p>计算可扩展的<code>ByteBuf</code>容量的代码从<code>AbstractByteBuf</code>移到<code>ByteBufAllocator</code>, 因为<code>ByteBufAllocator</code>更方便的知道它管理的buffer的容量计算信息.</p>
<h2 id="新的编解码和handler">新的编解码和handler</h2>
<ul>
<li>Binary memcache protocol codec</li>
<li>Compression codecs<pre><code><span class="bullet">* </span>BZip2
<span class="bullet">* </span>FastLZ
<span class="bullet">* </span>LZ4
<span class="bullet">* </span>LZF
</code></pre></li>
<li>DNS protocol codec</li>
<li>HAProxy protocol codec</li>
<li>MQTT protocol codec</li>
<li>SPDY/3.1 support</li>
<li>STOMP codec</li>
<li>SOCKSx codec, 支持版本 4, 4a, 和 5; 查看 <code>socksx</code>包.</li>
<li><a href="http://netty.io/4.1/api/io/netty/handler/codec/xml/XmlFrameDecoder.html" target="_blank" rel="external">XmlFrameDecoder</a> 允许处理XML文档流.</li>
<li><a href="http://netty.io/4.1/api/io/netty/handler/codec/json/JsonObjectDecoder.html" target="_blank" rel="external">JsonObjectDecoder</a> 允许处理JSON对象流.</li>
<li>IP filtering handlers</li>
</ul>
<h2 id="其它编解码的改变">其它编解码的改变</h2>
<h3 id="AsciiString">AsciiString</h3>
<p><a href="http://netty.io/4.1/api/io/netty/handler/codec/AsciiString.html" target="_blank" rel="external">AsciiString</a>是一个新的<code>CharSequence</code>实现, 包含的字符只占1个字节. 当你处理US-ASCII 或者 ISO-8859-1 字符串时可以节省空间.</p>
<p>例如, HTTP 编解码器和STOMP编解码器使用<code>AsciiString</code>处理header name. 因为将<code>AsciiString</code>编码到<code>ByteBuf</code>中不会有类型转换的代价，比String类型有更好的性能.</p>
<h3 id="TextHeaders"><code>TextHeaders</code></h3>
<p><a href="http://netty.io/4.1/api/io/netty/handler/codec/TextHeaders.html" target="_blank" rel="external">TextHeaders</a> 提供了一个通用的数据结构，类似Http Header类型的字符串 <a href="http://en.wikipedia.org/wiki/Multimap" target="_blank" rel="external">mutimap</a>.  <code>HttpHeaders</code>也用<code>TextHeaders</code>重写.</p>
<h3 id="MessageAggregator"><code>MessageAggregator</code></h3>
<p><a href="http://netty.io/4.1/api/io/netty/handler/codec/MessageAggregator.html" target="_blank" rel="external">MessageAggregator</a> 为聚合多个小消息成一个大消息提供了通用的功能，就像<code>HttpObjectAggregator</code>实现的那样. <code>HttpObjectAggregator</code>使用<code>MessageAggregator</code>进行了重写.</p>
<h3 id="HttpObjectAggregator更好的处理超出尺寸的消息"><code>HttpObjectAggregator</code>更好的处理超出尺寸的消息</h3>
<p>在4.0中在客户端发送消息前没有办法拒绝一个超过指定大小的HTTP 消息，即使 <code>100-continue</code> header已经设置.<br>4.1中增加了一个可以override方法，叫做<code>handleOversizedMessage</code>， 因此用户可以执行他想要的任务. 默认条件下, 它会返回一个 &#39;413 Request Entity Too Large&#39; response, 然后关闭连接.</p>
<h3 id="ChunkedInput_和_ChunkedWriteHandler"><code>ChunkedInput</code> 和 <code>ChunkedWriteHandler</code></h3>
<p><code>ChunkedInput</code> 有两个新的方法; <code>progress()</code> 和 <code>length()</code> 返回数据传输的进度以及流的程度. <code>ChunkedWriteHandler</code>使用这个信息通知 <code>ChannelProgressiveFutureListener</code>.</p>
<h3 id="SnappyFramedEncoder_和_SnappyFramedDecoder"><code>SnappyFramedEncoder</code> 和 <code>SnappyFramedDecoder</code></h3>
<p>这两个类被改名为<code>SnappyFrameEncoder</code> and <code>SnappyFrameDecoder</code>. T老的类被标记为弃用， 实际上它们是新的类的子类.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文翻译自官方文档<a href="http://netty.io/wiki/new-and-noteworthy-in-4.1.html" target="_blank" rel="external">New and noteworthy in 4.1</a>，</p>
<p>本文带你了解Netty 4.0到Netty 4.1的值得注意的改变和新特性.<br>]]>
    
    </summary>
    
      <category term="Netty" scheme="http://colobu.com/tags/Netty/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Netty 4.0中的新变化和注意点]]></title>
    <link href="http://colobu.com/2015/08/17/netty-new-and-noteworthy-in-4-0/"/>
    <id>http://colobu.com/2015/08/17/netty-new-and-noteworthy-in-4-0/</id>
    <published>2015-08-17T06:27:15.000Z</published>
    <updated>2015-08-18T01:31:43.650Z</updated>
    <content type="html"><![CDATA[<p>本文翻译自官方文档<a href="http://netty.io/wiki/new-and-noteworthy-in-4.0.html" target="_blank" rel="external">New and noteworthy in 4.0</a>，</p>
<p>本文带你了解Netty 4.0的值得注意的改变和新特性，帮助你将应用程序从老的Netty迁移到最新的版本上。<br><a id="more"></a></p>
<h2 id="项目结构的改变">项目结构的改变</h2>
<p>Netty的包名从 <code>org.jboss.netty</code> 改成 <code>io.netty</code>， 因为 <a href="http://netty.io/news/2011/11/04/new-web-site.html" target="_blank" rel="external">我们不再是JBoss.org的一份子了</a>.<br>二进制的 JAR 文件被分成多个模块， 这样用户可以从类路径中排除不需要的特性.  当前的结构如下:</p>
<table>
<thead>
<tr>
<th>Artifact ID</th>
<th>Description                                       </th>
</tr>
</thead>
<tbody>
<tr>
<td><code>netty-parent</code></td>
<td>Maven parent POM</td>
</tr>
<tr>
<td><code>netty-common</code></td>
<td>Utility classes and logging facade</td>
</tr>
<tr>
<td><code>netty-buffer</code></td>
<td><code>ByteBuf</code> API that replaces <code>java.nio.ByteBuffer</code></td>
</tr>
<tr>
<td><code>netty-transport</code></td>
<td>Channel API and core transports</td>
</tr>
<tr>
<td><code>netty-transport-rxtx</code></td>
<td><a href="http://goo.gl/vTFBv" target="_blank" rel="external">Rxtx</a> transport</td>
</tr>
<tr>
<td><code>netty-transport-sctp</code></td>
<td><a href="http://goo.gl/oXxaU" target="_blank" rel="external">SCTP</a> transport</td>
</tr>
<tr>
<td><code>netty-transport-udt</code></td>
<td><a href="http://udt.sourceforge.net/" target="_blank" rel="external">UDT</a> transport</td>
</tr>
<tr>
<td><code>netty-handler</code></td>
<td>Useful <code>ChannelHandler</code> implementations</td>
</tr>
<tr>
<td><code>netty-codec</code></td>
<td>Codec framework that helps write an encoder and a decoder</td>
</tr>
<tr>
<td><code>netty-codec-http</code></td>
<td>Codecs related with HTTP, Web Sockets, SPDY, and RTSP</td>
</tr>
<tr>
<td><code>netty-codec-socks</code></td>
<td>Codecs related with SOCKS protocol</td>
</tr>
<tr>
<td><code>netty-all</code></td>
<td>All-in-one JAR that combines all artifacts above</td>
</tr>
<tr>
<td><code>netty-tarball</code></td>
<td>Tarball distribution</td>
</tr>
<tr>
<td><code>netty-example</code></td>
<td>Examples</td>
</tr>
<tr>
<td><code>netty-testsuite-*</code></td>
<td>A collection of integration tests</td>
</tr>
<tr>
<td><code>netty-microbench</code></td>
<td>Microbenchmarks</td>
</tr>
</tbody>
</table>
<p>现在所有的 artifacts (除了 <code>netty-all.jar</code>) 都实现了 OSGi bundle, 可以用在你的 OSGi 容器中.</p>
<h2 id="通用_API_的改变">通用 API 的改变</h2>
<ul>
<li>Netty中大部分的操作都支持链式方法，简化了操作</li>
<li>不能配置的getter 不再有<code>get-</code> 前缀. (例如 <code>Channel.getRemoteAddress()</code> → <code>Channel.remoteAddress()</code>)</li>
<li>布尔属性仍然保留 <code>is-</code> 前缀， 避免造成迷惑 (例如 &#39;empty&#39;  既是形容词也是动词, 所以 <code>empty()</code> 有两个意思)</li>
<li>4.0 CR4 和 4.0 CR5之间的 改变请参照 <a href="http://netty.io/news/2013/06/18/4-0-0-CR5.html" target="_blank" rel="external">Netty 4.0.0.CR5 released with new-new API</a></li>
</ul>
<h2 id="Buffer_API_的改变">Buffer API 的改变</h2>
<h3 id="ChannelBuffer_→_ByteBuf"><code>ChannelBuffer</code> → <code>ByteBuf</code></h3>
<p>由于上面提到的项目结构的改变, buffer API可以作为一个独立的包使用.  即使你对使用Netty作为网络应用框架不感兴趣，你也可以使用buffer API.<br>因此, 类型名<code>ChannelBuffer</code> 不再合适了， 所以改名为 <code>ByteBuf</code>.</p>
<p>用来创建新buffer的工具类 <code>ChannelBuffers</code>被分成了两个工具类： <code>Unpooled</code>  和 <code>ByteBufUtil</code>.  从名字<code>Unpooled</code>上也能猜出, 4.0引入了池化的 <code>ByteBuf</code>， 可以通过 <code>ByteBufAllocator</code><br>的具体实现来分配(allocated).</p>
<h3 id="ByteBuf_不是一个接口，而是一个抽象类class"><code>ByteBuf</code> 不是一个接口，而是一个抽象类class</h3>
<p>根据我们内部的性能测试，将<code>ByteBuf</code> 从接口改为抽象类可以给总吞吐量带来5%的提升.</p>
<h3 id="大部分的buffer变成了动态的，具有可配置的最大容量">大部分的buffer变成了动态的，具有可配置的最大容量</h3>
<p>在3.x, buffer可以是固定大小或者动态的，固定大小的buffer一旦创建容量就不能改变。 而动态buffer的容量在<code>write*(...)</code>方法需要更多空间时可以改变。<br>自4.0开始， 所有的buffer都是动态的。 然而，它们要比以前的动态buffer更好。你可以更容易更安全地增加或者减少buffer的容量。因为提供了新的方法 <code>ByteBuf.capacity(int newCapacity)</code>所以<br>改变容量更容易。之所以说它安全， 是因为你可以设置一个最大容量，这样buffer就不会不限制的增长.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// No more dynamicBuffer() - use buffer().</span></div><div class="line">ByteBuf buf = Unpooled.buffer();</div><div class="line"></div><div class="line"><span class="comment">// Increase the capacity of the buffer.</span></div><div class="line">buf.capacity(<span class="number">1024</span>);</div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">// Decrease the capacity of the buffer (the last 512 bytes are deleted.)</span></div><div class="line">buf.capacity(<span class="number">512</span>);</div></pre></td></tr></table></figure>

<p>唯一的例外是那些使用wrappedBuffer方法包装的(wrapped)一个单一的buffer或者一个单一字节数组。你不能增加它的容量， 因为这样会使包装一个已有buffer的目的(节省内存复制)失去意义。<br>如果你想改变这样的buffer的容量, 你应该使用你需要的容量创建一个新的buffer， 然后将原来包装的buffer中的数据复制到这个新的buffer中.</p>
<h3 id="新的buffer类型:_CompositeByteBuf">新的buffer类型: <code>CompositeByteBuf</code></h3>
<p>一个名叫<code>CompositeByteBuf</code> 的buffer实现为composite buffer实现定义了多个高级操作。用户可以使用composite buffer节省大量的内存复制，只比随机访问buffer的代价大一点。<br>为了创建一个新的composite buffer, 可以像以前一样使用<code>Unpooled.wrappedBuffer(...)</code> ,  也可以使用<code>Unpooled.compositeBuffer(...)</code>, 或者 <code>ByteBufAllocator.compositeBuffer()</code>.</p>
<h3 id="可预知的NIO_buffer转型">可预知的NIO buffer转型</h3>
<p>在3.x中， <code>ChannelBuffer.toByteBuffer()</code> 以及它的变体所提供的约定并不那么明确。用户无法确定这些方法会返回一个拥有共享数据的视图buffer还是一个拥有独立数据的通过复制得到的buffer(a view buffer with shared data or a copied buffer with separate data)。<br> 4.0 中使用 <code>ByteBuf.nioBufferCount()</code>, <code>nioBuffer()</code>, 和 <code>nioBuffers()</code>代替<code>toByteBuffer()</code>.  如果<code>nioBufferCount()</code> 返回 <code>0</code>, 用户总是可以通过<code>copy().nioBuffer()</code>得到一个复制buffer.</p>
<h3 id="对小端序(Little_endian)支持的改变">对小端序(Little endian)支持的改变</h3>
<p>小端序(Little endian)的支持做了很大的改变。先前用户为了得到小端序buffer,可以通过 <code>LittleEndianHeapChannelBufferFactory</code> 或者按指定的字节序包装一个已有的buffer:<br>4.0 中增加了一个新的方法: <code>ByteBuf.order(ByteOrder)</code>， 它返回当前buffer对象的一个具有指定字节序的视图：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</div><div class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</div><div class="line"><span class="keyword">import</span> java.nio.ByteOrder;</div><div class="line"> </div><div class="line">ByteBuf buf = Unpooled.buffer(<span class="number">4</span>);</div><div class="line">buf.setInt(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line"><span class="comment">// Prints '00000001'</span></div><div class="line">System.out.format(<span class="string">"%08x%n"</span>, buf.getInt(<span class="number">0</span>)); </div><div class="line"> </div><div class="line">ByteBuf leBuf = buf.order(ByteOrder.LITTLE_ENDIAN);</div><div class="line"><span class="comment">// Prints '01000000'</span></div><div class="line">System.out.format(<span class="string">"%08x%n"</span>, leBuf.getInt(<span class="number">0</span>));</div><div class="line"> </div><div class="line"><span class="keyword">assert</span> buf != leBuf;</div><div class="line"><span class="keyword">assert</span> buf == buf.order(ByteOrder.BIG_ENDIAN);</div></pre></td></tr></table></figure>

<h3 id="池化buffer_Pooled_buffers">池化buffer Pooled buffers</h3>
<p>Netty 4引入了一个高性能的buffer池， 它是 <a href="http://www.canonware.com/jemalloc/" target="_blank" rel="external">jemalloc</a> 的变种， 组合了 <a href="http://en.wikipedia.org/wiki/Buddy_memory_allocation" target="_blank" rel="external">buddy allocation</a> 和 <a href="http://en.wikipedia.org/wiki/Slab_allocation" target="_blank" rel="external">slab allocation</a>的功能.  有以下好处:<br>*减少了 GC 压力，因为使用unpooled buffer会带来频繁的内存分配和回收</p>
<ul>
<li>减少了内存的带宽消耗(memory bandwidth consumption) 因为新的内存不可避免地要用zero填充(初始化)</li>
<li>定时回收 direct buffers</li>
</ul>
<p>为了使用这个特性， 除非用户非要得到unpooled buffer, 他应该通过 <a href="http://netty.io/4.0/api/index.html?io/netty/buffer/AbstractByteBufAllocator.html" target="_blank" rel="external"><code>ByteBufAllocator</code></a>分配buffer:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Channel channel = ...;</div><div class="line">ByteBufAllocator alloc = channel.alloc();</div><div class="line">ByteBuf buf = alloc.buffer(<span class="number">512</span>);</div><div class="line">....</div><div class="line">channel.write(buf);</div><div class="line"> </div><div class="line">ChannelHandlerContext ctx = ...</div><div class="line">ByteBuf buf2 = ctx.alloc().buffer(<span class="number">512</span>);</div><div class="line">....</div><div class="line">channel.write(buf2)</div></pre></td></tr></table></figure>

<p>一旦<code>ByteBuf</code> 被写入到远程端， 它立即自动地放回原来的buffer池中.</p>
<p>默认的 <code>ByteBufAllocator</code> 是 <code>PooledByteBufAllocator</code>. 如果你不想使用buffer池， 抑或你想使用自己的allocator, 使用 <code>Channel.config().setAllocator(...)</code> 设置可选的allocator， 比如 <code>UnpooledByteBufAllocator</code>.</p>
<p>注意: 当我们使用的默认allocator 是 <code>UnpooledByteBufAllocator</code>时， 一旦我们确保<code>PooledByteBufAllocator</code>没有内存泄漏的问题, 我们应该将默认的allocator换回<code>PooledByteBufAllocator</code>.</p>
<h4 id="ByteBuf_总是使用引用计数(reference_counted)"><code>ByteBuf</code> 总是使用引用计数(reference counted)</h4>
<p>为了精确的控制<code>ByteBuf</code>生命周期，Netty不再依赖垃圾回收器，而是使用一个显示的引用计数器.  基本规则如下:</p>
<ul>
<li>当 buffer 首次分配时, 它的初始引用计数为 1.</li>
<li>当buffer的引用计数降为0时，它被回收或者放回原始的buffer池中.</li>
<li>下面的动作会触发<code>IllegalReferenceCountException</code>异常:<ul>
<li>访问引用计数为0的buffer,</li>
<li>将引用计数降少为负数,</li>
<li>或者将引用计数的值超过 <code>Integer.MAX_VALUE</code>.</li>
</ul>
</li>
<li>衍生的buffers (比如 slices 和 duplicates) 和 交换的buffers (比如 little endian buffers) 和原buffer共享同一个引用计数器. 注意，当一个衍生的buffer创建时它的引用计数器不会改变.</li>
</ul>
<p>当 <code>ByteBuf</code> 在 <code>ChannelPipeline</code>中使用时,你需要注意一些额外的规则:</p>
<ul>
<li>管道中的每个 inbound (a.k.a. upstream) handler 必须release接收到的消息. Netty不会自动release 它们.<ul>
<li>注意 codec 框架的确自动 release消息， 用户如果想传递一个as-is message给下一个handler, 就不得不增加引用计数器 .</li>
</ul>
</li>
<li>当outbound (a.k.a. downstream) message 到达了管道的开始位置时，Netty会在写完它后 release it.</li>
</ul>
<h4 id="自动_buffer泄漏检查">自动 buffer泄漏检查</h4>
<p>尽管引用计数很强大，但却容易出错。为了帮助用户找到他们忘记release buffer的地方, 泄漏检查器会自动地将那些泄漏buffer分配时的堆栈信息输出到日志中.</p>
<p>因为泄漏检查器(leak detector)依靠<code>PhantomReference</code> 并且获取堆栈信息是一个花费很大的操作， 它只会采样大约1%的分配.  因此，最好运行应用程序相当长的时间来找到所有可能的泄漏是一个好主意.</p>
<p>只要所有的泄漏否被发现和修改， 你就可以将这个特性关闭， 通过<code>-Dio.netty.noResourceLeakDetection</code> JVM 参数. （译者: jinfo可以运行时修改jvm参数，但是不是所有的参数都能被它修改）</p>
<h2 id="io-netty-util-concurrent"><code>io.netty.util.concurrent</code></h2>
<p>除了 buffer API, 4.0还提供了写异步应用程序的一些通用的类，它们被放入包 <code>io.netty.util.concurrent</code>.  一些类如:</p>
<ul>
<li><code>Future</code> 和 <code>Promise</code> - 类似<code>ChannelFuture</code>, 但是不依赖 <code>Channel</code></li>
<li><code>EventExecutor</code> 和 <code>EventExecutorGroup</code> - 通用的 event loop API</li>
</ul>
<p>它们是channel API基础，文章后面会有解释.  例如, <code>ChannelFuture</code> 扩展 <code>io.netty.util.concurrent.Future</code> 而 <code>EventLoopGroup</code> 扩展 <code>EventExecutorGroup</code>.</p>
<p><img src="1.png" alt="Event loop type hierarchy diagram"></p>
<h2 id="Channel_API_的改变">Channel API 的改变</h2>
<p>在4.0中, 很多 <code>io.netty.channel</code> 包下的类都经历了大的整理 所以简单的文本搜索-替换不会将老的Netty 3.x 应用轻松迁移到 4.0.<br>这一节将尽量介绍这么大的变化背后的考量，而不是罗列所有的变化.</p>
<h3 id="改组_ChannelHandler_接口">改组 ChannelHandler 接口</h3>
<h4 id="Upstream_→_Inbound,_Downstream_→_Outbound">Upstream → Inbound, Downstream → Outbound</h4>
<p>术语 &#39;upstream&#39; 和 &#39;downstream&#39; 对新人来讲很让人困惑。 4.0 使用 &#39;inbound&#39; 和 &#39;outbound&#39; .</p>
<h4 id="新的_ChannelHandler_类型继承关系">新的 <code>ChannelHandler</code>  类型继承关系</h4>
<p>在3.x 中, <code>ChannelHandler</code> 只是一个 tag interface, 而 <code>ChannelUpstreamHandler</code>, <code>ChannelDownstreamHandler</code>, 和 <code>LifeCycleAwareChannelHandler</code> 定义了实际的 handler 方法.<br>在Netty 4中, <code>ChannelHandler</code> 合并了 <code>LifeCycleAwareChannelHandler</code> 连同许多新方法， 它们对inbound 和 outbound handler 很有用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChannelHandler</span> </span>{</div><div class="line">    <span class="keyword">void</span> handlerAdded(ChannelHandlerContext ctx) <span class="keyword">throws</span> Exception;</div><div class="line">    <span class="keyword">void</span> handlerRemoved(ChannelHandlerContext ctx) <span class="keyword">throws</span> Exception;</div><div class="line">    <span class="keyword">void</span> exceptionCaught(ChannelHandlerContext ctx, Throwable cause) <span class="keyword">throws</span> Exception;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>下图描绘了新的类型继承关系:</p>
<p><img src="2.png" alt="ChannelHandler type hierarchy diagram"></p>
<h4 id="ChannelHandler_不需要_event_object"><code>ChannelHandler</code>  不需要 event object</h4>
<p>在3.x中, 每个 I/O 操作都会创建安一个 <code>ChannelEvent</code> 对象.  对于每一次 read / write, 它都额外的创建一个新的 <code>ChannelBuffer</code>.<br>它极大地简化了Netty的内部处理，因为它代理了JVM的资源管理和buffer池.<br>然而，这经常也是Netty应用程序在高负载的情况下GC压力大的原因.</p>
<p>4.0完全移除了event object， 取而代之的是强类型的方法调用.  3.x 包含处理所有事件的handler method如 <code>handleUpstream()</code> 和 <code>handleDownstream()</code>, 但Netty 4.0中 每个 event 类型都有它自己的handler method:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before:</span></div><div class="line"><span class="keyword">void</span> handleUpstream(ChannelHandlerContext ctx, ChannelEvent e);</div><div class="line"><span class="keyword">void</span> handleDownstream(ChannelHandlerContext ctx, ChannelEvent e);</div><div class="line"> </div><div class="line"><span class="comment">// After:</span></div><div class="line"><span class="keyword">void</span> channelRegistered(ChannelHandlerContext ctx);</div><div class="line"><span class="keyword">void</span> channelUnregistered(ChannelHandlerContext ctx);</div><div class="line"><span class="keyword">void</span> channelActive(ChannelHandlerContext ctx);</div><div class="line"><span class="keyword">void</span> channelInactive(ChannelHandlerContext ctx);</div><div class="line"><span class="keyword">void</span> channelRead(ChannelHandlerContext ctx, Object message);</div><div class="line"> </div><div class="line"><span class="keyword">void</span> bind(ChannelHandlerContext ctx, SocketAddress localAddress, ChannelPromise promise);</div><div class="line"><span class="keyword">void</span> connect(</div><div class="line">        ChannelHandlerContext ctx, SocketAddress remoteAddress,</div><div class="line">        SocketAddress localAddress, ChannelPromise promise);</div><div class="line"><span class="keyword">void</span> disconnect(ChannelHandlerContext ctx, ChannelPromise promise);</div><div class="line"><span class="keyword">void</span> close(ChannelHandlerContext ctx, ChannelPromise promise);</div><div class="line"><span class="keyword">void</span> deregister(ChannelHandlerContext ctx, ChannelPromise promise);</div><div class="line"><span class="keyword">void</span> write(ChannelHandlerContext ctx, Object message, ChannelPromise promise);</div><div class="line"><span class="keyword">void</span> flush(ChannelHandlerContext ctx);</div><div class="line"><span class="keyword">void</span> read(ChannelHandlerContext ctx);</div></pre></td></tr></table></figure>

<p><code>ChannelHandlerContext</code> 也根据上面改变而改变了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before:</span></div><div class="line">ctx.sendUpstream(evt);</div><div class="line"> </div><div class="line"><span class="comment">// After:</span></div><div class="line">ctx.fireChannelRead(receivedMessage);</div></pre></td></tr></table></figure>

<p>所有这些改变意味着用户无法扩展一个不存在的 <code>ChannelEvent</code> 接口了.  然而用户怎么定义他自己的事件类型呢，比如 <code>IdleStateEvent</code>?<br>4.0的<code>ChannelInboundHandler</code> 有一个 <code>userEventTriggered()</code> handler method,可以用来处理这样的需求.</p>
<h4 id="简化channel_状态模型">简化channel 状态模型</h4>
<p>在3.x中，当一个新的Channel被创建并连接成功，至少三个ChannelStateEvent会被触发：channelOpen、channelBound以及channelConnected.当一个Channel关闭时，也至少有三个事件会被触发：channelDisconnected、channelUnbound以及channelClosed.<br><img src="3.png" alt="Netty 3 Channel state diagram"></p>
<p>但是，触发这么多事件的意义并不那么大。更有用的是当一个Channel进入可读或可写的状态时通知用户。<br><img src="4.png" alt="Netty 4 Channel state diagram"></p>
<p><code>channelOpen</code>, <code>channelBound</code>, 和 <code>channelConnected</code> 被合并到 <code>channelActive</code>.  <code>channelDisconnected</code>, <code>channelUnbound</code>, 和 <code>channelClosed</code> 被合并到 <code>channelInactive</code>.<br>同样 <code>Channel.isBound()</code> 和 <code>isConnected()</code> 也被合并为<code>isActive()</code>.</p>
<p>需要注意的是，<code>channelRegistered</code> and <code>channelUnregistered</code> 这两个事件与<code>channelOpen</code> and <code>channelClosed</code>并不等价。它们是在支持<code>Channel</code>的动态注册、注销以及再注册时被引入的新的状态，就像下图所示：<br><img src="5.png" alt="Netty 4 Channel state diagram for re-registration"></p>
<h4 id="write()_不会自动_flush"><code>write()</code> 不会自动 flush</h4>
<p>4.0 引入了新的操作 <code>flush()</code> 它可以显示地将<code>Channel</code>输出缓存输出. <code>write()</code>操作并不会自动 flush.  你可以把它想象成<code>java.io.BufferedOutputStream</code>, 除了 它工作于消息级这一点.<br>由于这个改变, 你必须万分小心，写入数据后不要忘了调用 <code>ctx.flush()</code> .  当然你也可以使用一个更直接的方法 <code>writeAndFlush()</code>.</p>
<h3 id="可知的和不易出错的入站流量挂起(暂停读取)">可知的和不易出错的入站流量挂起(暂停读取)</h3>
<p>(Sensible and less error-prone inbound traffic suspension)<br>3.x有一个由<code>Channel.setReadable(boolean)</code>提供的不是很明显的入站流量挂起机制。它在ChannelHandler之间带来了复杂的交互操作，同时handler由于不正确实现很容易互相干扰。</p>
<p>4.0里，增加了一个新的名为<code>read()</code> 的outbound操作。如果你使用<code>Channel.config().setAutoRead(false)</code>来关闭默认的auto-read标志，Netty不会读入任何东西，直到你显式地调用read()操作.<br>一旦你启动的<code>read()</code> 操作完成，同时channel再次停止读，一个名为<code>channelReadSuspended()</code>的inbound事件会被触发， 这样你就能够重新启动另一次的<code>read()</code> 操作。你同样也可以拦截<code>read()</code> 操作来执行更多高级的流量控制。</p>
<h4 id="暂停接受新的的连接">暂停接受新的的连接</h4>
<p>Netty 3.0 中用户没有办法停止接受新的连接， 除非使用阻塞的I/O线程或者关闭server socket.  4.0中 当auto-read没有设置时 <code>read()</code> 操作就像一个原始的channel.</p>
<h3 id="半关闭的socket">半关闭的socket</h3>
<p>TCP和SCTP允许用户关闭一个socket的outbound流量而不用完全关闭它。这样的socket被称为&quot;半关闭的socket&quot;,用户能够通过调用<code>SocketChannel.shutdownOutput()</code>方法来获取一个半关闭socket。如果一个远端关闭了outbound流量，<code>SocketChannel.read(..)</code>会返回-1，这看上去并没有和一个关闭了的连接有什么区别。</p>
<p>3.x没有 <code>shutdownOutput()</code> 操作。它总是在 <code>SocketChannel.read(..)</code> 返回-1的时候关闭连接。为了支持半关闭socket，4.0增加了<code>SocketChannel.shutdownOutput()</code> 方法，同时用户能设置<code>ALLOW_HALF_CLOSURE</code>的<code>ChannelOption</code> 来阻止Netty在<code>SocketChannel.read(..)</code> 返回-1的时候自动关闭连接. </p>
<h3 id="灵活的I/O线程分配">灵活的I/O线程分配</h3>
<p>在3.x里，一个 <code>Channel</code> 是由ChannelFactory创建的，同时新建的 <code>Channel</code> 会自动注册到一个隐藏的I/O线程。4.0使用新的名为 <code>EventLoopGroup</code> 的接口来替换<code>ChannelFactory</code> ，<code>EventLoopGroup</code>包含一个或多个<code>EventLoop</code>。一个新的<code>Channel</code> 也不会自动注册到<code>EventLoopGroup</code>，但用户可以显式调用<code>EventLoopGroup.register()</code> 来注册。</p>
<p>由于这个改变（例如，分离了<code>ChannelFactory</code>和I/O线程），用户可以注册不同的 <code>Channel</code>实现到同一个<code>EventLoopGroup</code>，或者同一个 <code>Channel</code>实现到不同的<code>EventLoopGroup</code>。<br>例如，你可以运行一个NIO server socket，NIO client socket，NIO UDP socket，以及虚拟机内的本地通道在同一个I/O线程里。在编写一个需要最小延迟的代理服务器时这确实很有用。 </p>
<h3 id="能够从一个已存在的jdk套接字上创建一个Channel">能够从一个已存在的jdk套接字上创建一个Channel</h3>
<p>3.x没有方法从已存在的jdk套接字（如<code>java.nio.channels.SocketChannel</code>. ）创建一个新的channel。4.0可以。 </p>
<h3 id="取消注册和重新注册一个Channel从/到一个I/O线程">取消注册和重新注册一个Channel从/到一个I/O线程</h3>
<p>3.x中一旦一个新的Channel被创建，它就完全绑定到一个单一的I/O线程上，直到它底层的socket关闭。在4.0中，用户能够从I/O线程里取消注册一个Channel来完全控制它底层jdk套接字。例如，你能够利用Netty提供的高层次非阻塞I/O的优势来解决复杂的协议，然后取消注册<code>Channel</code> 并且切换到阻塞模式来在可能的最大吞吐量下传输一个文件。当然，它能够再次注册已经取消了注册的<code>Channel</code> 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">java.nio.channels.FileChannel myFile = ...;</div><div class="line">java.nio.channels.SocketChannel mySocket = java.nio.channels.SocketChannel.open();</div><div class="line"> </div><div class="line"><span class="comment">// Perform some blocking operation here.</span></div><div class="line">...</div><div class="line"> </div><div class="line"><span class="comment">// Netty takes over.</span></div><div class="line">SocketChannel ch = <span class="keyword">new</span> NioSocketChannel(mySocket);</div><div class="line">EventLoopGroup group = ...;</div><div class="line">group.register(ch);</div><div class="line">...</div><div class="line"> </div><div class="line"><span class="comment">// Deregister from Netty.</span></div><div class="line">ch.deregister().sync();</div><div class="line"> </div><div class="line"><span class="comment">// Perform some blocking operation here.</span></div><div class="line">mySocket.configureBlocking(<span class="keyword">true</span>);</div><div class="line">myFile.transferFrom(mySocket, ...);</div><div class="line"> </div><div class="line"><span class="comment">// Register back again to another event loop group.</span></div><div class="line">EventLoopGroup anotherGroup = ...;</div><div class="line">anotherGroup.register(ch);</div></pre></td></tr></table></figure>

<h3 id="调度任意的任务到I/O线程里运行">调度任意的任务到I/O线程里运行</h3>
<p>当一个<code>Channel</code>被注册到<code>EventLoopGroup</code>时，<code>Channel</code>实际上是注册到一个由<code>EventLoopGroup</code>管理 <code>EventLoop</code>中。<code>EventLoop</code>实现了 <code>java.util.concurrent.ScheduledExecutorService</code>接口。这意味着用户可以在一个用户channel归属的I/O线程里运行或调度一个任意的Runnable或Callable。使用良好设计的线程模型（稍后会介绍），编写一个线程安全的handler变得极其容易地。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">ChannelOutboundHandlerAdapter</span> </span>{</div><div class="line">    ...</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span>(ChannelHandlerContext ctx, Object msg, ChannelPromise p) {</div><div class="line">        ...</div><div class="line">        ctx.write(msg, p);</div><div class="line">        </div><div class="line">        <span class="comment">// Schedule a write timeout.</span></div><div class="line">        ctx.executor().schedule(<span class="keyword">new</span> MyWriteTimeoutTask(p), <span class="number">30</span>, TimeUnit.SECONDS);</div><div class="line">        ...</div><div class="line">    }</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> Exception {</div><div class="line">        <span class="comment">// Run an arbitrary task from an I/O thread.</span></div><div class="line">        Channel ch = ...;</div><div class="line">        ch.executor().execute(<span class="keyword">new</span> Runnable() { ... });</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="简化shutdown">简化shutdown</h3>
<p><code>releaseExternalResources()</code>不再使用。你可以通过调用<code>EventLoopGroup.shutdownGracefully()</code>关闭所有打开的channel同时使所有I/O线程停止.</p>
<h3 id="类型安全的ChannelOption">类型安全的<code>ChannelOption</code></h3>
<p>有两种方法来配置Netty的<code>Channel</code>的socket参数。一种是明确地调用ChannelConfig的setter，例如<code>SocketChannelConfig.setTcpNoDelay(true)</code>.。这是最为类型安全的方法。另外一种是调用 <code>ChannelConfig.setOption()</code> 方法。有时候你不得不在运行时的时候socket决定要配置什么选项，这个方法就特别适合这样的情况。然而，在3.x里它是容易出错的，因为一个用户必需用一个字符串/对象对来指定选项。如果用户调用了错误的选项名或者值，他或她将会遇到一个<code>ClassCastException</code> 异常或指定的选项甚至可能会默默地忽视了。</p>
<p>4.0引入了名为<code>ChannelOption</code>的新的类型，它提供了类型安全地访问socket选项。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ChannelConfig cfg = ...;</div><div class="line"> </div><div class="line"><span class="comment">// Before:</span></div><div class="line">cfg.setOption(<span class="string">"tcpNoDelay"</span>, <span class="keyword">true</span>);</div><div class="line">cfg.setOption(<span class="string">"tcpNoDelay"</span>, <span class="number">0</span>);  <span class="comment">// Runtime ClassCastException</span></div><div class="line">cfg.setOption(<span class="string">"tcpNoDelays"</span>, <span class="keyword">true</span>); <span class="comment">// Typo in the option name - ignored silently</span></div><div class="line"> </div><div class="line"><span class="comment">// After:</span></div><div class="line">cfg.setOption(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>);</div><div class="line">cfg.setOption(ChannelOption.TCP_NODELAY, <span class="number">0</span>); <span class="comment">// Compile error</span></div></pre></td></tr></table></figure>

<h3 id="AttributeMap">AttributeMap</h3>
<p>在处理用户指令里，你可以附加任意的对象到<code>Channel</code>和<code>ChannelHandlerContext</code>。一个名为<code>AttributeMap</code>的新接口被加入了，它被<code>Channel</code>和<code>ChannelHandlerContext</code>继承。相反，<code>ChannelLocal</code>和<code>Channel.attachment</code>被移除。这些属性会在他们关联的<code>Channel</code> 垃圾回收的同时回收。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>{</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AttributeKey&lt;MyState&gt; STATE =</div><div class="line">            AttributeKey.valueOf(<span class="string">"MyHandler.state"</span>);</div><div class="line"> </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRegistered</span>(ChannelHandlerContext ctx) {</div><div class="line">        ctx.attr(STATE).set(<span class="keyword">new</span> MyState());</div><div class="line">        ctx.fireChannelRegistered();</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span>(ChannelHandlerContext ctx, Object msg) {</div><div class="line">        MyState state = ctx.attr(STATE).get();</div><div class="line">    }</div><div class="line">    ...</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="新的_bootstrap_API">新的 bootstrap API</h3>
<p>bootstrap API已经被重写，尽管它的目的还是一样；它执行需要配置和运行服务器或客户端程序的典型步骤，通常能在样板代码里找到。<br>新的bootstrap同样采取了流式接口(fluent interface)。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> Exception {</div><div class="line">    <span class="comment">// Configure the server.</span></div><div class="line">    EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">    EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">        ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</div><div class="line">        b.group(bossGroup, workerGroup)</div><div class="line">         .channel(NioServerSocketChannel.class)</div><div class="line">         .option(ChannelOption.SO_BACKLOG, <span class="number">100</span>)</div><div class="line">         .localAddress(<span class="number">8080</span>)</div><div class="line">         .childOption(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</div><div class="line">         .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() {</div><div class="line">             <span class="annotation">@Override</span></div><div class="line">             <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span>(SocketChannel ch) <span class="keyword">throws</span> Exception {</div><div class="line">                 ch.pipeline().addLast(handler1, handler2, ...);</div><div class="line">             }</div><div class="line">         });</div><div class="line"> </div><div class="line">        <span class="comment">// Start the server.</span></div><div class="line">        ChannelFuture f = b.bind().sync();</div><div class="line"> </div><div class="line">        <span class="comment">// Wait until the server socket is closed.</span></div><div class="line">        f.channel().closeFuture().sync();</div><div class="line">    } <span class="keyword">finally</span> {</div><div class="line">        <span class="comment">// Shut down all event loops to terminate all threads.</span></div><div class="line">        bossGroup.shutdownGracefully();</div><div class="line">        workerGroup.shutdownGracefully();</div><div class="line">        </div><div class="line">        <span class="comment">// Wait until all threads are terminated.</span></div><div class="line">        bossGroup.terminationFuture().sync();</div><div class="line">        workerGroup.terminationFuture().sync();</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="ChannelPipelineFactory_→_ChannelInitializer"><code>ChannelPipelineFactory</code> → <code>ChannelInitializer</code></h4>
<p> 就像你在在上面的例子注意到的一样，<code>ChannelPipelineFactory</code> 不再存在了。而是由 <code>ChannelInitializer</code>来替换，它给予了<code>Channel</code> 和 <code>ChannelPipeline</code> 配置的更多控制。</p>
<p>请注意，你不能自己创建一个新的<code>ChannelPipeline</code>。通过观察目前为止的用例报告，Netty团队得到一个结论，让用户去创建自己的管道实现或者是继承默认的实现是没有好处的。因此，<code>ChannelPipeline</code> 不再让用户创建。<code>ChannelPipeline</code> 由 <code>Channel</code>自动创建。 </p>
<h3 id="ChannelFuture_→_ChannelFuture_和_ChannelPromise"><code>ChannelFuture</code> → <code>ChannelFuture</code> 和 <code>ChannelPromise</code></h3>
<p><code>ChannelFuture</code>已经被拆分为<code>ChannelFuture</code>和<code>ChannelPromise</code>。这不仅仅是让异步操作里的生产者和消费者间的约定更明显，同样也是得在使用从链中(如filtering)返回的<code>ChannelFuture</code>更加安全，因为<code>ChannelFuture</code>的状态是不能改变的。</p>
<p>由于这个改变，一些方法现在都采用<code>ChannelPromise</code> 而不是<code>ChannelFuture</code> 来改变它的状态。 </p>
<h2 id="良好定义的线程模型">良好定义的线程模型</h2>
<p>3.x中没有很好定义线程模型， 尽管3.5尝试修改它的不一致性。<br>4.0定义了一个严格的线程模型，可以帮助用户编写ChannelHandler， 而用户不必太担心线程安全.</p>
<ul>
<li>Netty 绝不会并发地调用 <code>ChannelHandler</code>&#39;的方法, 除非 <code>ChannelHandler</code> 被标记为 <code>@Sharable</code>. 这与handler方法的类型无关 - inbound, outbound,  life cycle event handler method.<ul>
<li>用户不必同步inbound or outbound event handler方法.</li>
<li>4.0 不允许增加 <code>ChannelHandler</code> 多次， 除非它被标记为 <code>@Sharable</code>.</li>
</ul>
</li>
<li>Netty 调用的<code>ChannelHandler</code>之间总是遵循 <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/package-summary.html#MemoryVisibility" target="_blank" rel="external">happens-before</a> .<ul>
<li>用户不必定义<code>volatile</code>字段来保存 handler 的状态.</li>
</ul>
</li>
<li>用户往<code>ChannelPipeline</code>中增加handler时可以指定 <code>EventExecutor</code>.<ul>
<li>如果指定了一个<code>EventExecutor</code>, <code>ChannelHandler</code>的handler方法总是被这个指定的 <code>EventExecutor</code>执行.</li>
<li>如果没有指定, handler 方法总是被它的<code>Channel</code>注册的 <code>EventLoop</code> 执行.</li>
</ul>
</li>
<li>指派给handler或者channle的<code>EventExecutor</code> 和 <code>EventLoop</code> 总是单线程的.<ul>
<li>handler 方法总是被同一个线程调用.</li>
<li>如果使用多线程的<code>EventExecutor</code> 或 <code>EventLoop</code>, 首先会选择其中一个线程， 然后一直使用这个线程，直到取消注册（deregistration）.</li>
<li>如果在同意管道pipeline中的两个handler 被指派给不同的 <code>EventExecutor</code>, 它们可以被并发地调用.  如果它们访问共享数据， 用户必须小心线程安全 .</li>
</ul>
</li>
<li>增加到<code>ChannelFuture</code> 的<code>ChannelFutureListeners</code> 总是此<code>Channel</code>相关的<code>EventLoop</code> 执行.</li>
</ul>
<h3 id="没有_ExecutionHandler_了_-_它被放入核心代码中-">没有 <code>ExecutionHandler</code> 了 - 它被放入核心代码中.</h3>
<p>在你往<code>ChannelPipeline</code>增加<code>ChannelHandler</code> 时你可以指定一个<code>EventExecutor</code>, 这样管道总是使用这个<code>EventExecutor</code>来调用这个新增加的 <code>ChannelHandler</code>的handler方法.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Channel ch = ...;</div><div class="line">ChannelPipeline p = ch.pipeline();</div><div class="line">EventExecutor e1 = <span class="keyword">new</span> DefaultEventExecutor(<span class="number">16</span>);</div><div class="line">EventExecutor e2 = <span class="keyword">new</span> DefaultEventExecutor(<span class="number">8</span>);</div><div class="line"> </div><div class="line">p.addLast(<span class="keyword">new</span> MyProtocolCodec());</div><div class="line">p.addLast(e1, <span class="keyword">new</span> MyDatabaseAccessingHandler());</div><div class="line">p.addLast(e2, <span class="keyword">new</span> MyHardDiskAccessingHandler());</div></pre></td></tr></table></figure>

<h2 id="编解码框架的改变">编解码框架的改变</h2>
<p>编码解码器框架里有实质性的内部改变, 因为4.0需要一个handler来创建和管理它的buffer（看这篇文章的 Per-handler buffer章节）然而，从用户角度来看这些变化并不大。 </p>
<ul>
<li>核心编解码类移入到 <code>io.netty.handler.codec</code> 包下.</li>
<li><code>FrameDecoder</code> 被重新命名为 <code>ByteToMessageDecoder</code>.</li>
<li><code>OneToOneEncoder</code> 和 <code>OneToOneDecoder</code> 被<code>MessageToMessageEncoder</code> 和 <code>MessageToMessageDecoder</code> 取代.</li>
<li><code>decode()</code>, <code>decodeLast()</code>, <code>encode()</code> 的方法签名有些许改变以便支持泛型， 也移除了一些冗余的参数.</li>
</ul>
<h3 id="Codec_embedder_→_EmbeddedChannel">Codec embedder → <code>EmbeddedChannel</code></h3>
<p>Codec embedder 被 <code>io.netty.channel.embedded.EmbeddedChannel</code> 取代， 允许用户对任何包含编码解码器的管道进行测试.</p>
<h3 id="HTTP_codec">HTTP codec</h3>
<p>HTTP 解码器现在对每个HTTP消息中总是生成多个消息对象：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1       <span class="keyword">*</span> HttpRequest / HttpResponse</div><div class="line">0 - n   <span class="keyword">*</span> HttpContent</div><div class="line">1       <span class="keyword">*</span> LastHttpContent</div></pre></td></tr></table></figure>

<p>如果想了解更多的细节, 请参考最新的 <code>HttpSnoopServer</code> 例子.  如果你不想为每个HTTP消息生成多个消息, 你可以将一个 <code>HttpObjectAggregator</code> 加入到管道中.  <code>HttpObjectAggregator</code> 总是将多个消息转换成一个单一的<code>FullHttpRequest</code> 或者 <code>FullHttpResponse</code>.</p>
<h3 id="transport_实现的改变">transport 实现的改变</h3>
<p>新加了下面的 transports ：</p>
<ul>
<li>OIO SCTP transport</li>
<li>UDT transport</li>
</ul>
<h2 id="用例学习：迁移阶乘（Factorial）的例子">用例学习：迁移阶乘（Factorial）的例子</h2>
<p>这部分粗略地展示把阶乘例子从3.0迁移到4.0的步骤。阶乘例子已经移植到4.0了，它被放在io.netty.example.factorial包里。请浏览示例的源代码来看下每一处的变化。 </p>
<h3 id="迁移服务端">迁移服务端</h3>
<ol>
<li>使用新的bootstrap API重写 <code>FactorialServer.run()</code> 方法.<ol>
<li>不再使用 <code>ChannelFactory</code> .  初始化一个 <code>NioEventLoopGroup</code> (一个用来接受连接，其它的用来处理接受后的连接.</li>
</ol>
</li>
<li>重命名 <code>FactorialServerPipelineFactory</code> 为 <code>FactorialServerInitializer</code>.<ol>
<li>让它扩展 <code>ChannelInitializer&lt;Channel&gt;</code>.</li>
<li>不创建一个 <code>ChannelPipeline</code>, 而是通过 <code>Channel.pipeline()</code>得到它.</li>
</ol>
</li>
<li>让 <code>FactorialServerHandler</code> 扩展 <code>ChannelInboundHandlerAdapter</code>.<ol>
<li>用<code>channelInactive()</code>替换 <code>channelDisconnected()</code> .</li>
<li>不再使用handleUpstream().</li>
<li>将 <code>messageReceived()</code> 命名为 <code>channelRead()</code>， 并相应的调整方法签名.</li>
<li>用 <code>ctx.writeAndFlush()</code>替换 <code>ctx.write()</code> .</li>
</ol>
</li>
<li>让 <code>BigIntegerDecoder</code> 扩展 <code>ByteToMessageDecoder&lt;BigInteger&gt;</code>.</li>
<li>让 <code>NumberEncoder</code> 扩展 <code>MessageToByteEncoder&lt;Number&gt;</code>.<ol>
<li><code>encode()</code> 不再返回一个buffer.  由<code>ByteToMessageDecoder</code>负责将编码的数据填入到buffer中.</li>
</ol>
</li>
</ol>
<h3 id="迁移客户端">迁移客户端</h3>
<p>大部分和移植服务端差不多，但在编写一个潜在的大数据流时要注意。 </p>
<ol>
<li>使用新的 bootstrap API 重写 <code>FactorialClient.run()</code> 方法.</li>
<li>将 <code>FactorialClientPipelineFactory</code>  重命名为 <code>FactorialClientInitializer</code>.</li>
<li>让 <code>FactorialClientHandler</code> 扩展 <code>ChannelInboundHandlerAdapter</code></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文翻译自官方文档<a href="http://netty.io/wiki/new-and-noteworthy-in-4.0.html" target="_blank" rel="external">New and noteworthy in 4.0</a>，</p>
<p>本文带你了解Netty 4.0的值得注意的改变和新特性，帮助你将应用程序从老的Netty迁移到最新的版本上。<br>]]>
    
    </summary>
    
      <category term="Netty" scheme="http://colobu.com/tags/Netty/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
</feed>
