<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[鸟窝]]></title>
  <subtitle><![CDATA[大道至简 Simplicity is the ultimate form of sophistication]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://colobu.com/"/>
  <updated>2015-08-17T02:59:02.273Z</updated>
  <id>http://colobu.com/</id>
  
  <author>
    <name><![CDATA[smallnest]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[雪球在股市风暴下的高可用架构改造分享]]></title>
    <link href="http://colobu.com/2015/08/17/snowball-arch/"/>
    <id>http://colobu.com/2015/08/17/snowball-arch/</id>
    <published>2015-08-17T02:30:27.000Z</published>
    <updated>2015-08-17T02:58:53.185Z</updated>
    <content type="html"><![CDATA[<p>本文根据唐福林老师在“高可用架构”微信群所做的《股市风暴下的雪球架构改造经验分享》整理而成，转发请注明来自微信公众号ArchNotes。</p>
<blockquote>
<p>唐福林，雪球首席架构师，负责雪球业务快速增长应对及服务性能与稳定架构优化工作。毕业于北京师范大学，硕士学位。之前曾任微博平台资深架构师，微博技术委员会成员。长期关注并从事互联网服务后端性能及稳定性架构优化工作。<br><a id="more"></a></p>
</blockquote>
<h2 id="雪球公司介绍">雪球公司介绍</h2>
<p>雪球 聪明的投资者都在这里。</p>
<ul>
<li>web 1.0：新闻资讯，股价信息，K线图</li>
<li>web 2.0：SNS 订阅，分享，聊天</li>
<li>web 3.0：移动 APP，交易闭环</li>
</ul>
<p>雪球现在员工数还不到<strong>100</strong>，其中技术人员占一半。去年9月C轮融资<strong>4kw刀</strong>。我们现在的技术栈由下列组件组成：<strong>Java，Scala，Akka，Finagle，Nodejs，Docker ，Hadoop</strong>。我们当前是租用IDC机房自建私有云，正在往“公私混合云”方向发展。<br>在雪球上，用户可以获取沪深港美2w+股票的新闻信息，股价变化情况，也可以获取债券，期货，基金，比特币，信托，理财，私募等等理财产品的各类信息，也可以关注雪球用户建立的百万组合，订阅它们的实时调仓信息，还可以关注雪球大V。雪球当前有百万日活跃用户，每天有4亿的API调用。App Store 财务免费榜第 18 名。历史上曾排到财务第二，总免费榜第 19。</p>
<h2 id="雪球当前总体架构">雪球当前总体架构</h2>
<p><img src="1.jpg" alt="雪球公司技术架构"><br>作为一个典型的移动互联网创业公司，雪球的总体架构也是非常典型的设计：</p>
<ul>
<li>最上层是三个端：web端，android端和iOS端。流量比例大约为 2：4：4 。web3.0 的交易功能，在 web 端并不提供。</li>
<li>接入层以及下面的几个层，都在我们的自建机房内部。雪球当前只部署了一个机房，还属于单机房时代。正在进行“私有云+公有云混合部署”方案推进过程中。</li>
<li>我们当前使用 nodejs 作为 web 端模板引擎。nodejs 模块与android 和 ios 的 app 模块一起属于大前端团队负责。</li>
<li>再往下是位于 nginx 后面的 api 模块。跟 linkedin 的 leo 和微博的 v4 一样，雪球也有一个遗留的大一统系统，名字就叫 snowball 。最初，所有的逻辑都在 snowball 中实现的。后来慢慢的拆出去了很多 rpc 服务，再后来慢慢的拆出去了一些 http api 做成了独立业务，但即便如此，snowball 仍然是雪球系统中最大的一个部署单元。</li>
<li>在需要性能的地方，我们使用 netty 搭建了一些独立的接口，比如 quoto server，是用来提供开盘期间每秒一次的股价查询服务，单机 qps 5w+，这个一会再细说；而 IM 服务，起初设计里是用来提供聊天服务，而现在，它最大的用途是提供一个可靠的 push 通道，提供 5w/s 的消息下发容量，这个也一会再细说。</li>
<li>雪球的服务化拆分及治理采用 twitter 开源的 finagle rpc 框架，并在上面进行了一些二次开发和定制。定制的功能主要集中在 access log 增强，和 fail fast，fail over 策略及降级开关等。 finagle 的实现比较复杂，debug 和二次开发的门槛较高，团队内部对此也进行了一些讨论。</li>
<li>雪球的业务比较复杂，在服务层中，大致可以分为几类：第一类是web1.0，2.0 及基础服务，我们称为社区，包括用户，帖子，新闻，股价，搜索等等，类比对象就是新浪财经门户+微博；第二类是组合及推荐，主要提供股票投资策略的展示和建议，类比对象是美国的motif；第三类是通道，类似股市中的“支付宝”，接入多家券商，提供瞬间开户，一键下单等等各种方便操作的功能。</li>
<li>雪球的业务实现中，包含很多异步计算逻辑，比如搜索建索引，比如股票涨跌停发通知，比如组合收益计算等等，为此，我们设计了一个独立的 Thread/Task 模块，方便管理所有的后台计算任务。但随着这些 task 越来越多，逻辑差异越来越大，一个统一的模块并不是总是最佳的方案，所以，我们又把它拆成了两大类：流式的，和批量式的。</li>
<li>雪球的推荐体系包括组合推荐“买什么”和个性化推荐。我们最近正在重新梳理我们的大数据体系，这个感兴趣的话可以单聊。</li>
<li>最下面是基础设施层。雪球基础设施层包括：redis，mysql，mq，zk，hdfs，以及容器 docker。</li>
<li>线上服务之外，我们的开发及后台设施也很典型：gitlab开发，jenkins打包，zabbix 监控系统向 openfalcon 迁移，redimine向confluence迁移，jira，以及内部开发的 skiing 后台管理系统。</li>
</ul>
<h2 id="雪球架构优化历程">雪球架构优化历程</h2>
<p>首先描述一下标题中的“股市动荡”定语修饰词吧：</p>
<ol>
<li>上证指数从年初的3000点半年时间涨到了5000多，6月12号达到最高点5200点，然后就急转直下，最大单日跌幅 8.48%，一路跌回4000点以下。最近一周都在3900多徘徊。</li>
<li>3月最后一周，A股开户 166万户，超过历史最高纪录 2007年5月第二周165万户。</li>
<li>4月份，证监会宣布A股支持单用户开设多账户。</li>
<li>6月底，证金公司代表国家队入场救市。</li>
<li>7月份，证监会宣布严打场外配资。<br><img src="2.jpg" alt="7月27号将近2000股跌停，IM推送消息数超过平时峰值300倍"></li>
</ol>
<p><img src="3.jpg" alt="外网带宽消耗，一年10倍的增长"></p>
<p><img src="4.jpg" alt="中国好声音广告第一晚，带来超过平时峰值200倍的注册量"></p>
<h3 id="挑战：小_VS_大">挑战：小 VS 大</h3>
<ul>
<li>小：小公司的体量，团队小，机器规模小</li>
<li>大：堪比大公司的业务线数量，业务复杂度，瞬间峰值冲击<br>雪球的业务线 = 1个新浪财经 + 1 个微博 + 1 个 motif + 1 个大智慧/同花顺。由于基数小，API调用瞬间峰值大约为平时峰值的 30+ 倍。</li>
</ul>
<h3 id="挑战：快速增长，移动互联网_+_金融，风口，A股大盘剧烈波动。">挑战：快速增长，移动互联网 + 金融，风口，A股大盘剧烈波动。</h3>
<p>首先，在app端，在我们核心业务从 web2.0 sns 向 3.0 移动交易闭环进化的过程中，我们开发了一个自己的 hybrid 框架：本地原生框架，加离线 h5 页面，以此来支撑我们的快速业务迭代。当前，雪球前端可以做到 2 周一个版本，且同时并行推进 3 个版本：一个在 app store 等待审核上线，一个在内测或公测，一个在开发。我们的前端架构师孟祥宇在今年的 wot 上有一个关于这方面的详细分享，有兴趣的可以稍后再深入了解。<br>雪球App实践—构建灵活、可靠的Hybrid框架 <a href="http://wot.51cto.com/2015mobile/" target="_blank" rel="external">http://wot.51cto.com/2015mobile/</a>      <a href="http://down.51cto.com/data/2080769" target="_blank" rel="external">http://down.51cto.com/data/2080769</a><br>另外，为了保障服务的可用性，我们做了一系列的“端到端服务质量监控”。感兴趣的可以搜索我今年4月份在环信SM meetup上做的分享《移动时代端到端的稳定性保障》。其中在 app 端，我们采用了一种代价最小的数据传输方案：对用户的网络流量，电池等额外消耗几乎为0</p>
<p>每个请求里带上前一个请求的结果</p>
<ul>
<li>succ or fail ： 1 char</li>
<li>失败原因：0 - 1 char</li>
<li>请求接口编号： 1 char</li>
<li>请求耗时：2 - 3 char</li>
<li>其它：网络制式，etc</li>
</ul>
<p>炒股的人大多都会盯盘：即在开盘期间，开着一个web页面或者app，实时的看股价的上下跳动。说到“实时”，美股港股当前都是流式的数据推送，但国内的A股，基本上都是每隔一段时间给出一份系统中所有股票现价的一个快照。这个时间间隔，理论上是3秒，实际上一般都在5秒左右。 交了钱签了合同，雪球作为合作方就可以从交易所下属的数据公司那里拿到数据了，然后提供给自己的用户使用。</p>
<p>刚才介绍总体架构图的时候有提到 quote server ，说到这是需要性能的地方。</p>
<p>业务场景是这样的，雪球上个人主页，开盘期间，每秒轮询一次当前用户关注的股票价格变动情况。在内部，所有的组合收益计算，每隔一段时间需要获取一下当前所有股票的实时价格。起初同时在线用户不多，这个接口就是一个部署在 snowball 中的普通接口，股价信息被实时写入 redis ，读取的时候就从 redis 中读。后来，A股大涨，snowball 抗不住了。于是我们就做了一个典型的优化：独立 server + 本地内存存储。开盘期间每次数据更新后，数据接收组件主动去更新 quote server 内存中的数据。 后续进一步优化方案是将这个接口以及相关的处理逻辑都迁移到公有云上去。</p>
<p>对于那些不盯盘的人，最实用的功能就是股价提醒了。在雪球上，你除了可以关注用户，还可以关注股票。如果你关注的某只股票涨了或跌了，我们都可以非常及时的通知你。雪球上热门股票拥有超过 50w 粉丝（招商银行，苏宁云商）粉丝可以设置：当这支股票涨幅或跌幅超过 x%（默认7%）时提醒我。曾经连续3天，每天超过1000股跌停，证监会开了一个会，于是接下来2天超过1000股涨停</p>
<p><strong>原来做法：</strong><br><em>股票涨（跌）x%，扫一遍粉丝列表，过滤出所有符合条件的粉丝，推送消息</em></p>
<p><strong>新做法：</strong><br>预先建立索引，开盘期间载入内存</p>
<ul>
<li>1%：uid1，uid2</li>
<li>2%：uid3，uid4，uid5</li>
<li>3%：uid6</li>
<li>问题：有时候嫌太及时了：频繁跌停，打开跌停，再跌停，再打开。。。的时候</li>
</ul>
<p>内部线上记录：</p>
<ul>
<li>4台机器。</li>
<li>单条消息延时 99% 小于 30秒。</li>
<li>下一步优化目标：99% 小于 10 秒</li>
</ul>
<h3 id="IM_系统最初的设计目标是为雪球上的用户提供一个聊天的功能">IM 系统最初的设计目标是为雪球上的用户提供一个聊天的功能</h3>
<ul>
<li>送达率第一</li>
<li>雪球IM：Netty + 自定义网络协议</li>
<li>Akka ： 每个在线client一个actor</li>
<li>推模式：client 在线情况下使用推模式</li>
<li>多端同步：单账号多端可登录，并保持各种状态同步</li>
</ul>
<p>移动互联网时代，除了微信qq以外的所有IM，都转型成了推送通道，核心指标变成了瞬间峰值性能。原有架构很多地方都不太合适了。</p>
<p>优化：</p>
<ul>
<li>分配更多资源：推送账号actor池</li>
<li>精简业务逻辑：重复消息只存id，实时提醒内容不推历史设备，不更新非活跃设备的session列表等等</li>
<li>本地缓存：拉黑等无法精简的业务逻辑迁移到本地缓存</li>
<li>优化代码：异步加密存储，去除不合理的 akka 使用</li>
</ul>
<p><em>akka这个解释一下：akka 有一个自己的 log adapter，内部使用一个 actor 来处理所有的 log event stream 。当瞬间峰值到来的时候，这个 event stream 一下子就堵了上百万条 log ，导致 gc 颠簸非常严重。最后的解决办法是，绕过 akka 的 log adapter，直接使用 logback 的 appender</em></p>
<p>线上记录：5w/s （主动限速）的推送持续 3 分钟，p99 性能指标无明显变化<br>7月10号我们在中国好声音上做了3期广告。在广告播出之前，我们针对广告可能带来的对系统的冲击进行了压力测试，主要是新用户注册模块，当时预估广告播出期间2小时新注册100万。<br>压测发现 DB 成为瓶颈：</p>
<ul>
<li>昵称检测 cache miss &gt; 40%</li>
<li>昵称禁用词 where like 模糊查询</li>
<li>手机号是否注册 cache miss &gt; 80%</li>
<li>注册新用户：5 insert</li>
</ul>
<p>优化：</p>
<ul>
<li>redis store：昵称，手机号</li>
<li>本地存储：昵称禁用词</li>
<li>业务流程优化：DB insert 操作同步改异步</li>
</ul>
<p>下一步优化计划：</p>
<ul>
<li>将 sns 系统中所有的上行操作都改成类似的异步模式</li>
<li>接口调用时中只更新缓存，而且主动设置5分钟过期，然后写一个消息到 mq 队列，队列处理程序拿到消息再做其它耗时操作。</li>
<li>为了支持失败重试，需要将主要的资源操作步骤都做成幂等。</li>
</ul>
<h3 id="前置模块HA">前置模块HA</h3>
<ul>
<li>合作方合规要求：业务单元部署到合作方内网，用户的敏感数据不允许离开进程内存</li>
<li>业务本身要求：业务单元本身为有状态服务，业务单元高可用</li>
</ul>
<p>解决方案：</p>
<ul>
<li>使用 Hazelcast In-Memory Data Grid 的 replication map 在多个 jvm 实例之间做数据同步。</li>
<li><p>java 启动参数加上 -XX:+DisableAttachMechanism -XX:-UsePerfData，禁止 jstack，jmap 等等 jdk 工具连接</p>
<p>  关于前置模块，其实还有很多很奇葩的故事，鉴于时间关系，这里就不展开讲了。以后有机会可以当笑话给大家讲。    </p>
</li>
</ul>
<h3 id="组合净值计算性能优化">组合净值计算性能优化</h3>
<ul>
<li>一支股票可能在超过20万个组合里（南车北车中车，暴风科技）</li>
<li>离线计算，存储计算后的结果</li>
<li>股价3秒变一次，涉及到这支股票的所有组合理论上也需要每 3 秒重新计算一次</li>
</ul>
<p>大家可能会问，为什么不用户请求时，实时计算呢？这是因为“组合净值”中还包括分红送配，分股，送股，拆股，合股，现金，红利等等，业务太过复杂，开发初期经常需要调整计算逻辑，所以就设计成后台离线计算模式了。当前正在改造，将分红送配逻辑做成离线计算，股价组成的净值实时计算。接口请求是，将实时计算部分和离线计算部分合并成最终结果。<br>实际上，我们的计算逻辑是比较低效的：循环遍历所有的组合，对每个组合，获取所有的价值数据，然后计算。完成一遍循环后，立即开始下一轮循环。</p>
<p>优化：</p>
<ul>
<li>分级：活跃用户的活跃组合，其它组合。</li>
<li>批量：拉取当前所有股票的现价到 JVM 内存里，这一轮的所有组合计算都用这一份股价快照。</li>
</ul>
<p>关于这个话题的更详细内容，感兴趣的可以参考雪球组合业务总监张岩枫在今年的 arch summit 深圳大会上的分享：构建高可用的雪球投资组合系统技术实践    <a href="http://sz2015.archsummit.com/speakers/201825" target="_blank" rel="external">http://sz2015.archsummit.com/speakers/201825</a></p>
<p>最后，我们还做了一些通用的架构和性能优化，包括jdk升级到8，开发了一个基于 zookeeper 的 config center 和开关降级系统</p>
<h2 id="聊聊关于架构优化的一些总结和感想">聊聊关于架构优化的一些总结和感想</h2>
<p>在各种场合经常听说的架构优化，一般都是优化某一个具体的业务模块，将性能优化到极致。而在雪球，我们做的架构优化更多的是从问题出发，解决实际问题，解决到可以接受的程度即可。可能大家看起来会觉得很凌乱，而且每个事情单独拎出来好像都不是什么大事。<br>我们在对一个大服务做架构优化时，一般是往深入的本质进行挖掘；当我们面对一堆架构各异的小服务时，“架构优化”的含义其实是有一些不一样的。大部分时候，我们并不需要（也没有办法）深入到小服务的最底层进行优化，而是去掉或者优化原来明显不合理的地方就可以了。<br>在快速迭代的创业公司，我们可能不会针对某一个服务做很完善的架构设计和代码实现，当出现各种问题时，也不会去追求极致的优化，而是以解决瓶颈问题为先。<br>即使我们经历过一回将 snowball 拆分服务化的过程，但当我们重新上一个新的业务时，我们依然选择将它做成一个大一统的服务。只是这一次，我们会提前定义好每个模块的 service 接口，为以后可能的服务化铺好路。<br>在创业公司里，重写是不能接受的；大的重构，从时间和人力投入上看，一般也是无法承担的。而“裱糊匠”式做法，哪里有性能问题就加机器，加缓存，加数据库，有可用性问题就加重试，加log，出故障就加流程，加测试，这也不是雪球团队工作方式。我们一般都采用最小改动的方式，即，准确定义问题，定位问题根源，找到问题本质，制定最佳方案，以最小的改动代价，将问题解决到可接受的范围内。<br>我们现在正在所有的地方强推3个数据指标：qps，p99，error rate。每个技术人员对自己负责的服务，一定要有最基本的数据指标意识。数字，是发现问题，定位根源，找到本质的最重要的依赖条件。没有之一。<br>我们的原则：保持技术栈的一致性和简单性，有节制的尝试新技术，保持所有线上服务依赖的技术可控，简单来说，能 hold 住。<br>能用cache的地方绝不用db，能异步的地方，绝不同步。俗称的：吃一堑，长一智。</p>
<p>特事特办：业务在发展，需求在变化，实现方式也需要跟着变化。简单的来说：遗留系统的优化，最佳方案就是砍需求，呵呵。<br>当前，雪球内部正在推行每个模块的方案和代码实现的 review，在 review 过程中，我一般是这样要求的：</p>
<p>技术方案：</p>
<ul>
<li>20倍设计，10倍实现，3倍部署</li>
<li>扩展性：凡事留一线，以后好相见</li>
</ul>
<p>技术实现：</p>
<ul>
<li>DevOps：上线后还是你自己维护的项目，实现的时候记得考虑各种出错的处理</li>
<li>用户投诉的时候需要你去解释，实现的时候注意各种边界和异常</li>
<li>快速实现，不是“随便实现”，万一火了呢：性能，方便扩容</li>
</ul>
<h2 id="Q&amp;A">Q&amp;A</h2>
<p><strong>Q1：im能详细讲下吗？</strong><br>关于雪球 im 和推模式，有群友问到了，我就再展开讲一下（其实下周我约了去给一家号称很文艺的公司内部交流IM实现）：雪球自己设计了一套 IM 协议，内部使用 netty 做网络层，akka 模式，即为每一个在线的 client new 一个 actor ，这个 actor 里面保持了这个在线 client 的所有状态和数据。如果有新消息给它，代码里只要把这个消息 tell 给这个 actor 即可。actor 里面会通过 netty 的 tcp 连接推给实际的 client。</p>
<p><strong>问一个小问题，App的接口可用上报里 如果是网络问题引起的故障 怎么兼容？</strong><br> app 如果发起一个请求，因为网络问题失败了（这其实是我们的上报体系设计时，最主要针对的场景），那么 app 会把这个失败的请求记录到本地内存，等下一次发请求时，把上次的这个失败请求结果及相关信息带上。如果连续多次失败，当前我们的做法是，只记录最后一次失败的请求结果，下次成功的请求里会带上它。</p>
<p><strong>监控系统为何从zabbix切换到openfalcon，原因是什么？</strong><br>简单来说，机器数上百之后，zabbix就会有很多问题，个人感受最大的问题是，新增 key 非常不方便。小米因为这些问题，自己做一个 falcon，然后开源了。我们碰到的问题很类似，看了看小米的，觉得可以不用自己再折腾了，就用它了。</p>
<p><strong>前置模块的Hazelcast In-Memory Data Grid 的稳定性怎么样，采用的考虑是什么呢？用sharding redis 怎么样呢？</strong><br>  稳定性不能算很好，只能说还好。因为上线几个月，已经出了一次故障了。采用它，主要是开发简单，因为它就只有一个 jar 包依赖，不像其它备选项，一个比一个大。至于为什么不用 redis，因为这是要部署到别人的内网的啊，更新很麻烦的啊，运维几乎没有的啊，各种悲剧啊。我们当前为了做到“一键更新”，把shell脚本和所有jar包都打成一个自解压的文件这事我会随便说吗？</p>
<p><strong>雪球im如何判断用户是否在线？要给给定的用户发消息，怎么找到对应的actor？不在线的时候消息如何存储？</strong><br>IM 用户在线判断（转化成指定的 actor 是否存在）和路由，这些都是 akka 内置提供的，感兴趣的，算了，我个人建议是不要去碰 akka 这货。用户不在线的时候，消息会进 mysql 和 redis</p>
<p><strong>大师，为了支持失败重试，需要将主要的资源操作步骤都做成幂等。这个怎么理解，具体怎么玩？</strong><br> 举个例子：用户发一个帖子，api调用的时候已经给用户返回成功了，但后端写 db 的时候超时了，怎么办？不能再告诉用户发帖失败了吧？那就重试重试再重试，直到写 db 成功。但万一重试的时候发现，上次写入超时，实际上是已经写成功了呢？那就需要把这个写入做成幂等，支持多次写入同一条记录。简单来说，db 层就是每个表都要有业务逻辑上的唯一性检查</p>
<p><strong>另外用户对应的Actor需不需要持久化呢？</strong><br>actor 不持久化。重启 server 的话，app 端会自动重连的</p>
<p><strong>基于zookeeper的config center设计有什么指导原则或遇到什么坑吗？如何方便业务开发修改又不影响到其他？</strong><br> 我们的 config center 有两个版本：一个是参考 netflix 的 archaius，另一个是纯粹的 zk style 。风格问题，我个人的回答是：大家喜欢就好。 config center 本来就不影响业务开发修改啊？没有太明白问题点，sorry</p>
<p><strong>刚才的追问下 如果只报最后一次故障 那么会不会不能准确评估影响？</strong><br> 不会的，因为这种情况一般都是用户进电梯或者进地铁了，呵呵</p>
<p><strong>rpc是怎么选的呢，比如为什么不用thrift呢？</strong><br>  finagle 底层就是 thrift 啊。就我个人而言，我个人对于任何需要预先定义 proto 的东西都深恶痛绝。所以现在我们也在尝试做一个基于 jsonrpc 的简单版本的 rpc 方案，作为我们后续微服务容器的默认 rpc</p>
<p><strong>实质上是用actor包住了netty的session吧？不建议用akka的原因是量大了后承载能力的问题吗？雪球im的dau约在50万左右吧？</strong><br>是的，actor 内部持有网络连接。不建议用 akka 的原因是：我个人的原则是，我 hold 不住的东西就不做推荐。就当前来说，我觉得我 hold 不住 akka：使用太简单太方便，但坑太多，不知道什么时候就踩上了，想用好太难了</p>
<p><strong>唐老师您好，雪球的架构中，rabbitmq 主要用在哪些场景，rabbit的 负载是通过哪些手段来做呢?</strong><br> 当前我们的 mq 功能都是有 rabbitmq 提供的，我们在内部封装了一个叫 event center 的模块，所有的跟 queue 打交道的地方，只需要调用 event center 提供的 api 即可。我们对于 rabbit 并没有做太多的调优，大约也是因为现在消息量不大的缘故。后续我们的大数据体系里，queue 的角色会由 kafka 来承担</p>
<p> <strong>唐大师，关于交易这块，能说下你们的账户体系吗？</strong><br>股票交易跟支付宝模式还是很大不一样的，本质上，雪球上只是一个纯粹的通道：钱和股票都不在雪球内部。所以，我们当前的账户体系就像我们页面上描述的那样：将用户的券商账号跟雪球id做绑定</p>
<p> <strong>性能规划上有什么经验或者推荐资料阅读吗？谢谢。</strong><br>通读 allthingsdistributed 上的精华文章 <a href="http://www.allthingsdistributed.com/" target="_blank" rel="external">http://www.allthingsdistributed.com/</a></p>
<p><strong>唐大师，雪球的docker是怎么用？怎么管理的？</strong><br>参考雪球sre高磊在 dockercn 上的分享</p>
<p><strong>追加一个问题：对业务合规要求的需求不是很了解，但是“-XX:+DisableAttachMechanism -XX:-UsePerfData”这样无法禁止“jstack -F”的吧，只是禁止了普通的jstack。</strong><br> 应该是可以禁止的，因为 jvm 内部所有挂载机制都没有启动，jstack 加 -f 也挂不上去。要不我一会测一下再给你确认？</p>
<p><strong>为什么用kafka替换rbt?</strong><br>因为 rbt 是 erlang 写的啊，我不会调优啊，出了问题我也不会排查啊。事实上，event center 模块极偶发的出现丢消息，但我们一直没有定位到根源。所以，只好换了</p>
<p><strong>请问百万活跃用户session是怎么存储的？怎么有效防止大面积退出登录？</strong><br>   用户登录 session 就存在 jvm 内部。因为是集群，只要不是集群突然全部挂，就不会出现大面积重新登录的</p>
<p><strong>每个请求里带上前一个请求的结果,这个得和用户请求绑定上吧？</strong><br>收集 app 端的访问结果，大部分情况下用于统计服务质量，偶尔也用于用户灵异问题的追逐</p>
<p><strong>akka的设计居然和Erlang的抢占式调度很像，也存在单进程瓶颈问题？</strong><br>可以这么说，主要是它的 log actor 是单个的</p>
<p><strong>集群环境下如何保存在jvm内部？各个jvm如何共享的？</strong><br> 我们的 im 系统其实分 2 层，前面有一层接入层，后面是集群。接入层到集群的链接是按 uid 一致性 hash。简单来说，一个用户就只连一个 jvm 服务节点。所以我们只在收盘后更新服务。在雪球，盘中严禁更新服务的</p>
<p> <strong>接入层的实现架构方便描述一下吗？</strong><br>  雪球IM的接入层分为2类：app接入层和web接入层。app接入层是一个 netty 的 server，开在 443 端口，但没有使用 ssl ，而是自己用 rsa 对消息体加密。netty 收到消息后，解包，根据包里的描述字段选择发往后端的业务节点。web 接入层是一个基于 play 的 webserver，实现了 http 和 websocket 接口，供 web 使用</p>
<p>雪球App是一款解决股票买什么好问题的手机炒股应用。因为独特的产品设计和运营策略，雪球App在市场上拥有领先的份额和影响力。雪球正在招聘，热招职位请参考 <a href="http://xueqiu.com/about/jobs" target="_blank" rel="external">http://xueqiu.com/about/jobs</a> (可点击阅读原文进入) 我们在望京 SOHO 等你！<br>本文策划 庆丰@微博, 内容由王杰编辑，庆丰校对与发布，Tim审校，其他多位志愿者对本文亦有贡献。读者可以通过搜索“ArchNotes”或长按下面图片，关注“高可用架构”公众号，查看更多架构方面内容，获取通往架构师之路的宝贵经验。转载请注明来自“高可用架构（ArchNotes）”公众号，敬请包含二维码！</p>
<p><img src="http://mmbiz.qpic.cn/mmbiz/8XkvNnTiapOPoaibhicCyMkia552rIu4wAtUThl4HiaABoLpmOkKMHVKHnprghrbTXQia0zgJuNmlU5icoKflhYdhtqPQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文根据唐福林老师在“高可用架构”微信群所做的《股市风暴下的雪球架构改造经验分享》整理而成，转发请注明来自微信公众号ArchNotes。</p>
<blockquote>
<p>唐福林，雪球首席架构师，负责雪球业务快速增长应对及服务性能与稳定架构优化工作。毕业于北京师范大学，硕士学位。之前曾任微博平台资深架构师，微博技术委员会成员。长期关注并从事互联网服务后端性能及稳定性架构优化工作。<br>]]>
    
    </summary>
    
      <category term="架构" scheme="http://colobu.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Netty Client重连实现]]></title>
    <link href="http://colobu.com/2015/08/14/netty-tcp-client-with-reconnect-handling/"/>
    <id>http://colobu.com/2015/08/14/netty-tcp-client-with-reconnect-handling/</id>
    <published>2015-08-14T08:36:09.000Z</published>
    <updated>2015-08-14T09:03:53.787Z</updated>
    <content type="html"><![CDATA[<p>当我们用Netty实现一个TCP client时，我们当然希望当连接断掉的时候Netty能够自动重连。<br>Netty Client有两种情况下需要重连：</p>
<ol>
<li>Netty Client启动的时候需要重连</li>
<li>在程序运行中连接断掉需要重连。</li>
</ol>
<p>对于第一种情况，Netty的作者在stackoverflow上给出了<a href="http://stackoverflow.com/questions/19739054/whats-the-best-way-to-reconnect-after-connection-closed-in-netty" target="_blank" rel="external">解决方案</a>，<br>对于第二种情况，Netty的例子uptime中实现了一种<a href="https://github.com/netty/netty/blob/master/example/src/main/java/io/netty/example/uptime/UptimeClientHandler.java" target="_blank" rel="external">解决方案</a>。</p>
<p> 而Thomas在他的<a href="http://tterm.blogspot.jp/2014/03/netty-tcp-client-with-reconnect-handling.html" target="_blank" rel="external">文章</a>中提供了这两种方式的实现的例子。</p>
<a id="more"></a>
<p>实现ChannelFutureListener 用来启动时监测是否连接成功，不成功的话重试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span>  </span></div><div class="line"> {  </div><div class="line">   <span class="keyword">private</span> EventLoopGroup loop = <span class="keyword">new</span> NioEventLoopGroup();  </div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>( String[] args )  </div><div class="line">   {  </div><div class="line">     <span class="keyword">new</span> Client().run();  </div><div class="line">   }  </div><div class="line">   <span class="keyword">public</span> Bootstrap <span class="title">createBootstrap</span>(Bootstrap bootstrap, EventLoopGroup eventLoop) {  </div><div class="line">     <span class="keyword">if</span> (bootstrap != <span class="keyword">null</span>) {  </div><div class="line">       <span class="keyword">final</span> MyInboundHandler handler = <span class="keyword">new</span> MyInboundHandler(<span class="keyword">this</span>);  </div><div class="line">       bootstrap.group(eventLoop);  </div><div class="line">       bootstrap.channel(NioSocketChannel.class);  </div><div class="line">       bootstrap.option(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);  </div><div class="line">       bootstrap.handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() {  </div><div class="line">         <span class="annotation">@Override</span>  </div><div class="line">         <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span>(SocketChannel socketChannel) <span class="keyword">throws</span> Exception {  </div><div class="line">           socketChannel.pipeline().addLast(handler);  </div><div class="line">         }  </div><div class="line">       });  </div><div class="line">       bootstrap.remoteAddress(<span class="string">"localhost"</span>, <span class="number">8888</span>);</div><div class="line">       bootstrap.connect().addListener(<span class="keyword">new</span> ConnectionListener(<span class="keyword">this</span>)); </div><div class="line">     }  </div><div class="line">     <span class="keyword">return</span> bootstrap;  </div><div class="line">   }  </div><div class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {  </div><div class="line">     createBootstrap(<span class="keyword">new</span> Bootstrap(), loop);</div><div class="line">   }  </div><div class="line"> }</div></pre></td></tr></table></figure>

<p>ConnectionListener 负责重连：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionListener</span> <span class="keyword">implements</span> <span class="title">ChannelFutureListener</span> </span>{  </div><div class="line">  <span class="keyword">private</span> Client client;  </div><div class="line">  <span class="keyword">public</span> <span class="title">ConnectionListener</span>(Client client) {  </div><div class="line">    <span class="keyword">this</span>.client = client;  </div><div class="line">  }  </div><div class="line">  <span class="annotation">@Override</span>  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span>(ChannelFuture channelFuture) <span class="keyword">throws</span> Exception {  </div><div class="line">    <span class="keyword">if</span> (!channelFuture.isSuccess()) {  </div><div class="line">      System.out.println(<span class="string">"Reconnect"</span>);  </div><div class="line">      <span class="keyword">final</span> EventLoop loop = channelFuture.channel().eventLoop();  </div><div class="line">      loop.schedule(<span class="keyword">new</span> Runnable() {  </div><div class="line">        <span class="annotation">@Override</span>  </div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {  </div><div class="line">          client.createBootstrap(<span class="keyword">new</span> Bootstrap(), loop);  </div><div class="line">        }  </div><div class="line">      }, <span class="number">1</span>L, TimeUnit.SECONDS);  </div><div class="line">    }  </div><div class="line">  }  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>同样在ChannelHandler监测连接是否断掉，断掉的话也要重连：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInboundHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span> </span>{  </div><div class="line">   <span class="keyword">private</span> Client client;  </div><div class="line">   <span class="keyword">public</span> <span class="title">MyInboundHandler</span>(Client client) {  </div><div class="line">     <span class="keyword">this</span>.client = client;  </div><div class="line">   }  </div><div class="line">   <span class="annotation">@Override</span>  </div><div class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span>(ChannelHandlerContext ctx) <span class="keyword">throws</span> Exception {  </div><div class="line">     <span class="keyword">final</span> EventLoop eventLoop = ctx.channel().eventLoop();  </div><div class="line">     eventLoop.schedule(<span class="keyword">new</span> Runnable() {  </div><div class="line">       <span class="annotation">@Override</span>  </div><div class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {  </div><div class="line">         client.createBootstrap(<span class="keyword">new</span> Bootstrap(), eventLoop);  </div><div class="line">       }  </div><div class="line">     }, <span class="number">1</span>L, TimeUnit.SECONDS);  </div><div class="line">     <span class="keyword">super</span>.channelInactive(ctx);  </div><div class="line">   }  </div><div class="line"> }</div></pre></td></tr></table></figure>

<h4 id="参考文档">参考文档</h4>
<ol>
<li><a href="http://stackoverflow.com/questions/19739054/whats-the-best-way-to-reconnect-after-connection-closed-in-netty" target="_blank" rel="external">http://stackoverflow.com/questions/19739054/whats-the-best-way-to-reconnect-after-connection-closed-in-netty</a></li>
<li><a href="https://github.com/netty/netty/blob/master/example/src/main/java/io/netty/example/uptime/UptimeClientHandler.java" target="_blank" rel="external">https://github.com/netty/netty/blob/master/example/src/main/java/io/netty/example/uptime/UptimeClientHandler.java</a></li>
<li><a href="http://tterm.blogspot.jp/2014/03/netty-tcp-client-with-reconnect-handling.html" target="_blank" rel="external">http://tterm.blogspot.jp/2014/03/netty-tcp-client-with-reconnect-handling.html</a></li>
<li><a href="http://stackoverflow.com/questions/21240981/in-netty-4-whats-the-difference-between-ctx-close-and-ctx-channel-close" target="_blank" rel="external">ctx.close vs ctx.channel().close</a></li>
<li><a href="http://stackoverflow.com/questions/20366418/any-difference-between-ctx-write-and-ctx-channel-write-in-netty" target="_blank" rel="external">ctx.write vs ctx.channel().write</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>当我们用Netty实现一个TCP client时，我们当然希望当连接断掉的时候Netty能够自动重连。<br>Netty Client有两种情况下需要重连：</p>
<ol>
<li>Netty Client启动的时候需要重连</li>
<li>在程序运行中连接断掉需要重连。</li>
</ol>
<p>对于第一种情况，Netty的作者在stackoverflow上给出了<a href="http://stackoverflow.com/questions/19739054/whats-the-best-way-to-reconnect-after-connection-closed-in-netty" target="_blank" rel="external">解决方案</a>，<br>对于第二种情况，Netty的例子uptime中实现了一种<a href="https://github.com/netty/netty/blob/master/example/src/main/java/io/netty/example/uptime/UptimeClientHandler.java" target="_blank" rel="external">解决方案</a>。</p>
<p> 而Thomas在他的<a href="http://tterm.blogspot.jp/2014/03/netty-tcp-client-with-reconnect-handling.html" target="_blank" rel="external">文章</a>中提供了这两种方式的实现的例子。</p>
]]>
    
    </summary>
    
      <category term="Netty" scheme="http://colobu.com/tags/Netty/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在命令行中使用Eclipse MAT工具]]></title>
    <link href="http://colobu.com/2015/08/12/using-Eclipse-Memory-Analyzer-by-the-command-line/"/>
    <id>http://colobu.com/2015/08/12/using-Eclipse-Memory-Analyzer-by-the-command-line/</id>
    <published>2015-08-12T07:16:18.000Z</published>
    <updated>2015-08-12T07:57:10.413Z</updated>
    <content type="html"><![CDATA[<p>最近应用在测试中出现Out Of Memory的问题， 通过jmap查看，发现JVM heap全用满了。<br>有很多工具可以查看JVM堆的信息， 收费的比如JProfiler， YourKit，免费的如Oracle JDK自带的visualvm, jhat和Eclipse MAT。<br>这个应用安装在一台AWS上，没有图形界面， 内存也比较小，想通过VNC远程桌面启动visualvm或者MAT不可能，通过jhat分析dump出来的snapshot(大约4.3G)也很慢，半天没有分析完毕，这种办法也放弃。<br>最后通过MAT的命令行工具分析了dump出来的snapshot,查找到OOM的元凶。</p>
<a id="more"></a>
<h4 id="使用MAT命令行工具">使用MAT命令行工具</h4>
<p>首先通过jstat或者jmap查看heap信息,比如通过jmap查看：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"> JVM version is <span class="number">25.31</span>-b07</div><div class="line"></div><div class="line">using thread-local object allocation.</div><div class="line">Parallel GC <span class="keyword">with</span> <span class="number">4</span> thread(s)</div><div class="line"></div><div class="line">Heap Configuration:</div><div class="line">   <span class="variable">MinHeapFreeRatio         =</span> <span class="number">0</span></div><div class="line">   <span class="variable">MaxHeapFreeRatio         =</span> <span class="number">100</span></div><div class="line">   <span class="variable">MaxHeapSize              =</span> <span class="number">4294967296</span> (<span class="number">4096.0</span>MB)</div><div class="line">   <span class="variable">NewSize                  =</span> <span class="number">1431306240</span> (<span class="number">1365.0</span>MB)</div><div class="line">   <span class="variable">MaxNewSize               =</span> <span class="number">1431306240</span> (<span class="number">1365.0</span>MB)</div><div class="line">   <span class="variable">OldSize                  =</span> <span class="number">2863661056</span> (<span class="number">2731.0</span>MB)</div><div class="line">   <span class="variable">NewRatio                 =</span> <span class="number">2</span></div><div class="line">   <span class="variable">SurvivorRatio            =</span> <span class="number">8</span></div><div class="line">   <span class="variable">MetaspaceSize            =</span> <span class="number">21807104</span> (<span class="number">20.796875</span>MB)</div><div class="line">   <span class="variable">CompressedClassSpaceSize =</span> <span class="number">1073741824</span> (<span class="number">1024.0</span>MB)</div><div class="line">   <span class="variable">MaxMetaspaceSize         =</span> <span class="number">17592186044415</span> MB</div><div class="line">   <span class="variable">G1HeapRegionSize         =</span> <span class="number">0</span> (<span class="number">0.0</span>MB)</div><div class="line"></div><div class="line">Heap Usage:</div><div class="line">PS Young Generation</div><div class="line">Eden Space:</div><div class="line">   <span class="variable">capacity =</span> <span class="number">482344960</span> (<span class="number">460.0</span>MB)</div><div class="line">   <span class="variable">used     =</span> <span class="number">468288384</span> (<span class="number">446.5946044921875</span>MB)</div><div class="line">   <span class="variable">free     =</span> <span class="number">14056576</span> (<span class="number">13.4053955078125</span>MB)</div><div class="line">   <span class="number">97.08578358525816</span>% used</div><div class="line">From Space:</div><div class="line">   <span class="variable">capacity =</span> <span class="number">278921216</span> (<span class="number">266.0</span>MB)</div><div class="line">   <span class="variable">used     =</span> <span class="number">0</span> (<span class="number">0.0</span>MB)</div><div class="line">   <span class="variable">free     =</span> <span class="number">278921216</span> (<span class="number">266.0</span>MB)</div><div class="line">   <span class="number">0.0</span>% used</div><div class="line">To Space:</div><div class="line">   <span class="variable">capacity =</span> <span class="number">477102080</span> (<span class="number">455.0</span>MB)</div><div class="line">   <span class="variable">used     =</span> <span class="number">0</span> (<span class="number">0.0</span>MB)</div><div class="line">   <span class="variable">free     =</span> <span class="number">477102080</span> (<span class="number">455.0</span>MB)</div><div class="line">   <span class="number">0.0</span>% used</div><div class="line">PS Old Generation</div><div class="line">   <span class="variable">capacity =</span> <span class="number">2863661056</span> (<span class="number">2731.0</span>MB)</div><div class="line">   <span class="variable">used     =</span> <span class="number">2863365080</span> (<span class="number">2730.7177352905273</span>MB)</div><div class="line">   <span class="variable">free     =</span> <span class="number">295976</span> (<span class="number">0.28226470947265625</span>MB)</div><div class="line">   <span class="number">99.98966441927965</span>% used</div><div class="line"></div><div class="line"><span class="number">12340</span> interned Strings occupying <span class="number">1051736</span> bytes.</div></pre></td></tr></table></figure>

<p>最多的类的实例:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="header">num     #instances         #bytes  class name</span></div><div class="line">----------------------------------------------</div><div class="line"><span class="code">   1:      21606534     1530253752  [C</span></div><div class="line"><span class="code">   2:      21606239      518549736  java.lang.String</span></div><div class="line"><span class="code">   3:      19198980      460775520  scala.collection.immutable.ListSet$Node</span></div><div class="line"><span class="code">   4:       4568546      109645104  scala.collection.immutable.HashSet$HashSetCollision1</span></div><div class="line"><span class="code">   5:        103739       63212992  [B</span></div><div class="line"><span class="code">   6:       1487034       53464560  [Lscala.collection.immutable.HashSet;</span></div><div class="line"><span class="code">   7:       1487034       35688816  scala.collection.immutable.HashSet$HashTrieSet</span></div><div class="line"><span class="code">   8:       1350368       32408832  scala.collection.immutable.$colon$colon</span></div><div class="line"><span class="code">   9:       1090897       26181528  scala.collection.immutable.HashSet$HashSet1</span></div><div class="line"><span class="code">  10:        200035       17603080  akka.actor.ActorCell</span></div><div class="line"><span class="code">  11:        100536        8042880  java.lang.reflect.Constructor</span></div><div class="line"><span class="code">  12:        500026        8000416  scala.runtime.ObjectRef</span></div></pre></td></tr></table></figure>

<p>从分析来看猜测是akka actor mailbox里面的字符串消息太多了。</p>
<p>既然没有办法图形化启动visualvm和MAT,那么就使用MAT文件夹下的<code>ParseHeapDump.sh</code>, 特别适合分析大堆的信息。<br>首先你需要修改MemoryAnalyzer.ini中的Xmx值，确保有充足的硬盘空间(至少dump文件的两倍)。<br>然后运行</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./ParseHeapDump.sh heap.bin org.eclipse.mat.api:suspects org.eclipse.mat.api:overview org.eclipse.mat.api:top_components</div></pre></td></tr></table></figure>

<p>会得到suspects, overview和top_components三个视图的信息。<br><img src="oom.png" alt="有问题的对象"><br>可以看到<code>akka.dispatch.Dispatcher$$anon$1</code>一个实例占用了2.4GB的内存，这就是罪魁祸首。这其实是akka dispatcher的mailbox中的java.util.concurrent.ConcurrentLinkedQueue，每个Node占用了81M的内存，<br>消息体太大了。</p>
<h4 id="编写程序得到所需信息">编写程序得到所需信息</h4>
<p>你也可以引用MAT的类，得到heap dump中的信息， 因为MAT使用Eclipse RCP框架， 基于osgi架构，使用起来不太方便，所以你可以别人抽取出来的MAT库，如<code>https://bitbucket.org/joebowbeer/andromat</code>,<br>然后实现一个命令行程序,比如下面的例子就是输出所有的字符串的值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.colobu.mat;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.eclipse.mat.SnapshotException;</div><div class="line"><span class="keyword">import</span> org.eclipse.mat.parser.model.PrimitiveArrayImpl;</div><div class="line"><span class="keyword">import</span> org.eclipse.mat.snapshot.ISnapshot;</div><div class="line"><span class="keyword">import</span> org.eclipse.mat.parser.internal.SnapshotFactory;</div><div class="line"><span class="keyword">import</span> org.eclipse.mat.snapshot.model.IClass;</div><div class="line"><span class="keyword">import</span> org.eclipse.mat.snapshot.model.IObject;</div><div class="line"><span class="keyword">import</span> org.eclipse.mat.util.ConsoleProgressListener;</div><div class="line"><span class="keyword">import</span> org.eclipse.mat.util.IProgressListener;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> SnapshotException, IOException {</div><div class="line">            String arg = args[args.length - <span class="number">1</span>];</div><div class="line">        String fileName = arg;</div><div class="line">        IProgressListener listener = <span class="keyword">new</span> ConsoleProgressListener(System.out);</div><div class="line">        SnapshotFactory sf = <span class="keyword">new</span> SnapshotFactory();</div><div class="line">        ISnapshot snapshot = sf.openSnapshot(<span class="keyword">new</span> File(fileName),</div><div class="line">                <span class="keyword">new</span> HashMap&lt;String, String&gt;(), listener);</div><div class="line">        System.out.println(snapshot.getSnapshotInfo());</div><div class="line">        System.out.println();</div><div class="line">        String[] classNames = {<span class="string">"java.lang.String"</span>};</div><div class="line">        <span class="keyword">for</span> (String name : classNames) {</div><div class="line">            Collection&lt;IClass&gt; classes = snapshot.getClassesByName(name, <span class="keyword">false</span>);</div><div class="line">            <span class="keyword">if</span> (classes == <span class="keyword">null</span> || classes.isEmpty()) {</div><div class="line">                System.out.println(String.format(<span class="string">"Cannot find class %s in heap dump"</span>, name));</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            }</div><div class="line">            <span class="keyword">assert</span> classes.size() == <span class="number">1</span>;</div><div class="line">            IClass clazz = classes.iterator().next();</div><div class="line">            <span class="keyword">int</span>[] objIds = clazz.getObjectIds();</div><div class="line">            <span class="keyword">long</span> minRetainedSize = snapshot.getMinRetainedSize(objIds, listener);</div><div class="line">            System.out.println(String.format(<span class="string">"%s instances = %d, retained size &gt;= %d"</span>, clazz.getName(), objIds.length, minRetainedSize));</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objIds.length; i++) {</div><div class="line">                IObject str = snapshot.getObject(objIds[i]);</div><div class="line">                String address = Long.toHexString(snapshot.mapIdToAddress(objIds[i]));</div><div class="line"></div><div class="line">                PrimitiveArrayImpl chars = (PrimitiveArrayImpl) str.resolveValue(<span class="string">"value"</span>);</div><div class="line">                String value = <span class="keyword">new</span> String((<span class="keyword">char</span>[]) chars.getValueArray());</div><div class="line"></div><div class="line">                System.out.println(String.format(<span class="string">"id=%d, address=%s, value=%s"</span>, objIds[i], address, value));</div><div class="line"></div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>基本上使用<code>ParseHeapDump.sh</code>已经得到了我所需要的结果，优化akka actor消息的内容解决了我的问题。</p>
<h4 id="参考文档">参考文档</h4>
<ol>
<li><a href="https://wiki.eclipse.org/MemoryAnalyzer/Extending_Memory_Analyzer" target="_blank" rel="external">https://wiki.eclipse.org/MemoryAnalyzer/Extending_Memory_Analyzer</a></li>
<li><a href="http://javaforu.blogspot.jp/2013/11/analyzing-large-java-heap-dumps-when.html" target="_blank" rel="external">http://javaforu.blogspot.jp/2013/11/analyzing-large-java-heap-dumps-when.html</a></li>
<li><a href="http://dr-brenschede.de/bheapsampler/" target="_blank" rel="external">http://dr-brenschede.de/bheapsampler/</a></li>
<li><a href="http://www.techpaste.com/2015/07/how-to-analyse-large-heap-dumps/" target="_blank" rel="external">http://www.techpaste.com/2015/07/how-to-analyse-large-heap-dumps/</a></li>
<li><a href="http://stackoverflow.com/questions/15977723/analyse-a-hprof-memory-dump-file-from-command-line-programmically" target="_blank" rel="external">http://stackoverflow.com/questions/15977723/analyse-a-hprof-memory-dump-file-from-command-line-programmically</a></li>
<li><a href="http://wangjunyan.github.io/2014/12/02/export-android-bitmap-from-dump-file/" target="_blank" rel="external">http://wangjunyan.github.io/2014/12/02/export-android-bitmap-from-dump-file/</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近应用在测试中出现Out Of Memory的问题， 通过jmap查看，发现JVM heap全用满了。<br>有很多工具可以查看JVM堆的信息， 收费的比如JProfiler， YourKit，免费的如Oracle JDK自带的visualvm, jhat和Eclipse MAT。<br>这个应用安装在一台AWS上，没有图形界面， 内存也比较小，想通过VNC远程桌面启动visualvm或者MAT不可能，通过jhat分析dump出来的snapshot(大约4.3G)也很慢，半天没有分析完毕，这种办法也放弃。<br>最后通过MAT的命令行工具分析了dump出来的snapshot,查找到OOM的元凶。</p>
]]>
    
    </summary>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[G1垃圾回收器中的字符串去重(Java 8 Update 20)]]></title>
    <link href="http://colobu.com/2015/08/10/java-string-deduplication/"/>
    <id>http://colobu.com/2015/08/10/java-string-deduplication/</id>
    <published>2015-08-10T07:41:42.000Z</published>
    <updated>2015-08-10T07:46:15.530Z</updated>
    <content type="html"><![CDATA[<p>从平均情况来看，应用程序中String对象会消耗大量的内存。这里面有一部分可能是重复(冗余)的－同样的字符串存在多个不同的实例(a!=b，但a.equals(b))。在实践中，许多字符串由于各种原因造成重复。<br>起初，JDK提供String.intern()方法处理字符串重复的问题。该方法的缺点是你需要找出哪些字符串需要驻留(interned)。这通常需要一个具备重复字符串查找功能的堆分析工具，比如<a href="http://www.yourkit.com/features/" target="_blank" rel="external">YourKit profiler</a>。尽管如此，如果使用恰当，字符串驻留会是一个强大的节省内存的工具－它允许你重用整个String对象（每个对象会在底层char[]的基础上增加24字节的额外开销）。<br>从Java 7 update 6开始，每个String对象都有自己私有的底层char[]。这样允许JVM做自动优化－如果底层的char[]数组从没有暴露给客户端，那么JVM就能去判断两个字符串的内容是否一致，进而将一个字符串底层的char[]替换成另一个字符串的底层char[]数组。<br>Java 8 update 20中引入的字符串去重特性就是用来做这个的，下面是它的工作原理：<br><a id="more"></a></p>
<ol>
<li>你需要使用G1垃圾收集器并启用该特性：-XX:+UseG1GC -XX:+UseStringDeduplication。这个特性是作为G1垃圾收集器的一个可选的步骤来实现的，如果使用其他垃圾收集器则不能使用该特性。</li>
<li>这个特性可能会在G1收集器的minor GC阶段执行。根据我的观察看，它是否执行取决于空闲CPU周期的利用率。所以，不要指望它在一个处理本地数据的数据分析器中会被执行。另一方面，WEB服务器中倒是很可能会执行这个优化。</li>
<li>字符串去重会查找那些未被处理的字符串，计算它们的hash值(如果先前没有被应用代码计算过的话)，然后查找是否有其他具有相同hash值且相等的底层char[]的字符串。如果找到－它会用新字符串的char[]替换掉现有的这个字符串的char[]。</li>
<li>字符串去重只会处理那些经历过几次垃圾收集仍然存活的字符串，这确保多数生命周期很短的字符串不会被处理。字符串的这个最小存活年龄是通过JVM参数-XX:StringDeduplicationAgeThreshole=3管理的(３是该参数的默认值)。</li>
</ol>
<p>下面是关于这个实现的一些重要结论：</p>
<ul>
<li>没错，如果你想享受字符串去重特性这份免费午餐的话，你需要使用G1收集器。你不能使用并行GC，通常对于追求高吞吐量胜于低延迟的应用这可能是更好的选择。</li>
<li>字符串去重无法在一个已加载完的系统中运行。为了检验它是否执行过，可以使用-XX:+PrintStringDeduplicationStatistics参数运行JVM，并观察控制台输出。</li>
<li>如果需要节省内存，并且你可以在应用中驻留字符串－就这样做，不要依赖字符串去重的功能。你需要时刻注意的是字符串去重会处理所有或至少大部分字符串－也就是说尽管你知道某个给定的字符串内容是唯一的，比如GUID，但JVM不知道这些，它仍会尝试将这个字符串和其它字符串进行匹配。结果，字符串去重产生的CPU开销既取决于堆中字符串的数量(新的字符串会与它们中的一些进行比较)，也取决于你在字符串去重期间创建的字符串数量(这些字符串需要和堆中的字符串比较)。在拥有好几个G的堆上，可以通过-XX:+PrintStringDeduplicationStatistics JVM选项检查这个特性的影响。</li>
<li>另一方面， 字符串去重基本是以非阻塞的方式完成的，如果你的服务器有足够多的空闲CPU，那为什么不用呢？</li>
<li>最后，请记住String.intern允许你只针对应用程序中那些已知的会产冗余的字符串进行驻留，通常它只需要跟一个很小的字符串驻留池比较即可，这样能更有效的利用CPU。此外，你可以驻留整个String对象，这样每个字符串可以额外节省24字节。</li>
</ul>
<p>###特性测试<br>这是我用来试验这一特性的一个测试类，这３个测试都需要运行到JVM抛出OOM，所以需要单独运行。<br>第一个测试会创建内容不同的字符串，如果你想模拟当堆中有大量字符串时，字符串去重花费的时间，那这个测试是非常有用的。尽量为第一个测试分配尽可能多的内存－创建的字符串越多，去重效果越好。<br>第二个和第三个测试用于比较字符串去重(第二个测试)和驻留(第三个测试)间的差别。你需要使用相同的(identical)Xmx设置来运行它们。在程序中，我把这个常量设为Xmx256M，你可以多分配些。然而，你会发现在迭代几次后去重测试将先失败，然后是驻留测试。这是为什么？因为，在这些测试中我们只有100个不同的字符串，因此对它们进行驻留意味着你用到的内存就只是存储这些字符串所需要的空间。而字符串去重的话，会产生不同的字符串对象，它仅会共享底层的char[]数组。</p>
<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="javadoc">/**</span></div><div class="line"> * String deduplication vs interning test</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDedupTest</span> </span>{</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_EXPECTED_ITERS = <span class="number">300</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FULL_ITER_SIZE = <span class="number">100</span> * <span class="number">1000</span>;</div><div class="line"></div><div class="line">    <span class="comment">//30M entries = 120M RAM (for 300 iters)</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; LIST = <span class="keyword">new</span> ArrayList&lt;&gt;( MAX_EXPECTED_ITERS * FULL_ITER_SIZE );</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> InterruptedException {</div><div class="line">        <span class="comment">//24+24 bytes per String (24 String shallow, 24 char[])</span></div><div class="line">        <span class="comment">//136M left for Strings</span></div><div class="line"></div><div class="line">        <span class="comment">//Unique, dedup</span></div><div class="line">        <span class="comment">//136M / 2.9M strings = 48 bytes (exactly String size)</span></div><div class="line"></div><div class="line">        <span class="comment">//Non unique, dedup</span></div><div class="line">        <span class="comment">//4.9M Strings, 100 char[]</span></div><div class="line">        <span class="comment">//136M / 4.9M strings = 27.75 bytes (close to 24 bytes per String + small overhead</span></div><div class="line"></div><div class="line">        <span class="comment">//Non unique, intern</span></div><div class="line">        <span class="comment">//We use 120M (+small overhead for 100 strings) until very late, but can't extend ArrayList 3 times - we don't have 360M</span></div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">          Run it with: -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+PrintStringDeduplicationStatistics</div><div class="line">          Give as much Xmx as you can on your box. This test will show you how long does it take to</div><div class="line">          run a single deduplication and if it is run at all.</div><div class="line">          To test when deduplication is run, try changing a parameter of Thread.sleep or comment it out.</div><div class="line">          You may want to print garbage collection information using -XX:+PrintGCDetails -XX:+PrintGCTimestamps</div><div class="line">        */</div><div class="line"></div><div class="line">        <span class="comment">//Xmx256M - 29 iterations</span></div><div class="line">        fillUnique();</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">         This couple of tests compare string deduplication (first test) with string interning.</div><div class="line">         Both tests should be run with the identical Xmx setting. I have tuned the constants in the program</div><div class="line">         for Xmx256M, but any higher value is also good enough.</div><div class="line">         The point of this tests is to show that string deduplication still leaves you with distinct String</div><div class="line">         objects, each of those requiring 24 bytes. Interning, on the other hand, return you existing String</div><div class="line">         objects, so the only memory you spend is for the LIST object.</div><div class="line">         */</div><div class="line"></div><div class="line">        <span class="comment">//Xmx256M - 49 iterations (100 unique strings)</span></div><div class="line">        <span class="comment">//fillNonUnique( false );</span></div><div class="line"></div><div class="line">        <span class="comment">//Xmx256M - 299 iterations (100 unique strings)</span></div><div class="line">        <span class="comment">//fillNonUnique( true );</span></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillUnique</span>() <span class="keyword">throws</span> InterruptedException {</div><div class="line">        <span class="keyword">int</span> iters = <span class="number">0</span>;</div><div class="line">        <span class="keyword">final</span> UniqueStringGenerator gen = <span class="keyword">new</span> UniqueStringGenerator();</div><div class="line">        <span class="keyword">while</span> ( <span class="keyword">true</span> )</div><div class="line">        {</div><div class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FULL_ITER_SIZE; ++i )</div><div class="line">                LIST.add( gen.nextUnique() );</div><div class="line">            Thread.sleep( <span class="number">300</span> );</div><div class="line">            System.out.println( <span class="string">"Iteration "</span> + (iters++) + <span class="string">" finished"</span> );</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillNonUnique</span>( <span class="keyword">final</span> <span class="keyword">boolean</span> intern ) <span class="keyword">throws</span> InterruptedException {</div><div class="line">        <span class="keyword">int</span> iters = <span class="number">0</span>;</div><div class="line">        <span class="keyword">final</span> UniqueStringGenerator gen = <span class="keyword">new</span> UniqueStringGenerator();</div><div class="line">        <span class="keyword">while</span> ( <span class="keyword">true</span> )</div><div class="line">        {</div><div class="line">            <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FULL_ITER_SIZE; ++i )</div><div class="line">                LIST.add( intern ? gen.nextNonUnique().intern() : gen.nextNonUnique() );</div><div class="line">            Thread.sleep( <span class="number">300</span> );</div><div class="line">            System.out.println( <span class="string">"Iteration "</span> + (iters++) + <span class="string">" finished"</span> );</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqueStringGenerator</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">private</span> <span class="keyword">char</span> upper = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">char</span> lower = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> String <span class="title">nextUnique</span>()</div><div class="line">        {</div><div class="line">            <span class="keyword">final</span> String res = String.valueOf( upper ) + lower;</div><div class="line">            <span class="keyword">if</span> ( lower &lt; Character.MAX_VALUE )</div><div class="line">                lower++;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            {</div><div class="line">                upper++;</div><div class="line">                lower = <span class="number">0</span>;</div><div class="line">            }</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">public</span> String <span class="title">nextNonUnique</span>()</div><div class="line">        {</div><div class="line">            <span class="keyword">final</span> String res = <span class="string">"a"</span> + lower;</div><div class="line">            <span class="keyword">if</span> ( lower &lt; <span class="number">100</span> )</div><div class="line">                lower++;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                lower = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>###总结</p>
<ul>
<li>字符串去重是Java 8 update 20添加的新特性。它是G1垃圾回收器的一部分，因此你必须使用G1回收器才能启用它：-XX:+UseG1GC -XX:+UseStringDeduplication。</li>
<li>字符串去重是G1的一个可选阶段，它取决于当前系统的负载。</li>
<li>字符串去重会查询内容相同的字符串，并统一底层存储字符的char[]数组。使用此特性你不需要编写任何代码，不过这意味着你最后得到的是不同的String对象，每个对象占用24字节。有时候，显式的调用String.intern方法进行字符串驻留还是有必要的。</li>
<li>字符串去重不会处理太年轻的字符串。处理字符串的最小年龄是通过JVM参数：-XX:StringDeduplicationAgeThreshold=3来管理的(3是这个参数的默认值)。</li>
</ul>
<p>###See also<br><a href="http://openjdk.java.net/jeps/192" target="_blank" rel="external">JEP 192 - a formal description of String deduplication</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从平均情况来看，应用程序中String对象会消耗大量的内存。这里面有一部分可能是重复(冗余)的－同样的字符串存在多个不同的实例(a!=b，但a.equals(b))。在实践中，许多字符串由于各种原因造成重复。<br>起初，JDK提供String.intern()方法处理字符串重复的问题。该方法的缺点是你需要找出哪些字符串需要驻留(interned)。这通常需要一个具备重复字符串查找功能的堆分析工具，比如<a href="http://www.yourkit.com/features/" target="_blank" rel="external">YourKit profiler</a>。尽管如此，如果使用恰当，字符串驻留会是一个强大的节省内存的工具－它允许你重用整个String对象（每个对象会在底层char[]的基础上增加24字节的额外开销）。<br>从Java 7 update 6开始，每个String对象都有自己私有的底层char[]。这样允许JVM做自动优化－如果底层的char[]数组从没有暴露给客户端，那么JVM就能去判断两个字符串的内容是否一致，进而将一个字符串底层的char[]替换成另一个字符串的底层char[]数组。<br>Java 8 update 20中引入的字符串去重特性就是用来做这个的，下面是它的工作原理：<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://colobu.com/tags/Java/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一些 REST 最佳实践]]></title>
    <link href="http://colobu.com/2015/08/10/some-REST-best-practices/"/>
    <id>http://colobu.com/2015/08/10/some-REST-best-practices/</id>
    <published>2015-08-10T05:23:16.000Z</published>
    <updated>2015-08-10T05:51:42.883Z</updated>
    <content type="html"><![CDATA[<p>原文： <a href="https://bourgeois.me/rest/" target="_blank" rel="external">Some REST best practices</a>, 作者：<a href="https://bourgeois.me/" target="_blank" rel="external">Pierre-Olivier Bourgeois</a>。<br>译文： <a href="http://weibo.com/p/1001603873537160306692" target="_blank" rel="external">一些REST最佳实践</a>, 译者： <a href="http://weibo.com/uc34333168" target="_blank" rel="external">yongx</a></p>
<p>如今，REST APIs 已经非常普遍，几乎所有WEB应用都用到了它们。提供简单，一致，实用的API是种义务，方便其它人很容易的使用。即使下面的这些规范，在你看来很正常，我经常看到人们不遵守它。这是我写这篇文章的原因。<br>当你设计 RESTful API 时，下面是一些应该牢记的最佳规范。<br>免责声明：下面的这些规范是根据过去的经验，我认为最好的。如果你有别的想法，咱们邮件讨论。</p>
<a id="more"></a>
<h2 id="给API加上版本">给API加上版本</h2>
<p>API版本应该是必备的。这样API不会随时间过时。一种方法是把版本放到URL里（<code>/api/v1...</code>)</p>
<p>另一个巧妙的花招是使用 <code>Accept</code> HTTP header，来传递需要的版本，正如<a href="https://developer.github.com/v3/media/#request-specific-version" target="_blank" rel="external">github所做的</a>。<br>（备注：Github 的格式是，application/vnd.github[.version].param[+json]，version指定版本，param是想要的格式，txt，html等。从评论看似乎Github的方式更完美）</p>
<p>通过版本，你可以改变API的结构，而不用担心老版客户端的兼容问题。（备注：API提供者默默承受维护多套API的痛苦）</p>
<h2 id="使用名词，而不是动词">使用名词，而不是动词</h2>
<p>我经常看到有人使用动词而不是名词来表示资源名称，例如下面这些：</p>
<ul>
<li><em>/getProducts</em></li>
<li><em>/listOrders</em></li>
<li><em>/retreiveClientByOrder?orderId=1</em></li>
</ul>
<p>从结构整洁和一致角度考虑，你应该总是使用名词。而且，巧妙使用 HTTP 方法（GET，POST）可以把想要的操作从资源名称上去除。如下面的例子：</p>
<ul>
<li><em>GET  /products</em>      返回所有产品列表</li>
<li><em>POST /products</em>      添加产品到产品列表</li>
<li><em>GET  /products/4</em>    提取Id为4的产品</li>
<li><em>PATCH/PUT /products/4</em> 更新Id为4的产品</li>
</ul>
<h2 id="使用复数形式">使用复数形式</h2>
<p>在我看来，同一资源命名，混合使用单数和复数形式不是好主意。很快就会混淆，带来不一致。<br>即使对 <code>show/delete/update</code> 操作，使用 <code>/artists</code> 而不是 <code>/artist</code> 也更好点。</p>
<h2 id="GET_和_HEAD_操作应该是安全的（无副作用）">GET 和 HEAD 操作应该是安全的（无副作用）</h2>
<p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" target="_blank" rel="external">RFC2616</a> 明确规定 <code>HEAD</code> 和 <code>GET</code> 必须是安全的（不能改变资源状态）<br>右边是一个不好的例子： <code>GET /deleteProduct?id=1</code><br>如果搜索引擎检索了那个页面，画面太美我不敢看（备注：实践中对删除操作都有权限验证，就算操作引擎抓取也没啥破坏）<br>（备注：<code>POST</code>和<code>PUT</code>的区别，<code>POST</code>是不幂等的，<code>PUT</code>是幂等的。如果多次调用URL得到的结果都一样，那就是幂等的。例如，发评论，如果评论ID在提交评论前已经生成，那么无论点多少次提交，看到的都是一条评论。如果评论ID在提交评论后生成，点多少次提交就看到多少条评论。）</p>
<h2 id="使用嵌套资源">使用嵌套资源</h2>
<p>如果想获取全部的子集，使用嵌套路由来让风格简洁。例如想从所有唱片中选取特定的，使用 <code>GET /artists/8/albums</code>（备注：这里8就是所谓嵌套路由，指导选取哪个唱片）</p>
<h2 id="分页">分页</h2>
<p>通过 HTTP 返回超大结果集不是好主意。序列化大的JSON数据很慢，这会导致性能问题。<br>通常的做法是分页，Facebook，Twitter，Github都是这么做的。提取少里数据更快，就算需要多次调用，也比一次提取很大（但执行很慢）的数据更高效。<br>如果想分页，一个好的方法是通过<code>Link</code> HTTP header，来提示前一页和后一页。正如 <a href="https://developer.github.com/guides/traversing-with-pagination/" target="_blank" rel="external">Github 做的那样</a>。<br>（备注：<code>Link</code>的用法 Link: <a href="http://next_url" target="_blank" rel="external">http://next_url</a>; rel=&quot;next&quot;, <a href="http://last_url" target="_blank" rel="external">http://last_url</a>; rel=&quot;last&quot;, <a href="http://first_url" target="_blank" rel="external">http://first_url</a>; rel=&quot;first&quot;, <a href="http://prev_url" target="_blank" rel="external">http://prev_url</a>; rel=&quot;prev&quot;）</p>
<h2 id="使用合适的_HTTP_状态码">使用合适的 HTTP 状态码</h2>
<p>请求返回时，无论请求成功与否，总是使用正确的返回码。下面是一些可能用到的状态码。</p>
<h3 id="成功状态码（2XX系列）">成功状态码（2XX系列）</h3>
<ul>
<li><code>201 Created</code> 当成功创建资源时（INSERT）</li>
<li><code>202 Accepted</code> 当请求被接受，并放到后台执行时（异步任务）</li>
<li><code>204 No Content</code> 当请求成功，但是没有内容返回时（例如 DELETE 时）</li>
</ul>
<h3 id="客户端错误（4xx系列）">客户端错误（4xx系列）</h3>
<ul>
<li><code>400 Bad Request</code> 当处理querystring或http body时出错（例如非法JSON）</li>
<li><code>401 Unauthorized</code> 认证失败</li>
<li><code>403 Forbidden</code> 认证成功时，操作或请求的资源不被允许</li>
<li><code>406 Not Acceptable</code> 请求格式不被接受（例如试图请求JSON数据，但服务器只提供XML）</li>
<li><code>410 Gone</code> 请求的资源被永久删除（备注：咋判断是不存在还是被永久删除了）</li>
<li><code>422 Unprocessable entity</code> 当创建对象时发生可用性错误</li>
</ul>
<p>完整的状态码请参照<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="external">RFC2616</a></p>
<h2 id="总是返回一致的错误内容">总是返回一致的错误内容</h2>
<p>当发生错误时，总是返回一致的错误描述。错误结构总是相同，这样更容易解析错误信息。<br>如下描述，清晰，简单，自说明</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">HTTP/<span class="number">1.1</span> <span class="number">401</span> Unauthorized</div><div class="line">{</div><div class="line">    <span class="string">"status"</span>: <span class="string">"Unauthorized"</span>,</div><div class="line">    <span class="string">"message"</span>: <span class="string">"No access token provided."</span>,</div><div class="line">    <span class="string">"request_id"</span>: <span class="string">"594600f4-7eec-47ca-8012-02e7b89859ce"</span></div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>原文： <a href="https://bourgeois.me/rest/" target="_blank" rel="external">Some REST best practices</a>, 作者：<a href="https://bourgeois.me/" target="_blank" rel="external">Pierre-Olivier Bourgeois</a>。<br>译文： <a href="http://weibo.com/p/1001603873537160306692" target="_blank" rel="external">一些REST最佳实践</a>, 译者： <a href="http://weibo.com/uc34333168" target="_blank" rel="external">yongx</a></p>
<p>如今，REST APIs 已经非常普遍，几乎所有WEB应用都用到了它们。提供简单，一致，实用的API是种义务，方便其它人很容易的使用。即使下面的这些规范，在你看来很正常，我经常看到人们不遵守它。这是我写这篇文章的原因。<br>当你设计 RESTful API 时，下面是一些应该牢记的最佳规范。<br>免责声明：下面的这些规范是根据过去的经验，我认为最好的。如果你有别的想法，咱们邮件讨论。</p>
]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[大型网站系统架构的演化]]></title>
    <link href="http://colobu.com/2015/07/27/architecture-evolution-of-large-sites/"/>
    <id>http://colobu.com/2015/07/27/architecture-evolution-of-large-sites/</id>
    <published>2015-07-27T01:43:28.000Z</published>
    <updated>2015-07-31T13:28:02.589Z</updated>
    <content type="html"><![CDATA[<p>原文： <a href="http://www.cnblogs.com/leefreeman/p/3993449.html" target="_blank" rel="external">大型网站系统架构的演化</a>, 作者：<a href="http://www.cnblogs.com/leefreeman/" target="_blank" rel="external">李平</a></p>
<p>一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。所以成熟的系统架构是随业务扩展而完善出来的，并不是一蹴而就；不同业务特征的系统，会有各自的侧重点，例如淘宝，要解决海量的商品信息的搜索、下单、支付，例如腾讯，要解决数亿的用户实时消息传输，百度它要处理海量的搜索请求，他们都有各自的业务特性，系统架构也有所不同。尽管如此我们也可以从这些不同的网站背景下，找出其中共用的技术，这些技术和手段可以广泛运行在大型网站系统的架构中，下面就通过介绍大型网站系统的演化过程，来认识这些技术和手段。<br><a id="more"></a></p>
<h2 id="一、最开始的网站架构">一、最开始的网站架构</h2>
<p>最初的架构，应用程序、数据库、文件都部署在一台服务器上，如图：<br><img src="1.png" alt=""></p>
<h2 id="二、应用、数据、文件分离">二、应用、数据、文件分离</h2>
<p>随着业务的扩展，一台服务器已经不能满足性能需求，故将应用程序、数据库、文件各自部署在独立的服务器上，并且根据服务器的用途配置不同的硬件，达到最佳的性能效果。<br><img src="2.png" alt=""></p>
<h2 id="三、利用缓存改善网站性能">三、利用缓存改善网站性能</h2>
<p>在硬件优化性能的同时，同时也通过软件进行性能优化，在大部分的网站系统中，都会利用缓存技术改善系统的性能，使用缓存主要源于热点数据的存在，大部分网站访问都遵循28原则（即80%的访问请求，最终落在20%的数据上），所以我们可以对热点数据进行缓存，减少这些数据的访问路径，提高用户体验。<br><img src="3.png" alt=""><br>缓存实现常见的方式是本地缓存、分布式缓存。当然还有CDN、反向代理等，这个后面再讲。本地缓存，顾名思义是将数据缓存在应用服务器本地，可以存在内存中，也可以存在文件，OSCache就是常用的本地缓存组件。本地缓存的特点是速度快，但因为本地空间有限所以缓存数据量也有限。分布式缓存的特点是，可以缓存海量的数据，并且扩展非常容易，在门户类网站中常常被使用，速度按理没有本地缓存快，常用的分布式缓存是Memcached、Redis。</p>
<h2 id="四、使用集群改善应用服务器性能">四、使用集群改善应用服务器性能</h2>
<p>应用服务器作为网站的入口，会承担大量的请求，我们往往通过应用服务器集群来分担请求数。应用服务器前面部署负载均衡服务器调度用户请求，根据分发策略将请求分发到多个应用服务器节点。<br><img src="4.png" alt=""><br>常用的负载均衡技术硬件的有F5，价格比较贵，软件的有LVS、Nginx、HAProxy。LVS是四层负载均衡，根据目标地址和端口选择内部服务器，Nginx是七层负载均衡和HAProxy支持四层、七层负载均衡，可以根据报文内容选择内部服务器，因此LVS分发路径优于Nginx和HAProxy，性能要高些，而Nginx和HAProxy则更具配置性，如可以用来做动静分离（根据请求报文特征，选择静态资源服务器还是应用服务器）。</p>
<h2 id="五、数据库读写分离和分库分表">五、数据库读写分离和分库分表</h2>
<p>随着用户量的增加，数据库成为最大的瓶颈，改善数据库性能常用的手段是进行读写分离以及分表，读写分离顾名思义就是将数据库分为读库和写库，通过主备功能实现数据同步。分库分表则分为水平切分和垂直切分，水平切换则是对一个数据库特大的表进行拆分，例如用户表。垂直切分则是根据业务不同来切换，如用户业务、商品业务相关的表放在不同的数据库中。<br><img src="5.png" alt=""></p>
<h2 id="六、使用CDN和反向代理提高网站性能">六、使用CDN和反向代理提高网站性能</h2>
<p>假如我们的服务器都部署在成都的机房，对于四川的用户来说访问是较快的，而对于北京的用户访问是较慢的，这是由于四川和北京分别属于电信和联通的不同发达地区，北京用户访问需要通过互联路由器经过较长的路径才能访问到成都的服务器，返回路径也一样，所以数据传输时间比较长。对于这种情况，常常使用CDN解决，CDN将数据内容缓存到运营商的机房，用户访问时先从最近的运营商获取数据，这样大大减少了网络访问的路径。比较专业的CDN运营商有蓝汛、网宿。</p>
<p>而反向代理，则是部署在网站的机房，当用户请求达到时首先访问反向代理服务器，反向代理服务器将缓存的数据返回给用户，如果没有没有缓存数据才会继续走应用服务器获取，也减少了获取数据的成本。反向代理有Squid，Nginx。</p>
<p><img src="6.png" alt=""></p>
<h2 id="七、使用分布式文件系统">七、使用分布式文件系统</h2>
<p>用户一天天增加，业务量越来越大，产生的文件越来越多，单台的文件服务器已经不能满足需求。需要分布式的文件系统支撑。常用的分布式文件系统有NFS。<br><img src="7.png" alt=""></p>
<h2 id="八、使用NoSql和搜索引擎">八、使用NoSql和搜索引擎</h2>
<p>对于海量数据的查询，我们使用nosql数据库加上搜索引擎可以达到更好的性能。并不是所有的数据都要放在关系型数据中。常用的NOSQL有mongodb和redis，搜索引擎有lucene。<br><img src="8.png" alt=""></p>
<h2 id="九、将应用服务器进行业务拆分">九、将应用服务器进行业务拆分</h2>
<p>随着业务进一步扩展，应用程序变得非常臃肿，这时我们需要将应用程序进行业务拆分，如百度分为新闻、网页、图片等业务。每个业务应用负责相对独立的业务运作。业务之间通过消息进行通信或者同享数据库来实现。<br><img src="9.png" alt=""></p>
<h2 id="十、搭建分布式服务">十、搭建分布式服务</h2>
<p>这时我们发现各个业务应用都会使用到一些基本的业务服务，例如用户服务、订单服务、支付服务、安全服务，这些服务是支撑各业务应用的基本要素。我们将这些服务抽取出来利用分部式服务框架搭建分布式服务。淘宝的Dubbo是一个不错的选择。<br><img src="10.png" alt=""></p>
<h2 id="小结">小结</h2>
<p>大型网站的架构是根据业务需求不断完善的，根据不同的业务特征会做特定的设计和考虑，本文只是讲述一个常规大型网站会涉及的一些技术和手段。</p>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://book.douban.com/subject/25723064/" target="_blank" rel="external">《大型网站技术架构》 ——李智慧</a></li>
<li><a href="https://book.douban.com/subject/25790111/" target="_blank" rel="external">《海量运维运营规划》 ——唐文</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文： <a href="http://www.cnblogs.com/leefreeman/p/3993449.html" target="_blank" rel="external">大型网站系统架构的演化</a>, 作者：<a href="http://www.cnblogs.com/leefreeman/" target="_blank" rel="external">李平</a></p>
<p>一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，就连技术人员也从几个人发展到一个部门甚至一条产品线。所以成熟的系统架构是随业务扩展而完善出来的，并不是一蹴而就；不同业务特征的系统，会有各自的侧重点，例如淘宝，要解决海量的商品信息的搜索、下单、支付，例如腾讯，要解决数亿的用户实时消息传输，百度它要处理海量的搜索请求，他们都有各自的业务特性，系统架构也有所不同。尽管如此我们也可以从这些不同的网站背景下，找出其中共用的技术，这些技术和手段可以广泛运行在大型网站系统的架构中，下面就通过介绍大型网站系统的演化过程，来认识这些技术和手段。<br>]]>
    
    </summary>
    
      <category term="架构" scheme="http://colobu.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LinkedIn架构这十年]]></title>
    <link href="http://colobu.com/2015/07/24/brief-history-scaling-linkedin/"/>
    <id>http://colobu.com/2015/07/24/brief-history-scaling-linkedin/</id>
    <published>2015-07-24T02:15:04.000Z</published>
    <updated>2015-07-31T13:28:02.635Z</updated>
    <content type="html"><![CDATA[<p>原文： <a href="http://engineering.linkedin.com/architecture/brief-history-scaling-linkedin" target="_blank" rel="external">A Brief History of Scaling LinkedIn</a></p>
<blockquote>
<p><a href="https://www.linkedin.com/in/joshclemm" target="_blank" rel="external">Josh Clemm</a>是LinkedIn的高级工程经理，自2011年加入LinkedIn。他最近(2015/07/20)写了一篇文章，介绍了LinkedIn针对用户规模急速扩大带来的架构方面的变革。<br>文章有点像子柳写的<a href="https://book.douban.com/subject/24335672/" target="_blank" rel="external">淘宝技术这十年</a></p>
</blockquote>
<p>2003年是LinkedIn元年，公司成立的目标是连接你的个人人脉以获得更好的的工作机会。上线第一周才有2700个会员注册，时光飞梭，LinkedIn的产品、会员数量、服务器负载都极大的增长了。<br>今天，LinkedIn全球用户已经超过3.5亿。我们每秒有数十万个页面被访问，移动端流量已占到50%以上 (<a href="http://blog.linkedin.com/2014/04/18/the-next-three-billion/" target="_blank" rel="external">mobile moment</a>)。所有这些请求都从后台获取数据，而我们的后台系统可以处理每秒上百万次查询。</p>
<p>问题来了： <strong>所有这些是怎么做到的呢？</strong></p>
<a id="more"></a>
<h2 id="早期">早期</h2>
<h3 id="Leo">Leo</h3>
<p>和现在很多站点开始的时候一样， LinkedIn使用一个应用程序做所有的工作。 这个应用程序被称之为 &quot;Leo&quot;。它包含所有的Java Servlet页面， 处理业务逻辑， 连接少量的LinkedIn数据库。<br><img src="leo_arch.png" alt="*哈!早年网站的样式-简单实用*"></p>
<h3 id="Member_Graph_(会员关系图)">Member Graph (会员关系图)</h3>
<p>开始的工作之一就是管理会员之间关系的社交网络。我们需要一个系统通过图遍历(graph traversals)的方式来查询关系数据， 同时需要将数据驻留内存以便获得高效和性能。从这个不同的使用特征来看， 很明显这需要一个独立于Leo的系统以方便扩大规模，于是一个叫做&quot;Clould&quot;专门用于会员关系图(member graph)的独立系统诞生了。这是LinkedIn的第一个服务系统。为了和Leo系统分离，我们使用Java RPC来进行通讯。</p>
<p>也大约在此期间我们需要增加搜索服务的能力。我们的会员关系图服务也提供数据给一个基于<a href="https://lucene.apache.org/" target="_blank" rel="external">Lucene</a>的搜索服务。</p>
<h3 id="Replica_read_DBs_(多个只读数据库副本)">Replica read DBs (多个只读数据库副本)</h3>
<p>随着站点的增长， Leo系统也在扩大， 增加了更多的角色和职能， 也更加复杂。 通过负载均衡可以运行多个Leo实例，但是新增的负载也影响到LinkedIn的最关键系统-会员信息数据库。</p>
<p>一个最容易的解决方案就是垂直扩展 - 在其上增加更多的CPU和内存。这虽然可以支撑一段时间，但是将来我们还是会遇到规模扩展的问题。会员信息数据库既处理读又处理写。 为了扩展，我们引入了复制从库(replica slave DB)。 复制数据库是会员数据库的一个拷贝， 使用 <a href="http://data.linkedin.com/blog/2012/10/driving-the-databus" target="_blank" rel="external">databus</a> (现已开源)的最早版本来进行同步。这些复制从库处理所有的读请求， 并且增加了保证主库和从库数据一致性的逻辑。</p>
<p><img src="arch_master_slave_0.png" alt="*主从读写分离的方案之后，我们转向了数据库分区的解决方案*"></p>
<p>当站点遇到越来越多的流量时，单一的Leo系统经常宕机，而且很难排查和恢复， 发布新代码也很困难。 高可用性对LinkedIn至关重要， 很明显我们需要&quot;干掉&quot; Leo， 把它分解成多个小的功能模块和无状态的服务。<br><img src="leo-poster.jpg" alt="*&quot;Kill Leo&quot;这个咒语在内部传颂了好多年*"></p>
<h3 id="Service_Oriented_Architecture_(面向服务的架构)">Service Oriented Architecture (面向服务的架构)</h3>
<p>工程师开始抽取出一些微服务， 这些微服务提供API和一些业务逻辑， 如搜索，会员信息， 通讯和群组平台。接着我们的表现层也被抽取出来了，比如招聘产品和公共信息页。新产品，新服务都独立于Leo。 不久，各个功能区的垂直栈完成了。<br>我们构建了前端服务器， 可以从不同的域获取数据，处理展示逻辑以及生成HTML (通过JSP)。我们还构建了中间层服务提供API接口访问数据模型以及提供数据库一致性访问后端数据服务。到2010年，我们已经有超过150个独立的服务，而今天，我们已经有超过750个服务。<br><img src="arch_soa_0.png" alt=""><br>因为无状态， 规模扩展可以通过堆叠任意服务的新实例以及在它们之间进行负载均衡来完成。我们给每个服务设定了警戒红线， 知道它的负载能力， 提供早期预警和性能监控。</p>
<h3 id="cache_(缓存)">cache (缓存)</h3>
<p>LinkedIn可预见的增长促使我们要进一步的扩展。我们知道通过添加更多的缓存层以减少负载压力。很多应用开始引入中间缓存层如 <a href="https://en.wikipedia.org/wiki/Memcached" target="_blank" rel="external">memecached</a> 或者 <a href="https://en.wikipedia.org/wiki/Couchbase_Server" target="_blank" rel="external">couchbase</a>。 我们还在数据层增加了缓存， 并且在适当的时候使用 <a href="http://engineering.linkedin.com/tags/voldemort" target="_blank" rel="external">Voldemort</a> 提供预先计算的结果。</p>
<p>之后，我们实际上去掉了中间缓存层。中间缓存层存储来自多个域的数据。虽然开始时缓存看起来是减少压力的一种简单方式，但是缓存数据失效的复杂性和调用图(call graph)变得无法控制。将缓存更可能地接近数据层可以降低延迟， 使我们可以水平扩展，降低可知的负载(cognitive load)。</p>
<h3 id="Kafka">Kafka</h3>
<p>为了收集日益增长的数据，LinkedIn开发了很多定制的数据通道来流水化和队列化数据(streaming and queueing)。 比如， 我们需要将数据放入数据仓库，我们需要将一批数据放入Hadoop工作流以便分析，我们从每个服务中中聚合了大量日志， 我们收集了很多用户追踪事件如页面点击， 我们需要队列化inMail消息系统中的数据， 我们需要保证用户更新完个人信息后搜索数据也是最新的等等。<br>随着网站还在壮大，更多的定制管道出现了。 因为网站规模需要扩展，每一个独立的管道也需要扩展， 有些东西不得不放弃。 结果就是Kafka开发出来了， 它是我们的分布式的发布订阅消息系统。Kafka成为一个统一的管道， 根据<a href="http://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying" target="_blank" rel="external">commit log</a>的概念构建, 特别注重速度和扩展性。 它可以接近实时的访问数据源，驱动Hadoop任务， 允许我们构建实时的分析，广泛地提升了我们的站点监控和报警能力， 也使我们能够可视化和跟踪调用图(call graph)。 今天， Kafka<br>每天处理超过<a href="http://engineering.linkedin.com/kafka/kafka-linkedin-current-and-future" target="_blank" rel="external">5千亿的事件</a>。<br><img src="kafka.png" alt=""></p>
<h3 id="Inversion(反转)">Inversion(反转)</h3>
<p>扩展可以从很多维度来衡量，包括组织结构。 在2011年底， LinkedIn开始了一个内部创新，叫 “反转” (<a href="http://www.bloomberg.com/bw/articles/2013-04-10/inside-operation-inversion-the-code-freeze-that-saved-linkedin" target="_blank" rel="external">Inversion</a>)。我们暂停了新功能的开发， 允许整个工程部门专注于提升工具，部署，基础架构和开发者生产力上。它成功地使我们可以敏捷地建立可扩展性新产品。</p>
<h2 id="近几年">近几年</h2>
<h3 id="Rest-li">Rest.li</h3>
<p>当我们从Leao转向面向服务的架构后，之前抽取的基于Java RPC的API, 在团队中开始变得不一致了，和表现层耦合太紧，这只会变得更糟。为了解决这个问题， 我们开发了一个新的API模型，叫做 <a href="http://engineering.linkedin.com/architecture/restli-restful-service-architecture-scale" target="_blank" rel="external">Rest.li</a>. Rest.li 符合我们面向数据模型的架构， 确保在整个公司提供一致性的无状态的Restful API模型。<br>基于HTTP的JSON数据， 我们新的API最终很容易地编写非Java的客户端。 LinkedIn今天仍然主要使用Java栈，但是也有很多使用Python, Ruby, Node.js 和 C++的客户端，可能是自己开发的或者收购过来的。  脱离了RPC也让我们将变现层和后端兼容型的问题中挣脱出来。另外， 使用Dynamic Discovery (D2)的Rest.li, 我们可以得到自动的基于负载均衡，服务发现和可扩展的API客户端。<br>今天， LinkedIn有975 个Rest.li资源， 所有的数据中心每天有超过一千亿级Rest.li调用。<br><img src="RestLiClientServerFlow_0_0.png" alt="Rest.li R2/D2 技术站"></p>
<h3 id="Super_Blocks_(超级块)">Super Blocks (超级块)</h3>
<p>面向服务的架构很好的解耦了域之间的联系和可以独立地扩展服务。但是也有缺点， 很多应用获取各种类型的不同的数据， f(call graph)或者叫做&quot;扇出&quot; (fanout)。例如， 任意一次个人信息页的请求就会获取照片，会员关系， 组，订阅信息， 关注，博客，人脉，推荐等信息。 这个调用图很难管理，而且越来越难控制。<br>我们引入了超级块的概念。 为一组后台服务提供一个单一的访问API。这样我们就可以有一个team专门优化这个块，同时保证每个客户端的调用图可控。</p>
<h3 id="Multi-Data_Center_(多数据中心)">Multi-Data Center (多数据中心)</h3>
<p>作为一个会员快速增长的全球化公司，我们需要从一个数据中心进行扩展，我们通过几年的努力来解决这个问题，首先，从两个数据中心（洛杉矶 和 芝加哥）提供了公共个人信息，证明可行后，我们开始增强服务来处理数据复制、不同源的调用、单向数据复制事件、将用户分配到地理位置更近的数据中心。<br>我们大多的数据库运行在<a href="http://engineering.linkedin.com/espresso/introducing-espresso-linkedins-hot-new-distributed-document-store" target="_blank" rel="external">Espresso</a>（一个新的内部多用户数据仓库）上。<br>Espresso支持多个数据中心，提供了 主-主 的支持，及支持很难的数据复制。</p>
<p>多个数据中心对于高可用性具有不可思议的重要性，你要避免的单点故障不仅仅是某个服务失效，更要担心整个站点失效。今天，LinkedIn运行了3个主数据中心，同时还有全球化的<a href="http://engineering.linkedin.com/performance/how-linkedin-used-pops-and-rum-make-dynamic-content-download-25-faster" target="_blank" rel="external">PoPs</a>服务。<br><img src="data_centers_pops_0.png" alt="LinkedIn&#39;s operational setup as of 2015 (circles represent data centers, diamonds represent PoPs)"></p>
<h3 id="我们还做了哪些工作？">我们还做了哪些工作？</h3>
<p>当然，我们的扩展故事永远不会这么简单。我们的工程和运维团队这些年做了不计其数的工作，主要包括这些大的创新：<br>这些年很多最关键系统都有自己丰富的扩展演化历史，包括会员图服务（Leo之外的第一个服务），搜索（第二个服务），新闻种子，通讯平台及会员信息后台。</p>
<p>我们还构建了数据基础平台支持长期的增长，这是Databus和Kafka的第一次实战，后来用Samza做数据流服务，Espresso和Voldemort作存储解决方案，Pinot用来分析系统，以及其它自定义解决方案。另外，我们的工具也得到了提升，这样工程师就可以自动化布署这些基础架构。</p>
<p>我们还使用Hadoop和Voldemort数据开发了大量的离线工作流，用以智能分析，如“你可能认识的人”，“相似经历”，“感觉兴趣的校友”及“个人简历浏览地图”。</p>
<p>我们重新考虑了前端的实现，增加客户端模板到混合页面（个人中心、我的大学页面），这样应用可以更加可交互，只要我们的服务器发送JSON或部分JSON数据。此外，模板页面通过CDN和浏览器缓存。我们也开始使用了BigPipe和Play框架，把我们的模型从线程化的服务器变成非阻塞异步的服务器。</p>
<p>除了代码，我们使用了Apache Traffic Server做多层代理和用HAProxy做负载均衡，数据中心，安全，智能路由，服务端渲染等等。</p>
<p>最后，我们继续提升服务器的性能，包含优化硬件，内存和系统的高级优化，使用更新的JRE。</p>
<h3 id="下一步">下一步</h3>
<p>LinkedIn今天仍在快速增长，仍有大量值得提升的工作要做，我们正在解决一些问题，看起来只解决了一部分 - <a href="https://www.linkedin.com/company/linkedin/careers?trk=eng-blog" target="_blank" rel="external">快来加入我们吧！</a></p>
<p>感谢Steve, Swee, Venkat, Eran, Ram, Brandon, Mammad, 和 Nick的审阅和帮助</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文： <a href="http://engineering.linkedin.com/architecture/brief-history-scaling-linkedin" target="_blank" rel="external">A Brief History of Scaling LinkedIn</a></p>
<blockquote>
<p><a href="https://www.linkedin.com/in/joshclemm" target="_blank" rel="external">Josh Clemm</a>是LinkedIn的高级工程经理，自2011年加入LinkedIn。他最近(2015/07/20)写了一篇文章，介绍了LinkedIn针对用户规模急速扩大带来的架构方面的变革。<br>文章有点像子柳写的<a href="https://book.douban.com/subject/24335672/" target="_blank" rel="external">淘宝技术这十年</a></p>
</blockquote>
<p>2003年是LinkedIn元年，公司成立的目标是连接你的个人人脉以获得更好的的工作机会。上线第一周才有2700个会员注册，时光飞梭，LinkedIn的产品、会员数量、服务器负载都极大的增长了。<br>今天，LinkedIn全球用户已经超过3.5亿。我们每秒有数十万个页面被访问，移动端流量已占到50%以上 (<a href="http://blog.linkedin.com/2014/04/18/the-next-three-billion/" target="_blank" rel="external">mobile moment</a>)。所有这些请求都从后台获取数据，而我们的后台系统可以处理每秒上百万次查询。</p>
<p>问题来了： <strong>所有这些是怎么做到的呢？</strong></p>
]]>
    
    </summary>
    
      <category term="架构" scheme="http://colobu.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用cgroups限制MongoDB的内存使用]]></title>
    <link href="http://colobu.com/2015/07/23/Using-Cgroups-to-Limit-MongoDB-memory-usage/"/>
    <id>http://colobu.com/2015/07/23/Using-Cgroups-to-Limit-MongoDB-memory-usage/</id>
    <published>2015-07-23T01:16:30.000Z</published>
    <updated>2015-07-31T13:28:02.510Z</updated>
    <content type="html"><![CDATA[<p><a href="https://www.kernel.org/doc/Documentation/cgroups/cgroups.txt" target="_blank" rel="external">cgroups</a>，其名称源自控制组群（control groups）的简写，是Linux内核的一个功能，用来限制，控制与分离一个进程组群的资源（如CPU、内存、磁盘输入输出等）。</p>
<p>这个项目最早是由Google的工程师在2006年发起（主要是Paul Menage和Rohit Seth），最早的名称为进程容器（process containers）。在2007年时，因为在Linux内核中，容器（container）这个名词有许多不同的意义，为避免混乱，被重命名为cgroup，并且被合并到2.6.24版的内核中去。自那以后，又添加了很多功能。</p>
<p>使​​​用​​​ cgroup，系​​​统​​​管​​​理​​​员​​​可​​​更​​​具​​​体​​​地​​​控​​​制​​​对​​​系​​​统​​​资​​​源​​​的​​​分​​​配​​​、​​​优​​​先​​​顺​​​序​​​、​​​拒​​​绝​​​、​​​管​​​理​​​和​​​监​​​控​​​。​​​可​​​更​​​好​​​地​​​根​​​据​​​任​​​务​​​和​​​用​​​户​​​分​​​配​​​硬​​​件​​​资​​​源​​​，提​​​高​​​总​​​体​​​效​​​率​​​。<br>在实践中，系统管理员一般会利用cgroup做下面这些事：</p>
<ul>
<li>隔离一个进程组（比如：nginx的所有进程），并限制他们所消费的资源，比如绑定CPU的核。</li>
<li>为这组进程 分配其足够使用的内存</li>
<li>为这组进程分配相应的网络带宽和磁盘存储限制</li>
<li>限制访问某些设备（通过设置设备的白名单）</li>
</ul>
<a id="more"></a>
<h2 id="cgroups相关概念">cgroups相关概念</h2>
<ol>
<li>任务（<strong>task</strong>）。在cgroups中，任务就是系统的一个进程。</li>
<li>控制组群（<strong>control group</strong>）。控制组群就是一组按照某种标准划分的进程。cgroups中的资源控制都是以控制组群为单位实现。一个进程可以加入到某个控制组群，也从一个进程组迁移到另一个控制组群。一个进程组的进程可以使用cgroups以控制组群为单位分配的资源，同时受到cgroups以控制组群为单位设定的限制。</li>
<li>层级（<strong>hierarchy</strong>）。控制组群可以组织成hierarchical的形式，既一颗控制组群树。控制组群树上的子节点控制组群是父节点控制组群的孩子，继承父控制组群的特定的属性。</li>
<li>子系统（<strong>subsystem</strong>）。一个子系统就是一个资源控制器，比如cpu子系统就是控制cpu时间分配的一个控制器。子系统必须附加（attach）到一个层级上才能起作用，一个子系统附加到某个层级以后，这个层级上的所有控制组群都受到这个子系统的控制。</li>
</ol>
<p>当前的cgroup有一下规则：<br>1.每次在系统中创建新层级时，该系统中的所有任务都是那个层级的默认 cgroup（我们称之为 root cgroup ，此cgroup在创建层级时自动创建，后面在该层级中创建的cgroup都是此cgroup的后代）的初始成员。<br>2.一个子系统最多只能附加到一个层级。 (一个层级不会附加两个同样的子系统)<br>3.一个层级可以附加多个子系统<br>4.一个任务可以是多个cgroup的成员，但是这些cgroup必须在不同的层级。<br>5.系统中的进程（任务）创建子进程（任务）时，该子任务自动成为其父进程所在 cgroup 的成员。然后可根据需要将该子任务移动到不同的 cgroup 中，但开始时它总是继承其父任务的cgroup。</p>
<h2 id="cgroup子系统">cgroup子系统</h2>
<p>cgroups为每种可以控制的资源定义了一个子系统。典型的子系统介绍如下：</p>
<ol>
<li><strong>cpu</strong> 子系统，主要限制进程的 cpu 使用率。</li>
<li><strong>cpuacct</strong> 子系统，可以统计 cgroups 中的进程的 cpu 使用报告。</li>
<li><strong>cpuset</strong> 子系统，可以为 cgroups 中的进程分配单独的 cpu 节点或者内存节点。</li>
<li><strong>memory</strong> 子系统，可以限制进程的 memory 使用量。</li>
<li><strong>blkio</strong> 子系统，可以限制进程的块设备 io。</li>
<li><strong>devices</strong> 子系统，可以控制进程能够访问某些设备。</li>
<li><strong>net_cls</strong> 子系统，可以标记 cgroups 中进程的网络数据包，然后可以使用 tc 模块（traffic control）对数据包进行控制。</li>
<li><strong>freezer</strong> 子系统，可以挂起或者恢复 cgroups 中的进程。</li>
<li><strong>ns</strong> 子系统，可以使不同 cgroups 下面的进程使用不同的 namespace。</li>
</ol>
<h2 id="cgroups安装">cgroups安装</h2>
<p>如果系统还没有安装cgroups,可以通过下面的命令进行安装</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install libcgroup</div></pre></td></tr></table></figure>

<p>启动和查看服务状态：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service cgconfig start</div><div class="line">service cgconfig status</div></pre></td></tr></table></figure>

<p>Linux把cgroups实现成一个文件系统，各个子系统的挂载点配置在<code>/etc/cgconfig.conf</code>文件中：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="title">mount</span> {</div><div class="line">        <span class="title">cpuset</span>  = /cgroup/cpuset;</div><div class="line">        <span class="title">cpu</span>     = /cgroup/cpu;</div><div class="line">        <span class="title">cpuacct</span> = /cgroup/cpuacct;</div><div class="line">        <span class="title">memory</span>  = /cgroup/memory;</div><div class="line">        <span class="title">devices</span> = /cgroup/devices;</div><div class="line">        <span class="title">freezer</span> = /cgroup/freezer;</div><div class="line">        <span class="title">net_cls</span> = /cgroup/net_cls;</div><div class="line">        <span class="title">blkio</span>   = /cgroup/blkio;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>或者也可以通过命令<code>lssubsys -m</code>或者<code>mount -t cgroup</code>挂载。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># lssubsys -m            </span></div><div class="line">cpuset /cgroup/cpuset</div><div class="line">cpu /cgroup/cpu</div><div class="line">cpuacct /cgroup/cpuacct</div><div class="line">memory /cgroup/memory</div><div class="line">devices /cgroup/devices</div><div class="line">freezer /cgroup/freezer</div><div class="line">net_cls /cgroup/net_cls</div><div class="line">blkio /cgroup/blkio</div></pre></td></tr></table></figure>

<p>或者你单独挂载某几个子系统：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount -t cgroup -o remount,cpu,cpuset,memory cpu_and_mem /cgroup/cpu_and_mem</div></pre></td></tr></table></figure>

<h2 id="cgroups使用">cgroups使用</h2>
<p>挂载某一个 cgroups 子系统到挂载点之后，就可以通过在挂载点下面建立文件夹或者使用<code>cgcreate</code>命令的方法创建 cgroups 层级结构中的节点。比如通过命令<code>cgcreate -g cpu:test</code>就可以在 cpu 子系统下建立一个名为 test 的节点。结果如下所示：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cgcreate -g cpu:test</span></div><div class="line"><span class="comment"># ls /cgroup/cpu</span></div><div class="line">cgroup.event_control  cpu.cfs_quota_us   cpu.shares         release_agent</div><div class="line">cgroup.procs          cpu.rt_period_us   cpu.stat           tasks</div><div class="line">cpu.cfs_period_us     cpu.rt_runtime_us  notify_on_release  test</div></pre></td></tr></table></figure>

<p>然后可以通过写入需要的值到 test 下面的不同文件，来配置需要限制的资源。每个子系统下面都可以进行多种不同的配置，需要配置的参数各不相同，详细的参数设置需要参考 cgroups 手册。使用 <code>cgset</code> 命令也可以设置 cgroups 子系统的参数，格式为 <code>cgset -r parameter=value path_to_cgroup</code>。<br>比如：<code>cgset -r cfs_quota_us=50000 test</code>限制进程组 test 使用50%的CPU。<br>或者直接写文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">echo 50000 &gt;</span> /cgroup/cpu/test/cpu.cfs_quota_us</span></div></pre></td></tr></table></figure>

<p>命令可以参考redhat的文档： <a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/Setting_Parameters.html" target="_blank" rel="external">Setting Parameters</a></p>
<p>当需要删除某一个 cgroups 节点的时候，可以使用 <code>cgdelete</code> 命令，比如要删除上述的 <em>test</em> 节点，可以使用 <code>cgdelete -r cpu:test</code>命令进行删除。</p>
<p>把进程加入到 cgroups 子节点也有多种方法，可以直接把 pid 写入到子节点下面的 task 文件中。也可以通过 <code>cgclassify</code> 添加进程，格式为 <code>cgclassify -g subsystems:path_to_cgroup pidlist</code>，也可以直接使用 <code>cgexec</code> 在某一个 cgroups 下启动进程，格式为<code>cgexec -g subsystems:path_to_cgroup command arguments</code>.</p>
<p>也可以在<code>/etc/cgconfig.conf</code>文件中定义group,格式如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">group <span class="tag">&lt;<span class="title">name</span>&gt;</span> {</div><div class="line">    [<span class="tag">&lt;<span class="title">permissions</span>&gt;</span>]</div><div class="line">    <span class="tag">&lt;<span class="title">controller</span>&gt;</span> {</div><div class="line">        <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>&gt;</span> = <span class="tag">&lt;<span class="title">param</span> <span class="attribute">value</span>&gt;</span>;</div><div class="line">        …</div><div class="line">    }</div><div class="line">    …</div><div class="line">}</div></pre></td></tr></table></figure>

<p>比如:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">mount {</div><div class="line">		<span class="variable">cpuset  =</span> /cgroup/cpuset;</div><div class="line">		<span class="variable">cpu     =</span> /cgroup/cpu;</div><div class="line">		<span class="variable">cpuacct =</span> /cgroup/cpuacct;</div><div class="line">		<span class="variable">memory  =</span> /cgroup/memory;</div><div class="line">		<span class="variable">devices =</span> /cgroup/devices;</div><div class="line">		<span class="variable">freezer =</span> /cgroup/freezer;</div><div class="line">		<span class="variable">net_cls =</span> /cgroup/net_cls;</div><div class="line">		<span class="variable">blkio   =</span> /cgroup/blkio;</div><div class="line">}</div><div class="line">     </div><div class="line">   group mysql_g1 {    </div><div class="line">       cpu {  </div><div class="line">               cpu.<span class="variable">cfs_quota_us =</span> <span class="number">50000</span>;  </div><div class="line">               cpu.<span class="variable">cfs_period_us =</span> <span class="number">100000</span>;  </div><div class="line">       }  </div><div class="line">       cpuset {    </div><div class="line">               cpuset.<span class="variable">cpus =</span> <span class="string">"3"</span>;    </div><div class="line">               cpuset.<span class="variable">mems =</span> <span class="string">"0"</span>;    </div><div class="line">       }    </div><div class="line">       cpuacct{  </div><div class="line">     </div><div class="line">       }  </div><div class="line">       memory {    </div><div class="line">               memory.<span class="variable">limit_in_bytes=</span><span class="number">104857600</span>;  </div><div class="line">               memory.<span class="variable">swappiness=</span><span class="number">0</span>;  </div><div class="line">               <span class="comment"># memory.max_usage_in_bytes=104857600;  </span></div><div class="line">               <span class="comment"># memory.oom_control=0;  </span></div><div class="line">       }   </div><div class="line">       blkio  {  </div><div class="line">              blkio.throttle.<span class="variable">read_bps_device=</span><span class="string">"8:0 524288"</span>;  </div><div class="line">              blkio.throttle.<span class="variable">write_bps_device=</span><span class="string">"8:0 524288"</span>;  </div><div class="line">       }   </div><div class="line">   }</div></pre></td></tr></table></figure>

<p>还可以让一个服务Service启动的时候加入进程组，具体文档请参考： <a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/Starting_a_Process.html#Starting_a_Service" target="_blank" rel="external">Starting_a_Service</a></p>
<p>Redhat的文档详细的介绍了cgroups的配置和使用方法，是很好的一个参考资料。</p>
<h2 id="实践，限制MongoDB的内存使用">实践，限制MongoDB的内存使用</h2>
<p>MongoDB是个吃内存的大户，它会尽可能的使用服务器的内存。在数据量巨大的时候，内存很快会被吃光，导致服务器上其它进程无法分配内存。<br>我们可以使用cgroups来限制MongoDB的内存使用。实际上，在参考文档2中 Vadim Tkachenko 就介绍了他的实际方法。</p>
<p>配置有几个步骤：</p>
<ol>
<li>创建一个控制组群：<code>cgcreate -g memory:DBLimitedGroup</code></li>
<li>指定可用的最大内存16G: <code>echo 16G &gt; /sys/fs/cgroup/memory/DBLimitedGroup/memory.limit_in_bytes</code></li>
<li>将缓存页丢掉 (flush and drop): <code>sync; echo 3 &gt; /proc/sys/vm/drop_caches</code></li>
<li>将mongodb的进程加入控制组：<code>cgclassify -g memory:DBLimitedGroup</code>pid of mongod``</li>
</ol>
<p>基本上就完成了任务，这样此MongoDB最多可以使用16G的内存。<br>为了处理机器重启还得手工添加的问题，你可以按照上面的文档将Mongo服务加入到控制组中。</p>
<p>除此之外，作者还提到了 dirty cache flush的问题， 注意两个参数：<code>/proc/sys/vm/dirty_background_ratio</code>和<code>/proc/sys/vm/dirty_ratio</code>。</p>
<p>这里有一篇关于调整磁盘缓冲参数的介绍：<br><strong>1)  /proc/sys/vm/dirty_ratio  </strong><br>这个参数控制文件系统的文件系统写缓冲区的大小，单位是百分比，表示系统内存的百分比，表示当写缓冲使用到系统内存多少的时候，开始向磁盘写出数据。增大之会使用更多系统内存用于磁盘写缓冲，也可以极大提高系统的写性能。但是，当你需要持续、恒定的写入场合时，应该降低其数值，：<br><code>echo &#39;1&#39; &gt; /proc/sys/vm/dirty_ratio</code></p>
<p><strong>2)  /proc/sys/vm/dirty_background_ratio  </strong><br>这个参数控制文件系统的pdflush进程，在何时刷新磁盘。单位是百分比，表示系统内存的百分比，意思是当写缓冲使用到系统内存多少的时候，pdflush开始向磁盘写出数据。增大之会使用更多系统内存用于磁盘写缓冲，也可以极大提高系统的写性能。但是，当你需要持续、恒定的写入场合时，应该降低其数值，：  </p>
<p><code>echo &#39;1&#39; &gt; /proc/sys/vm/dirty_background_ratio</code>  </p>
<p><strong>3)  /proc/sys/vm/dirty_writeback_centisecs  </strong><br>这个参数控制内核的脏数据刷新进程pdflush的运行间隔。单位是 1/100 秒。缺省数值是500，也就是 5 秒。如果你的系统是持续地写入动作，那么实际上还是降低这个数值比较好，这样可以把尖峰的写操作削平成多次写操作。设置方法如下：  </p>
<p><code>echo &quot;100&quot; &gt; /proc/sys/vm/dirty_writeback_centisecs</code><br>如果你的系统是短期地尖峰式的写操作，并且写入数据不大（几十M/次）且内存有比较多富裕，那么应该增大此数值：  </p>
<p><code>echo &quot;1000&quot; &gt; /proc/sys/vm/dirty_writeback_centisecs</code> </p>
<p><strong>4)  /proc/sys/vm/dirty_expire_centisecs  </strong><br>这个参数声明Linux内核写缓冲区里面的数据多“旧”了之后，pdflush进程就开始考虑写到磁盘中去。单位是 1/100秒。缺省是 30000，也就是 30 秒的数据就算旧了，将会刷新磁盘。对于特别重载的写操作来说，这个值适当缩小也是好的，但也不能缩小太多，因为缩小太多也会导致IO提高太快。  </p>
<p><code>echo &quot;100&quot; &gt; /proc/sys/vm/dirty_expire_centisecs</code><br>当然，如果你的系统内存比较大，并且写入模式是间歇式的，并且每次写入的数据不大（比如几十M），那么这个值还是大些的好。  </p>
<p><strong>5) /proc/sys/vm/vfs_cache_pressure  </strong><br>该文件表示内核回收用于directory和inode   cache内存的倾向；缺省值100表示内核将根据pagecache和swapcache，把directory和inode   cache保持在一个合理的百分比；降低该值低于100，将导致内核倾向于保留directory和inode   cache；增加该值超过100，将导致内核倾向于回收directory和inode   cache  </p>
<p>缺省设置：100  </p>
<p><strong>6) /proc/sys/vm/min_free_kbytes  </strong><br>该文件表示强制Linux   VM最低保留多少空闲内存（Kbytes）。<br>缺省设置：724（512M物理内存）  </p>
<p><strong>7) /proc/sys/vm/nr_pdflush_threads  </strong><br>该文件表示当前正在运行的pdflush进程数量，在I/O负载高的情况下，内核会自动增加更多的pdflush进程。<br>缺省设置：2（只读）  </p>
<p><strong>8) /proc/sys/vm/overcommit_memory  </strong><br>该文件指定了内核针对内存分配的策略，其值可以是0、1、2。<br>0，   表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。<br>1，   表示内核允许分配所有的物理内存，而不管当前的内存状态如何。<br>2，   表示内核允许分配超过所有物理内存和交换空间总和的内存（参照overcommit_ratio）。  </p>
<p>缺省设置：0  </p>
<p><strong>9) /proc/sys/vm/overcommit_ratio  </strong><br>该文件表示，如果overcommit_memory=2，可以过载内存的百分比，通过以下公式来计算系统整体可用内存。<br>系统可分配内存=交换空间+物理内存*overcommit_ratio/100 </p>
<p><strong>10) /proc/sys/vm/page-cluster  </strong><br>该文件表示在写一次到swap区的时候写入的页面数量，0表示1页，1表示2页，2表示4页。<br>缺省设置：3（2的3次方，8页）  </p>
<p><strong>11)   /proc/sys/vm/swapiness  </strong><br>该文件表示系统进行交换行为的程度，数值（0-100）越高，越可能发生磁盘交换。</p>
<h2 id="参考文档">参考文档</h2>
<ol>
<li><a href="https://www.kernel.org/doc/Documentation/cgroups/cgroups.txt" target="_blank" rel="external">https://www.kernel.org/doc/Documentation/cgroups/cgroups.txt</a></li>
<li><a href="https://www.percona.com/blog/2015/07/01/using-cgroups-to-limit-mysql-and-mongodb-memory-usage/" target="_blank" rel="external">Using Cgroups to Limit MySQL and MongoDB memory usage</a></li>
<li><a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/index.html" target="_blank" rel="external">Red Hat Enterprise Linux 6 Resource Management Guide</a></li>
<li><a href="http://blog.csdn.net/JesseYoung/article/details/39077829" target="_blank" rel="external">cgroups介绍及安装配置使用详解</a></li>
<li><a href="http://tech.meituan.com/cgroups.html" target="_blank" rel="external">美团 Linux资源管理之cgroups简介</a></li>
<li><a href="http://coolshell.cn/articles/17049.html" target="_blank" rel="external">Docker基础技术：Linux CGroup</a></li>
<li><a href="http://nannan408.iteye.com/blog/2097679" target="_blank" rel="external">linux集群之--设置磁盘缓冲参数</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://www.kernel.org/doc/Documentation/cgroups/cgroups.txt" target="_blank" rel="external">cgroups</a>，其名称源自控制组群（control groups）的简写，是Linux内核的一个功能，用来限制，控制与分离一个进程组群的资源（如CPU、内存、磁盘输入输出等）。</p>
<p>这个项目最早是由Google的工程师在2006年发起（主要是Paul Menage和Rohit Seth），最早的名称为进程容器（process containers）。在2007年时，因为在Linux内核中，容器（container）这个名词有许多不同的意义，为避免混乱，被重命名为cgroup，并且被合并到2.6.24版的内核中去。自那以后，又添加了很多功能。</p>
<p>使​​​用​​​ cgroup，系​​​统​​​管​​​理​​​员​​​可​​​更​​​具​​​体​​​地​​​控​​​制​​​对​​​系​​​统​​​资​​​源​​​的​​​分​​​配​​​、​​​优​​​先​​​顺​​​序​​​、​​​拒​​​绝​​​、​​​管​​​理​​​和​​​监​​​控​​​。​​​可​​​更​​​好​​​地​​​根​​​据​​​任​​​务​​​和​​​用​​​户​​​分​​​配​​​硬​​​件​​​资​​​源​​​，提​​​高​​​总​​​体​​​效​​​率​​​。<br>在实践中，系统管理员一般会利用cgroup做下面这些事：</p>
<ul>
<li>隔离一个进程组（比如：nginx的所有进程），并限制他们所消费的资源，比如绑定CPU的核。</li>
<li>为这组进程 分配其足够使用的内存</li>
<li>为这组进程分配相应的网络带宽和磁盘存储限制</li>
<li>限制访问某些设备（通过设置设备的白名单）</li>
</ul>
]]>
    
    </summary>
    
      <category term="cgroups" scheme="http://colobu.com/tags/cgroups/"/>
    
      <category term="Linux" scheme="http://colobu.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于dubbo框架下的RPC通讯协议性能测试]]></title>
    <link href="http://colobu.com/2015/07/21/dubbo-performance-test/"/>
    <id>http://colobu.com/2015/07/21/dubbo-performance-test/</id>
    <published>2015-07-21T02:47:24.000Z</published>
    <updated>2015-07-31T13:28:02.745Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="http://www.cnblogs.com/lengfo/p/4293399.html" target="_blank" rel="external">基于dubbo框架下的RPC通讯协议性能测试</a>,作者: <a href="http://www.cnblogs.com/lengfo" target="_blank" rel="external">lengfo</a></p>
<p>Dubbo RPC服务框架支持丰富的传输协议、序列化方式等通讯相关的配置和扩展。dubbo执行一次RPC请求的过程大致如下：消费者（Consumer）向注册中心（Registry）执行RPC请求，注册中心分配服务URL并路由到具体服务提供方（Provider），消费者和服务提供方建立网络连接，服务提供方在本地创建连接池对象并提供远程服务，对于长连接类型协议（如dubbo协议）将保持连接，减少握手认证，调用过程中可以避免频繁建立和断开连接导致的性能开销，保持长连接需要有心跳包的发送，所以对于非频繁调用的服务保持连接同样会有消耗。更多关于dubbo详细介绍请参照官方文档（<a href="http://alibaba.github.io/dubbo-doc-static/Home-zh.htm）。" target="_blank" rel="external">http://alibaba.github.io/dubbo-doc-static/Home-zh.htm）。</a></p>
<p>1、支持常见的传输协议：RMI、Dubbo、Hessain、WebService、Http等，其中Dubbo和RMI协议基于TCP实现，Hessian和WebService基于HTTP实现。<br>2、传输框架：Netty、Mina、以及基于servlet等方式。<br>3、序列化方式：Hessian2、dubbo、JSON（<a href="https://github.com/AlibabaTech/fastjson" target="_blank" rel="external">fastjson</a> 实现）、JAVA、SOAP 等。</p>
<p>本文主要基于dubbo框架下的通讯协议进行性能测试对比。<br><a id="more"></a></p>
<h2 id="测试方案">测试方案</h2>
<p>基于dubbo 2.5.3框架，使用zookeeper作为dubbo服务注册中心，分别以单线程和多线程的方式测试以下方案：</p>
<table>
<tbody>
<tr>
<td style="width: 50px; text-align: center;"><span style="font-size: 14px;"><strong>&nbsp;</strong></span></td>
<td style="text-align: center;"><span style="width: 120px; font-size: 14px;"><strong>Protocol</strong></span></td>
<td style="text-align: center;"><span style="width: 120px; font-size: 14px;"><strong>&nbsp; &nbsp; &nbsp; Transporter &nbsp;</strong></span></td>
<td style="text-align: center;"><span style="width: 120px; font-size: 14px;"><strong>&nbsp; &nbsp; Serialization &nbsp; &nbsp;</strong></span></td>
<td style="text-align: center;"><span style="width: 150px; font-size: 14px;"><strong>Remark</strong></span></td>
</tr>
<tr>
<td style="text-align: center;"><strong><span style="font-size: 14px;">A</span></strong></td>
<td><span style="font-size: 14px;">&nbsp;dubbo 协议</span></td>
<td><span style="font-size: 14px;">&nbsp;netty</span></td>
<td><span style="font-size: 14px;">&nbsp;hessian2</span></td>
<td><span style="font-size: 14px;">&nbsp;</span></td>
</tr>
<tr>
<td style="text-align: center;"><strong><span style="font-size: 14px;">B</span></strong></td>
<td><span style="font-size: 14px;">&nbsp;dubbo 协议</span></td>
<td><span style="font-size: 14px;">&nbsp;netty</span></td>
<td><span style="font-size: 14px;">&nbsp;dubbo</span></td>
<td><span style="font-size: 14px;">&nbsp;</span></td>
</tr>
<tr>
<td style="text-align: center;"><strong><span style="font-size: 14px;">C</span></strong></td>
<td><span style="font-size: 14px;">&nbsp;dubbo 协议</span></td>
<td><span style="font-size: 14px;">&nbsp;netty</span></td>
<td><span style="font-size: 14px;">&nbsp;java</span></td>
<td><span style="font-size: 14px;">&nbsp;</span></td>
</tr>
<tr>
<td style="text-align: center;"><strong><span style="font-size: 14px;">D</span></strong></td>
<td><span style="font-size: 14px;">&nbsp;RMI&nbsp;协议</span></td>
<td><span style="font-size: 14px;">&nbsp;netty</span></td>
<td><span style="font-size: 14px;">&nbsp;java</span></td>
<td><span style="font-size: 14px;">&nbsp;</span></td>
</tr>
<tr>
<td style="text-align: center;"><strong><span style="font-size: 14px;">E</span></strong></td>
<td><span style="font-size: 14px;">&nbsp;RMI&nbsp;协议</span></td>
<td><span style="font-size: 14px;">&nbsp;netty</span></td>
<td><span style="font-size: 14px;">&nbsp;hessian2</span></td>
<td><span style="font-size: 14px;">&nbsp;</span></td>
</tr>
<tr>
<td style="text-align: center;"><strong><span style="font-size: 14px;">F</span></strong></td>
<td><span style="font-size: 14px;">&nbsp;Hessian 协议</span></td>
<td><span style="font-size: 14px;">&nbsp;servlet</span></td>
<td><span style="font-size: 14px;">&nbsp;hessian2</span></td>
<td><span style="font-size: 14px;">&nbsp;Hessian，基于tomcat容器 &nbsp; &nbsp;&nbsp;</span></td>
</tr>
<tr>
<td style="text-align: center;"><strong><span style="font-size: 14px;">G</span></strong></td>
<td><span style="font-size: 14px;">&nbsp;WebService 协议 &nbsp;</span></td>
<td><span style="font-size: 14px;">&nbsp;servlet</span></td>
<td><span style="font-size: 14px;">&nbsp;SOAP</span></td>
<td><span style="font-size: 14px;">&nbsp;CXF，基于tomcat容器 &nbsp;</span></td>
</tr>
</tbody>
</table><br>## 传输测试数据<br>1、单POJO对象，嵌套复杂集合类型<br>2、POJO集合，包含100个单POJO对象<br>3、1K字符串<br>4、100K字符串<br>5、1M字符串<br><br>## 服务接口和实现<br>1、服务接口相关代码：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ibusiness;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> model.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBusinessOrder</span> </span>{ </div><div class="line">    <span class="keyword">public</span> String <span class="title">SendStr</span>(String str); </div><div class="line">    <span class="keyword">public</span> List&lt;OrderInfo&gt; <span class="title">LoadOrders</span>(List&lt;OrderInfo&gt; orders); </div><div class="line">    <span class="keyword">public</span> OrderInfo <span class="title">LoadOrder</span>(OrderInfo order);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>2、服务实现相关代码，测试数据在服务器端不做任何处理原样返回：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> business;</div><div class="line"></div><div class="line"><span class="keyword">import</span> ibusiness.IBusinessOrder;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> model.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessOrder</span> <span class="keyword">implements</span> <span class="title">IBusinessOrder</span> </span>{</div><div class="line">    <span class="keyword">public</span> String <span class="title">SendStr</span>(String str) {</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> List&lt;OrderInfo&gt; <span class="title">LoadOrders</span>(List&lt;OrderInfo&gt; orders) {</div><div class="line">        <span class="keyword">return</span> orders;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> OrderInfo <span class="title">LoadOrder</span>(OrderInfo order) {</div><div class="line">        <span class="keyword">return</span> order;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="单线程测试">单线程测试</h2>
<h4 id="1、测试仅记录rpc调用时间，测试数据的读取组装以及首次建立连接等相关耗时时间不作统计，循环执行100次取平均值。_">1、测试仅记录rpc调用时间，测试数据的读取组装以及首次建立连接等相关耗时时间不作统计，循环执行100次取平均值。　　</h4>
<h4 id="2、服务消费方测试代码">2、服务消费方测试代码</h4>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.service.EchoService;</div><div class="line"><span class="keyword">import</span> common.Common;</div><div class="line"></div><div class="line"><span class="keyword">import</span> ibusiness.*;</div><div class="line"><span class="keyword">import</span> model.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Program</span> </span>{</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> Exception {</div><div class="line"></div><div class="line">        ApplicationContext ctx = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"src//applicationContext.xml"</span>);</div><div class="line">        IBusinessOrder orderBusiness = (IBusinessOrder) ctx.getBean(<span class="string">"orderBusiness"</span>);</div><div class="line"></div><div class="line"><span class="comment">//        EchoService echoService = (EchoService) orderBusiness;</span></div><div class="line"><span class="comment">//        String status = echoService.$echo("OK").toString();</span></div><div class="line"><span class="comment">//        if (!status.equals("OK")) {</span></div><div class="line"><span class="comment">//            System.out.println("orderBusiness out of service!");</span></div><div class="line"><span class="comment">//            return;</span></div><div class="line"><span class="comment">//        } else {</span></div><div class="line"><span class="comment">//            System.out.println("orderBusiness in service !");</span></div><div class="line"><span class="comment">//        }</span></div><div class="line"></div><div class="line">        <span class="keyword">long</span> startMili, endMili;</div><div class="line">        <span class="keyword">int</span> loop = <span class="number">100</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 单个pojo</span></div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            OrderInfo order = Common.BuildOrder();</div><div class="line">            orderBusiness.LoadOrder(order); <span class="comment">// 防止首次连接的开销</span></div><div class="line"></div><div class="line">            startMili = System.currentTimeMillis();</div><div class="line">            OrderInfo returnOrder = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loop; i++) {</div><div class="line">                returnOrder = orderBusiness.LoadOrder(order);</div><div class="line">            }</div><div class="line">            endMili = System.currentTimeMillis();</div><div class="line">            System.out.println(<span class="string">"单个pojo 平均传输耗时为："</span> + ((endMili - startMili) / (<span class="keyword">float</span>) loop) + <span class="string">"毫秒 ,返回对象BillNumber:"</span> + returnOrder.getBillNumber());</div><div class="line">        } <span class="keyword">catch</span> (Exception ex) {</div><div class="line">            System.out.println(<span class="string">"单个pojo 测试失败!"</span>);</div><div class="line">            <span class="comment">//ex.printStackTrace();</span></div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">// pojo集合 (100)</span></div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            List&lt;OrderInfo&gt; orderList = Common.BuildOrderList();</div><div class="line">            startMili = System.currentTimeMillis();</div><div class="line">            List&lt;OrderInfo&gt; returnOrderList = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loop; i++) {</div><div class="line">                returnOrderList = orderBusiness.LoadOrders(orderList);</div><div class="line">            }</div><div class="line">            endMili = System.currentTimeMillis();</div><div class="line">            System.out.println(<span class="string">"pojo集合 (100) 平均传输耗时为："</span> + ((endMili - startMili) / (<span class="keyword">float</span>) loop) + <span class="string">"毫秒 ,返回记录数："</span> + returnOrderList.size());</div><div class="line">        } <span class="keyword">catch</span> (Exception ex) {</div><div class="line">            System.out.println(<span class="string">"pojo集合 (100) 测试失败!"</span>);</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">// 1K String</span></div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            String str1k = Common.Build1KString();</div><div class="line">            startMili = System.currentTimeMillis();</div><div class="line">            String returnStr1k = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loop; i++) {</div><div class="line">                returnStr1k = orderBusiness.SendStr(str1k);</div><div class="line">            }</div><div class="line">            endMili = System.currentTimeMillis();</div><div class="line">            System.out.println(<span class="string">"1K String 平均传输耗时为："</span> + ((endMili - startMili) / (<span class="keyword">float</span>) loop) + <span class="string">"毫秒,返回字符长度："</span> + returnStr1k.length());</div><div class="line">        } <span class="keyword">catch</span> (Exception ex) {</div><div class="line">            System.out.println(<span class="string">"1K String 测试失败!"</span>);</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">// 100K String</span></div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            String str100K = Common.Build100KString();</div><div class="line">            startMili = System.currentTimeMillis();</div><div class="line">            String returnStr100k = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loop; i++) {</div><div class="line">                returnStr100k = orderBusiness.SendStr(str100K);</div><div class="line">            }</div><div class="line">            endMili = System.currentTimeMillis();</div><div class="line">            System.out.println(<span class="string">"100K String 平均传输耗时为："</span> + ((endMili - startMili) / (<span class="keyword">float</span>) loop) + <span class="string">"毫秒,返回字符长度："</span> + returnStr100k.length());</div><div class="line">        } <span class="keyword">catch</span> (Exception ex) {</div><div class="line">            System.out.println(<span class="string">"100K String 测试失败!"</span>);</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">// 1M String</span></div><div class="line">        <span class="keyword">try</span> {</div><div class="line">            String str1M = Common.Build1MString();</div><div class="line">            startMili = System.currentTimeMillis();</div><div class="line">            String returnStr1M = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loop; i++) {</div><div class="line">                returnStr1M = orderBusiness.SendStr(str1M);</div><div class="line">            }</div><div class="line">            endMili = System.currentTimeMillis();</div><div class="line">            System.out.println(<span class="string">"1M String 平均传输耗时为："</span> + ((endMili - startMili) / (<span class="keyword">float</span>) loop) + <span class="string">"毫秒,返回字符长度："</span> + returnStr1M.length());</div><div class="line">        } <span class="keyword">catch</span> (Exception ex) {</div><div class="line">            System.out.println(<span class="string">"1M String 测试失败!"</span>);</div><div class="line">        }</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"all test done!"</span>);</div><div class="line">    } </div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="3、测试数据耗时记录">3、测试数据耗时记录</h4>
<p>A、dubbo 协议、netty 传输、hessian2 序列化</p>
<p><dubbo:protocol name="dubbo" server="netty" port="30001" serialization="hessian2"></dubbo:protocol></p>
<table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>0.958毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>1.438毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>0.68毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>4.262毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>32.473毫秒&nbsp;</td>
</tr>
</tbody>
</table><br>B、dubbo 协议、netty 传输、dubbo 序列化<br><dubbo:protocol name="dubbo" server="netty" port="30001" serialization="dubbo"><br><table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>1.45毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>3.42毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>0.94毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>4.35毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>27.92毫秒</td>
</tr>
</tbody>
</table><br>C、dubbo 协议、netty 传输、java 序列化<br><dubbo:protocol name="dubbo" server="netty" port="30001" serialization="java"><br><table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>1.91毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>4.48毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>1.0毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>3.3毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>18.09毫秒</td>
</tr>
</tbody>
</table><br>D、RMI 协议、netty 传输、java 序列化<br><dubbo:protocol name="rmi" server="netty" port="1099" serialization="java"><br><table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>1.63毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>5.15毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>0.77毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>2.15毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>15.21毫秒</td>
</tr>
</tbody>
</table><br>E、RMI 协议、netty 传输、hessian2 序列化<br><dubbo:protocol name="rmi" server="netty" port="1099" serialization="hessian2"><br><table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>1.63毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>5.12毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>0.76毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>2.13毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>15.11毫秒</td>
</tr>
</tbody>
</table><br>F、Hessian协议、servlet（tomcat容器）、hessian2 序列化<br><dubbo:protocol name="hessian" port="8080" server="servlet" serialization="hessian2"><br><table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>1.6毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>5.98毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>1.88毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>5.52毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>39.87毫秒</td>
</tr>
</tbody>
</table><br>G、WebService协议、servlet（tomcat容器）、SOAP序列化<br><dubbo:protocol name="webservice" port="8080" server="servlet"><br><table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>7.4毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>34.39毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>6.0毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>7.43毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>34.61毫秒</td>
</tr>
</tbody>
</table><br>#### 4、性能对比<br><img src="http://images.cnitblog.com/blog/536814/201502/271622231273239.png" alt=""><br><br>## 多线程测试<br>#### 1、由于测试机器配置较低，为了避免达到CPU瓶颈，测试设定服务消费方Consumer并发10个线程，每个线程连续对远程方法执行5次调用，服务提供方设置允许最大连接数100个，同时5个连接并行执行，超时时间设置为5000ms，要求所有事务都能正确返回没有异常，统计包含首次建立连接的消耗时间。<br>#### 2、服务消费方测试代码<br>#### 3、测试数据耗时记录<br><br>A、dubbo 协议、netty 传输、hessian2 序列化<br><dubbo:protocol name="dubbo" server="netty" port="30001" serialization="hessian2"><br><table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>1165毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>1311毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>1149毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>1273毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>2141毫秒</td>
</tr>
</tbody>
</table><br>B、dubbo 协议、netty 传输、dubbo 序列化<br><dubbo:protocol name="dubbo" server="netty" port="30001" serialization="dubbo"><br><table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>1220毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>1437毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>1145毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>1253毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>2065毫秒</td>
</tr>
</tbody>
</table><br>C、dubbo 协议、netty 传输、java 序列化<br><dubbo:protocol name="dubbo" server="netty" port="30001" serialization="java"><br><table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>1188毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>1401毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>1123毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>1227毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>1884毫秒</td>
</tr>
</tbody>
</table>

<p>D、RMI 协议、netty 传输、java 序列化 </p>
<p><dubbo:protocol name="rmi" server="netty" port="1099" serialization="java">  </dubbo:protocol></p>
<table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>1751毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>1569毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>1766毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>1356毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>1741毫秒</td>
</tr>
</tbody>
</table>

<p>E、RMI 协议、netty 传输、hessian2 序列化 </p>
<p><dubbo:protocol name="rmi" server="netty" port="1099" serialization="hessian2"> </dubbo:protocol></p>
<table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>1759毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>1968毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>1239毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>1339毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>1736毫秒</td>
</tr>
</tbody>
</table>

<p>F、Hessian协议、servlet、hessian2 序列化 </p>
<p><dubbo:protocol name="hessian" port="8080" server="servlet" serialization="hessian2"> </dubbo:protocol></p>
<table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>1341毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>2223毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>1800毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>1916毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>2445毫秒</td>
</tr>
</tbody>
</table>

<p>G、WebService协议、servlet、SOAP序列化</p>
<p><dubbo:protocol name="webservice" port="8080" server="servlet"> </dubbo:protocol></p>
<p><table style="width: 300px;" border="1">
<tbody>
<tr>
<td width="150">单个POJO</td>
<td>1975毫秒</td>
</tr>
<tr>
<td>POJO集合&nbsp;(100)</td>
<td>2768毫秒</td>
</tr>
<tr>
<td>1K String</td>
<td>1894毫秒</td>
</tr>
<tr>
<td>100K String</td>
<td>2098毫秒</td>
</tr>
<tr>
<td>1M String</td>
<td>2887毫秒</td>
</tr>
</tbody>
</table></p>
<h4 id="4、性能对比">4、性能对比</h4>
<p><img src="http://images.cnitblog.com/blog/536814/201502/271734351114160.png" alt=""></p>
<h2 id="性能分析">性能分析</h2>
<p>测试过程中尽管考虑了非常多的影响因素，但仍然有很多局限性，包括连接数限制、并发量、线程池策略、Cache、IO、硬件性能瓶颈等等因素，而且各自的适用场景不同，测试结果仅供参考。</p>
<p>从单线程测试结果可以看出，dubbo协议采用NIO复用单一长连接更适合满足高并发小数据量的rpc调用，而在大数据量下的传输性能并不好，建议使用rmi协议，多线程测试中dubbo协议对小数据量的rpc调用同样保持优势，在大数据量的传输中由于长连接的原因对比rmi协议传输耗时差距并不明显，这点同样验证了上述观点。关于数据的序列化方式选择需要考虑序列化和反序列化的效率问题，传输内容的大小，以及格式的兼容性约束，其中hessian2作为duobb协议下的默认序列化方式，推荐使用。</p>
<p>　　如果有描述错误或者不当的地方欢迎指正。</p>
</dubbo:protocol></dubbo:protocol></dubbo:protocol></dubbo:protocol></dubbo:protocol></dubbo:protocol></dubbo:protocol></dubbo:protocol></dubbo:protocol>]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="http://www.cnblogs.com/lengfo/p/4293399.html" target="_blank" rel="external">基于dubbo框架下的RPC通讯协议性能测试</a>,作者: <a href="http://www.cnblogs.com/lengfo" target="_blank" rel="external">lengfo</a></p>
<p>Dubbo RPC服务框架支持丰富的传输协议、序列化方式等通讯相关的配置和扩展。dubbo执行一次RPC请求的过程大致如下：消费者（Consumer）向注册中心（Registry）执行RPC请求，注册中心分配服务URL并路由到具体服务提供方（Provider），消费者和服务提供方建立网络连接，服务提供方在本地创建连接池对象并提供远程服务，对于长连接类型协议（如dubbo协议）将保持连接，减少握手认证，调用过程中可以避免频繁建立和断开连接导致的性能开销，保持长连接需要有心跳包的发送，所以对于非频繁调用的服务保持连接同样会有消耗。更多关于dubbo详细介绍请参照官方文档（<a href="http://alibaba.github.io/dubbo-doc-static/Home-zh.htm）。" target="_blank" rel="external">http://alibaba.github.io/dubbo-doc-static/Home-zh.htm）。</a></p>
<p>1、支持常见的传输协议：RMI、Dubbo、Hessain、WebService、Http等，其中Dubbo和RMI协议基于TCP实现，Hessian和WebService基于HTTP实现。<br>2、传输框架：Netty、Mina、以及基于servlet等方式。<br>3、序列化方式：Hessian2、dubbo、JSON（<a href="https://github.com/AlibabaTech/fastjson" target="_blank" rel="external">fastjson</a> 实现）、JAVA、SOAP 等。</p>
<p>本文主要基于dubbo框架下的通讯协议进行性能测试对比。<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[架构学习资料整理（2013）]]></title>
    <link href="http://colobu.com/2015/07/21/Architecture-2013/"/>
    <id>http://colobu.com/2015/07/21/Architecture-2013/</id>
    <published>2015-07-21T00:48:22.000Z</published>
    <updated>2015-07-31T13:28:02.182Z</updated>
    <content type="html"><![CDATA[<p>地瓜哥2013攒的架构资料：<a href="http://www.diguage.com/archives/41.html" target="_blank" rel="external">分享D瓜哥最近攒的资料（架构方面）</a></p>
<p>以前见过零零散散地介绍一些知名网站架构的分析文章。最近D瓜哥也想研究一下各大知名网站的架构。所以，就搜集了一下这方面资料。限于时间问题，这篇文章分享的文章并没有都看完，所以不保证所有文章的质量。另外，如果有朋友发现更好的文章，欢迎留言告知。再补充进来。</p>
<a id="more"></a>
<h2 id="知名网站架构分析">知名网站架构分析</h2>
<ol><br><li><a target="_blank" href="http://dbanotes.net/arch/google_app_engine_arch.html">探索Google App Engine背后的奥秘(1)–Google的核心技术</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/google_app_engine_arch_guess.html">探索Google App Engine背后的奥秘(2)–Google的整体架构猜想</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/google_app_engine-intro.html">探索Google App Engine背后的奥秘(3)- Google App Engine的简介</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/google_app_engine-arch_intro.html">探索Google App Engine背后的奥秘(4)- Google App Engine的架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/google_app_engine-datastore.html">探索Google App Engine背后的奥秘(5)- Datastore的设计</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/google_app_engine-summary.html">探索Google App Engine背后的奥秘(6)-<span id="more-41"></span> 总结</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/8/16/the-architecture-of-amazon.html">Amazon网站架构学习总结</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/8/16/the-architecture-of-amazon.html">Amazon网站架构学习总结</a></li><br><li><a target="_blank" href="http://dbanotes.net/tech-memo/amazon_dynamo.html">Amazon 的 Dynamo 架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/web/ebay_application_server.html">eBay 的应用服务器规模</a></li><br><li><a target="_blank" href="http://dbanotes.net/database/ebay_storage.html">eBay 的数据量</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/taobao_arch.html">来自淘宝的架构经验</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/yahoo_arch.html">Yahoo！社区架构</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/facebook-arch-overview-part1">基于Facebook和Flash平台的应用架构解析（一）</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/facebook-arch-overview-part2">基于Facebook和Flash平台的应用架构解析（二）</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/facebook-arch-overview-final">基于Facebook和Flash平台的应用架构解析（三）</a></li><br><li><a target="_blank" href="http://www.biaodianfu.com/facebook-efficient-storage-of-billions-of-photos.html">Facebook图片存储架构的学习</a></li><br><li><a target="_blank" href="http://developer.51cto.com/art/200905/123565.htm">facebook图片存储架构技术全解析</a></li><br><li><a target="_blank" href="http://www.csdn.net/article/2011-04-29/296900">Facebook数据仓库揭秘：RCFile高效存储结构</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/facebook_arch_note.html">Facebook 架构学习</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/facebook_arch_note.html">Facebook 架构学习</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/renren-mobile-arch">人人网移动开发架构</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/qzone-architecture">QQ空间技术架构之深刻揭密</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/twitter_arch.html">Twitter 的架构扩展: 100 倍性能提升</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/8/14/the-architecture-of-twitter.html">Twitter网站架构学习笔记</a></li><br><li><a target="_blank" href="http://developer.51cto.com/art/201009/226825.htm">国内外大型SNS网站后台架构对比</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/8/13/the-architecture-of-youku.html">优酷网架构学习笔记</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/youku_arch.html">优酷网(Youku.com)架构经验</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/3/6/634350416046298451.html">YouTube架构学习体会</a></li><br><li><a target="_blank" href="http://dbanotes.net/opensource/youtube_web_arch.html">YouTube 的架构扩展</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/8/27/the-architecture-of-digg.html">Digg网站架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/digg_arch_cache_and_shard.html">Digg 网站架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/opensource/wikipedia_arch.html">WikiPedia技术架构学习笔记</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/8/16/the-architecture-of-yupoo.html">Yupoo网站架构学习总结</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/3/7/634351294385186067.html">Flickr 网站架构分析</a></li><br><li><a target="_blank" href="http://dbanotes.net/web/flickr_lamp_capacity_planning.html">学习 Flickr 的 基于 LAMP 的容量规划经验</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/myspace_arch_2008.html">MySpace 系统架构</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/3/7/634351257301504864.html">回顾MySpace架构的坎坷之路</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/hj-yihaodian-b2c-evolution-road">挑战空中加油——1号店B2C电商系统演进之路</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/3/5/634349627089221280.html">PlentyOfFish.com .NET网站的又一传奇</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/douban_arch.html">学习豆瓣好榜样–网站架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/37signals_arch.html">37Signals 架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/review/tailrank_arch.html">Tailrank 网站架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/smugmug_arch.html">SmugMug 的架构介绍</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/5/26/poppende-architecture.html">高并发PHP网站Poppen.de架构学习</a></li><br><li><a target="_blank" href="https://groups.drupal.org/node/194308">Drupal与大型网站架构</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/imobile_web_arch_gaochunhui.html">手机之家网站架构–对话高春辉</a></li><br><li><a target="_blank" href="http://www.cnblogs.com/realviv/articles/1883563.html">手机之家的网站架构设计和演化</a></li><br><li><a target="_blank" href="http://dbanotes.net/arch/heroku_architecture.html">学习 HeroKu 的架构设计</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/3/17/634359701352994625.html">各大网站架构总结笔记</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/presentations/petals-network-architecture-introduced">花瓣网的架构介绍</a></li><br><li><a target="_blank" href="http://developer.51cto.com/developer/webarc/">大型网站架构技术专家谈</a></li><br></ol>

<h2 id="架构分析与设计">架构分析与设计</h2>
<ol><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/the-network-infrastructure-in-an-open-environment">架构之美–开放环境下的网络架构</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/message-based-distributed-architecture">案例分析：基于消息的分布式架构</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/ieee-pattern-based-architecture-reviews">基于模式的架构评审</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/next-generation-massively-multithreaded-architectures">为不规则应用设计新一代超大型多线程架构</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/rails-voip-system-architecture-and-development">从简单到复杂：大型Rails与VoIP系统架构与部署实践</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/it-architecture-inside-out-perspectives">专家视角看IT与架构</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/cjz-architecture-corruption">架构腐化之谜</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/xw-cloud-in-my-view">我眼中的云端架构</a></li><br><li><a target="_blank" href="http://www.yejun.cn/?p=1154">从100PV到1亿级PV网站架构演变</a></li><br><li><a target="_blank" href="http://open.taobao.com/doc/detail.htm?id=1011">网站架构设计方案</a></li><br><li><a target="_blank" href="http://hi.baidu.com/injava/item/e62923e88a713ff7e1a5d44b">浅谈大型网站动态应用系统架构</a>——鉴于某度有胡乱改系统，而且不自动保留原来数据的恶习，建议大家手动备份下来。</li><br><li><a target="_blank" href="http://blog.sina.com.cn/s/blog_46d0a3930100euxb.html">做大的艺术 – 大型网站的架构设计</a></li><br><li><a target="_blank" href="http://www.williamlong.info/archives/1960.html">平台网站架构设计之我所见</a></li><br><li><a target="_blank" href="https://speakerdeck.com/shiningray/diao-si-cheng-xu-yuan-ru-he-da-zao-ri-pvbai-mo-de-wang-zhan-jia-gou">屌丝程序员如何打造日PV百万的网站架构</a></li><br><li><a target="_blank" href="http://www.ibm.com/developerworks/cn/java/j-lo-restmvc/">设计 REST 风格的 MVC 框架</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/5/24/memcached-in-cluster-structure.html">集群架构实践 – 初试Memcached</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/5/7/634404076902160236.html">BigPipe，加速你的页面加载</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/4/28/634395931511515337.html">一步步构建大型网站架构</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2012/2/18/image-storage-cache-1.html">图片存储架构学习：缓存，架构师的美丽小三</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/news/2008/06/extremescaling">要快速伸缩？重新架构吧！</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/12/2/big-cluster-rails-voip-experience.html">大型Rails与VoIP系统架构与部署实践</a></li><br><li><a target="_blank" href="http://www.williamlong.info/archives/1908.html">LAMP网站架构方案分析</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2008/09/03/226749.html">大型网站架构演变和知识体系</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2009/04/28/267970.html">网站架构相关PPT、文章整理</a></li><br><li><a target="_blank" href="http://www.toplee.com/blog/71.html">说说大型高并发高负载网站的系统架构</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/09/25/14035.html">软件架构设计思考之一</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/video-service-arch">视频流服务架构解析</a></li><br><li><a target="_blank" href="http://www.diguage.com/archives/7.html">Rails架构简介</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/anti-ddos-cdn-1">自建CDN防御DDoS（1）：知己知彼，建设持久防线</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/anti-ddos-cdn-2">自建CDN防御DDoS（2）：架构设计、成本与部署细节</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/anti-ddos-cdn-3">自建CDN防御DDoS（3）：架构的后续改进</a></li><br><li><a target="_blank" href="http://blog.yufeng.info/ppt">系统技术非业余研究-资料下载</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/08/29/11503.html">中小型应用系统知识体系</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/08/23/10824.html">中小型应用系统架构体系</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/architect/">《架构师》月刊</a>——InfoQ推出来的电子杂志。貌似还不错。</li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/06/13/6037.html">系统设计说明书(架构、概要、详细)目录结构</a>——D瓜哥不太擅长写文档，所以插播个文档模板。</li><br></ol>

<h2 id="架构背后的技术">架构背后的技术</h2>
<ol><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2011/11/15/cdn-introduction.html">CDN（内容分发网络）技术原理</a></li><br><li><a target="_blank" href="http://www.diguage.com/archives/34.html">高性能网站的十四条黄金法则</a></li><br><li><a target="_blank" href="http://blog.csdn.net/longxibendi/article/details/6647024">大型网站后台架构的web server与缓存</a></li><br><li><a target="_blank" href="http://blog.csdn.net/21aspnet/article/details/5295572">Facebook性能大提升的秘密：HipHop</a></li><br><li><a target="_blank" href="http://www.itivy.com/ivy/archive/2012/3/10/squid-usage.html">浅谈Squid在图片存储架构中的应用</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/tao-tfs">揭秘淘宝自主研发的文件系统——TFS</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/lzy-million-visits-site-technical-preparations">百万级访问量网站的技术准备工作</a></li><br><li><a target="_blank" href="http://blog.csdn.net/longxibendi/article/details/6665670">谈谈大型网站的负载均衡器、db proxy和db</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/design-motivation-and-introduction-of-Pomelo-framework">深入浅出node.js游戏服务器开发——Pomelo框架的设计动机与架构介绍</a></li><br><li><a target="_blank" href="http://os.51cto.com/art/201111/301143.htm">架构师不可不知的十大可扩展架构</a></li><br><li><a target="_blank" href="http://blog.csdn.net/jarfield/article/details/4322953">Memcached FAQ(1) 一般性的问题</a></li><br><li><a target="_blank" href="http://blog.csdn.net/jarfield/article/details/4336035">Memcached FAQ(2) 集群架构方面的问题</a></li><br><li><a target="_blank" href="http://blog.csdn.net/jarfield/article/details/4341819">Memcached FAQ(3) 性能和客户端库方面的问题</a></li><br><li><a target="_blank" href="http://blog.csdn.net/jarfield/article/details/4345501">Memcached FAQ(4) 选项、Item过期和命名空间方面的问题</a></li><br><li><a target="_blank" href="http://www.diguage.com/archives/6.html">分享一些资料（侧重Linux）</a></li><br><li><a target="_blank" href="http://www.diguage.com/archives/75.html">用JavaScript阐述MapReduce原理</a></li><br><li><a target="_blank" href="http://www.diguage.com/archives/67.html">分享一些D瓜哥攒的比较好的Web开发资料</a></li><br></ol>

<h2 id="数据库架构">数据库架构</h2>
<ol><br><li><a target="_blank" href="http://blog.csdn.net/zhangzhaokun/article/details/4711693">大型高并发高负载web应用系统架构-数据库架构策略</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/yupoo-partition-database">又拍网架构中的分库设计</a></li><br><li><a target="_blank" href="http://www.infoq.com/cn/articles/Architecture-Datomic">Datomic的架构</a></li><br><li><a target="_blank" href="http://blog.yufeng.info/archives/2349">低成本和高性能MySQL云数据的架构探索</a></li><br></ol>

<h2 id="插件架构">插件架构</h2>
<ol><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/05/25/5187.html">关于Plugin Framework的关键因素</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/06/30/6925.html">Plugin Architecture简述</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/07/03/7069.html">Eclipse(3.1) Plugin Framework(基于OSGI的Plugin Architecture)</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/11/06/18491.html">OSGI与Plugin Architecture</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2005/11/15/19820.html">思考插件架构体系</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2006/03/12/34930.html">基于Equinox开发系统的总结</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2006/04/07/39880.html">Declarative Services――Service-Oriented Component Model</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2006/04/15/41268.html">Service-Oriented Component Model(SOCM)</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2006/05/28/48593.html">插件开发框架的思考</a></li><br><li><a target="_blank" href="http://www.blogjava.net/BlueDavy/archive/2006/08/18/64440.html">基于Eclipse Equinox的插件框架：TPF</a></li><br></ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>地瓜哥2013攒的架构资料：<a href="http://www.diguage.com/archives/41.html" target="_blank" rel="external">分享D瓜哥最近攒的资料（架构方面）</a></p>
<p>以前见过零零散散地介绍一些知名网站架构的分析文章。最近D瓜哥也想研究一下各大知名网站的架构。所以，就搜集了一下这方面资料。限于时间问题，这篇文章分享的文章并没有都看完，所以不保证所有文章的质量。另外，如果有朋友发现更好的文章，欢迎留言告知。再补充进来。</p>
]]>
    
    </summary>
    
      <category term="架构" scheme="http://colobu.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="架构" scheme="http://colobu.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RPC框架的性能比较]]></title>
    <link href="http://colobu.com/2015/07/16/rpc-framework-performance-comparison/"/>
    <id>http://colobu.com/2015/07/16/rpc-framework-performance-comparison/</id>
    <published>2015-07-16T08:47:46.000Z</published>
    <updated>2015-07-31T13:28:03.073Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.useopen.net" target="_blank" rel="external">永源科技</a>做的一个RPC框架的性能测试。<br>原文： <a href="http://www.useopen.net/blog/2015/rpc-performance.html" target="_blank" rel="external">RPC框架性能基本比较测试</a></p>
<p><a href="https://github.com/grpc/grpc" target="_blank" rel="external">gRPC</a>是Google最近公布的开源软件，基于最新的HTTP2.0协议，并支持常见的编程语言。 我们知道HTTP2.0是基于二进制的HTTP协议升级版本，目前各大浏览器都在快马加鞭的加以支持。 我们可以设想一下，未来浏览器支持HTTP2.0，并通过现有开源序列化库比如protobuf等，可以直接和各种语言的服务进行高效交互，这将是多么“美好”的场景！</p>
<p>gPRC的Java实现底层网络库是Netty，而且是用到最新的Netty5.0.0.Alpha3的开发版本，因为最新版本针对HTTP/2做了很多改进。 为了跨语言，gPRC也和其他方案一样，采用了类似古老IDL的接口描述语言，利用自家的Protobuf项目带的protoc编译器来生成框架代码。这和目前最流行的Facebook开源的，现为Apache顶级项目的Thrift原理一致。</p>
<p>我比较好奇，这个新出世的框架的性能怎么样，和现有的RPC开源方案比较如何。就花了一些时间进行简单比较。 我选择了以下五种开源项目进行测试：gRPC, Thrift, Wildfly, Dubbo, JBoss EAP。 为了简化，测试范例都使用项目自带的demo或者sample等进行简单修改，使得跨进程网络调用次数一致。</p>
<a id="more"></a>
<h2 id="RPC框架">RPC框架</h2>
<h3 id="gRPC"><a href="https://github.com/grpc/grpc" target="_blank" rel="external">gRPC</a></h3>
<ol>
<li>从Github master主干上获得最新版本，按照说明文件进行编译。如上所述，网络框架是Netty5，基于最新的HTTP/2.</li>
<li>测试例子为 <a href="https://github.com/grpc/grpc-java/blob/master/examples/src/main/java/io/grpc/examples/routeguide/RouteGuideClient.java" target="_blank" rel="external">RouteGuideClient</a></li>
<li>IDL为 <a href="https://github.com/grpc/grpc-java/blob/master/examples/src/main/proto/route_guide.proto" target="_blank" rel="external">route_guide.proto</a></li>
<li>选择其中getFeature方法，去除不用的语句和屏幕输出，进行10,000次同步调用。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">TestClientSync client = <span class="keyword">new</span> TestClientSync(<span class="string">"localhost"</span>, <span class="number">8980</span>);</div><div class="line"><span class="keyword">try</span> {</div><div class="line">  <span class="keyword">final</span> <span class="keyword">long</span> startTime = System.nanoTime();</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</div><div class="line">    client.getFeature(<span class="number">409146138</span>, -<span class="number">746188906</span>);</div><div class="line"></div><div class="line">  <span class="keyword">final</span> <span class="keyword">long</span> endTime = System.nanoTime();</div><div class="line">  info(<span class="string">"method 1 : "</span> + (endTime - startTime));</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFeature</span>(<span class="keyword">int</span> lat, <span class="keyword">int</span> lon) {</div><div class="line">  <span class="keyword">try</span> {</div><div class="line">    Point request = Point.newBuilder().setLatitude(lat).setLongitude(lon).build();</div><div class="line">    Feature feature = blockingStub.getFeature(request);</div><div class="line">  } <span class="keyword">catch</span> (RuntimeException e) {</div><div class="line">    logger.log(Level.WARNING, <span class="string">"RPC failed"</span>, e);</div><div class="line">    <span class="keyword">throw</span> e;</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>多次执行，记录需要的时间。</p>
<p>gRPC还有一种非阻塞的调用方法，不过因为时间有限，为了简化测试，我只用标准的server启动的方式，asyncStub在大并发访问时出错，用时也较长，故这次测试没有这种方法的结果数据。</p>
<h3 id="Thrift"><a href="http://thrift.apache.org" target="_blank" rel="external">Thrift</a></h3>
<ol>
<li>从Apache网站获得最新的0.9.2版本，本机编译获得C的编译器和Java运行环境。</li>
<li>测试例子为 <a href="https://github.com/apache/thrift/blob/master/tutorial/java/src/JavaClient.java" target="_blank" rel="external">JavaClient.java</a></li>
<li>IDL <a href="https://github.com/apache/thrift/blob/master/tutorial/tutorial.thrift" target="_blank" rel="external">tutorial.thrift</a></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> diff;</div><div class="line"><span class="keyword">final</span> <span class="keyword">long</span> startTime = System.nanoTime();</div><div class="line"><span class="keyword">try</span> {</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</div><div class="line">     diff = client.calculate(<span class="number">1</span>, work);</div><div class="line">} <span class="keyword">catch</span> (InvalidOperation io) {</div><div class="line">  System.out.println(<span class="string">"Invalid operation: "</span> + io.why);</div><div class="line">}</div><div class="line"><span class="keyword">final</span> <span class="keyword">long</span> endTime = System.nanoTime();</div><div class="line">System.out.println(<span class="string">"method 1 : "</span> + (endTime - startTime));</div></pre></td></tr></table></figure>

<h3 id="Wildfly_8-2-0"><a href="http://www.wildfly.org" target="_blank" rel="external">Wildfly</a> 8.2.0</h3>
<p>Wildfly是JBossAS改名后的JBoss应用服务器，实现了完整的JavaEE规范。我们知道JavaEE中远程RPC调用是在EJB规范中定义的。我们这里就是要测试Wildlfy中的远程EJB调用能力，</p>
<ol>
<li>选用的Wildfly8.2是目前发布的最新稳定版本。这个版本也支持端口多路服用，也就是EJB远程调用是通过HTTP端口复用来进行的，利用HTTP的Upgrade机制做到二进制运行时刻协商升级。尽管不是纯粹的HTTP/2，但也运行机理也相差无几。</li>
<li>测试例子选用jboss-eap-quickstarts项目中的远程ejb调用例子 <a href="https://github.com/jboss-developer/jboss-eap-quickstarts/blob/wildfly/ejb-remote/client/src/main/java/org/jboss/as/quickstarts/ejb/remote/client/RemoteEJBClient.java" target="_blank" rel="external">RemoteEJBClient.java</a></li>
<li>纯Java的RPC方案好处是不需要再有IDL文件定义和编译生成代码的过程，只要商议好接口就可以了</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RemoteCalculator</span> </span>{</div><div class="line">    <span class="keyword">int</span> add(<span class="keyword">int</span> a, <span class="keyword">int</span> b);</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line"><span class="keyword">final</span> <span class="keyword">long</span> startTime = System.nanoTime();</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) {</div><div class="line">         sum = statelessRemoteCalculator.add(a, b);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="keyword">long</span> endTime = System.nanoTime();</div><div class="line">System.out.println(<span class="string">"method 1 : "</span> + (endTime - startTime));</div></pre></td></tr></table></figure>

<p>调用无状态的SessionBean方法10,000次,对应的远程EJB服务是部署在Wildfly应用服务器中的EJB。</p>
<h3 id="Dubbo_2-5-4-SNAPSHOT"><a href="https://github.com/alibaba/dubbo" target="_blank" rel="external">Dubbo</a> 2.5.4-SNAPSHOT</h3>
<p>Dubbo是阿里集团开源的一个RPC框架，在很多互联网公司和企业应用中广泛使用。协议和序列化框架都可以插拔是及其鲜明的特色。同样的远程接口是基于Java Interface，并且依托于spring框架方便开发。可以方便的打包成单一文件，独立进程运行，和现在的微服务概念一致。</p>
<ol>
<li>采用github中master主干，目前版本是 2.5.4-SNAPSHOT</li>
<li>测试例子选用其中的demo进行修改 <a href="https://github.com/alibaba/dubbo/blob/master/dubbo-demo/dubbo-demo-consumer/src/main/java/com/alibaba/dubbo/demo/consumer/DemoAction.java" target="_blank" rel="external">DemoAction.java</a></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>{</div><div class="line">	String sayHello(String name);</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">long</span> startTime = System.nanoTime();</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i ++) {</div><div class="line">    <span class="keyword">try</span> {</div><div class="line">    	String hello = demoService.sayHello(<span class="string">"world"</span> + i);</div><div class="line">    } <span class="keyword">catch</span> (Exception e) {</div><div class="line">        e.printStackTrace();</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="keyword">final</span> <span class="keyword">long</span> endTime = System.nanoTime();</div><div class="line">System.out.println(<span class="string">"method 1 : "</span> + (endTime - startTime));</div></pre></td></tr></table></figure>

<p>调用完毕后查看输入log文件获得运行时间。</p>
<h3 id="Redhat_JBoss_EAP_6-3-2"><a href="http://www.jboss.org/products/eap/download/" target="_blank" rel="external">Redhat JBoss EAP</a> 6.3.2</h3>
<p>EAP是JBossAS的商业版本，实现了完整的JavaEE规范。</p>
<ol>
<li>EAP6基于AS7.2以后的版本构建，红帽提供商业支持。</li>
<li>AS7在7.2以后，社区版没有再发布，具备能力的企业可以从源码进行编译使用，EAP6.3基于AS7.4分支构建，很快发布的EAP6.4基于AS7.5分支构建，不出意外这个会是最后一个EAP6的minor版本。</li>
<li>AS7还没有像Wildfly完全采用端口复用的方式，短程EJB调用通过独立端口完成，基于JBossRemoting3的网络连接管理能力。</li>
<li>测试例子依然选用jboss-eap-quickstarts项目中的远程ejb调用例子</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RemoteCalculator</span> </span>{</div><div class="line">    <span class="keyword">int</span> add(<span class="keyword">int</span> a, <span class="keyword">int</span> b);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>记录一万次调用后的时长。</p>
<h2 id="测试结果">测试结果</h2>
<p>最终经过4轮测试，不间断运行10,000次远程RPC调用后的结果如下：<br><img src="rpc_benchmark.png" alt=""></p>
<p>我们可以看到Thrift的效率最高，大概领先一个数量级。而其他三个项目的性能数据在同数量级中，由高到低分别为JBossEAP, dubbo, wildfly和gRPC。</p>
<p>需要说明的有以下几点：</p>
<ol>
<li>为了简化测试，我并没有选择同样的调用接口，而是顺手用了项目自带的，方便修改的示例程序。其中gRPC和Thrift的接口有对象传递，稍微复杂一些。</li>
<li>不是严格的性能测试流程，比如没有做预热过程，以及测试都运行在我的桌面用机上，没有完全恢复成“干净”的状态。</li>
<li>都是简单的服务器单一进程实例，标准示范例子，没有做特别优化和设置多个线程池之类的。而客户端调用也是最简单的阻塞式多次调用压力测试。应该是用多个机器多连接，多个线程，以及异步非阻塞的调用多种环境进行测试更为客观，有机会再继续完善。</li>
<li>之前没有看到过基于HTTP/2的RPC调用性能比较，理论上是应该低于经典的基于端口的RPC方案的。这个测试结果可以简单印证这个猜想。Thrift的数据遥遥领先.gRPC还在开发之中，基于的Netty还是alpha版本，而且非阻塞的方式还没有最后的数据。我想耐心一些，给gRPC一些时间，它会让我们惊艳的。</li>
<li>Wildfly表现良好，要知道它的服务端可是完整的JavaEE服务器啊。不过有时间的化，我试试看经典RMI连接的效率如何，要是能和thrift一个数量级就更好了。</li>
<li>dubbo性能也很出色，而且协议层可以更换的话，应该还能有更大提升。</li>
<li>我的测试在一台过时的笔记本上，受条件限制，没有先进的G级网络和多台服务器进行标准化性能测试。如果哪位在互联网或者企业工作的朋友有条件，也愿意充分完成这个测试，请和我联系，我会完整介绍我的测试搭建环境，共享代码，并帮助完成。我想那个结果会更有意义。</li>
</ol>
<h2 id="补记">补记</h2>
<p>最初四个测试时间为2015-03-11，03-21加入EAP6.3.2的测试，为基于JBossRemoting的EJB远程调用测试，性能良好。和thrift进入一个数量级，EJB功能可是很丰富的，带有事务，安全等高级企业级组件特性。</p>
<p>Wildfly8经过配置后使用和EAP类似的远程调用选项，效率和EAP应该是一致的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.useopen.net" target="_blank" rel="external">永源科技</a>做的一个RPC框架的性能测试。<br>原文： <a href="http://www.useopen.net/blog/2015/rpc-performance.html" target="_blank" rel="external">RPC框架性能基本比较测试</a></p>
<p><a href="https://github.com/grpc/grpc" target="_blank" rel="external">gRPC</a>是Google最近公布的开源软件，基于最新的HTTP2.0协议，并支持常见的编程语言。 我们知道HTTP2.0是基于二进制的HTTP协议升级版本，目前各大浏览器都在快马加鞭的加以支持。 我们可以设想一下，未来浏览器支持HTTP2.0，并通过现有开源序列化库比如protobuf等，可以直接和各种语言的服务进行高效交互，这将是多么“美好”的场景！</p>
<p>gPRC的Java实现底层网络库是Netty，而且是用到最新的Netty5.0.0.Alpha3的开发版本，因为最新版本针对HTTP/2做了很多改进。 为了跨语言，gPRC也和其他方案一样，采用了类似古老IDL的接口描述语言，利用自家的Protobuf项目带的protoc编译器来生成框架代码。这和目前最流行的Facebook开源的，现为Apache顶级项目的Thrift原理一致。</p>
<p>我比较好奇，这个新出世的框架的性能怎么样，和现有的RPC开源方案比较如何。就花了一些时间进行简单比较。 我选择了以下五种开源项目进行测试：gRPC, Thrift, Wildfly, Dubbo, JBoss EAP。 为了简化，测试范例都使用项目自带的demo或者sample等进行简单修改，使得跨进程网络调用次数一致。</p>
]]>
    
    </summary>
    
      <category term="高并发编程" scheme="http://colobu.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala 2.12 拥抱 Java 8]]></title>
    <link href="http://colobu.com/2015/07/16/Scala-2-12-Embraces-Java-8/"/>
    <id>http://colobu.com/2015/07/16/Scala-2-12-Embraces-Java-8/</id>
    <published>2015-07-16T03:42:13.000Z</published>
    <updated>2015-07-31T13:28:02.463Z</updated>
    <content type="html"><![CDATA[<p>在今年(2015)的旧金山的ScalaDays会议上，来自Scala核心团队的Lukas Rytz分享了一个演讲：<a href="http://downloads.typesafe.com/website/presentations/ScalaDaysSF2015/T2_Rytz_Backend_Optimizer.pdf。
演讲分为两部分， 第一部分展示了下一个Scala版本(2.12" target="_blank" rel="external">The JVM Backend and Optimizer in Scala 2.12</a>的技术细节，主要基于Java 8平台上一些改变， 比如Lambda, 缺省方法等。第二部分主要介绍了生成的字节码的优化。<br>本文是对第一部分做的笔记。<br>因为2.12还没有正式发布，一下特性可能还无法校验。</p>
<a id="more"></a>
<h2 id="函数互操作_(Interop_for_functions:_source_and_bytecode_)">函数互操作 (Interop for functions: source and bytecode )</h2>
<p>Scala 2.12只能运行在Java 8上。<br>Scala和Java8实现互操作。<br>在Scala代码中，可以使用<code>=&gt;</code>表达式应用在Java Lambda表达式的位置。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Scala code</span></div><div class="line"><span class="keyword">new</span> Thread(() =&gt; println(<span class="string">"running"</span>)).start</div></pre></td></tr></table></figure>

<p>在Java代码中，可以使用Lamabda表达式作为函数对象应用在<code>=&gt;</code>表达式的位置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Java code</span></div><div class="line">scalaCollection.foreach(x-&gt; println(x))</div></pre></td></tr></table></figure>

<p>这样Scala和Java Lambda表达式实现了互操作。</p>
<p>之所以能这样替换，是因为Scala 2.12将lambda表达式编译的字节码和Java的字节码是一致的，而不是匿名函数的方式。<br>因此在Scala代码中，函数式接口（Functional interfaces,也叫SAM）都可以通过Scala的 <code>=&gt;</code>实现。</p>
<p>在看一个Java Stream中使用函数式接口SAM的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java example: </span></div><div class="line">stream.filter(s -&gt; s.startsWith(<span class="string">"c"</span>))</div><div class="line">.map(String::toUpperCase)</div><div class="line">.sorted()</div><div class="line">.forEach(System.out::println);</div></pre></td></tr></table></figure>

<p>在Scala中代码中我们使用<code>=&gt;</code>实现这些SAM:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Scala</span></div><div class="line"><span class="keyword">import</span> java.util.stream.Stream</div><div class="line"></div><div class="line"><span class="keyword">var</span> s = Stream of (<span class="string">"a1"</span>,<span class="string">"a2"</span>,<span class="string">"b1"</span>,<span class="string">"c2"</span>,<span class="string">"c1"</span>)</div><div class="line"></div><div class="line">s.filter(s =&gt; s.startsWith(<span class="string">"c"</span>))</div><div class="line">.map(_.toUpperCase).sorted.forEach(println)</div></pre></td></tr></table></figure>

<p>毫无违和感。</p>
<p>Java中使用Scala类库时遇到SAM时：<br>在Scala 2.12中， <strong>FunctionN</strong>是函数式接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java code:</span></div><div class="line">scalaCollection.foreach(x -&gt; println(x));</div></pre></td></tr></table></figure>

<p>在Scala 2.11中，要使用兼容包，<strong>JFunctionN</strong>是函数式接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java code:</span></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> scala.compat.java8.JFunction.*;</div><div class="line">scalaCollection.foreach(func(x -&gt; println(x)));</div></pre></td></tr></table></figure>

<h2 id="编译Trait时使用缺省方法_(Make_use_of_default_methods_)">编译Trait时使用缺省方法 (Make use of default methods )</h2>
<p>比如下面一个trait:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">F1</span> </span>{</div><div class="line">	<span class="keyword">def</span> apply</div><div class="line">	<span class="keyword">def</span> add(x:Int, y:Int) = x+y</div><div class="line">}</div></pre></td></tr></table></figure>

<p>会被编译成两个类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">F1</span></span></div><div class="line">{</div><div class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">apply</span>();</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">add</span>(<span class="keyword">int</span> paramInt1, <span class="keyword">int</span> paramInt2);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">F1</span>$<span class="title">class</span></span></div><div class="line">{</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span>(F1 $<span class="keyword">this</span>, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</div><div class="line">  {</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> $init$(F1 $<span class="keyword">this</span>)</div><div class="line">  {</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>有几种方案来编译成SAM。一种就是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">F1</span></span></div><div class="line">{</div><div class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">apply</span>();</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">int</span> <span class="title">add</span>(<span class="keyword">int</span> paramInt1, <span class="keyword">int</span> paramInt2) {</div><div class="line">	<span class="keyword">return</span> F1$class.add(paramInt1, paramInt2)</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>或者直接编译成SAM，不需要一个辅助类<code>F1$class</code>。</p>
<p>可以关注Scala 2.12正式发布后的实现方式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在今年(2015)的旧金山的ScalaDays会议上，来自Scala核心团队的Lukas Rytz分享了一个演讲：<a href="http://downloads.typesafe.com/website/presentations/ScalaDaysSF2015/T2_Rytz_Backend_Optimizer.pdf。
演讲分为两部分， 第一部分展示了下一个Scala版本(2.12" target="_blank" rel="external">The JVM Backend and Optimizer in Scala 2.12</a>的技术细节，主要基于Java 8平台上一些改变， 比如Lambda, 缺省方法等。第二部分主要介绍了生成的字节码的优化。<br>本文是对第一部分做的笔记。<br>因为2.12还没有正式发布，一下特性可能还无法校验。</p>
]]>
    
    </summary>
    
      <category term="Scala" scheme="http://colobu.com/categories/Scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[奇虎360 和 Go]]></title>
    <link href="http://colobu.com/2015/07/14/Qihoo-360-and-Go/"/>
    <id>http://colobu.com/2015/07/14/Qihoo-360-and-Go/</id>
    <published>2015-07-14T03:25:58.000Z</published>
    <updated>2015-07-31T13:28:02.417Z</updated>
    <content type="html"><![CDATA[<p>英文原文：<a href="http://blog.golang.org/qihoo" target="_blank" rel="external">Qihoo 360 and Go</a><br>翻译 by <a href="http://www.oschina.net/" target="_blank" rel="external">开源中国</a>： <a href="http://www.oschina.net/translate/qihoo-and-go" target="_blank" rel="external">奇虎360 和 go </a></p>
<p>在中国，奇虎 360 是一个互联网和手机安全产品及服务的主要供应商，截止到 2014 年 6 月，奇虎拥有 5 亿的 PC 活跃用户以及超过 6.4 亿移动用户。奇虎还运营着中国最受欢迎的网络浏览器和 PC 搜索引擎(原文如此)。</p>
<p>我的团队，推送服务团队(Push Service Team)，为超过 50 个公司的产品提供服务（PC 和移动），包括成千上万放在我们的开放平台的应用程序。</p>
<p>我们对Go的青睐要从2012年第一次尝试为奇虎的一个产品提供推送功能开始。最初的nginx + lua + redis方案因为负载过大没能满足我们对实时性能的需求。在这种情况下，最新发布的1.0.3版Go引起了我们的注意，借助它提供的goroutine和channel特性，我们在几周之内开发完成了一个原型。我们的系统最初运行在20台服务器上，能够处理2000万实时连接，每天发送200万信息。现在这套系统在超过400台服务器运行，支持2亿实时连接，每天发送超过100亿条信息。<br><a id="more"></a></p>
<p>随着商业上的快速扩张以及对我们推送服务的需求的增长，最初的Go系统很快遇到了瓶颈：堆大小达到69G、GC停顿最高能到3-6秒。更头疼的是，我们必须每周重启系统来释放内存。实话实话，我们考虑过放弃Go，用C来重写全部的核心组件作为替代。然而，并未如我们所愿，我们在迁移业务逻辑层的代码时遇到了麻烦。结果就是，作为当时唯一的人员，我不可能在维护这个Go系统的时候确保业务逻辑顺利迁移到C的服务框架上。</p>
<p>因此，我决定继续留在Go系统上(可能是我最机智的一次无奈选择)，并且很快就取得了重大进展。<br>下面是几个要点和我们总结的小技巧：</p>
<ul>
<li>用长连接(使用连接池)替代短连接，减少通信过程中缓冲区和对象的创建。</li>
<li>适当的使用对象池和内存池，减少GC的负载。<img src="http://blog.golang.org/qihoo/image00.png" alt=""></li>
<li>使用任务池，原理是由一组协程作为消费者轮询并执行全局的任务或者来自消息队列的任务——由持有连接的协程作为生产者发送任务，用这种模式取代为每个任务生成一个临时协程。</li>
<li>监视并控制程序中协程的数量。缺乏控制会使GC不堪重负，比如，因为不加控制的接受外部请求而出现的协程数峰值施加在GC上，同时发往内部服务的RPC调用可能阻塞新创建的协程。</li>
<li>在移动网络中，要记得给连接<a href="http://golang.org/pkg/net/#Conn" target="_blank" rel="external">设置读写超时限制</a>，否则可能导致协程阻塞。在局域网中就要慎重使用此设置，否则会降低RPC通信的效率。</li>
<li>使用Pipeline(在TCP全双工特征下)来增强RPC框架的通信效率。</li>
</ul>
<p>最后，我们成功的对架构进行了三次迭代，其中有两次对 RPC 框架的迭代还是在人手有限的情况下完成的。这都得益于 Go 开发的便利性，下面是我们当前的系统架构：<br><img src="http://blog.golang.org/qihoo/image01.png" alt=""><br>持续优化的过程可以通过下表来说明：<br><img src="http://blog.golang.org/qihoo/table.png" alt=""><br>还有，在这些优化之后，再也不需要临时的释放内存或者重启系统了。</p>
<p>更令人兴奋的时我们已经开发了一个线上实时反映 Go 程序运行概况的可视化平台。现在我们很轻松的就可以拿到系统状态并做出诊断，消除隐患。这是系统运行中的截图：<br><img src="http://blog.golang.org/qihoo/image02.png" alt=""><br><img src="http://blog.golang.org/qihoo/image03.png" alt=""></p>
<p>这个平台还可以做一件很棒的事情——模拟数百万用户在线的连接和操作。通过使用这个分布式的压力测试工具（也是用 Go 实现），并观察所有这些直观的实时数据。我们评估每一次优化的效果并且定位系统瓶颈然后排除问题。<br> 到目前为止，我们几乎试遍了所有系统优化的手段。我们还是期盼 GC 团队能带来更多的好消息让我们进一步的从繁重的开发工作中解脱出来。想来，也许有一天我们的这些经验会因为 Go 的持续发展而变得无用武之地。</p>
<p>这也是为什么我要以表达获得了这次出席 <a href="http://gopherchina.org/" target="_blank" rel="external">Gopher China</a> 的机会的谢意来结束此次分享的原因。这是一个我们去学习，去分享的盛会，也是一个展现 Go 在中国的普及和繁荣的契机。在奇虎内部有许多其他的团队开始去了解 Go，或者已经在试着使用 Go。</p>
<p>在可预见的将来，我相信中国会有更多的互联网公司加入我们的行列，用 Go 来重新创建他们的系统，而 Go 开发团队的成果会使更多的开发者和公司收益。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>英文原文：<a href="http://blog.golang.org/qihoo" target="_blank" rel="external">Qihoo 360 and Go</a><br>翻译 by <a href="http://www.oschina.net/" target="_blank" rel="external">开源中国</a>： <a href="http://www.oschina.net/translate/qihoo-and-go" target="_blank" rel="external">奇虎360 和 go </a></p>
<p>在中国，奇虎 360 是一个互联网和手机安全产品及服务的主要供应商，截止到 2014 年 6 月，奇虎拥有 5 亿的 PC 活跃用户以及超过 6.4 亿移动用户。奇虎还运营着中国最受欢迎的网络浏览器和 PC 搜索引擎(原文如此)。</p>
<p>我的团队，推送服务团队(Push Service Team)，为超过 50 个公司的产品提供服务（PC 和移动），包括成千上万放在我们的开放平台的应用程序。</p>
<p>我们对Go的青睐要从2012年第一次尝试为奇虎的一个产品提供推送功能开始。最初的nginx + lua + redis方案因为负载过大没能满足我们对实时性能的需求。在这种情况下，最新发布的1.0.3版Go引起了我们的注意，借助它提供的goroutine和channel特性，我们在几周之内开发完成了一个原型。我们的系统最初运行在20台服务器上，能够处理2000万实时连接，每天发送200万信息。现在这套系统在超过400台服务器运行，支持2亿实时连接，每天发送超过100亿条信息。<br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/tags/Go/"/>
    
      <category term="高并发编程" scheme="http://colobu.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[七种WebSocket框架的性能比较]]></title>
    <link href="http://colobu.com/2015/07/14/performance-comparison-of-7-websocket-frameworks/"/>
    <id>http://colobu.com/2015/07/14/performance-comparison-of-7-websocket-frameworks/</id>
    <published>2015-07-14T00:50:32.000Z</published>
    <updated>2015-07-31T13:28:03.057Z</updated>
    <content type="html"><![CDATA[<p>前一篇文章<a href="/2015/05/22/implement-C1000K-servers-by-spray-netty-undertow-and-node-js">使用四种框架分别实现百万websocket常连接的服务器</a>介绍了四种websocket框架的测试方法和基本数据。 最近我又使用几个框架实现了websocket push服务器的原型，并专门对这七种实现做了测试。 本文记录了测试结果和一些对结果的分析。<br>这七种框架是：</p>
<ul>
<li><a href="http://netty.io/" target="_blank" rel="external">Netty</a></li>
<li><a href="http://undertow.io/" target="_blank" rel="external">Undertow</a></li>
<li><a href="http://www.eclipse.org/jetty/" target="_blank" rel="external">Jetty</a></li>
<li><a href="http://http://vertx.io" target="_blank" rel="external">Vert.x</a></li>
<li><a href="https://grizzly.java.net/" target="_blank" rel="external">Grizzly</a></li>
<li><a href="https://github.com/wandoulabs/spray-websocket" target="_blank" rel="external">spray-websocket</a></li>
<li><a href="https://github.com/sitegui/nodejs-websocket" target="_blank" rel="external">nodejs-websocket/Node.js</a></li>
</ul>
<p>最近用Golang实现了第八种，Go表现还不错。</p>
<ul>
<li><a href="https://golang.org/" target="_blank" rel="external">Go</a><a id="more"></a>
</li>
</ul>
<h2 id="测试环境">测试环境</h2>
<p>使用三台C3.4xlarge AWS服务器做测试。 一台作为服务器，两台作为客户端机器， 每台客户端机器启动10个client,一共20个client<br>C3.4xlarge的配置如下：</p>
<table border="0" cellpadding="1" cellspacing="0"> 
               <tbody> 
                <tr> 
                 <td style="text-align: center;" height="42" width="57">型号</td> 
                 <td style="text-align: center;" width="29">vCPU</td> 
                 <td style="text-align: center;" width="42">内存 (GiB)</td> 
                 <td style="text-align: center;" width="42">SSD 存储 (GB)</td> 
                </tr> 
                <tr> 
                 <td height="15" width="57">c3.large</td> 
                 <td width="29">2</td> 
                 <td width="42">3.75</td> 
                 <td width="42">2 x 16</td> 
                </tr> 
                <tr> 
                 <td height="15" width="57">c3.xlarge</td> 
                 <td width="29">4</td> 
                 <td width="42">7.5</td> 
                 <td width="42">2 x 40</td> 
                </tr> 
                <tr> 
                 <td height="15" width="57">c3.2xlarge</td> 
                 <td width="29">8</td> 
                 <td width="42">15</td> 
                 <td width="42">2 x 80</td> 
                </tr> 
                <tr> 
                 <td height="15" width="57">c3.4xlarge</td> 
                 <td width="29">16</td> 
                 <td width="42">30</td> 
                 <td width="42">2 x 160</td> 
                </tr> 
                <tr> 
                 <td height="15" width="57">c3.8xlarge</td> 
                 <td width="29">32</td> 
                 <td width="42">60</td> 
                 <td width="42">2 x 320</td> 
                </tr> 
               </tbody> 
</table>

<p>服务器和客户端机器按照上一篇文章做了基本的优化。</p>
<p>以下是测试的配置数据：</p>
<ul>
<li>20 clients</li>
<li>setup rate设为500 * 20 requests/second = 10000 request /second</li>
<li>每个client负责建立50000个websocket 连接</li>
<li>等1,000,000个websocket建好好，发送一个消息(时间戳)给所有的客户端，客户端根据时间戳计算latency</li>
<li>如果服务器setup rate建立很慢，主动停止测试</li>
<li>监控三个阶段的性能指标： setup时， setup完成后应用发呆(idle)时，发送消息时</li>
</ul>
<h2 id="测试结果">测试结果</h2>
<h3 id="Netty">Netty</h3>
<p><strong>Setup时</strong></p>
<ul>
<li>cpu idle: 90%</li>
<li>minor gc: Few</li>
<li>full gc: No</li>
</ul>
<p><strong>Setup完成， 应用Idle时</strong></p>
<ul>
<li>cpu idle: 100%</li>
<li>memory usage: 1.68G</li>
<li>server free memory: 16.3G</li>
</ul>
<p><strong>发送消息时</strong></p>
<ul>
<li>cpu idle: 75%</li>
<li>minor gc: few</li>
<li>full gc: No</li>
<li>Message latency (one client)<pre><code>       <span class="variable">count =</span> <span class="number">50000</span>
         <span class="variable">min =</span> <span class="number">0</span>
         <span class="variable">max =</span> <span class="number">18301</span>
        <span class="variable">mean =</span> <span class="number">2446.09</span>
      <span class="variable">stddev =</span> <span class="number">3082.11</span>
      <span class="variable">median =</span> <span class="number">1214.00</span>
        <span class="number">75</span>% &lt;= <span class="number">3625.00</span>
        <span class="number">95</span>% &lt;= <span class="number">8855.00</span>
        <span class="number">98</span>% &lt;= <span class="number">12069.00</span>
        <span class="number">99</span>% &lt;= <span class="number">13274.00</span>
      <span class="number">99.9</span>% &lt;= <span class="number">18301.00</span>
</code></pre></li>
</ul>
<h3 id="Vert-x">Vert.x</h3>
<p><strong>Setup时</strong></p>
<ul>
<li>cpu idle: 95%</li>
<li>minor gc: Few</li>
<li>full gc: No</li>
</ul>
<p><strong>Setup完成， 应用Idle时</strong></p>
<ul>
<li>cpu idle: 100%</li>
<li>memory usage: 6.37G</li>
<li>server free memory: 16.3G</li>
</ul>
<p><strong>发送消息时</strong></p>
<ul>
<li>cpu idle: 47% ~ 76%</li>
<li>minor gc: few</li>
<li>full gc: few</li>
<li>Message latency (one client)<pre><code>       <span class="variable">count =</span> <span class="number">50000</span>
         <span class="variable">min =</span> <span class="number">49</span>
         <span class="variable">max =</span> <span class="number">18949</span>
        <span class="variable">mean =</span> <span class="number">10427.00</span>
      <span class="variable">stddev =</span> <span class="number">5182.72</span>
      <span class="variable">median =</span> <span class="number">10856.00</span>
        <span class="number">75</span>% &lt;= <span class="number">14934.00</span>
        <span class="number">95</span>% &lt;= <span class="number">17949.00</span>
        <span class="number">98</span>% &lt;= <span class="number">18458.00</span>
        <span class="number">99</span>% &lt;= <span class="number">18658.00</span>
      <span class="number">99.9</span>% &lt;= <span class="number">18949.00</span>
</code></pre></li>
</ul>
<h3 id="Undertow">Undertow</h3>
<p><strong>Setup时</strong></p>
<ul>
<li>cpu idle: 90%</li>
<li>minor gc: Few</li>
<li>full gc: No</li>
</ul>
<p><strong>Setup完成， 应用Idle时</strong></p>
<ul>
<li>cpu idle: 100%</li>
<li>memory usage: 4.02G</li>
<li>server free memory: 14.2G</li>
</ul>
<p><strong>发送消息时</strong></p>
<ul>
<li>cpu idle: 65%</li>
<li>minor gc: few</li>
<li>full gc: No</li>
<li>Message latency<pre><code>       <span class="variable">count =</span> <span class="number">50000</span>
         <span class="variable">min =</span> <span class="number">1</span>
         <span class="variable">max =</span> <span class="number">11948</span>
        <span class="variable">mean =</span> <span class="number">1366.86</span>
      <span class="variable">stddev =</span> <span class="number">2007.77</span>
      <span class="variable">median =</span> <span class="number">412.00</span>
        <span class="number">75</span>% &lt;= <span class="number">2021.00</span>
        <span class="number">95</span>% &lt;= <span class="number">5838.00</span>
        <span class="number">98</span>% &lt;= <span class="number">7222.00</span>
        <span class="number">99</span>% &lt;= <span class="number">8051.00</span>
      <span class="number">99.9</span>% &lt;= <span class="number">11948.00</span>
</code></pre></li>
</ul>
<h3 id="Jetty">Jetty</h3>
<p><strong>Setup时</strong></p>
<ul>
<li>cpu idle: 2%</li>
<li>minor gc: Many</li>
<li>full gc: No</li>
<li>memory usage: 5G</li>
<li>server free memory: 17.2G</li>
</ul>
<p><em>当建立360,000左右的websocket时， setup非常的慢， gc频繁，无法继续正常建立websocket， 主动终止测试。</em></p>
<h3 id="Grizzly">Grizzly</h3>
<p><strong>Setup时</strong></p>
<ul>
<li>cpu idle: 20%</li>
<li>minor gc: Some</li>
<li>full gc: Some</li>
<li>memory usage: 11.5G</li>
<li>server free memory: 12.3G</li>
</ul>
<p><em>当建立500,000左右的websocket时， setup非常的慢， gc频繁，无法继续正常建立websocket， 主动终止测试。</em></p>
<h3 id="Spray">Spray</h3>
<p><strong>Setup时</strong></p>
<ul>
<li>cpu idle: 80%</li>
<li>minor gc: Many</li>
<li>full gc: No</li>
</ul>
<p><em>当建立500,000左右的websocket时， setup非常的慢， gc频繁，无法继续正常建立websocket， 主动终止测试。</em></p>
<h3 id="Node-js">Node.js</h3>
<p><strong>Setup时</strong></p>
<ul>
<li>cpu idle: 94%</li>
</ul>
<p><strong>Setup完成， 应用Idle时</strong></p>
<ul>
<li>cpu idle: 100%</li>
<li>memory usage: 5.0G</li>
<li>server free memory: 16.3G</li>
</ul>
<p><strong>发送消息时</strong></p>
<ul>
<li>cpu idle: 94%</li>
<li>Message latency (one client)</li>
<li>Message latency<pre><code>       <span class="variable">count =</span> <span class="number">50000</span>
         <span class="variable">min =</span> <span class="number">0</span>
         <span class="variable">max =</span> <span class="number">18</span>
        <span class="variable">mean =</span> <span class="number">1.27</span>
      <span class="variable">stddev =</span> <span class="number">3.08</span>
      <span class="variable">median =</span> <span class="number">1.00</span>
        <span class="number">75</span>% &lt;= <span class="number">1.00</span>
        <span class="number">95</span>% &lt;= <span class="number">1.00</span>
        <span class="number">98</span>% &lt;= <span class="number">1.00</span>
        <span class="number">99</span>% &lt;= <span class="number">1.00</span>
      <span class="number">99.9</span>% &lt;= <span class="number">15.00</span>
</code></pre></li>
</ul>
<h3 id="Go">Go</h3>
<p><strong>Setup时</strong></p>
<ul>
<li>cpu idle: 94%</li>
</ul>
<p><strong>Setup完成， 应用Idle时</strong></p>
<ul>
<li>cpu idle: 100%</li>
<li>memory usage: 15G</li>
<li>server free memory: 6G</li>
</ul>
<p><strong>发送消息时</strong></p>
<ul>
<li>cpu idle: 94%</li>
<li>Message latency (one client)</li>
<li>Message latency<pre><code>       <span class="variable">count =</span> <span class="number">50000</span>
         <span class="variable">min =</span> <span class="number">0</span>
         <span class="variable">max =</span> <span class="number">35</span>
        <span class="variable">mean =</span> <span class="number">1.89</span>
      <span class="variable">stddev =</span> <span class="number">1.83</span>
      <span class="variable">median =</span> <span class="number">1.00</span>
        <span class="number">75</span>% &lt;= <span class="number">1.00</span>
        <span class="number">95</span>% &lt;= <span class="number">2.00</span>
        <span class="number">98</span>% &lt;= <span class="number">2.00</span>
        <span class="number">99</span>% &lt;= <span class="number">4.00</span>
      <span class="number">99.9</span>% &lt;= <span class="number">34.00</span>
</code></pre></li>
</ul>
<h2 id="测试结果分析">测试结果分析</h2>
<ul>
<li>Netty, Go, Node.js, Undertow, Vert.x都能正常建立百万连接。 Jetty, Grizzly 和 Spray未能完成百万连接</li>
<li>Netty表现最好。内存占用非常的少， CPU使用率也不高。 尤其内存占用，远远小于其它框架</li>
<li>Jetty, Grizzly和Spray会产生大量的中间对象，导致垃圾回收频繁。Jetty表现最差</li>
<li>Node.js表现非常好。 尤其是测试中使用单实例单线程，建立速度非常快，消息的latency也很好。 内存占用也不错</li>
<li>Undertow表现也不错，内存占用比Netty高一些，其它差不多</li>
<li>这里还未测到Spray另一个不好的地方。 在大量连接的情况小，即使没有消息发送，Spray也会占用40% CPU 时间</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>前一篇文章<a href="/2015/05/22/implement-C1000K-servers-by-spray-netty-undertow-and-node-js">使用四种框架分别实现百万websocket常连接的服务器</a>介绍了四种websocket框架的测试方法和基本数据。 最近我又使用几个框架实现了websocket push服务器的原型，并专门对这七种实现做了测试。 本文记录了测试结果和一些对结果的分析。<br>这七种框架是：</p>
<ul>
<li><a href="http://netty.io/" target="_blank" rel="external">Netty</a></li>
<li><a href="http://undertow.io/" target="_blank" rel="external">Undertow</a></li>
<li><a href="http://www.eclipse.org/jetty/" target="_blank" rel="external">Jetty</a></li>
<li><a href="http://http://vertx.io" target="_blank" rel="external">Vert.x</a></li>
<li><a href="https://grizzly.java.net/" target="_blank" rel="external">Grizzly</a></li>
<li><a href="https://github.com/wandoulabs/spray-websocket" target="_blank" rel="external">spray-websocket</a></li>
<li><a href="https://github.com/sitegui/nodejs-websocket" target="_blank" rel="external">nodejs-websocket/Node.js</a></li>
</ul>
<p>最近用Golang实现了第八种，Go表现还不错。</p>
<ul>
<li><a href="https://golang.org/" target="_blank" rel="external">Go</a>]]>
    
    </summary>
    
      <category term="Scala" scheme="http://colobu.com/tags/Scala/"/>
    
      <category term="WebSocket" scheme="http://colobu.com/tags/WebSocket/"/>
    
      <category term="高并发编程" scheme="http://colobu.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Design Support Library的代码实验]]></title>
    <link href="http://colobu.com/2015/07/06/android-design-support-library-codelab/"/>
    <id>http://colobu.com/2015/07/06/android-design-support-library-codelab/</id>
    <published>2015-07-06T01:55:46.000Z</published>
    <updated>2015-08-11T00:17:19.283Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原文：<a href="http://inthecheesefactory.com/blog/android-design-support-library-codelab/en" target="_blank" rel="external">Codelab for Android Design Support Library used in I/O Rewind Bangkok session----Make your app fancy with few lines of code</a></p>
<p>原文项目 demo: <a href="https://github.com/nuuneoi/Lab-Android-DesignLibrary" target="_blank" rel="external">Lab-Android-DesignLibrary</a></p>
<p>双语对照地址: <a href="http://mrfufufu.github.io/english/2015/07/01/Translate_Codelab_Android_Design_Support_Library.html" target="_blank" rel="external">【翻-双语】Android Design Support Library 的 代码实验——几行代码，让你的 APP 变得花俏</a></p>
<ul>
<li>翻译: <a href="http://mrfufufu.github.io/" target="_blank" rel="external">MrFu</a></li>
<li>校验: <a href="http://mrfufufu.github.io/" target="_blank" rel="external">MrFu</a></li>
<li>能去小小的 star 一下吗？非常感谢！<a href="https://github.com/MrFuFuFu/Codelab" target="_blank" rel="external">Codelab</a></li>
</ul>
</blockquote>
<a id="more"></a>
<p>目前，我相信，没有任何 Android 开发者不知道<strong>Material Design</strong>的，因为它的设计在过去的一年震惊了世界，正式的变成了一个设计理念。</p>
<p>令人惊讶的是，在 Android 应用中材料设计是不容易实现的，因为材料设计的 UI 组件  如: Floating Action Button (FAB) 在低于 Android L 系统上是不可用的。我们只能选择使用由独立开发者公布出来的第三方库。</p>
<p>来了一个好消息，上周(2015.5.29)在谷歌2015 I/O 大会时，谷歌宣布了一个今年最让人兴奋的支持库，名叫 <strong>Android Design Support Library</strong>，在这个单独的 library 里提供了一堆有用的材料设计 UI 组件。通过这篇文章，让我用这个机会向你一个一个描述如何来使用他们。</p>
<p>请查看下面这个视频作为本教程最终的结果。</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/0.gif" alt="0"></p>
<p>从这里开始，空白 Activity 里面有一个 DrawerLayout 。</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/1.gif" alt="1"></p>
<p>Activity 已经调整为材料设计风格的主题。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">item</span> <span class="attribute">name</span>=<span class="value">"colorPrimary"</span>&gt;</span>#2196F3<span class="tag">&lt;/<span class="title">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">item</span> <span class="attribute">name</span>=<span class="value">"colorPrimaryDark"</span>&gt;</span>#1565C0<span class="tag">&lt;/<span class="title">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">item</span> <span class="attribute">name</span>=<span class="value">"colorAccent"</span>&gt;</span>#E91E63<span class="tag">&lt;/<span class="title">item</span>&gt;</span></div></pre></td></tr></table></figure>

<p>好了，让我们开始吧！</p>
<h2 id="步骤一：从_Github_上拷贝源码">步骤一：从 Github 上拷贝源码</h2>
<p>我已经为这个 codelab 准备了源码，你可以从 <a href="https://github.com/nuuneoi/Lab-Android-DesignLibrary" target="_blank" rel="external">GitHub</a> 轻松的 clone 它。MainActivity 是上面所示的最终结果。请在这个 project 的 <code>CodeLabActivity</code> 中做我们的代码实验。</p>
<p>你一定要自己做的一个任务是... 成功的运行它，它应该是通过简单的点击“运行”按钮来完成。</p>
<h2 id="步骤二：添加_Android_Design_Support_Library_依赖">步骤二：添加 Android Design Support Library 依赖</h2>
<p>第一件要做的事是在我们的项目中添加 Android Design Support Library，在 app 的 <code>build.gradle</code> 文件下添加一行依赖代码。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile 'com.android.support:design:22.2.0'</div></pre></td></tr></table></figure>

<p>`<br><strong>请注意 Design Support Library 依赖于 Support v4 和 AppCompat v7。一旦你在你的项目中添加这个 library，你也将获得一个这些 libraries 的组件的入口。（译者注：就是说 Design Support Library 中就已经包含了 Support v4 和 AppCompat v7）</strong></p>
<p>顺便说一下，从 Github 克隆的源码已经添加了上面这行代码。但是如果你创建了你自己的项目，你需要自己添加它。</p>
<h2 id="步骤三：添加_FAB">步骤三：添加 FAB</h2>
<p>Floating Action Button (FAB) 是一个有一些阴影的圆形按钮，这个令人难以置信的，可以改变世界的设计。毫不奇怪它为什么会变成材料设计的标志。因此我们从这开始。添加一个 FAB 在布局文件，因为它需要一些父类来使它在屏幕的右下方位置对齐，所以用 <code>FrameLayout</code> 来包裹 <code>FloatingActionButton</code>。请做这样的事情作为 DrawerLayout 的内容：更换 <code>activity_code_lab.xml</code> 中已经存在的 <code>TextView</code> ，像下面的代码这样。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.v4.widget.DrawerLayout</span> <span class="attribute">...</span></span></div><div class="line">    <span class="attribute">xmlns:app</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attribute">....</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">FrameLayout</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/rootLayout"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="title">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/fabBtn"</span></div><div class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></div><div class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">            <span class="attribute">android:layout_gravity</span>=<span class="value">"bottom|right"</span></div><div class="line">            <span class="attribute">android:src</span>=<span class="value">"@drawable/ic_plus"</span></div><div class="line">            <span class="attribute">app:fabSize</span>=<span class="value">"normal"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="title">FrameLayout</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="title">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p><code>android:src</code> 是用来定义你想要的资源文件 ID（推荐 40dp 的清晰的 png 文件），而 <code>app:fabSize=&quot;normal&quot;</code> 是用来定义 FAB 的大小的，<code>normal</code> 的意思是在大多数情况下标准尺寸为 56dp 的按钮，但是万一你想使用较小的一个， <code>mini</code> 是另一个选择，它的大小将变成 40dp。</p>
<p>就这样，FAB 现在准备使用！下面是当我在 Android 4.4 上运行这段代码的结果。</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/pic/0.jpg" alt="p0"></p>
<p>但是当我们运行在 Android 5.0 上时，结果变成了这样...</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/pic/1.jpg" alt="p1"></p>
<p>这不是特效，只是一个 bug。幸运的是 design library 的开发者团队已经知道这个问题并在不久的将来会发布一个修复的版本。但是如果你现在想要使用它，我们可以做一些事情：通过设置 FAB 的 margin right 和 margin bottom 为 16dp 在 API Level 21+ 上面并在 低于 Android L 的版本上 设置为 0dp。感谢配置资源可以让我们非常容易的做到这一点。</p>
<p><strong>res/values/dimens.xml</strong></p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"codelab_fab_margin_right"</span>&gt;</span>0dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"codelab_fab_margin_bottom"</span>&gt;</span>0dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></div></pre></td></tr></table></figure>

<p><strong>res/values-v21/dimens.xml</strong></p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"codelab_fab_margin_right"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"codelab_fab_margin_bottom"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></div></pre></td></tr></table></figure>

<p><strong>res/layout/activity_code_lab.xml</strong></p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">    <span class="attribute">...</span></div><div class="line">    <span class="attribute">android:layout_marginBottom</span>=<span class="value">"@dimen/codelab_fab_margin_bottom"</span></div><div class="line">    <span class="attribute">android:layout_marginRight</span>=<span class="value">"@dimen/codelab_fab_margin_right"</span></div><div class="line">    <span class="attribute">...</span>/&gt;</div></pre></td></tr></table></figure>

<p>好了！</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/pic/2.jpg" alt="p2"></p>
<p>这里有另一个 bug。阴影，你在哪里？这个 bug 和先前的那个是有关联的。你可以通过定义 <code>app:borderWidth=&quot;0&quot;</code> 作为  FAB 的属性 作为一个快速的解决方案。</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/pic/3.jpg" alt="p3"></p>
<p>欢迎回来，阴影！其深度是自动设置的最佳实践之一：6dp 在空闲状态，12dp 是按下状态。反正你可以通过定义重写这些值，<code>app:elevation</code> 为空闲状态下的阴影深度，<code>andapp:pressedTranslationZ</code> 为按下状态的。</p>
<p>关于按钮的颜色，FAB 基本上使用强调色，但是你可以重写 <code>app:backgroundTint</code> 属性来修改。</p>
<p>就像传统的按钮，你可以通过 <code>setOnClickListener()</code> 处理点击，在 <code>CodeLabActivity.java</code> 文件的 <code>initInstances</code> 方法中添加下面的代码。</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">FloatingActionButton fabBtn;</div><div class="line">...</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initInstances</span>() {</div><div class="line">    ...</div><div class="line">    fabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);</div><div class="line">    fabBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {</div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span>(View v) {</div><div class="line">        }</div><div class="line">    });</div><div class="line">}</div></pre></td></tr></table></figure>

<p>完成！</p>
<h2 id="步骤四：使用_Snackbar">步骤四：使用 Snackbar</h2>
<p>Snackbar，在屏幕的地步一个微小的黑色条显示着一条简短的消息，在这个 library 中也是可用的。Snackbar 和 Toast 有着相同的概念，但是不同于 Toast，它的表现是作为 UI 的一部分而不是覆盖在屏幕上。</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/pic/4.jpg" alt="p4"></p>
<p>不只是概念相同，编码风格也是由 Toast 所启发，你可以通过下面的代码唤起 Snackbar。</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Snackbar.make(someView, <span class="string">"Hello. I am Snackbar!"</span>, Snackbar.LENGTH_SHORT)</div><div class="line">        .setAction(<span class="string">"Undo"</span>, <span class="keyword">new</span> View.OnClickListener() {</div><div class="line">            <span class="annotation">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span>(View v) {</div><div class="line">            }</div><div class="line">        })</div><div class="line">        .show();</div></pre></td></tr></table></figure>

<p><code>make()</code> 的第一个参数是一个 View 或者 Layout，你想在它的底部位置显示一个 Snackbar。在这个例子中，一个 FrameLayout 包裹着一个 FAB 就是其中一个例子。<code>setAction()</code> 方法是用在设置动作显示在 Snackbar 的右侧并有对应的监听。这个方法不是必需的，可以移除。</p>
<p>现在，让我们通过添加下面的代码去试试。</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">FrameLayout rootLayout;</div><div class="line">...</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initInstances</span>() {</div><div class="line">    ...</div><div class="line">    rootLayout = (FrameLayout) findViewById(R.id.rootLayout);</div><div class="line">    fabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);</div><div class="line">    fabBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {</div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span>(View v) {</div><div class="line">            Snackbar.make(rootLayout, <span class="string">"Hello. I am Snackbar!"</span>, Snackbar.LENGTH_SHORT)</div><div class="line">                    .setAction(<span class="string">"Undo"</span>, <span class="keyword">new</span> View.OnClickListener() {</div><div class="line">                        <span class="annotation">@Override</span></div><div class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span>(View v) {</div><div class="line">                        }</div><div class="line">                    })</div><div class="line">                    .show();</div><div class="line">        }</div><div class="line">    });</div><div class="line">}</div></pre></td></tr></table></figure>

<p>点击 FAB 以及看到的结果。</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/pic/5.jpg" alt="p5"></p>
<p>有用！但是... 还不是很完美。它是出现在放置 Snackbar 顶部的位置，长期的用户体验是很差的。不管怎么样，这个行为已经是正确的，因为这里没有为 Snackbar 和 FAB 定义任何关联。</p>
<p>为了这个目的专门发明了一个特殊的布局，使子 Views 协调工作。这就不用奇怪为什么它的名字是 <code>CoordinatorLayout</code> 了。</p>
<h2 id="步骤五：使他们和_CoordinatorLayout_协作">步骤五：使他们和 CoordinatorLayout 协作</h2>
<p>CoordinatorLayout 是一个让子 Views 协调工作的布局。这里没有任何魔法。每个 View 中肯定是设计和实现了和  CoordinatorLayout 协同工作的。FAB 和 Snackbar 就是这两个view。</p>
<p>所以... 现在让我们将 FrameLayout 改成 <code>CoordinatorLayout</code> 包裹一个FAB。</p>
<p><strong>res/layout/activity_code_lab.xml</strong></p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/rootLayout"</span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attribute">...</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p>而且，不要忘了在 <code>CodeLabActivity.java</code> 改变 rootLayout 的变量类型为 CoordinatorLayout，否则就会崩溃。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//FrameLayout rootLayout;</div><div class="line">CoordinatorLayout rootLayout;</div><div class="line">//rootLayout = (FrameLayout) findViewById(R.id.rootLayout);</div><div class="line">rootLayout = (CoordinatorLayout) findViewById(R.id.rootLayout);</div></pre></td></tr></table></figure>

<p><strong>结果</strong>：现在 FAB 随着 Snackbar 的出现和消失而移动。还增加了一些功能。Snackbar 现在能够滑动消失了！请试一试。</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/2.gif" alt="2"></p>
<p>但是 bug 到处都是… bug 出现在低于 Android L 的系统上，当 Snackbar 滑动消失的时候，FAB 忘记了移动下来。</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/3.gif" alt="3"></p>
<p>这显然是一个 bug，但是我不知道确切的原因。感谢天主，这里有一些解决方法。从我的实验中，我发现当我们设置 FAB 的 margin bottom 和 margin right 为一些非零的正数值时，它将会奇迹般的正常工作，所以..就只需要为低于 Android L 的系统改变 margin 的值为 0.1dp就行。</p>
<p><strong>res/values/dimens.xml</strong></p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"codelab_fab_margin_right"</span>&gt;</span>0.1dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"codelab_fab_margin_bottom"</span>&gt;</span>0.1dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></div></pre></td></tr></table></figure>

<p>完成。下面是结果。</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/4.gif" alt="4"></p>
<p>从现在起，如果你计划使用 Android Design Support Library。请首先考虑 CoordinatorLayout，因为它就像是这个 library 的核心。</p>
<h2 id="步骤六：再见_ActionBar，你好，Toolbar">步骤六：再见 ActionBar，你好，Toolbar</h2>
<p>Toolbar 不是 Android Design Support Library 的一部分，而是在这个库中需要与其他组件一起使用。</p>
<p>Toolbar 是一个替代传统的 Action Bar 具有更灵活的行为。我鼓励你们从现在开始隐藏 Action Bar 并且切换到 Toolbar。因为这些有奇妙功能的新库，包括 Design Support Library 的组件中，都被设计为和 Toolbar 协同工作而不是 Action Bar。</p>
<p>很容易切换到 Toolbar。只需要从 Activity 定义的 AppTheme 的 style 属性隐藏掉 Action Bar 开始。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"AppTheme"</span> <span class="attribute">parent</span>=<span class="value">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="css"></span></div><div class="line">    &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">windowActionBar</span>"&gt;<span class="tag">false</span>&lt;/<span class="tag">item</span>&gt;</div><div class="line">    &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">windowNoTitle</span>"&gt;<span class="tag">true</span>&lt;/<span class="tag">item</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">style</span>&gt;</span></div></pre></td></tr></table></figure>

<p>然后在 CoordinatorLayout 里面的 FAB 之前正确的放一个 Toolbar 组件。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attribute">...</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/toolbar"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"?attr/actionBarSize"</span></div><div class="line">        <span class="attribute">android:background</span>=<span class="value">"?attr/colorPrimary"</span></div><div class="line">        <span class="attribute">app:popupTheme</span>=<span class="value">"@style/ThemeOverlay.AppCompat.Light"</span></div><div class="line">        <span class="attribute">app:theme</span>=<span class="value">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attribute">...</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="title">android.support.design.widget.FloatingActionButton</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p>现在写代码来告诉系统，我们将使用 Toolbar 作为一个 Action Bar，更换下面的 Java 代码。</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Toolbar toolbar;</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initInstances</span>() {</div><div class="line">    toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">    setSupportActionBar(toolbar);</div><div class="line">    ...</div><div class="line">}</div></pre></td></tr></table></figure>

<p>虽然它现在可以运行成功，但是根据我之前说的，放在 CoordinatorLayout 的东西必须被设计和实现成与它一起合作的，否则将不与任何其他兄弟 views(sibling views) 协作。但是... Toolbar是不合适的。别担心，这里没有任何新的特殊 Toolbar。只是一个组件是为了准备让 Toolbar 与 CoordinatorLayout 一起工作的更加完美。这是简单的任务，只是简单的用 <code>AppBarLayout</code> 包裹 Toolbar，就这样！</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attribute">...</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>&gt;</div><div class="line">       <span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span></div><div class="line">           <span class="attribute">...</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="title">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">        <span class="attribute">...</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="title">android.support.design.widget.FloatingActionButton</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p>现在运行和测试，如果你做的都是对的，你将会看到 Drawer Menu  会覆盖在 App Bar区域的顶部。使用了 AppBarLayout 的输出结果是：低于应用栏区域的阴影现在回来了，耶！(译者注：不晓得怎么翻了：The outgrowth of applying AppBarLayout is the drop shadow below App Bar area is now returned ! Yah !)</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/5.gif" alt="5"></p>
<p>这个步骤现在完成了。从现在开始，我建议你总是用 AppBarLayout 包裹 ToolBar 元素。光凭它能带回来阴影的能力就足够有说服力。</p>
<h2 id="步骤7：在内容区域放东西">步骤7：在内容区域放东西</h2>
<p>我们已经得到了 FAB 和 Toolbar，现在是时候在 Activity 的内容区域放上东西了。</p>
<p>额。如果是两个简单的按钮呢？好吧，让我们把它们放在在 AppBarLayout 和 FAB 之间。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="title">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">LinearLayout</span></span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">Button</span></span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:text</span>=<span class="value">"Yo Yo"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">Button</span></span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:text</span>=<span class="value">"Yo Yo"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">    <span class="attribute">...</span>&gt;</div></pre></td></tr></table></figure>

<p>下面是结果...</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/pic/6.jpg" alt="p6"></p>
<p>这些按钮似乎都出人意料的放在了 Toolbar 下面。猜猜为什么？</p>
<p>是的，一些古老的原因，<em>LinearLayout 没有被设计成与 CoordinatorLayout 协同工作</em>。在这样的情况下，没有任何布局用来包裹 LinearLayout，使它像 Toolbar 的做法那样。但它是更加容易的，你只需要在 LinearLayout 添加一个属性告诉它的滚动行为，就像下面写的这样：</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">LinearLayout</span></span></div><div class="line">    <span class="attribute">...</span></div><div class="line">    <span class="attribute">app:layout_behavior</span>=<span class="value">"@string/appbar_scrolling_view_behavior"</span></div><div class="line">    <span class="attribute">...</span>&gt;</div></pre></td></tr></table></figure>

<p>现在，他们被放在了正确的位置了，耶！</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/pic/7.jpg" alt="p7"></p>
<p>完成！=)</p>
<h2 id="步骤8：玩转_TabLayout">步骤8：玩转 TabLayout</h2>
<p>Tab 是在 Android 应用程序中用户体验(UX)最佳实践的一部分。在以前，如果我们想要使用新的材料设计风格的 Tab，我们需要自己去为项目中下载 SlidingTabLayout 和 SlidingTabStrip 的源码。现在，我们只需要使用这个库提供的 <code>TabLayout</code>，它也有很多可以调整的选项。</p>
<p>我们应该把 TabLayout 放在哪里？根据 Android 应用程序用户体验指导原则，Tab 应该放在屏幕的顶部而不是在底部。还有，它应该在阴影部分的上面。所以，我们将其放在 AppBarLayout 里面，沿着 Toolbar。这是可以做到的，<strong>因为 AppBarLayout 是继承自一个垂直的 LinearLayout</strong>。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.AppBarLayout</span> <span class="attribute">...</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span> <span class="attribute">...</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">android.support.design.widget.TabLayout</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/tabLayout"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p>在 Java 代码中添加一些 tabs。</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">TabLayout tabLayout;</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initInstances</span>() {</div><div class="line">    tabLayout = (TabLayout) findViewById(R.id.tabLayout);</div><div class="line">    tabLayout.addTab(tabLayout.newTab().setText(<span class="string">"Tab 1"</span>));</div><div class="line">    tabLayout.addTab(tabLayout.newTab().setText(<span class="string">"Tab 2"</span>));</div><div class="line">    tabLayout.addTab(tabLayout.newTab().setText(<span class="string">"Tab 3"</span>));</div><div class="line">    ...</div><div class="line">}</div></pre></td></tr></table></figure>

<p>下面是结果：</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/pic/8.jpg" alt="p8"></p>
<p>背景色会自动设置成 primary color(主题色)，而导航线的颜色是强调色。但是你将会注意到 Tab 的字体仍然是黑色的，但是我们希望字体是白色的。这是因为我们还没有为 TabLayout 提供任何主题呢。TabLayout 定义主题是简单的，就像这样：</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.TabLayout</span></span></div><div class="line">    <span class="attribute">...</span></div><div class="line">    <span class="attribute">app:theme</span>=<span class="value">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span> /&gt;</div></pre></td></tr></table></figure>

<p>现在，他们是白色的了。</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/pic/9.jpg" alt="p9"></p>
<p>你可以像上面这样选择手动控制 TabLayout，或者让它和 ViewPager 一起工作，自动调用 <code>setupWithViewPager(...)</code>。我相信这种情况会很频繁的使用。</p>
<p>还有，我们可以调整两个属性来显示 TabLayout。</p>
<p><code>app:tabMode</code> - 如果你想在屏幕上显示出每个单独的 tab，就设置 tab 为 <code>fixed</code> 的， 。它适合只有少数 tab 的时候，但是如果有很多的 tab 的时候这是一个完全错误的选择。在这种情况下你是不确定所有的 tab 是否能很好的在同一时间显示出来的。所以，你可以设置这个属性为 <code>scrollable</code> 让用户去滚动 tab，就像 Google Play Store 那样。</p>
<p><code>app:tabGravity</code> - 如果你想要分配所有的可用空间给每个 tab，就设置这个属性为 <code>fill</code>。如果你想要所有的 tab 在屏幕的中间，就设置这个属性为 <code>center</code>。请注意，如果 tabMode 是设置成 scrollable 的，则这个属性将会被忽略。</p>
<p>每个模式的样子就像下面这样：</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/pic/10.jpg" alt="p10"></p>
<p>TabLayout 完成了！</p>
<h2 id="步骤9：当随着内容滚动时，让_AppBarLayout_退出屏幕">步骤9：当随着内容滚动时，让 AppBarLayout 退出屏幕</h2>
<p>一个优美的 Android 用户体验是引导 App Bar 可以随着内容滚动出屏幕的，以获得额外的空间来显示内容，并且，这已经是被证明这样的用户体验是很棒的。以前有一些应用程序已经实现了这种行为，但是开发者必须自己来实现。现在它只需要用一行代码就能轻松的完成。</p>
<p>首先，我们需要让内容能够滚动，先往 LinearLayout 加入一些 Button。大约20个？</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">Button</span></span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">    <span class="attribute">android:text</span>=<span class="value">"Yo Yo"</span>/&gt;</div><div class="line">...</div><div class="line"><span class="comment">&lt;!-- Add 20 more buttons here --&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="title">Button</span></span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">    <span class="attribute">android:text</span>=<span class="value">"Yo Yo"</span>/&gt;</div></pre></td></tr></table></figure>

<p>然后用 ScrollView 包裹这个 LinearLayout，还有，<strong>不要忘了将 LinearLayout 里的 layout_behavior 移动到 ScrollView</strong>，因为现在 ScrollView 是 CoordinatorLayout的最直接的子 view。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">ScrollView</span></span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:fillViewport</span>=<span class="value">"true"</span></div><div class="line">    <span class="attribute">app:layout_behavior</span>=<span class="value">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span></span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span>&gt;</div><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">ScrollView</span>&gt;</span></div></pre></td></tr></table></figure>

<p>然后给 Toolbar 添加一个滚动标志，就像这样：</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span></div><div class="line">    <span class="attribute">...</span></div><div class="line">    <span class="attribute">app:layout_scrollFlags</span>=<span class="value">"scroll|enterAlways"</span> /&gt;</div></pre></td></tr></table></figure>

<p>试试吧</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/6.gif" alt="6"></p>
<p>额... 原先假定的 Toolbar 会随着内容的滚动滚出屏幕的，但是为什么它看起来什么都没有实现呢？</p>
<p>同样的老原因啦... <strong>ScrollView 没有被设计成与 CoordinatorLayout 协同工作(又来)</strong>。你需要另一个 view：<code>NestedScrollView</code>，Android Support Library v4 中有提供。这个 NestedScrollView 设计出来的目的就是为了与 CoordinatorLayout 协同工作的。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.v4.widget.NestedScrollView</span> <span class="attribute">...</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">...</span>&gt;</span></div><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">android.support.v4.widget.NestedScrollView</span>&gt;</span></div></pre></td></tr></table></figure>

<p>同样的原因，请注意了： ListView 类也是和 CoordinatorLayout 不能协同工作的。只有 <code>RecyclerView</code> 可以。也许需要时间来改变咯~</p>
<p>这里将 ScrollView 改变成 NestedScrollView 后的结果。</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/7.gif" alt="7"></p>
<p>运行起来真赞！你会注意到 Toolbar 滚出了屏幕，但是 TabLayout 仍然还在。这是因为我们没有给 TabLayout 设置任何滚动标志。如果你想要 TabLayout 同样从屏幕上消失，只需要给 TabLayout 定义相同的属性就可以了。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.TabLayout</span></span></div><div class="line">    <span class="attribute">...</span></div><div class="line">    <span class="attribute">app:layout_scrollFlags</span>=<span class="value">"scroll|enterAlways"</span> /&gt;</div></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/8.gif" alt="8"></p>
<p>这里会有一些手势上的 bug。我发现拉它回到屏幕是非常困难的。看来我们得等下一个版本了。</p>
<p>现在，让我们来看看它的一些细节。很好奇这些标志的真实意思是什么：<code>scroll</code> 和 <code>enterAlways</code>？事实上我们可以在这里设置4个属性值。</p>
<p><code>scroll</code> - 你想你想要设置这个 view 随着内容滚动，你需要应用这个标志。</p>
<p><code>enterAlwaysCollapsed</code> - 这个标志定义了 View 是如何回到屏幕的。当你的 view 已经声明了一个最小高度(minHeight) 并且你使用了这个标志，你的 View 只有在回到这个最小的高度的时候才会展开，只有当 view 已经到达顶部之后它才会重新展开全部高度。滚动标志像这样来使用它：<code>scroll|enterAlwaysCollapsed</code>。</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/9.gif" alt="9"></p>
<p>它好像在这个 minHeight 部分死活不工作。这里和 TabLayout 有另一个问题。很难把这些 View 拉回到屏幕来。</p>
<p><code>enterAlways</code> - 这个标志确保了任何向下滚动的操作都会让这个 view 变得可见，达到“快速返回”(‘quick return’ )的效果，滚动标志像这样来使用它： <code>scroll|enterAlways</code></p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/10.gif" alt="10"></p>
<p><code>exitUntilCollapsed</code> - View 将关闭滚动直到它被折叠起来(有 minHeight) 并且一直保持这样，举个例子：</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span></div><div class="line">    <span class="attribute">...</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"192dp"</span></div><div class="line">    <span class="attribute">android:gravity</span>=<span class="value">"bottom"</span></div><div class="line">    <span class="attribute">android:paddingBottom</span>=<span class="value">"12dp"</span></div><div class="line">    <span class="attribute">android:minHeight</span>=<span class="value">"?attr/actionBarSize"</span></div><div class="line">    <span class="attribute">app:layout_scrollFlags</span>=<span class="value">"scroll|exitUntilCollapsed"</span>/&gt;</div></pre></td></tr></table></figure>

<p>下面是上述代码的结果：</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/11.gif" alt="11"></p>
<p>这种模式在组件中经常使用，我将在下一个部分讨论。</p>
<h2 id="步骤10:_移除_TabLayout">步骤10: 移除 TabLayout</h2>
<p>从实验来看，在上述情况下当我们用 TabLayout 来滚动的时候，有一些明显的 bug。我相信这只是一个 bug，而且以后会被修复的。现在，让我们首先从代码中移除 TabLayout，确保下一步运行是流畅的。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--android.support.design.widget.TabLayout --&gt;</span></div></pre></td></tr></table></figure>

<p>从 Java 代码中也删除</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//tabLayout = (TabLayout) findViewById(R.id.tabLayout);</div><div class="line">//tabLayout.addTab(tabLayout.newTab().setText("Tab 1"));</div><div class="line">//tabLayout.addTab(tabLayout.newTab().setText("Tab 2"));</div><div class="line">//tabLayout.addTab(tabLayout.newTab().setText("Tab 3"));</div></pre></td></tr></table></figure>

<p>好了，让我们去做下一步！</p>
<h2 id="Step_11:_Make_Toolbar_collapsable_步骤11：使工具栏可折叠">Step 11: Make Toolbar collapsable 步骤11：使工具栏可折叠</h2>
<p>就像在 exitUntilCollapsed 部分所示的例子中，Toolbar 可以展开和折叠，但是你会看到它还不是很完美。Toolbar 仍然离开了屏幕，最好的体验是让这些 icon (汉堡等-即菜单栏) 应该留在屏幕内。</p>
<p>Design Support Library 已经为这个准备好了。用 <code>CollapsingToolbarLayout</code> 你可以像魔术一样让 Toolbar 折叠起来，就像其他组件一样，它是非常容易使用的，具体操作步骤如下：</p>
<ul>
<li><p>用 <code>CollapsingToolbarLayout</code> 包裹 <code>Toolbar</code>，但仍然在 <code>AppBarLayout</code> 中</p>
</li>
<li><p>从 <code>Toolbar</code> 中删除 <code>layout_scrollFlags</code></p>
</li>
<li><p>为 <code>CollapsingToolbarLayout</code> 声明 <code>layout_scrollFlags</code>，并且将 <code>layout_scrollFlags</code> 设置成 <code>scroll|exitUntilCollapsed</code></p>
</li>
<li>改变 AppBarLayout 扩张状态时的布局高度大小。在这个例子中，我用 256dp</li>
</ul>
<p>这是最终代码。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.AppBarLayout</span></span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"256dp"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/collapsingToolbarLayout"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">app:layout_scrollFlags</span>=<span class="value">"scroll|exitUntilCollapsed"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span></div><div class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/toolbar"</span></div><div class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"?attr/actionBarSize"</span></div><div class="line">            <span class="attribute">android:background</span>=<span class="value">"?attr/colorPrimary"</span></div><div class="line">            <span class="attribute">android:minHeight</span>=<span class="value">"?attr/actionBarSize"</span></div><div class="line">            <span class="attribute">app:theme</span>=<span class="value">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line">            <span class="attribute">app:popupTheme</span>=<span class="value">"@style/ThemeOverlay.AppCompat.Light"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="title">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p>这个结果是：</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/12.gif" alt="12"></p>
<p>看起来不错，但是这些 Toolbar icons 仍然滚出了屏幕。我们可以声明这个属性给 Toolbar 来固定住它，让它总是在屏幕的顶部。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span></div><div class="line">    <span class="attribute">...</span></div><div class="line">    <span class="attribute">app:layout_collapseMode</span>=<span class="value">"pin"</span>/&gt;</div></pre></td></tr></table></figure>

<p>Toolbar现在被定住了！</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/13.gif" alt="13"></p>
<p>但是，等一下…标题的文字在哪里？！不幸的是，在用 CollapsingToolbarLayout 包裹住 Toolbar 后，它随风而逝了。我们必须通过在 Java 代码中手动设置 <code>setTitle(String)</code> 来实现。</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CollapsingToolbarLayout collapsingToolbarLayout;</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initInstances</span>() {</div><div class="line">    ...</div><div class="line">    collapsingToolbarLayout = (CollapsingToolbarLayout) findViewById(R.id.collapsingToolbarLayout);</div><div class="line">    collapsingToolbarLayout.setTitle(<span class="string">"Design Library"</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/14.gif" alt="14"></p>
<p>这里的字体颜色仍然是黑的的。这是因为我们还没有为 App Ba 设置任何主题。要做到这一点，只需要简单的为 <code>AppBarLayout</code> 声明 <code>android:theme</code> 属性就可以了，就像这样：</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.AppBarLayout</span></span></div><div class="line">    <span class="attribute">...</span></div><div class="line">    <span class="attribute">android:theme</span>=<span class="value">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</div></pre></td></tr></table></figure>

<p>现在，标题变成了白色的了！</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/15.gif" alt="15"></p>
<p>由于CollapsingToolbarLayout 的 特点，应用的标题文字在收缩和展开状态是会自动过渡的。如果你想要在展开状态改变标题文字的位置，你可以这样做：通过应用的 margin 的4个属性，就是：<code>app:expandedTitleMargin</code>, <code>app:expandedTitleMarginBottom</code>, <code>app:expandedTitleMarginEnd</code> 以及 <code>app:expandedTitleMarginStart</code></p>
<p>或者如果你想要在折叠和展开状态时改变文本的显示。你可以这样来简单的实现：设置 TextAppearance，分别通过 <code>app:collapsedTitleTextAppearance</code> 和 <code>app:expandedTitleTextAppearance</code> 来设置。</p>
<p>让我们从试着改变 margin 为64dp 开始。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">    <span class="attribute">...</span></div><div class="line">    <span class="attribute">app:expandedTitleMarginStart</span>=<span class="value">"64dp"</span>&gt;</div></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/16.gif" alt="16"></p>
<p>真棒！</p>
<h2 id="步骤12：为_App_Bar_添加背景图片">步骤12：为 App Bar 添加背景图片</h2>
<p>在这种情况下，我们想要用一张美丽的图片作为 App Bar 的背景，而不只是像现在这样的一个普通的颜色。幸运的是 CollapsingToolbarLayout 是继承自 FrameLayout 所以我们可以轻松的添加一个 ImageView 作为 Toolbar 的背景图层，就像这样：</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">ImageView</span></span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:scaleType</span>=<span class="value">"centerCrop"</span></div><div class="line">    <span class="attribute">android:src</span>=<span class="value">"@drawable/header"</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="title">android.support.v7.widget.Toolbar</span></span></div><div class="line">    <span class="attribute">...</span></div></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/17.gif" alt="17"></p>
<p>图片已经显示出来了，但是这里有一点还没有达到预期，蓝色的导航条仍旧显示着。有一个 Toolbar 的背景看起来不是酷炫的。从 Toolbar 移除它，只需要下面这行代码就行了。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:background="?attr/colorPrimary"</div></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/18.gif" alt="18"></p>
<p>现在图片是随着内容的滚动了，但是看起来太呆了。我们可以使用视差模式让它变得更优雅一些，只需要声明 collapse 就行了，像下面这样：</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">ImageView</span></span></div><div class="line">   <span class="attribute">...</span></div><div class="line">   <span class="attribute">app:layout_collapseMode</span>=<span class="value">"parallax"</span> /&gt;</div></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/19.gif" alt="19"></p>
<p>你也可以设置视差的系数，介于 0.0-1.0之间。</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:layout_collapseParallaxMultiplier="0.7"</div></pre></td></tr></table></figure>

<p>请你自己去尝试一下=)</p>
<p>最后你可能会注意到 App Bar 的背景总显示一张图片。你可以让它在收缩的时候自动的变化到普通的颜色，通过声明属性 app:contentScrim 像下面这样来实现：</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">    <span class="attribute">...</span></div><div class="line">    <span class="attribute">app:contentScrim</span>=<span class="value">"?attr/colorPrimary"</span>&gt;</div></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/20.gif" alt="20"></p>
<p>只用了几行代码，就让 App Bar 变得这么漂亮了 =)</p>
<h2 id="步骤13：玩转_Navigation_Drawer">步骤13：玩转 Navigation Drawer</h2>
<p>现在从左侧拉出 Drawer Menu 仍然只是一个空白的面板。在以前，实现这个菜单是非常麻烦的，因为我们不得不手动的用 LinearLayout 或者 ListView 去实现。</p>
<p>在 Android Design Support Library 中提供了 NavigationView，实现它变得更容易了，它为我们节省了15.84321倍的时间！</p>
<p>首先，为 Drawer Menu 创建一个标题视频布局文件。（它已经在 Github的项目中了）</p>
<p><strong>res/layout/nav_header.xml</strong></p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">FrameLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"192dp"</span></div><div class="line">    <span class="attribute">android:theme</span>=<span class="value">"@style/ThemeOverlay.AppCompat.Dark"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">ImageView</span></span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:src</span>=<span class="value">"@drawable/nav_header_bg"</span></div><div class="line">        <span class="attribute">android:scaleType</span>=<span class="value">"centerCrop"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">ImageView</span></span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:src</span>=<span class="value">"@drawable/nuuneoi"</span></div><div class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"bottom"</span></div><div class="line">        <span class="attribute">android:layout_marginBottom</span>=<span class="value">"36dp"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">TextView</span></span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"bottom"</span></div><div class="line">        <span class="attribute">android:layout_margin</span>=<span class="value">"16dp"</span></div><div class="line">        <span class="attribute">android:text</span>=<span class="value">"nuuneoi"</span></div><div class="line">        <span class="attribute">android:textAppearance</span>=<span class="value">"@style/TextAppearance.AppCompat.Body1"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p>现在创建一个菜单资源文件</p>
<p><strong>res/menu/navigation_drawer_items.xml</strong></p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">menu</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">group</span> <span class="attribute">android:checkableBehavior</span>=<span class="value">"all"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">item</span></span></div><div class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/navItem1"</span></div><div class="line">            <span class="attribute">android:icon</span>=<span class="value">"@drawable/ic_action_location_found_dark"</span></div><div class="line">            <span class="attribute">android:title</span>=<span class="value">"Home"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="title">item</span></span></div><div class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/navItem2"</span></div><div class="line">            <span class="attribute">android:icon</span>=<span class="value">"@drawable/ic_action_location_found_dark"</span></div><div class="line">            <span class="attribute">android:title</span>=<span class="value">"Blog"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="title">item</span></span></div><div class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/navItem3"</span></div><div class="line">            <span class="attribute">android:icon</span>=<span class="value">"@drawable/ic_action_location_found_dark"</span></div><div class="line">            <span class="attribute">android:title</span>=<span class="value">"About"</span>/&gt;</div><div class="line">        <span class="tag">&lt;<span class="title">item</span></span></div><div class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/navItem4"</span></div><div class="line">            <span class="attribute">android:icon</span>=<span class="value">"@drawable/ic_action_location_found_dark"</span></div><div class="line">            <span class="attribute">android:title</span>=<span class="value">"Contact"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="title">group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">menu</span>&gt;</span></div></pre></td></tr></table></figure>

<p><code>NavigationView</code> 与两个资源文件绑定起来，作为 Drawer Menu 的菜单区域，用下面的代码来替换一个已经存在的 白色的 LinearLayout ：</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="title">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/navigation"</span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"start"</span></div><div class="line">        <span class="attribute">app:headerLayout</span>=<span class="value">"@layout/nav_header"</span></div><div class="line">        <span class="attribute">app:itemIconTint</span>=<span class="value">"#333"</span></div><div class="line">        <span class="attribute">app:itemTextColor</span>=<span class="value">"#333"</span></div><div class="line">        <span class="attribute">app:menu</span>=<span class="value">"@menu/navigation_drawer_items"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p>现在：召唤 Drawer Menu！哇喔，哇喔</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/21.gif" alt="21"></p>
<p>NavigationView 就是为了 Drawer Menu 而特别设计的。所以，所有的东西都会被创建并且自动测量包括菜单的宽度等，我们自己定义案例来配置以前的设计。</p>
<p>为了处理这些菜单项的点击事件，你可以声明 <code>setNavigationItemSelectedListener</code> 来监听，就像下面这样：</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">NavigationView navigation;</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initInstances</span>() {</div><div class="line">    ...</div><div class="line">    navigation = (NavigationView) findViewById(R.id.navigation);</div><div class="line">    navigation.setNavigationItemSelectedListener(<span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener() {</div><div class="line">        <span class="annotation">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span>(MenuItem menuItem) {</div><div class="line">            <span class="keyword">int</span> id = menuItem.getItemId();</div><div class="line">            <span class="keyword">switch</span> (id) {</div><div class="line">                <span class="keyword">case</span> R.id.navItem1:</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> R.id.navItem2:</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> R.id.navItem3:</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            }</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        }</div><div class="line">    });</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在实际使用中，请随意的区声明你想要定义的 header view 和修改菜单项。</p>
<h2 id="步骤14：用上_TextInputLayout_让_EditText_变的更风骚">步骤14：用上 TextInputLayout 让 EditText 变的更风骚</h2>
<p>这是 Codelab 的最后一部分了。你可以改变一个旧的 EditText 的风格，让它变得更时髦，即：总是会显示一个提示或者一个错误信息。</p>
<p>要做到这一点，只需要简单的用 TextInputLayout 包裹住一个 EditText ，就这么简单！</p>
<figure class="highlight XML"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">android.support.design.widget.TextInputLayout</span></span></div><div class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="title">EditText</span></span></div><div class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></div><div class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></div><div class="line">        <span class="attribute">android:hint</span>=<span class="value">"Username"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">android.support.design.widget.TextInputLayout</span>&gt;</span></div></pre></td></tr></table></figure>

<p>把这两个控件放到 NestedScrollView 里看下结果。</p>
<p><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/gif/22.gif" alt="22"></p>
<p>难以置信的容易吧？=)</p>
<h2 id="结论">结论</h2>
<p>Android Design Support Library 是非常有前途的支持库，它非常值得在你的产品上使用。虽然它仍然包含了很多错误，我建议你再等等，直到每个错误都被修复。</p>
<p>这么长的教程，希望希望你觉得它有用 =)</p>
<p>`<br><img src="https://raw.githubusercontent.com/MrFuFuFu/Codelab/master/pic/11.png" alt="p11"><br>Author: nuuneoi (Android GDE, CTO &amp; CEO at The Cheese Factory)<br>A full-stack developer with more than 6 years experience on Android Application Development and more than 12 years in Mobile Application Development industry. Also has skill in Infrastucture, Service Side, Design, UI&amp;UX, Hardware, Optimization, Cooking, Photographing, Blogging, Training, Public Speaking and do love to share things to people in the world!</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原文：<a href="http://inthecheesefactory.com/blog/android-design-support-library-codelab/en" target="_blank" rel="external">Codelab for Android Design Support Library used in I/O Rewind Bangkok session----Make your app fancy with few lines of code</a></p>
<p>原文项目 demo: <a href="https://github.com/nuuneoi/Lab-Android-DesignLibrary" target="_blank" rel="external">Lab-Android-DesignLibrary</a></p>
<p>双语对照地址: <a href="http://mrfufufu.github.io/english/2015/07/01/Translate_Codelab_Android_Design_Support_Library.html" target="_blank" rel="external">【翻-双语】Android Design Support Library 的 代码实验——几行代码，让你的 APP 变得花俏</a></p>
<ul>
<li>翻译: <a href="http://mrfufufu.github.io/" target="_blank" rel="external">MrFu</a></li>
<li>校验: <a href="http://mrfufufu.github.io/" target="_blank" rel="external">MrFu</a></li>
<li>能去小小的 star 一下吗？非常感谢！<a href="https://github.com/MrFuFuFu/Codelab" target="_blank" rel="external">Codelab</a></li>
</ul>
</blockquote>
]]>
    
    </summary>
    
      <category term="Android" scheme="http://colobu.com/tags/Android/"/>
    
      <category term="Android" scheme="http://colobu.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scala Collections 提示和技巧]]></title>
    <link href="http://colobu.com/2015/07/02/Scala-Collections-Tips-and-Tricks/"/>
    <id>http://colobu.com/2015/07/02/Scala-Collections-Tips-and-Tricks/</id>
    <published>2015-07-02T01:21:52.000Z</published>
    <updated>2015-07-31T13:28:02.463Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="https://pavelfatin.com/scala-collections-tips-and-tricks/" target="_blank" rel="external">Scala Collections Tips and Tricks</a>,<br>作者<a href="https://pavelfatin.com/about/" target="_blank" rel="external">Pavel Fatin</a>是JetBrains 的一名员工，为神器IntelliJ IDEA开发Scala插件。<br>受其工作<a href="https://youtrack.jetbrains.com/issues/SCL?q=by%3A+Pavel.Fatin+collection+order+by%3A+created" target="_blank" rel="external">Scala Collections inspections </a>)的启发，他整理了这个关于Java Collections API技巧的列表。<br>一些技巧只在一些微妙的实现细节中体现，但是大部分技巧都是一般的常识，但是在大部分情况下被忽视了。<br>性和谐提示和技巧很有价值，可以帮你深入理解Scala Collections，可以是你的代码更快更简洁。<br><a id="more"></a></p>
<h2 id="图例_Legend">图例 Legend</h2>
<p>为了使下面的例子更容易理解，这里列出了一些约定：</p>
<ul>
<li><code>seq</code> — 一个<code>Seq</code>-based的集合, 比如 <code>Seq(1, 2, 3)</code></li>
<li><code>set</code> — 一个<code>Set</code>实例, 比如 <code>Set(1, 2, 3)</code></li>
<li><code>array</code> — 一个数组, 比如 <code>Array(1, 2, 3)</code></li>
<li><code>option</code> — 一个<code>Option</code>, 比如 <code>Some(1)</code></li>
<li><code>map</code> — 一个<code>Map</code>, 比如<code>Map(1 -&gt; &quot;foo&quot;, 2 -&gt; &quot;bar&quot;)</code></li>
<li><code>p</code> — 一个断言<code>predicate</code>函数，类型 <code>T =&gt; Boolean</code>, 比如 <code>_ &gt; 2</code></li>
<li><code>n</code> — 一个整数</li>
<li><code>i</code> — 一个索引</li>
<li><code>f, g</code> — 简单函数, <code>A =&gt; B</code></li>
<li><code>x, y</code> — 一些字面值(arbitrary values)</li>
<li><code>z</code> — 初始值或者缺省值</li>
</ul>
<h2 id="组合Composition">组合Composition</h2>
<p>记住，尽管这些技巧都是独立和自包含的，我们还是可以将它们组合起来逐步迭代得到一个更高级的表达式，比如下面的例子，在一个Seq中检查一个元素是否存在：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">seq.filter(_ == x).headOption != None</div><div class="line"><span class="comment">// Via seq.filter(p).headOption -&gt; seq.find(p)</span></div><div class="line">seq.find(_ == x) != None</div><div class="line"><span class="comment">// Via option != None -&gt; option.isDefined</span></div><div class="line">seq.find(_ == x).isDefined</div><div class="line"><span class="comment">// Via seq.find(p).isDefined -&gt; seq.exists(p)</span></div><div class="line">seq.exists(_ == x)</div><div class="line"><span class="comment">// Via seq.exists(_ == x) -&gt; seq.contains(x)</span></div><div class="line">seq.contains(x)</div></pre></td></tr></table></figure>

<p>我们可以依赖”substitution model of recipe application“ (<a href="https://mitpress.mit.edu/sicp/full-text/sicp/book/node10.html" target="_blank" rel="external">SICP)</a>)来简化复杂的表达式。</p>
<h2 id="副作用_Side_effects">副作用 Side effects</h2>
<p>”Side effects“是一个基础概念，在函数式编程语言中会有这个概念。 Scala有一个PPT专门介绍: <a href="https://wiki.scala-lang.org/download/attachments/1310722/effects.pdf" target="_blank" rel="external">Side-effect checking for Scala</a><br>基本上，”Side effects“是这样一个动作， 除了返回一个值外，外部函数或者表达式还观察到此动作还有以下行为之一:</p>
<ul>
<li>有输入输出操作 (比如文件，网络I/O)</li>
<li>对外部变量有修改</li>
<li>外部对象的状态有改变</li>
<li>抛出异常</li>
</ul>
<p>当一个函数或者表达式有以上任何一种情况时，我们就说它有副作用(Side effects),否则我们就说它是&quot;纯&quot;的函数或者表达式 (pure)。</p>
<p>side effects有什么大不了的？当有副作用时，计算的顺序不能随便改变。 比如下面两个&quot;纯&quot; (pure)表达式:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> x = <span class="number">1</span> + <span class="number">2</span></div><div class="line"><span class="keyword">val</span> y = <span class="number">2</span> + <span class="number">3</span></div></pre></td></tr></table></figure>

<p>因为它们没有副作用，两个表达式可以互换位置，先<code>x</code>后<code>y</code>和先<code>y</code>后<code>x</code>的效果一样。<br>如果有副作用 (有控制台输出)：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> x = { print(<span class="string">"foo"</span>); <span class="number">1</span> + <span class="number">2</span> }</div><div class="line"><span class="keyword">val</span> y = { print(<span class="string">"bar"</span>); <span class="number">2</span> + <span class="number">3</span> }</div></pre></td></tr></table></figure>

<p>两个表达式不能互换位置，因为一旦互换位置，输出结果的顺序变了。<br>所以副作用的一个影响就是会减少可能的转换的数量(reduces the number of possible transformations)，包括可能的简化和优化。<br>同样的原因可适用用Collection相关的表达式上。看一个外部的<code>builder</code>变量（副作用方法<code>append</code>）:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">seq filter { x =&gt; builder.append(x); x &gt; <span class="number">3</span> } headOption</div></pre></td></tr></table></figure>

<p>原则上<code>seq.filter(p).headOption</code>可以简化为<code>seq.find(p)</code>，但是副作用阻止我们这么做. 如果你尝试这么做:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">seq find { x =&gt; builder.append(x); x &gt; <span class="number">3</span> }</div></pre></td></tr></table></figure>

<p>结果和前一个表达式并不一样。 前一个表达式计算后所有大于3的元素都增加到<code>builder</code>中了， 后一个表达式在找到第一个大于3的元素后就不会再增加了。<br>两个表达式并不等价。</p>
<p>自动简化是否可能？这里有两条黄金法则，可以用在有副作用的代码上：</p>
<ol>
<li>尽可能的避免副作用</li>
<li>否则将副作用嗲吗从纯代码中分离开</li>
</ol>
<p>对于上面的例子，我们需要去掉<code>builder</code>或者将它从纯代码中隔离。 考虑到<code>builder</code>是第三方的对象，我们无法去除，那我们通过隔离的方式实现：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">seq.foreach(builder.append)</div><div class="line">seq.filter(_ &gt; <span class="number">3</span>).headOption</div></pre></td></tr></table></figure>

<p>这样我们就可以用到本文中的技巧进行替换：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">seq.foreach(builder.append)</div><div class="line">seq.find(x &gt; <span class="number">3</span>)</div></pre></td></tr></table></figure>

<p>干的漂亮！自动简化也成为可能，一个额外好处是由于清晰的隔离，代码更容易理解。<br>一个不太明显的好处是，代码变得更健壮。如上面的例子，副作用针对不同的<code>Seq</code>实现，副作用的结果也不相同， 比如<code>Vector</code>和<code>Stream</code>， 副作用隔离可以让我们避免这种不确定的行为。</p>
<h2 id="Sequence">Sequence</h2>
<p>本节中的技巧针对<code>Seq</code>以及它的子类， 而一些转换可以应用于其它集合类，如<code>Set</code>, <code>Optio</code>n,<code>Map</code> ,甚至 <code>Iterator</code>类，因为它们提供了相近的接口。</p>
<h3 id="创建Creation">创建Creation</h3>
<p>显示创建集合</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">Seq[T]()</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">Seq.empty[T]</div></pre></td></tr></table></figure>

<p>有时候可以节省内存（重用empty对象）和CPU (length check浪费)。</p>
<p>也可应用于<code>Set</code>, <code>Option</code>, <code>Map</code>, <code>Iterator</code>.</p>
<h3 id="Length">Length</h3>
<h4 id="对于数组，优先使用length而不是size。">对于数组，优先使用<code>length</code>而不是<code>size</code>。</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">array.size</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">array.length</div></pre></td></tr></table></figure>

<p><code>length</code>和<code>size</code>基本是同义词。在Scala 2.11中，<code>Array.size</code>是通过隐式转换实现的。因此每次调用时，一个中间包装类会被创建，除非你允许jvm的<a href="https://en.wikipedia.org/wiki/Escape_analysis" target="_blank" rel="external">escape analysis </a>。这会产生多余的GC对象，影响性能。</p>
<h4 id="不要对检查empty的属性取反">不要对检查empty的属性取反</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">!seq.isEmpty</div><div class="line">!seq.nonEmpty</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.nonEmpty</div><div class="line">seq.isEmpty</div></pre></td></tr></table></figure>

<p>同样适用于<code>Set</code>, <code>Option</code>, <code>Map</code>, <code>Iterator</code></p>
<h4 id="不要通过计算length来检查empty">不要通过计算length来检查empty</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.length &gt; <span class="number">0</span></div><div class="line">seq.length != <span class="number">0</span></div><div class="line">seq.length == <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.nonEmpty</div><div class="line">seq.nonEmpty</div><div class="line">seq.isEmpty</div></pre></td></tr></table></figure>

<p>一方面已经有检查empty的方法，另一方面，，比如<code>LinearSeq</code>和子类<code>List</code>,会花费<code>O(n)</code>的时间计算<code>length</code>(<code>IndexedSeq</code>花费<code>O(1)</code>)。</p>
<p>同样适用于 <code>Set</code>, <code>Map</code></p>
<h4 id="不要直接使用length来比较">不要直接使用<code>length</code>来比较</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.length &gt; n</div><div class="line">seq.length &lt; n</div><div class="line">seq.length == n</div><div class="line">seq.length != n</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.lengthCompare(n) &gt; <span class="number">0</span></div><div class="line">seq.lengthCompare(n) &lt; <span class="number">0</span></div><div class="line">seq.lengthCompare(n) == <span class="number">0</span></div><div class="line">seq.lengthCompare(n) != <span class="number">0</span></div></pre></td></tr></table></figure>

<p>同上一条，计算<code>length</code>有时候非常昂贵,有可能将花费从<code>O(length)</code> 减少到 <code>O(length min n)</code>。<br>对于无限的stream来说，上面的技巧是绝对必要的。</p>
<h3 id="等价_Equality">等价 Equality</h3>
<h4 id="不要使用==比较数组：">不要使用<code>==</code>比较数组：</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">array1 == array2</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">array1.sameElements(array2)</div></pre></td></tr></table></figure>

<p>因为<code>==</code>只是比较实例对象，而不是里面的元素。</p>
<p>同样适用于<code>Iterator</code></p>
<h4 id="不要检查不同分类(categories)的集合的相等性">不要检查不同分类(categories)的集合的相等性</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq == set</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.toSet == set</div></pre></td></tr></table></figure>

<h4 id="不要使用sameElements来比较有序集合">不要使用<code>sameElements</code>来比较有序集合</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq1.sameElements(seq2)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq1 == seq2</div></pre></td></tr></table></figure>

<h4 id="不要手工检查相等性">不要手工检查相等性</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq1.corresponds(seq2)(_ == _)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq1 == seq2</div></pre></td></tr></table></figure>

<p>使用内建的方法。</p>
<h3 id="Indexing">Indexing</h3>
<h4 id="不要使用index得到第一个元素">不要使用index得到第一个元素</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.head</div></pre></td></tr></table></figure>

<h4 id="不要使用index得到最后一个元素">不要使用index得到最后一个元素</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq(seq.length - <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.last</div></pre></td></tr></table></figure>

<h4 id="不要显式检查index的边界">不要显式检查index的边界</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line"><span class="keyword">if</span> (i &lt; seq.length) Some(seq(i)) <span class="keyword">else</span> None</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.lift(i)</div></pre></td></tr></table></figure>

<h4 id="不要仿造headOption">不要仿造<code>headOption</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line"><span class="keyword">if</span> (seq.nonEmpty) Some(seq.head) <span class="keyword">else</span> None</div><div class="line">seq.lift(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.headOption</div></pre></td></tr></table></figure>

<h4 id="不要仿造lastOption">不要仿造<code>lastOption</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line"><span class="keyword">if</span> (seq.nonEmpty) Some(seq.last) <span class="keyword">else</span> None</div><div class="line">seq.lift(seq.length - <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.lastOption</div></pre></td></tr></table></figure>

<h4 id="小心_indexOf_和_lastIndexOf_参数类型">小心 <code>indexOf</code> 和 <code>lastIndexOf</code> 参数类型</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">Seq(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).indexOf(<span class="string">"1"</span>) <span class="comment">// compilable</span></div><div class="line">Seq(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).lastIndexOf(<span class="string">"2"</span>) <span class="comment">// compilable</span></div><div class="line"></div><div class="line"><span class="comment">//  After</span></div><div class="line">Seq(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).indexOf(<span class="number">1</span>)</div><div class="line">Seq(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).lastIndexOf(<span class="number">2</span>)</div></pre></td></tr></table></figure>

<h4 id="不要构造index的Range">不要构造index的Range</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">Range(<span class="number">0</span>, seq.length)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.indices</div></pre></td></tr></table></figure>

<h4 id="不要手工使用index来zip集合">不要手工使用index来zip集合</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.zip(seq.indices)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.zipWithIndex</div></pre></td></tr></table></figure>

<h3 id="检查元素的存在_Existence">检查元素的存在 Existence</h3>
<h4 id="不要用断言equality_predicate_来检查存在">不要用断言equality  predicate 来检查存在</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.exists(_ == x)</div><div class="line"></div><div class="line"><span class="comment">//  After</span></div><div class="line">seq.contains(x)</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Option</code>, <code>Iterator</code></p>
<h4 id="小心_contains参数类型">小心 <code>contains</code>参数类型</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">Seq(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).contains(<span class="string">"1"</span>) <span class="comment">// compilable</span></div><div class="line"></div><div class="line"><span class="comment">//  After</span></div><div class="line">Seq(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).contains(<span class="number">1</span>)</div></pre></td></tr></table></figure>

<h4 id="不要用断言inequality_predicate_来检查不存在">不要用断言inequality   predicate 来检查不存在</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.forall(_ != x)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">!seq.contains(x)</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Option</code>, <code>Iterator</code></p>
<h4 id="不要统计元素的数量来检查存在">不要统计元素的数量来检查存在</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.count(p) &gt; <span class="number">0</span></div><div class="line">seq.count(p) != <span class="number">0</span></div><div class="line">seq.count(p) == <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">//  After</span></div><div class="line">seq.exists(p)</div><div class="line">seq.exists(p)</div><div class="line">!seq.exists(p)</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Map</code>, <code>Iterator</code></p>
<h4 id="不要借助filter来检查存在">不要借助<code>filter</code>来检查存在</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.filter(p).nonEmpty</div><div class="line">seq.filter(p).isEmpty</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.exists(p)</div><div class="line">!seq.exists(p)</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Option</code>, <code>Map</code>, <code>Iterator</code></p>
<h3 id="Filtering">Filtering</h3>
<h4 id="不要对断言取反">不要对断言取反</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.filter(!p)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.filterNot(p)</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Option</code>, <code>Map</code>, <code>Iterator</code></p>
<h4 id="不要借助filter统计元素数量">不要借助<code>filter</code>统计元素数量</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.filter(p).length</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.count(p)</div></pre></td></tr></table></figure>

<p>调用<code>filter</code>会产生一个临时集合，影响GC和性能。</p>
<p>同样应用于<code>Set</code>, <code>Option</code>, <code>Map</code>, <code>Iterator</code></p>
<h4 id="不要借助filter找到元素的第一个值">不要借助<code>filter</code>找到元素的第一个值</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.filter(p).headOption</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.find(p)</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Option</code>, <code>Map</code>, <code>Iterator</code></p>
<h3 id="Sorting">Sorting</h3>
<h4 id="不要手工按一个属性排序">不要手工按一个属性排序</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.sortWith(_.property &lt;  _.property)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.sortBy(_.property)</div></pre></td></tr></table></figure>

<h4 id="不要手工按照identity排序">不要手工按照identity排序</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.sortBy(it =&gt; it)</div><div class="line">seq.sortBy(identity)</div><div class="line">seq.sortWith(_ &lt; _)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.sorted</div></pre></td></tr></table></figure>

<h4 id="一步完成排序反转">一步完成排序反转</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.sorted.reverse</div><div class="line">seq.sortBy(_.property).reverse</div><div class="line">seq.sortWith(f(_, _)).reverse</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.sorted(Ordering[T].reverse)</div><div class="line">seq.sortBy(_.property)(Ordering[T].reverse)</div><div class="line">seq.sortWith(!f(_, _))</div></pre></td></tr></table></figure>

<h3 id="Reduction">Reduction</h3>
<h4 id="不要手工计算sum">不要手工计算sum</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.reduce(_ + _)</div><div class="line">seq.fold(z)(_ + _)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.sum</div><div class="line">seq.sum + z</div></pre></td></tr></table></figure>

<p>其它可能用的方法 <code>reduceLeft</code>, <code>reduceRight</code>, <code>foldLeft</code>, <code>foldRight</code></p>
<p>同样应用于<code>Set</code>, <code>Iterator</code></p>
<h4 id="不要手工计算product">不要手工计算product</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.reduce(_ * _)</div><div class="line">seq.fold(z)(_ * _)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.product</div><div class="line">seq.product * z</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Iterator</code></p>
<h4 id="不要手工搜索最小值和最大值">不要手工搜索最小值和最大值</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.reduce(_ min _)</div><div class="line">seq.fold(z)(_ min _)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.min</div><div class="line">z min seq.min</div></pre></td></tr></table></figure>



<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.reduce(_ max _)</div><div class="line">seq.fold(z)(_ max _)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.max</div><div class="line">z max seq.max</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Iterator</code></p>
<h4 id="不要仿造forall">不要仿造<code>forall</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.foldLeft(<span class="keyword">true</span>)((x, y) =&gt; x && p(y))</div><div class="line">!seq.map(p).contains(<span class="keyword">false</span>)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.forall(p)</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Option</code> (for the second line), <code>Iterator</code></p>
<h4 id="不要仿造exists">不要仿造<code>exists</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.foldLeft(<span class="keyword">false</span>)((x, y) =&gt; x || p(y))</div><div class="line">seq.map(p).contains(<span class="keyword">true</span>)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.exists(p)</div></pre></td></tr></table></figure>

<h3 id="Rewriting">Rewriting</h3>
<h4 id="合并连续的filter调用">合并连续的<code>filter</code>调用</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.filter(p1).filter(p2)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.filter(x =&gt; p1(x) && p2(x))</div></pre></td></tr></table></figure>

<p>或<code>seq.view.filter(p1).filter(p2).force</code></p>
<p>同样应用于<code>Set</code>, <code>Option</code>, <code>Map</code>, <code>Iterator</code></p>
<h4 id="合并连续的map调用">合并连续的<code>map</code>调用</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.map(f).map(g)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.map(f.andThen(g))</div></pre></td></tr></table></figure>

<p>或<code>seq.view.map(f).map(g).force</code></p>
<p>同样应用于<code>Set</code>, <code>Option</code>, <code>Map</code>, <code>Iterator</code></p>
<h4 id="filter完后再排序"><code>filter</code>完后再排序</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.sorted.filter(p)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.filter(p).sorted</div></pre></td></tr></table></figure>

<h4 id="在调用map前不要显式调用反转reverse">在调用<code>map</code>前不要显式调用反转<code>reverse</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.reverse.map(f)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.reverseMap(f)</div></pre></td></tr></table></figure>

<h4 id="不要显示反转得到迭代器">不要显示反转得到迭代器</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.reverse.iterator</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.reverseIterator</div></pre></td></tr></table></figure>

<h4 id="不要通过将集合转成Set得到不重复集合">不要通过将集合转成<code>Set</code>得到不重复集合</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.toSet.toSeq</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.distinct</div></pre></td></tr></table></figure>

<h4 id="不要仿造slice">不要仿造<code>slice</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.drop(x).take(y)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.slice(x, x + y)</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Map</code>, <code>Iterator</code></p>
<h4 id="不要仿造splitAt">不要仿造<code>splitAt</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line"><span class="keyword">val</span> seq1 = seq.take(n)</div><div class="line"><span class="keyword">val</span> seq2 = seq.drop(n)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line"><span class="keyword">val</span> (seq1, seq2) = seq.spiltAt(n)</div></pre></td></tr></table></figure>

<h4 id="不要仿造span">不要仿造<code>span</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line"><span class="keyword">val</span> seq1 = seq.takeWhile(p)</div><div class="line"><span class="keyword">val</span> seq2 = seq.dropWhile(p)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line"><span class="keyword">val</span> (seq1, seq2) = seq.span(p)</div></pre></td></tr></table></figure>

<h4 id="不要仿造partition">不要仿造<code>partition</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line"><span class="keyword">val</span> seq1 = seq.filter(p)</div><div class="line"><span class="keyword">val</span> seq2 = seq.filterNot(p)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line"><span class="keyword">val</span> (seq1, seq2) = seq.partition(p)</div></pre></td></tr></table></figure>

<h4 id="不要仿造takeRight">不要仿造<code>takeRight</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.reverse.take(n).reverse</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.takeRight(n)</div></pre></td></tr></table></figure>

<h4 id="不要仿造flatten">不要仿造<code>flatten</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before (seq: Seq[Seq[T]])</span></div><div class="line">seq.flatMap(it =&gt; it)</div><div class="line">seq.flatMap(identity)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.flatten</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Map</code>, <code>Iterator</code></p>
<h4 id="不要仿造flatMap">不要仿造<code>flatMap</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before (f: A =&gt; Seq[B])</span></div><div class="line">seq.map(f).flatten</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.flatMap(f)</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Option</code>, <code>Iterator</code></p>
<h4 id="不需要结果时不要用map">不需要结果时不要用<code>map</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.map(...) <span class="comment">// the result is ignored</span></div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.foreach(...)</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Option</code>, <code>Map</code>, <code>Iterator</code></p>
<h4 id="不要产生临时集合">不要产生临时集合</h4>
<p>1.使用view</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.map(f).flatMap(g).filter(p).reduce(...)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.view.map(f).flatMap(g).filter(p).reduce(...)</div></pre></td></tr></table></figure>



<ol>
<li>将view转换成一个同样类型的集合</li>
</ol>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.map(f).flatMap(g).filter(p)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.view.map(f).flatMap(g).filter(p).force</div></pre></td></tr></table></figure>

<p>如果中间的转换是filter，还可以</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">seq.withFilter(<span class="keyword">p</span>).<span class="built_in">map</span>(<span class="keyword">f</span>)</div></pre></td></tr></table></figure>

<ol>
<li>将view转换成另一种集合</li>
</ol>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq.map(f).flatMap(g).filter(p).toList</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.view.map(f).flatMap(g).filter(p).toList</div></pre></td></tr></table></figure>

<p>还有一种<code>“transformation + conversion”</code>方法：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">seq.map(f)(collection.breakOut): List[T]</div></pre></td></tr></table></figure>


<h4 id="使用赋值操作符">使用赋值操作符</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">seq = seq :+ x</div><div class="line">seq = x +: seq</div><div class="line">seq1 = seq1 ++ seq2</div><div class="line">seq1 = seq2 ++ seq1</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq :+= x</div><div class="line">seq +:= x</div><div class="line">seq1 ++= seq2</div><div class="line">seq1 ++:= seq2</div></pre></td></tr></table></figure>

<p>Scala有一个语法糖，自动将<code>x &lt;op&gt;= y</code>转换成<code>x = x &lt;op&gt; y</code>. 如果<code>op</code>以<code>:</code>结尾，则被认为是右结合的操作符。<br>一些list和stream的语法：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">list = x :: list</div><div class="line">list1 = list2 ::: list</div><div class="line"></div><div class="line">stream = x #:: list</div><div class="line">stream1 = stream2 #::: stream</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">list ::= x</div><div class="line">list1 :::= list2</div><div class="line"></div><div class="line">stream #::= x</div><div class="line">stream1 #:::= stream2</div></pre></td></tr></table></figure>

<p>同样应用于<code>Set</code>, <code>Map</code>, <code>Iterator</code></p>
<h2 id="Set">Set</h2>
<p>大部分的<code>Seq</code>的技巧也可以应用于<code>Set</code>。另外还有一些只针对<code>Set</code>的技巧。</p>
<h3 id="不要使用sameElements比较未排序的集合">不要使用<code>sameElements</code>比较未排序的集合</h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">set1.sameElements(set2)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">set1 == set2</div></pre></td></tr></table></figure>

<p>同样应用于<code>Map</code></p>
<h3 id="不要手工计算交集">不要手工计算交集</h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">set1.filter(set2.contains)</div><div class="line">set1.filter(set2)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">set1.intersect(set2) <span class="comment">// or set1 & set2</span></div></pre></td></tr></table></figure>

<h3 id="不要手工计算diff">不要手工计算diff</h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">set1.filterNot(set2.contains)</div><div class="line">set1.filterNot(set2)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">set1.diff(set2) <span class="comment">// or set1 &~ set2</span></div></pre></td></tr></table></figure>

<h2 id="Option">Option</h2>
<p><code>Option</code>并不是集合类，但是它提供了类似的方法和行为。<br>大部分针对<code>Seq</code>的技巧也适用于<code>Option</code>。这里列出了一些特殊的只针对<code>Option</code>的技巧。</p>
<h3 id="Value">Value</h3>
<h4 id="不要使用None和Option比较">不要使用<code>None</code>和<code>Option</code>比较</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">option == None</div><div class="line">option != None</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">option.isEmpty</div><div class="line">option.isDefined</div></pre></td></tr></table></figure>

<h4 id="不要使用Some和Option比较">不要使用<code>Some</code>和<code>Option</code>比较</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">option == Some(v)</div><div class="line">option != Some(v)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">option.contains(v)</div><div class="line">!option.contains(v)</div></pre></td></tr></table></figure>

<h4 id="不要使用实例类型来检查值的存在性">不要使用实例类型来检查值的存在性</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">option.isInstanceOf[Some[_]]</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">option.isDefined</div></pre></td></tr></table></figure>

<h4 id="不要使用模式匹配来检查值的存在">不要使用模式匹配来检查值的存在</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">option <span class="keyword">match</span> {</div><div class="line">    <span class="keyword">case</span> Some(_) =&gt; <span class="keyword">true</span></div><div class="line">    <span class="keyword">case</span> None =&gt; <span class="keyword">false</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">option.isDefined</div></pre></td></tr></table></figure>

<p>同样适用于<code>Seq</code>, <code>Set</code></p>
<h4 id="对于检查存在性的属性不要取反">对于检查存在性的属性不要取反</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">!option.isEmpty</div><div class="line">!option.isDefined</div><div class="line">!option.nonEmpty</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">seq.isDefined</div><div class="line">seq.isEmpty</div><div class="line">seq.isEmpty</div></pre></td></tr></table></figure>

<h4 id="不要检查值的存在性再处理值">不要检查值的存在性再处理值</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line"><span class="keyword">if</span> (option.isDefined) {</div><div class="line">    <span class="keyword">val</span> v = option.get</div><div class="line">    ...</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">option.foreach { v =&gt;</div><div class="line">    ...</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Null">Null</h3>
<h4 id="不要通过和null比较来构造Option">不要通过和<code>null</code>比较来构造<code>Option</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line"><span class="keyword">if</span> (v != <span class="keyword">null</span>) Some(v) <span class="keyword">else</span> None</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">Option(v)</div></pre></td></tr></table></figure>

<h4 id="不要显示提供null作为备选值">不要显示提供<code>null</code>作为备选值</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">option.getOrElse(<span class="keyword">null</span>)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">option.orNull</div></pre></td></tr></table></figure>

<h3 id="Rewriting-1">Rewriting</h3>
<h4 id="将_map_with_getOrElse转换成fold">将 <code>map</code> with <code>getOrElse</code>转换成<code>fold</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">option.map(f).getOrElse(z)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">option.fold(z)(f)</div></pre></td></tr></table></figure>

<h4 id="不要仿造exists-1">不要仿造<code>exists</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">option.map(p).getOrElse(<span class="keyword">false</span>)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">option.exists(p)</div></pre></td></tr></table></figure>

<h4 id="不要手工将option转换成sequence">不要手工将<code>option</code>转换成<code>sequence</code></h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">option.map(Seq(_)).getOrElse(Seq.empty)</div><div class="line">option.getOrElse(Seq.empty) <span class="comment">// option: Option[Seq[T]]</span></div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">option.toSeq</div></pre></td></tr></table></figure>

<h2 id="Map">Map</h2>
<p>同上，这里只列出针对map的技巧</p>
<h3 id="不要使用lift替换get">不要使用<code>lift</code>替换<code>get</code></h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">map.lift(n)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">map.get(n)</div></pre></td></tr></table></figure>

<p>因为没有特别的需要将map值转换成一个Option。</p>
<h3 id="不要分别调用get和getOrElse">不要分别调用<code>get</code>和<code>getOrElse</code></h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">map.get(k).getOrElse(z)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">map.getOrElse(k, z)</div></pre></td></tr></table></figure>

<h3 id="不要手工抽取键集合">不要手工抽取键集合</h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">map.map(_._1)</div><div class="line">map.map(_._1).toSet</div><div class="line">map.map(_._1).toIterator</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">map.keys</div><div class="line">map.keySet</div><div class="line">map.keysIterator</div></pre></td></tr></table></figure>

<h3 id="不要手工抽取值集合">不要手工抽取值集合</h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">map.map(_._2)</div><div class="line">map.map(_._2).toIterator</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">map.values</div><div class="line">map.valuesIterator</div></pre></td></tr></table></figure>

<h3 id="小心使用_filterKeys">小心使用 <code>filterKeys</code></h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">map.filterKeys(p)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">map.filter(p(_._1))</div></pre></td></tr></table></figure>

<p>因为<code>filterKeys</code>包装了原始的集合，并没有复制元素，后续处理得小心。</p>
<h3 id="小心使用mapValues">小心使用<code>mapValues</code></h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">map.mapValues(f)</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">map.map(f(_._2))</div></pre></td></tr></table></figure>

<p>同上。</p>
<h3 id="不要手工filter_键">不要手工filter 键</h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">map.filterKeys(!seq.contains(_))</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">map -- seq</div></pre></td></tr></table></figure>

<h3 id="使用赋值操作符重新赋值">使用赋值操作符重新赋值</h3>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Before</span></div><div class="line">map = map + x -&gt; y</div><div class="line">map1 = map1 ++ map2</div><div class="line">map = map - x</div><div class="line">map = map -- seq</div><div class="line"></div><div class="line"><span class="comment">// After</span></div><div class="line">map += x -&gt; y</div><div class="line">map1 ++= map2</div><div class="line">map -= x</div><div class="line">map --= seq</div></pre></td></tr></table></figure>

<h2 id="补充">补充</h2>
<p>除了以上的介绍，建议你看一下官方文档 <a href="http://docs.scala-lang.org/overviews/collections/introduction.html" target="_blank" rel="external"> Scala Collections documentation</a>。</p>
<p>还有</p>
<ul>
<li><a href="https://pavelfatin.com/scala-for-project-euler/" target="_blank" rel="external">Scala for Project Euler</a></li>
<li><a href="https://pavelfatin.com/ninety-nine/" target="_blank" rel="external">Ninety-nine</a></li>
</ul>
<p>最后一段是作者的谦虚话，欢迎提供意见和建议。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="https://pavelfatin.com/scala-collections-tips-and-tricks/" target="_blank" rel="external">Scala Collections Tips and Tricks</a>,<br>作者<a href="https://pavelfatin.com/about/" target="_blank" rel="external">Pavel Fatin</a>是JetBrains 的一名员工，为神器IntelliJ IDEA开发Scala插件。<br>受其工作<a href="https://youtrack.jetbrains.com/issues/SCL?q=by%3A+Pavel.Fatin+collection+order+by%3A+created" target="_blank" rel="external">Scala Collections inspections </a>)的启发，他整理了这个关于Java Collections API技巧的列表。<br>一些技巧只在一些微妙的实现细节中体现，但是大部分技巧都是一般的常识，但是在大部分情况下被忽视了。<br>性和谐提示和技巧很有价值，可以帮你深入理解Scala Collections，可以是你的代码更快更简洁。<br>]]>
    
    </summary>
    
      <category term="Scala" scheme="http://colobu.com/tags/Scala/"/>
    
      <category term="Scala" scheme="http://colobu.com/categories/Scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TCP 连接状态]]></title>
    <link href="http://colobu.com/2015/06/25/TCP-connection-status/"/>
    <id>http://colobu.com/2015/06/25/TCP-connection-status/</id>
    <published>2015-06-25T06:36:21.000Z</published>
    <updated>2015-07-31T13:28:02.495Z</updated>
    <content type="html"><![CDATA[<p>网上有很多的分析TCP连接状态的介绍，比如参考文档中的介绍。 本文只列出了两个TCP状态迁移图(中文和英文的)，以备将来需要的时候查询。<br><a id="more"></a><br><img src="tcp.gif" alt=""><br><img src="tcp-cn.png" alt=""></p>
<h4 id="参考文档">参考文档</h4>
<ol>
<li><a href="http://www.cs.northwestern.edu/~kch670/eecs340/proj2-TCP_IP_State_Transition_Diagram.pdf" target="_blank" rel="external">http://www.cs.northwestern.edu/~kch670/eecs340/proj2-TCP_IP_State_Transition_Diagram.pdf</a></li>
<li><a href="http://www-01.ibm.com/support/knowledgecenter/SSLTBW_1.13.0/com.ibm.zos.r13.halu101/concepts.htm%23concepts" target="_blank" rel="external">http://www-01.ibm.com/support/knowledgecenter/SSLTBW_1.13.0/com.ibm.zos.r13.halu101/concepts.htm%23concepts</a></li>
<li><a href="http://coolshell.cn/articles/1484.html" target="_blank" rel="external">http://coolshell.cn/articles/1484.html</a></li>
<li><a href="http://blog.csdn.net/hualicuan/article/details/11591369" target="_blank" rel="external">http://blog.csdn.net/hualicuan/article/details/11591369</a></li>
<li><a href="http://www.xttblog.com/?p=189" target="_blank" rel="external">http://www.xttblog.com/?p=189</a></li>
<li><a href="http://ssfnet.org/Exchange/tcp/tcpTutorialNotes.html" target="_blank" rel="external">http://ssfnet.org/Exchange/tcp/tcpTutorialNotes.html</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>网上有很多的分析TCP连接状态的介绍，比如参考文档中的介绍。 本文只列出了两个TCP状态迁移图(中文和英文的)，以备将来需要的时候查询。<br>]]>
    
    </summary>
    
      <category term="网络编程" scheme="http://colobu.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[拆解 invokedynamic]]></title>
    <link href="http://colobu.com/2015/06/23/Dismantling-invokedynamic/"/>
    <id>http://colobu.com/2015/06/23/Dismantling-invokedynamic/</id>
    <published>2015-06-23T02:31:55.000Z</published>
    <updated>2015-07-31T13:28:02.198Z</updated>
    <content type="html"><![CDATA[<p>作者: <a href="https://plus.google.com/109266851795683366529" target="_blank" rel="external">Rafael Winterhalter</a>,原文发表在他的博客上：<a href="http://mydailyjava.blogspot.com/2015/03/dismantling-invokedynamic.html" target="_blank" rel="external">Dismantling invokedynamic </a></p>
<p>Many Java developers regarded the JDK’s version seven release as somewhat a disappointment. On the surface, merely a few language and library extensions made it into the release, namely Project Coin and NIO2. But under the covers, the seventh version of the platform shipped the single biggest extension to the JVM’s type system ever introduced after its initial release. Adding the invokedynamic instruction did not only lay the foundation for implementing lambda expressions in Java 8, it also was a game changer for translating dynamic languages into the Java byte code format.</p>
<p>While the invokedynamic instruction is an implementation detail for executing a language on the Java virtual machine, understanding the functioning of this instruction gives true insights into the inner workings of executing a Java program. This article gives a beginner’s view on what problem the invokedynamic instruction solves and how it solves i<br><a id="more"></a></p>
<h3 id="Method_handles">Method handles</h3>
<p>Method handles are often described as a retrofitted version of Java’s reflection API, but this is not what they are meant to represent. While method handles do represent a method, constructor or field, they are not intended to describe properties of these class members. It is for example not possible to directly extract metadata from a method handle such as modifiers or annotation values of the represented method. And while method handles allow for the invocation of a referenced method, their main purpose is to be used together with an invokedynamic call site. For gaining a better understanding of method handles, looking at them as an imperfect replacement for the reflection API is however a reasonable starting point.</p>
<p>Method handles cannot be instantiated. Instead, method handles are created by using a designated lookup object. These objects are themselves created by using a factory method that is provided by the MethodHandles class. Whenever the factory is invoked, it first creates a security context which ensures that the resulting lookup object can only locate methods that are also visible to the class from which the factory method was invoked. A lookup object can then be created as follows:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Example {</div><div class="line">  <span class="keyword">void</span> doSomething() {</div><div class="line">    MethodHandles.Lookup lookup = MethodHandles.lookup();</div><div class="line">  }</div><div class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">foo</span>() { <span class="comment">/* ... */</span> }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>As argued before, the above lookup object could only be used to locate methods that are also visible to the Example class such as foo. It would for example be impossible to look up a private method of another class. This is a first major difference to using the reflection API where private methods of outside classes can be located just as any other method and where these methods can even be invoked after marking such a method as accessible. Method handles are therefore sensible of their creation context which is a first major difference to the reflection API.</p>
<p>Apart from that, a method handle is more specific than the reflection API by describing a specific type of method rather than representing just any method. In a Java program, a method&#39;s type is a composite of both the method&#39;s return type and the types of its parameters. For example, the only method of the following Counter class returns an int representing the number of characters of the only String-typed argument:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Counter {</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> count(String name) {</div><div class="line">    <span class="keyword">return</span> name.length();</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>A representation of this method&#39;s type can be created by using another factory. This factory is found in the MethodType class which also represents instances of created method types. Using this factory, the method type for Counter::count can be created by handing over the method&#39;s return type and its parameter types bundled as an array:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MethodType methodType = MethodType.methodType(<span class="keyword">int</span>.class, <span class="keyword">new</span> Class&lt;?&gt;[] {String.class});</div></pre></td></tr></table></figure>

<p>By using the lookup object that was created before and the above method type, it is now possible to locate a method handle that represents the Counter::count method as depicted in the following code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MethodType methodType = MethodType.methodType(<span class="keyword">int</span>.class, <span class="keyword">new</span> Class&lt;?&gt;[] {String.class});</div><div class="line">MethodHandles.Lookup lookup = MethodHandles.lookup();</div><div class="line">MethodHandle methodHandle = lookup.findStatic(Counter.class, <span class="string">"count"</span>, methodType);</div><div class="line"><span class="keyword">int</span> count = methodHandle.invokeExact(<span class="string">"foo"</span>);</div><div class="line">assertThat(count, is(<span class="number">3</span>));</div></pre></td></tr></table></figure>

<p>At first glance, using a method handle might seem like an overly complex version of using the reflection API. However, keep in mind that the direct invocation of a method using a handle is not the main intent of its use.</p>
<p>The main difference of the above example code and of invoking a method via the reflection API is only revealed when looking into the differences of how the Java compiler translates both invocations into Java byte code. When a Java program invokes a method, this method is uniquely identified by its name and by its (non-generic) parameter types and even by its return type. It is for this reason that it is possible to overload methods in Java. And even though the Java programming language does not allow it, the JVM does in theory allow to overload a method by its return type.</p>
<p>Following this principle, a reflective method call is executed as a common method call of the Method::invoke method. This method is identified by its two parameters which are of the types Object and Object[]. In addition to this, the method is identified by its Object return type. Because of this signature, all arguments to this method need to always be boxed and enclosed in an array. Similarly, the return value needs to be boxed if it was primitive or null is returned if the method was void.</p>
<p>Method handles are the exception to this rule. Instead of invoking a method handle by referring to the signature of MethodHandle::invokeExact signature which takes an Object[] as its single argument and returns Object, method handles are invoked by using a so-called polymorphic signature. A polymorphic signature is created by the Java compiler dependant on the types of the actual arguments and the expected return type at a call site. For example, when invoking the method handle as above with</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> count = methodHandle.invokeExact(<span class="string">"foo"</span>);</div></pre></td></tr></table></figure>

<p>the Java compiler translates this invocation as if the invokeExact method was defined to accept a single single argument of type String and returning an int type. Obviously, such a method does not exist and for (almost) any other method, this would result in a linkage error at runtime. For method handles, the Java Virtual Machine does however recognize this signature to be polymorphic and treats the invocation of the method handle as if the Counter::count method that the handle refers to was inset directly into the call site. Thus, the method can be invoked without the overhead of boxing primitive values or the return type and without placing the argument values inside an array.</p>
<p>At the same time, when using the invokeExact invocation, it is guaranteed to the Java virtual machine that the method handle always references a method at runtime that is compatible to the polymorphic signature. For the example, the JVM expected that the referenced method actually accepts a String as its only argument and that it returns a primitive int. If this constraint was not fulfilled, the execution would instead result in a runtime error. However, any other method that accepts a single String and that returns a primitive int could be successfully filled into the method handle&#39;s call site to replace Counter::count.</p>
<p>In contrast, using the Counter::count method handle at the following three invocations would result in runtime errors, even though the code compiles successfully:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> count1 = methodHandle.invokeExact((Object) <span class="string">"foo"</span>);</div><div class="line"><span class="keyword">int</span> count2 = (Integer) methodHandle.invokeExact(<span class="string">"foo"</span>);</div><div class="line">methodHandle.invokeExact(<span class="string">"foo"</span>);</div></pre></td></tr></table></figure>

<p>The first statement results in an error because the argument that is handed to the handle is too general. While the JVM expected a String as an argument to the method, the Java compiler suggested that the argument would be an Object type. It is important to understand that the Java compiler took the casting as a hint for creating a different polymorphic signature with an Object type as a single parameter type while the JVM expected a String at runtime. Note that this restriction also holds for handing too specific arguments, for example when casting an argument to an Integer where the method handle required a Number type as its argument. In the second statement, the Java compiler suggested to the runtime that the handle&#39;s method would return an Integer wrapper type instead of the primitive int. And without suggesting a return type at all in the third statement, the Java compiler implicitly translated the invocation into a void method call. Hence, invokeExact really does mean exact.</p>
<p>This restriction can sometimes be too harsh. For this reason, instead of requiring an exact invocation, the method handle also allows for a more forgiving invocation where conversions such as type castings and boxings are applied. This sort of invocation can be applied by using the MethodHandle::invoke method. Using this method, the Java compiler still creates a polymorphic signature. This time, the Java virtual machine does however test the actual arguments and the return type for compatibility at run time and converts them by applying boxings or castings, if appropriate. Obviously, these transformations can sometimes add a runtime overhead. </p>
<h3 id="Fields,_methods_and_constructors:_handles_as_a_unified_interface">Fields, methods and constructors: handles as a unified interface</h3>
<p>Other than Method instances of the reflection API, method handles can equally reference fields or constructors. The name of the MethodHandle type could therefore be seen as too narrow. Effectively, it does not matter what class member is referenced via a method handle at runtime as long as its MethodType, another type with a misleading name, matches the arguments that are passed at the associated call site.</p>
<p>Using the appropriate factories of a MethodHandles.Lookup object, a field can be looked up to represent a getter or a setter. Using getters or setters in this context does not refer to invoking an actual method that follows the Java bean specification. Instead, the field-based method handle directly reads from or writes to the field but in shape of a method call via invoking the method handle. By representing such field access via method handles, field access or method invocations can be used interchangeably.</p>
<p>As an example for such interchange, take the following class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Bean {</div><div class="line">  String value;</div><div class="line">  <span class="keyword">void</span> print(String x) {</div><div class="line">    System.out.println(x);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>For the above Bean class, the following method handles can be used for either writing a string to the value field or for invoking the print method with the same string as an argument:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MethodHandle fieldHandle = lookup.findSetter(Bean.class, <span class="string">"value"</span>, String.class);</div><div class="line">MethodType methodType = MethodType.methodType(<span class="keyword">void</span>.class, <span class="keyword">new</span> Class&lt;?&gt;[] {String.class});</div><div class="line">MethodHandle methodHandle = lookup.findVirtual(Bean.class, <span class="string">"print"</span>, methodType);</div></pre></td></tr></table></figure>

<p>As long as the method handle call site is handed an instance of Bean together with a String while returning void, both method handles could be used interchangeably as shown here:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">anyHandle.invokeExact((Bean) mybean, (String) myString);</div></pre></td></tr></table></figure>

<p>Note that the polymorphic signature of the above call site does not match the method type of the above handle. However, within Java byte code, non-static methods are invoked as if they were static methods with where the this reference is handed as a first, implicit argument. A non-static method&#39;s nominal type does therefore diverge from its actual runtime type. Similarly, access to a non-static field requires an instance to be access.</p>
<p>Similarly to fields and methods, it is possible to locate and invoke constructors which are considered as methods with a void return value for their nominal type. Furthermore, one can not only invoke a method directly but even invoke a super method as long as this super method is reachable for the class from which the lookup factory was created. In contrast, invoking a super method is not possible at all when relying on the reflection API. If required, it is even possible to return a constant value from a handle.</p>
<h3 id="Performance_metrics">Performance metrics</h3>
<p>Method handles are often described as being a more performant as the Java reflection API. At least for recent releases of the HotSpot virtual machine, this is not true. The simplest way of proving this is <a href="https://gist.github.com/raphw/881e1745996f9d314ab0" target="_blank" rel="external">writing an appropriate benchmark</a>. Then again, is not all too simple to write a benchmark for a Java program which is optimized while it is executed. The de facto standard for writing a benchmark has become using JMH, a harness that ships under the OpenJDK umbrella. The full benchmark can be found as a gist in my GitHub profile. In this article, only the most important aspects of this benchmark are covered.</p>
<p>From the benchmark, it becomes obvious that reflection is already implemented quite efficiently. Modern JVMs know a concept named inflation where a frequently invoked reflective method call is replaced with runtime generated Java byte code. What remains is the overhead of applying the boxing for passing arguments and receiving a return values. These boxings can sometimes be eliminated by the JVM&#39;s Just-in-time compiler but this is not always possible. For this reason, using method handles can be more performant than using the reflection API if method calls involve a significant amount of primitive values. This does however require that the exact method signatures are already known at compile time such that the appropriate polymorphic signature can be created. For most use cases of the reflection API, this guarantee can however not be given because the invoked method&#39;s types are not known at compile time. In this case, using method handles does not offer any performance benefits and should not be used to replace it.</p>
<h3 id="Creating_an_invokedynamic_call_site">Creating an invokedynamic call site</h3>
<p>Normally, invokedynamic call sites are created by the Java compiler only when it needs to translate a lambda expression into byte code. It is worthwhile to note that lambda expressions could have been implemented without invokedynamic call sites altogether, for example by converting them into anonymous inner classes. As a main difference to the suggested approach, using invokedynamic delays the creation of a similar class to runtime. We are looking into class creation in the next section. For now, bear however in mind that invokedynamic does not have anything to do with class creation, it only allows to delay the decision of how to dispatch a method until runtime.</p>
<p>For a better understanding of invokedynamic call sites, it helps to create such call sites explicitly in order to look at the mechanic in isolation. To do so, the following example makes use of <a href="https://github.com/raphw/byte-buddy" target="_blank" rel="external">my code generation framework Byte Buddy</a> which provides explicit byte code generation of invokedynamic call sites without requiring a any knowledge of the byte code format.</p>
<p>Any invokedynamic call site eventually yields a MethodHandle that references the method to be invoked. Instead of invoking this method handle manually, it is however up to the Java runtime to do so. Because method handles have become a known concept to the Java virtual machine, these invocations are then optimized similarly to a common method call. Any such method handle is received from a so-called bootstrap method which is nothing more than a plain Java method that fulfills a specific signature. For a trivial example of a bootstrap method, look at the following code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Bootstrapper {</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> CallSite <span class="title">bootstrap</span>(Object... args) <span class="keyword">throws</span> Throwable {</div><div class="line">    MethodType methodType = MethodType.methodType(<span class="keyword">int</span>.class, <span class="keyword">new</span> Class&lt;?&gt;[] {String.class})</div><div class="line">    MethodHandles.Lookup lookup = MethodHandles.lookup();</div><div class="line">    MethodHandle methodHandle = lookup.findStatic(Counter.class, <span class="string">"count"</span>, methodType);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ConstantCallSite(methodHandle);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>For now, we do not care much about the arguments of the method. Instead, notice that the method is static what is as a matter of fact a requirement. Within Java byte code, an invokedynamic call site references the full signature of a bootstrap method but not a specific object which could have a state and a life cycle. Once the invokedynamic call site is invoked, control flow is handed to the referenced bootstrap method which is now responsible for identifying a method handle. Once this method handle is returned from the bootstrap method, it is invoked by the Java runtime.</p>
<p>As obvious from the above example, a MethodHandle is not returned directly from a bootstrap method. Instead, the handle is wrapped inside of a CallSite object. Whenever a bootstrap method is invoked, the invokedynamic call site is later permanently bound to the CallSite object that is returned from this method. Consequently, a bootstrap method is only invoked a single time for any call site. Thanks to this intermediate CallSite object, it is however possible to exchange the referenced MethodHandle at a later point. For this purpose, the Java class library already offers different implementations of CallSite. We have already seen a ConstantCallSite in the example code above. As the name suggests, a ConstantCallSite always references the same method handle without a possibility of a later exchange. Alternatively, it is however also possible to for example use a MutableCallSite which allows to change the referenced MethodHandle at a later point in time or it is even possible to implement a custom CallSite class.</p>
<p>With the above bootstrap method and Byte Buddy, we can now implement a custom invokedynamic instruction. For this, Byte Buddy offers the InvokeDynamic instrumentation that accepts a bootstrap method as its only mandatory argument. Such instrumentations are then fed to Byte Buddy. Assuming the following class:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> class Example {</div><div class="line">  <span class="keyword">abstract</span> <span class="keyword">int</span> method();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>we can use Byte Buddy to subclass Example in order to override method. We are then going to implement this method to contain a single invokedynamic call site. Without any further configuration, Byte Buddy creates a polymorphic signature that resembles the method type of the overridden method. However, for non-static methods, the this reference is set as a first, implicit argument. Assuming that we want to bind the Counter::count method which expects a String as a single argument, we could not bind this handle to Example::method because of this type mismatch. Therefore, we need to create a different call site without the implicit argument but with an String in its place. This can be achieved by using Byte Buddy&#39;s domain specific language:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Instrumentation invokeDynamic = InvokeDynamic</div><div class="line"> .bootstrap(Bootstrapper.class.getDeclaredMethod(“bootstrap”, Object[].class))</div><div class="line"> .withoutImplicitArguments()</div><div class="line"> .withValue(<span class="string">"foo"</span>);</div></pre></td></tr></table></figure>

<p>With this instrumentation in place, we can finally extend the Example class and override method to implement the invokedynamic call site as in the following code snippet:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Example example = <span class="keyword">new</span> ByteBuddy()</div><div class="line">  .subclass(Example.class)</div><div class="line">   .method(named(“method”)).intercept(invokeDynamic)</div><div class="line">   .make()</div><div class="line">   .load(Example.class.getClassLoader(), </div><div class="line">         ClassLoadingStrategy.Default.INJECTION)</div><div class="line">   .getLoaded()</div><div class="line">   .newInstance();</div><div class="line"><span class="keyword">int</span> result = example.method();</div><div class="line">assertThat(result, is(<span class="number">3</span>));</div></pre></td></tr></table></figure>

<p>As obvious from the above assertion, the characters of the &quot;foo&quot; string were counted correctly. By setting appropriate break points in the code, it is further possible to validate that the bootstrap method is called and that control flow further reaches the Counter::count method.</p>
<p>So far, we did not gain much from using an invokedynamic call site. The above bootstrap method would always bind Counter::count and can therefore only produce a valid result if the invokedynamic call site really wanted to transform a String into an int. Obviously, bootstrap methods can however be more flexible thanks to the arguments they receive from the invokedynamic call site. Any bootstrap method receives at least three arguments:</p>
<p>As a first argument, the bootstrap method receives a MethodHandles.Lookup object. The security context of this object is that of the class that contains the invokedynamic call site that triggered the bootstrapping. As discussed before, this implies that private methods of the defining class could be bound to the invokedynamic call site using this lookup instance.<br>The second argument is a String representing a method name. This string serves as a hint to indicate from the call site which method should be bound to it. Strictly speaking, this argument is not required as it is perfectly legal to bind a method with another name. Byte Buddy simply serves the the name of the overridden method as this argument, if not specified differently.<br>Finally, the MethodType of the method handle that is expected to be returned is served as a third argument. For the example above, we specified explicitly that we expect a String as a single parameter. At the same time, Byte Buddy derived that we require an int as a return value from looking at the overridden method, as we again did not specify any explicit return type.</p>
<p>It is up to the implementor of a bootstrap method what exact signature this method should portray as long as it can at least accept these three arguments. If the last parameter of a bootstrap method represents an Object array, this last parameter is treated as a varargs and can therefore accept any excess arguments. This is also the reason why the above example bootstrap method is valid.</p>
<p>Additionally, a bootstrap method can receive several arguments from an invokedynamic call site as long as these arguments can be stored in a class&#39;s constant pool. For any Java class, a constant pool stores values that are used inside of a class, largely numbers or string values. As of today, such constants can be primitive values of at least 32 bit size, Strings, Classes, MethodHandles and MethodTypes. This allows bootstrap methods to be used more flexible, if locating a suitable method handle requires additional information in form of such arguments. </p>
<h3 id="Lambda_expressions">Lambda expressions</h3>
<p>Whenever the Java compiler translates a lambda expression into byte code, it copies the lambda&#39;s body into a private method inside of the class in which the expression is defined. These methods are named lambda$X$Y with X being the name of the method that contains the lambda expression and with Y being a zero-based sequence number. The parameters of such a method are those of the functional interface that the lambda expression implements. Given that the lambda expression makes no use of non-static fields or methods of the enclosing class, the method is also defined to be static.</p>
<p>For compensation, the lambda expression is itself substituted by an invokedynamic call site. On its invocation, this call site requests the binding of a factory for an instance of the functional interface. As arguments to this factory, the call site supplies any values of the lambda expression&#39;s enclosing method which are used inside of the expression and a reference to the enclosing instance, if required. As a return type, the factory is required to provide an instance of the functional interface.</p>
<p>For bootstrapping a call site, any invokedynamic instruction currently delegates to the LambdaMetafactory class which is included in the Java class library. This factory is then responsible for creating a class that implements the functional interface and which invokes the appropriate method that contains the lambda&#39;s body which, as described before, is stored in the original class. In the future, this bootstrapping process might however change which is one of the major advantages of using invokedynamic for implementing lambda expressions. If one day, a better suited language feature was available for implementing lambda expressions, the current implementation could simply be swapped out.</p>
<p>In order to being able to create a class that implements the functional interface, any call site representing a lambda expression provides additional arguments to the bootstrap method. For the obligatory arguments, it already provides the name of the functional interface&#39;s method. Also, it provides a MethodType of the factory method that the bootstrapping is supposed to yield as a result. Additionally, the bootstrap method is supplied another MethodType that describes the signature of the functional interface&#39;s method. To that, it receives a MethodHandle referencing the method that contains the lambda&#39;s method body. Finally, the call site provides a MethodType of the generic signature of the functional interface&#39;s method, i.e. the signature of the method at the call site before type-erasure was applied.</p>
<p>When invoked, the bootstrap method looks at these arguments and creates an appropriate implementation of a class that implements the functional interface. This class is created using the <a href="http://asm.ow2.org/" target="_blank" rel="external">ASM library</a>, a low-level byte code parser and writer that has become the de facto standard for direct Java byte code manipulation. Besides implementing the functional interface&#39;s method, the bootstrap method also adds an appropriate constructor and a static factory method for creating instances of the class. It is this factory method that is later bound to the invokedyanmic call site. As arguments, the factory receives an instance to the lambda method&#39;s enclosing instance, in case it is accessed and also any values that are read from the enclosing method.</p>
<p>As an example, consider the following lambda expression:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Foo {</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">void</span> bar(<span class="keyword">int</span> j) {</div><div class="line">    Consumer consumer = k -&gt; System.out.println(i + j + k);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>In order to be executed, the lambda expression requires access to both the enclosing instance of Foo and to the value j of its enclosing method. Therefore, the desugared version of the above class looks something like the following where the invokedynamic instruction is represented by some pseudo-code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Foo {</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">void</span> bar(<span class="keyword">int</span> j) {</div><div class="line">    Consumer consumer = &lt;invokedynamic(<span class="keyword">this</span>, j)&gt;;</div><div class="line">  }</div><div class="line">  <span class="keyword">private</span> /* non-<span class="keyword">static</span> */ <span class="keyword">void</span> lambda$foo$0(<span class="keyword">int</span> j, <span class="keyword">int</span> k) {</div><div class="line">    System.out.println(<span class="keyword">this</span>.i + j + k);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>In order to being able to invoke lambda$foo$0, both the enclosing Foo instance and the j variable are handed to the factory that is bound by the invokedyanmic instruction. This factory then receives the variables it requires in order to create an instance of the generated class. This generated class would then look something like the following:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Foo$$Lambda$<span class="number">0</span> implements Consumer {</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Foo _this;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> j;</div><div class="line">  <span class="keyword">private</span> Foo$$Lambda$0(Foo _this, <span class="keyword">int</span> j) {</div><div class="line">    <span class="keyword">this</span>._this = _this;</div><div class="line">    <span class="keyword">this</span>.j = j;</div><div class="line">  }</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Consumer get$<span class="title">Lambda</span>(Foo _this, <span class="keyword">int</span> j) {</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Foo$$Lambda$<span class="number">0</span>(_this, j);</div><div class="line">  }</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span>(Object value) { <span class="comment">// type erasure</span></div><div class="line">    _this.lambda$foo$<span class="number">0</span>(_this, j, (Integer) value);</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Eventually, the factory method of the generated class is bound to the invokedynamic call site via a method handle that is contained by a ConstantCallSite. However, if the lambda expression is fully stateless, i.e. it does not require access to the instance or method in which it is enclosed, the LambdaMetafactory returns a so-called constant method handle that references an eagerly created instance of the generated class. Hence, this instance serves as a singleton to be used for every time that the lambda expression&#39;s call site is reached. Obviously, this optimization decision affects your application&#39;s memory footprint and is something to keep in mind when writing lambda expressions. Also, no factory method is added to a class of a stateless lambda expression.</p>
<p>You might have noticed that the lambda expression&#39;s method body is contained in a private method which is now invoked from another class. Normally, this would result in an illegal access error. To overcome this limitation, the generated classes are loaded using so-called anonymous class loading. Anonymous class loading can only be applied when a class is loaded explicitly by handing a byte array. Also, it is not normally possible to apply anonymous class loading in user code as it is hidden away in the internal classes of the Java class library. When a class is loaded using anonymous class loading, it receives a host class of which it inherits its full security context. This involves both method and field access rights and the protection domain such that a lambda expression can also be generated for signed jar files. Using this approch, lambda expression can be considered more secure than anonymous inner classes because private methods are never reachable from outside of a class.</p>
<h3 id="Under_the_covers:_lambda_forms">Under the covers: lambda forms</h3>
<p>Lambda forms are an implementation detail of how MethodHandles are executed by the virtual machine. Because of their name, lambda forms are however often confused with lambda expressions. Instead, lambda forms are inspired by lambda calculus and received their name for that reason, not for their actual usage to implement lambda expressions in the OpenJDK.</p>
<p>In earlier versions of the OpenJDK 7, method handles could be executed in one of two modes. Method handles were either directly rendered as byte code or they were dispatched using explicit assembly code that was supplied by the Java runtime. The byte code rendering was applied to any method handle that was considered to be fully constant throughout the lifetime of a Java class. If the JVM could however not prove this property, the method handle was instead executed by dispatching it to the supplied assembly code. Unfortunately, because assembly code cannot be optimized by Java&#39;s JIT-compiler, this lead to non-constant method handle invocations to &quot;fall off the performance cliff&quot;. As this also affected the lazily bound lambda expressions, this was obviously not a satisfactory solution.</p>
<p>LambdaForms were introduced to solve this problem. Roughly speaking, lambda forms represent byte code instructions which, as stated before, can be optimized by a JIT-compiler. In the OpenJDK, a MethodHandle&#39;s invocation semantics are today represented by a LambdaForm to which the handle carries a reference. With this optimizable intermediate representation, the use of non-constant MethodHandles has become significantly more performant. As a matter of fact, it is even possible to see a byte-code compiled LambdaForm in action. Simply place a break point inside of a bootstrap method or inside of a method that is invoked via a MethodHandle. Once the break point kicks it, the byte code-translated LambdaForms can be found on the call stack.</p>
<h3 id="Why_this_matters_for_dynamic_languages">Why this matters for dynamic languages</h3>
<p>Any language that should be executed on the Java virtual machine needs to be translated to Java byte code. And as the name suggests, Java byte code aligns rather close to the Java programming language. This includes the requirement to define a strict type for any value and before invokedynamic was introduced, a method call required to specify an explicit target class for dispatching a method. Looking at the following JavaScript code, specifying either information is however not possible when translating the method into byte code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function (foo) {</div><div class="line">  foo.bar();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Using an invokedynamic call site, it has become possible to delay the identification of the method&#39;s dispatcher until runtime and furthermore, to rebind the invocation target, in case that a previous decision needs to be corrected. Before, using the reflection API with all of its performance drawbacks was the only real alternative to implementing a dynamic language.</p>
<p>The real profiteer of the invokedynamic instruction are therefore dynamic programming languages. Adding the instruction was a first step away from aligning the byte code format to the Java programming language, making the JVM a powerful runtime even for dynamic languages. And as lambda expressions proved, this stronger focus on hosting dynamic languages on the JVM does neither interfere with evolving the Java language. In contrast, the Java programming languages gained from these efforts.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>作者: <a href="https://plus.google.com/109266851795683366529" target="_blank" rel="external">Rafael Winterhalter</a>,原文发表在他的博客上：<a href="http://mydailyjava.blogspot.com/2015/03/dismantling-invokedynamic.html" target="_blank" rel="external">Dismantling invokedynamic </a></p>
<p>Many Java developers regarded the JDK’s version seven release as somewhat a disappointment. On the surface, merely a few language and library extensions made it into the release, namely Project Coin and NIO2. But under the covers, the seventh version of the platform shipped the single biggest extension to the JVM’s type system ever introduced after its initial release. Adding the invokedynamic instruction did not only lay the foundation for implementing lambda expressions in Java 8, it also was a game changer for translating dynamic languages into the Java byte code format.</p>
<p>While the invokedynamic instruction is an implementation detail for executing a language on the Java virtual machine, understanding the functioning of this instruction gives true insights into the inner workings of executing a Java program. This article gives a beginner’s view on what problem the invokedynamic instruction solves and how it solves i<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://colobu.com/tags/Java/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[十个团队建设小贴士]]></title>
    <link href="http://colobu.com/2015/06/18/10-team-building-tips/"/>
    <id>http://colobu.com/2015/06/18/10-team-building-tips/</id>
    <published>2015-06-18T01:44:02.000Z</published>
    <updated>2015-07-31T13:28:02.151Z</updated>
    <content type="html"><![CDATA[<p>Marco Castigliego总结的十个团队建设的<a href="http://www.javacodegeeks.com/2015/06/10-team-building-tips.html" target="_blank" rel="external">小贴士</a>。<br><a id="more"></a></p>
<h2 id="早上好">早上好</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy.gif" alt=""><br>当进入办公室还未坐下时，要对团队微笑着说早上好。 每一天。</p>
<h2 id="倾听">倾听</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy2.gif" alt=""><br>当团队的成员对你说话时， 看着他的眼睛，对他说的话表现出感兴趣。</p>
<h2 id="提供空间，信任团队">提供空间，信任团队</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy3.gif" alt=""><br>允许团队成员失败，让他们有机会弥补他们的错误。<br>你可能总是对的，但又如何？其他人从失败中学习、承担责任。</p>
<h2 id="搞好关系">搞好关系</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy4.gif" alt=""><br>给团队每个人倒杯咖啡。</p>
<h2 id="恭贺别人">恭贺别人</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy5.gif" alt=""><br>当别人取得成就时，说出来</p>
<h2 id="别把个人问题带入工作">别把个人问题带入工作</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy6.gif" alt=""><br>别因为你昨天晚上过的很糟糕就对其他人大喊大叫。</p>
<h2 id="结对编程">结对编程</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy7.gif" alt=""><br>很好的分享知识和建立牢固关系的方式</p>
<h2 id="反馈">反馈</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy8.gif" alt=""><br>在code review时莫要趾高气扬。 冷静且友好的说出你想说的。</p>
<h2 id="聚餐">聚餐</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy9.gif" alt=""><br>尽可能的和团队成员一起吃饭。</p>
<h2 id="说明天见">说明天见</h2>
<p><img src="http://a3ab771892fd198a96736e50.javacodegeeks.netdna-cdn.com/wp-content/uploads/2015/06/giphy10.gif" alt=""><br>当下班的时候，如果你不是最后一个离开的，要对其它人说 ”明天见“</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Marco Castigliego总结的十个团队建设的<a href="http://www.javacodegeeks.com/2015/06/10-team-building-tips.html" target="_blank" rel="external">小贴士</a>。<br>]]>
    
    </summary>
    
      <category term="管理" scheme="http://colobu.com/categories/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 安全套接字编程以及 keytool 使用最佳实践]]></title>
    <link href="http://colobu.com/2015/06/16/java-keytool/"/>
    <id>http://colobu.com/2015/06/16/java-keytool/</id>
    <published>2015-06-16T07:58:51.000Z</published>
    <updated>2015-07-31T13:28:02.932Z</updated>
    <content type="html"><![CDATA[<p>本文描述了 Java7 中 keytool 工具的使用方法，并结合具体代码片段，向读者阐述如何使用 JSSE 提供的 API 进行安全套接字编程，以及如何进行 SSL/TSL 程序调试等技巧，让读者可以学以致用。</p>
<p>原文地址： <a href="http://www.ibm.com/developerworks/cn/java/j-lo-socketkeytool/" target="_blank" rel="external">Java 安全套接字编程以及 keytool 使用最佳实践</a>。 作者: <a href="http://www.ibm.com/developerworks/cn/java/j-lo-socketkeytool/#authorN10018" target="_blank" rel="external">赵映洁</a><br><a id="more"></a></p>
<h3 id="概述">概述</h3>
<p>利用 Java 的 JSSE（Java Secure Socket Extension）技术，我们可以方便的编写安全套接字程序，关于 JSSE 的介绍，可以参阅 Oracle 网站提供的 JSSE 指导。程序编写过程中，我们需要将数字证书应用到代码中。通常在正式的产品开发中，我们可以支付一定的费用，向正规认证机构，例如：Verisign、Geotrust、Thawte 等申请。</p>
<p>如果只是为了实验，我们还可以使用 Java 自带的 keytool 工具来制作证书。keytool 是密钥和证书管理工具，生成的密钥或证书，存放在 jks(Java Key Store) 格式的文件里。从用途上来说，jks 格式的文件常用于：</p>
<p>1) 存储非对称密钥对以及数字证书的证书库；</p>
<p>2) 存储信任证书列表的信任库。</p>
<p>注意：不同版本的 Java 自带的 keytool 命令行参数可能会略有不同。相比于 Java6，在 Java7 中 keytool 工具有如下改动：</p>
<p>-export 选项改名为 -exportcert</p>
<p>-genkey 选项改名为 -genkeypair</p>
<p>-import 选项改名为 – importcert</p>
<p>-keyclone 选项被废弃</p>
<p>-identitydb 选项被废弃</p>
<p>-selfcert 选项被废弃</p>
<p>下面将以 Java7 中的 keytool 为例，对常见的用法进行说明。</p>
<h3 id="使用_keytool_制作证书库以及信任库">使用 keytool 制作证书库以及信任库</h3>
<h4 id="生成非对称密钥以及自签发证书">生成非对称密钥以及自签发证书</h4>
<p><strong>命令</strong>：keytool -genkeypair -alias TEST_ROOT -keystore test_root.jks</p>
<p><strong>解释</strong>：生成一对密钥以及一个自签发证书，其中私钥和证书以别名 TEST_ROOT 存储在 test_root.jks 文件中。</p>
<p>注意：使用上述命令时，命令行会交互的需要手动填写密码、CN、OU 等信息。也可以直接在命令行指定这些参数，详情见 参考资料中列出的 keytool 使用帮助。</p>
<h4 id="生成证书请求文件">生成证书请求文件</h4>
<p><strong>命令</strong>：keytool -certreq -file test_server.csr -alias TEST_SERVER -keystore test_server.jks</p>
<p><strong>解释</strong>：将别名为 TEST_SERVER 的公钥和一些个人信息从 test_server.jks 文件中导出，作为证书请求文件。</p>
<p>#####签发证书<br><strong>命令</strong>：keytool -gencert -infile test_server.csr -outfile test_server.cer -alias TEST_ROOT -keystore TEST_ROOT.jks</p>
<p><strong>解释</strong>：使用别名为 TEST_ROOT 的私钥为 test_server.csr 签发证书，并保存到 test_server.cer 文件中。</p>
<h4 id="从_jks_文件中导出证书">从 jks 文件中导出证书</h4>
<p><strong>命令</strong>：keytool -exportcert -alias TEST_ROOT -file test_root.cer -keystore test_root.jks</p>
<p><strong>解释</strong>：从 test_root.jks 文件中导出别名为 TEST_ROOT 的证书并存放在 test_root.cer 文件中。</p>
<h4 id="导入信任证书到_jks_文件">导入信任证书到 jks 文件</h4>
<p><strong>命令</strong>：keytool -importcert -alias TEST_ROOT -file test_root.cer -keystore TEST_SERVER.jks</p>
<p><strong>解释</strong>：将证书 test_root.cer 以别名 TEST_ROOT 导入 TEST_SERVER.jks 中。</p>
<p>注意：这里的目标 jks 文件里不含有指定的别名，此时的导入条目才会以 trustedCertEntry 信任证书的形式保存。</p>
<h4 id="导入签发证书到_jks_文件_(_更新证书_)">导入签发证书到 jks 文件 ( 更新证书 )</h4>
<p><strong>命令</strong>：keytool -importcert -alias TEST_SERVER -file test_server.cer -keystore TEST_SERVER.jks</p>
<p><strong>解释</strong>：将证书 test_server.cer 更新到已存在别名 TEST_SERVER 的 TEST_SERVER.jks 文件中</p>
<p>注意：这里的命令和上述导入信任证书的命令在形式上完全一样，但作用不同。</p>
<ol>
<li>这里的目标 jks 文件里要含有指定的别名，这样 keytool 工具才会理解命令为更新证书，并以 PrivateKeyEntry 的形式保存。</li>
<li>在更新被签发证书之前，一定要先将相应的 CA 证书，导入进 jks 文件，否则会报错“keytool 错误 : java.lang.Exception: 无法从回复中建立链”。</li>
</ol>
<h4 id="打印证书内容">打印证书内容</h4>
<p><strong>命令</strong>：keytool – printcert – v – file test_server.cer</p>
<p><strong>解释</strong>：将证书 test_server.cer 的内容打印出来</p>
<p>注意：也可以使用 -sslserver ip:port 的参数，直接从网络上打印出某个 ssl server 提供的证书的内容，详情见 参考资料中列出的 keytool 使用帮助。</p>
<h4 id="显示_jks_文件里的内容">显示 jks 文件里的内容</h4>
<p><strong>命令</strong>：keytool – list – v – keystore test_server.jks</p>
<p><strong>解释</strong>：显示 test_server.jks 里存储的所有条目</p>
<p>注意：这里会要求提供 jks 文件的密码，如果不输入，也可以显示出所有条目信息，但会提示“存储在密钥库中的信息的完整性尚未得到验证！”</p>
<h4 id="从_jks_文件删除条目">从 jks 文件删除条目</h4>
<p><strong>命令</strong>：keytool -delete -alias TEST_ROOT -keystore test_server.jks</p>
<p><strong>解释</strong>：从 test_server.jks 中删除别名为 TEST_ROOT 的条目</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文描述了 Java7 中 keytool 工具的使用方法，并结合具体代码片段，向读者阐述如何使用 JSSE 提供的 API 进行安全套接字编程，以及如何进行 SSL/TSL 程序调试等技巧，让读者可以学以致用。</p>
<p>原文地址： <a href="http://www.ibm.com/developerworks/cn/java/j-lo-socketkeytool/" target="_blank" rel="external">Java 安全套接字编程以及 keytool 使用最佳实践</a>。 作者: <a href="http://www.ibm.com/developerworks/cn/java/j-lo-socketkeytool/#authorN10018" target="_blank" rel="external">赵映洁</a><br>]]>
    
    </summary>
    
      <category term="keytool" scheme="http://colobu.com/tags/keytool/"/>
    
      <category term="Java" scheme="http://colobu.com/categories/Java/"/>
    
  </entry>
  
</feed>
